Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0xac0179761ac1e385b8fc58e20943dfd5d052a50b.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.8;"
ContractDefinition "ERC20"
   Gas costs: 0
   Source: "contract ERC20 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n\r\n  function transfer(address to, uint value) returns (bool ok);\r\n  function transferFrom(address from, address to, uint value) returns (bool ok);\r\n  function approve(address spender, uint value) returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}"
  VariableDeclaration "totalSupply"
     Type: uint256
     Source: "uint public totalSupply"
    ElementaryTypeName uint
       Source: "uint"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address who) constant returns (uint);"
    ParameterList
       Source: "(address who)"
      VariableDeclaration "who"
         Type: address
         Source: "address who"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address owner, address spender) constant returns (uint);"
    ParameterList
       Source: "(address owner, address spender)"
      VariableDeclaration "owner"
         Type: address
         Source: "address owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "spender"
         Type: address
         Source: "address spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address to, uint value) returns (bool ok);"
    ParameterList
       Source: "(address to, uint value)"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(bool ok)"
      VariableDeclaration "ok"
         Type: bool
         Source: "bool ok"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address from, address to, uint value) returns (bool ok);"
    ParameterList
       Source: "(address from, address to, uint value)"
      VariableDeclaration "from"
         Type: address
         Source: "address from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(bool ok)"
      VariableDeclaration "ok"
         Type: bool
         Source: "bool ok"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "approve" - public
     Source: "function approve(address spender, uint value) returns (bool ok);"
    ParameterList
       Source: "(address spender, uint value)"
      VariableDeclaration "spender"
         Type: address
         Source: "address spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(bool ok)"
      VariableDeclaration "ok"
         Type: bool
         Source: "bool ok"
        ElementaryTypeName bool
           Source: "bool"
  EventDefinition "Transfer"
     Source: "event Transfer(address indexed from, address indexed to, uint value);"
    ParameterList
       Source: "(address indexed from, address indexed to, uint value)"
      VariableDeclaration "from"
         Type: address
         Source: "address indexed from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "to"
         Type: address
         Source: "address indexed to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "Approval"
     Source: "event Approval(address indexed owner, address indexed spender, uint value);"
    ParameterList
       Source: "(address indexed owner, address indexed spender, uint value)"
      VariableDeclaration "owner"
         Type: address
         Source: "address indexed owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "spender"
         Type: address
         Source: "address indexed spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
ContractDefinition "Ownable"
   Source: "contract Ownable {\r\n  address public owner;\r\n\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    if (msg.sender != owner) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}"
  VariableDeclaration "owner"
     Type: address
     Gas costs: 335
     Source: "address public owner"
    ElementaryTypeName address
       Source: "address"
  FunctionDefinition "Ownable" - public
     Source: "function Ownable() {\r\n    owner = msg.sender;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    owner = msg.sender;\r\n  }"
      ExpressionStatement
         Gas costs: 0
         Source: "owner = msg.sender"
        Assignment using operator =
           Type: address
           Source: "owner = msg.sender"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  ModifierDefinition "onlyOwner"
     Source: "modifier onlyOwner() {\r\n    if (msg.sender != owner) {\r\n      throw;\r\n    }\r\n    _;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n    if (msg.sender != owner) {\r\n      throw;\r\n    }\r\n    _;\r\n  }"
      IfStatement
         Source: "if (msg.sender != owner) {\r\n      throw;\r\n    }"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 518
           Source: "msg.sender != owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier owner
             Type: address
             Source: "owner"
        Block
           Source: "{\r\n      throw;\r\n    }"
          Throw
             Gas costs: 12
             Source: "throw"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "transferOwnership" - public
     Source: "function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address newOwner)"
      VariableDeclaration "newOwner"
         Type: address
         Source: "address newOwner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }"
      IfStatement
         Source: "if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 24
           Source: "newOwner != address(0)"
          Identifier newOwner
             Type: address
             Source: "newOwner"
          FunctionCall
             Type: address
             Source: "address(0)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
        Block
           Source: "{\r\n      owner = newOwner;\r\n    }"
          ExpressionStatement
             Gas costs: 20267
             Source: "owner = newOwner"
            Assignment using operator =
               Type: address
               Source: "owner = newOwner"
              Identifier owner
                 Type: address
                 Source: "owner"
              Identifier newOwner
                 Type: address
                 Source: "newOwner"
ContractDefinition "Issuer"
   Source: "contract Issuer is Ownable {\r\n\r\n  /** Map addresses whose tokens we have already issued. */\r\n  mapping(address => bool) public issued;\r\n\r\n  /** Centrally issued token we are distributing to our contributors */\r\n  ERC20 public token;\r\n\r\n  /** Party (team multisig) who is in the control of the token pool. Note that this will be different from the owner address (scripted) that calls this contract. */\r\n  address public allower;\r\n\r\n  /** How many addresses have received their tokens. */\r\n  uint public issuedCount;\r\n\r\n  function Issuer(address _owner, address _allower, ERC20 _token) {\r\n    owner = _owner;\r\n    allower = _allower;\r\n    token = _token;\r\n  }\r\n\r\n  function issue(address benefactor, uint amount) onlyOwner {\r\n    if(issued[benefactor]) throw;\r\n    token.transferFrom(allower, benefactor, amount);\r\n    issued[benefactor] = true;\r\n    issuedCount += amount;\r\n  }\r\n\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Ownable"
    UserDefinedTypeName "Ownable"
       Source: "Ownable"
  VariableDeclaration "issued"
     Type: mapping(address => bool)
     Gas costs: 468
     Source: "mapping(address => bool) public issued"
    Mapping
       Source: "mapping(address => bool)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName bool
         Source: "bool"
  VariableDeclaration "token"
     Type: contract ERC20
     Gas costs: 335
     Source: "ERC20 public token"
    UserDefinedTypeName "ERC20"
       Source: "ERC20"
  VariableDeclaration "allower"
     Type: address
     Gas costs: 335
     Source: "address public allower"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "issuedCount"
     Type: uint256
     Gas costs: 287
     Source: "uint public issuedCount"
    ElementaryTypeName uint
       Source: "uint"
  FunctionDefinition "Issuer" - public
     Source: "function Issuer(address _owner, address _allower, ERC20 _token) {\r\n    owner = _owner;\r\n    allower = _allower;\r\n    token = _token;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, address _allower, ERC20 _token)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_allower"
         Type: address
         Source: "address _allower"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_token"
         Type: contract ERC20
         Source: "ERC20 _token"
        UserDefinedTypeName "ERC20"
           Source: "ERC20"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    owner = _owner;\r\n    allower = _allower;\r\n    token = _token;\r\n  }"
      ExpressionStatement
         Gas costs: 0
         Source: "owner = _owner"
        Assignment using operator =
           Type: address
           Source: "owner = _owner"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier _owner
             Type: address
             Source: "_owner"
      ExpressionStatement
         Gas costs: 0
         Source: "allower = _allower"
        Assignment using operator =
           Type: address
           Source: "allower = _allower"
          Identifier allower
             Type: address
             Source: "allower"
          Identifier _allower
             Type: address
             Source: "_allower"
      ExpressionStatement
         Gas costs: 0
         Source: "token = _token"
        Assignment using operator =
           Type: contract ERC20
           Source: "token = _token"
          Identifier token
             Type: contract ERC20
             Source: "token"
          Identifier _token
             Type: contract ERC20
             Source: "_token"
  FunctionDefinition "issue" - public
     Source: "function issue(address benefactor, uint amount) onlyOwner {\r\n    if(issued[benefactor]) throw;\r\n    token.transferFrom(allower, benefactor, amount);\r\n    issued[benefactor] = true;\r\n    issuedCount += amount;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address benefactor, uint amount)"
      VariableDeclaration "benefactor"
         Type: address
         Source: "address benefactor"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "amount"
         Type: uint256
         Source: "uint amount"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n    if(issued[benefactor]) throw;\r\n    token.transferFrom(allower, benefactor, amount);\r\n    issued[benefactor] = true;\r\n    issuedCount += amount;\r\n  }"
      IfStatement
         Source: "if(issued[benefactor]) throw"
        IndexAccess
           Type: bool
           Gas costs: 335
           Source: "issued[benefactor]"
          Identifier issued
             Type: mapping(address => bool)
             Source: "issued"
          Identifier benefactor
             Type: address
             Source: "benefactor"
        Throw
           Gas costs: 6
           Source: "throw"
      ExpressionStatement
         Gas costs: [???]
         Source: "token.transferFrom(allower, benefactor, amount)"
        FunctionCall
           Type: bool
           Source: "token.transferFrom(allower, benefactor, amount)"
          MemberAccess to member transferFrom
             Type: function (address,address,uint256) external returns (bool)
             Source: "token.transferFrom"
            Identifier token
               Type: contract ERC20
               Source: "token"
          Identifier allower
             Type: address
             Source: "allower"
          Identifier benefactor
             Type: address
             Source: "benefactor"
          Identifier amount
             Type: uint256
             Source: "amount"
      ExpressionStatement
         Gas costs: 20363
         Source: "issued[benefactor] = true"
        Assignment using operator =
           Type: bool
           Source: "issued[benefactor] = true"
          IndexAccess
             Type: bool
             Source: "issued[benefactor]"
            Identifier issued
               Type: mapping(address => bool)
               Source: "issued"
            Identifier benefactor
               Type: address
               Source: "benefactor"
          Literal, token: true value: true
             Type: bool
             Source: "true"
      ExpressionStatement
         Gas costs: 20233
         Source: "issuedCount += amount"
        Assignment using operator +=
           Type: uint256
           Source: "issuedCount += amount"
          Identifier issuedCount
             Type: uint256
             Source: "issuedCount"
          Identifier amount
             Type: uint256
             Source: "amount"
