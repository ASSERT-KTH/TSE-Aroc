Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0x37aa63c4cbd06a57f1ea35bceee4e46f0a7ce924.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.11;"
ContractDefinition "SafeMath"
   Source: "library SafeMath {\r\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    //assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n    //assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    //assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n}"
  FunctionDefinition "mul"
     Source: "function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    //assert(a == 0 || c / a == b);\r\n    return c;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    uint256 c = a * b;\r\n    //assert(a == 0 || c / a == b);\r\n    return c;\r\n  }"
      VariableDeclarationStatement
         Gas costs: 19
         Source: "uint256 c = a * b"
        VariableDeclaration "c"
           Type: uint256
           Source: "uint256 c"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator *
           Type: uint256
           Source: "a * b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
      Return
         Gas costs: 8
         Source: "return c"
        Identifier c
           Type: uint256
           Source: "c"
  FunctionDefinition "div"
     Source: "function div(uint256 a, uint256 b) internal returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }"
      VariableDeclarationStatement
         Gas costs: 42
         Source: "uint256 c = a / b"
        VariableDeclaration "c"
           Type: uint256
           Source: "uint256 c"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator /
           Type: uint256
           Source: "a / b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
      Return
         Gas costs: 8
         Source: "return c"
        Identifier c
           Type: uint256
           Source: "c"
  FunctionDefinition "sub"
     Source: "function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n    //assert(b <= a);\r\n    return a - b;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    //assert(b <= a);\r\n    return a - b;\r\n  }"
      Return
         Gas costs: 14
         Source: "return a - b"
        BinaryOperation using operator -
           Type: uint256
           Source: "a - b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
  FunctionDefinition "add"
     Source: "function add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    //assert(c >= a);\r\n    return c;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    uint256 c = a + b;\r\n    //assert(c >= a);\r\n    return c;\r\n  }"
      VariableDeclarationStatement
         Gas costs: 17
         Source: "uint256 c = a + b"
        VariableDeclaration "c"
           Type: uint256
           Source: "uint256 c"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator +
           Type: uint256
           Source: "a + b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
      Return
         Gas costs: 8
         Source: "return c"
        Identifier c
           Type: uint256
           Source: "c"
  FunctionDefinition "max64" - const
     Source: "function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint64 a, uint64 b)"
      VariableDeclaration "a"
         Type: uint64
         Source: "uint64 a"
        ElementaryTypeName uint64
           Source: "uint64"
      VariableDeclaration "b"
         Type: uint64
         Source: "uint64 b"
        ElementaryTypeName uint64
           Source: "uint64"
    ParameterList
       Gas costs: 0
       Source: "(uint64)"
      VariableDeclaration ""
         Type: uint64
         Source: "uint64"
        ElementaryTypeName uint64
           Source: "uint64"
    Block
       Source: "{\r\n    return a >= b ? a : b;\r\n  }"
      Return
         Gas costs: 0
         Source: "return a >= b ? a : b"
        Conditional
           Type: uint64
           Source: "a >= b ? a : b"
          BinaryOperation using operator >=
             Type: bool
             Source: "a >= b"
            Identifier a
               Type: uint64
               Source: "a"
            Identifier b
               Type: uint64
               Source: "b"
          Identifier a
             Type: uint64
             Source: "a"
          Identifier b
             Type: uint64
             Source: "b"
  FunctionDefinition "min64" - const
     Source: "function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint64 a, uint64 b)"
      VariableDeclaration "a"
         Type: uint64
         Source: "uint64 a"
        ElementaryTypeName uint64
           Source: "uint64"
      VariableDeclaration "b"
         Type: uint64
         Source: "uint64 b"
        ElementaryTypeName uint64
           Source: "uint64"
    ParameterList
       Gas costs: 0
       Source: "(uint64)"
      VariableDeclaration ""
         Type: uint64
         Source: "uint64"
        ElementaryTypeName uint64
           Source: "uint64"
    Block
       Source: "{\r\n    return a < b ? a : b;\r\n  }"
      Return
         Gas costs: 0
         Source: "return a < b ? a : b"
        Conditional
           Type: uint64
           Source: "a < b ? a : b"
          BinaryOperation using operator <
             Type: bool
             Source: "a < b"
            Identifier a
               Type: uint64
               Source: "a"
            Identifier b
               Type: uint64
               Source: "b"
          Identifier a
             Type: uint64
             Source: "a"
          Identifier b
             Type: uint64
             Source: "b"
  FunctionDefinition "max256" - const
     Source: "function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    return a >= b ? a : b;\r\n  }"
      Return
         Gas costs: 0
         Source: "return a >= b ? a : b"
        Conditional
           Type: uint256
           Source: "a >= b ? a : b"
          BinaryOperation using operator >=
             Type: bool
             Source: "a >= b"
            Identifier a
               Type: uint256
               Source: "a"
            Identifier b
               Type: uint256
               Source: "b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
  FunctionDefinition "min256" - const
     Source: "function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    return a < b ? a : b;\r\n  }"
      Return
         Gas costs: 0
         Source: "return a < b ? a : b"
        Conditional
           Type: uint256
           Source: "a < b ? a : b"
          BinaryOperation using operator <
             Type: bool
             Source: "a < b"
            Identifier a
               Type: uint256
               Source: "a"
            Identifier b
               Type: uint256
               Source: "b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
ContractDefinition "ERC20Basic"
   Gas costs: [???]
   Source: "contract ERC20Basic {\r\n  uint256 public totalSupply=100000000; \r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n}"
  VariableDeclaration "totalSupply"
     Type: uint256
     Source: "uint256 public totalSupply=100000000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 100000000
       Type: int_const 100000000
       Source: "100000000"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address who) constant returns (uint256);"
    ParameterList
       Source: "(address who)"
      VariableDeclaration "who"
         Type: address
         Source: "address who"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address to, uint256 value);"
    ParameterList
       Source: "(address to, uint256 value)"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
  EventDefinition "Transfer"
     Source: "event Transfer(address indexed from, address indexed to, uint256 value);"
    ParameterList
       Source: "(address indexed from, address indexed to, uint256 value)"
      VariableDeclaration "from"
         Type: address
         Source: "address indexed from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "to"
         Type: address
         Source: "address indexed to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
ContractDefinition "ERC20"
   Gas costs: 0
   Source: "contract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value);\r\n  function approve(address spender, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"
  InheritanceSpecifier
     Source: "ERC20Basic"
    UserDefinedTypeName "ERC20Basic"
       Source: "ERC20Basic"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address owner, address spender) constant returns (uint256);"
    ParameterList
       Source: "(address owner, address spender)"
      VariableDeclaration "owner"
         Type: address
         Source: "address owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "spender"
         Type: address
         Source: "address spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address from, address to, uint256 value);"
    ParameterList
       Source: "(address from, address to, uint256 value)"
      VariableDeclaration "from"
         Type: address
         Source: "address from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
  FunctionDefinition "approve" - public
     Source: "function approve(address spender, uint256 value);"
    ParameterList
       Source: "(address spender, uint256 value)"
      VariableDeclaration "spender"
         Type: address
         Source: "address spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
  EventDefinition "Approval"
     Source: "event Approval(address indexed owner, address indexed spender, uint256 value);"
    ParameterList
       Source: "(address indexed owner, address indexed spender, uint256 value)"
      VariableDeclaration "owner"
         Type: address
         Source: "address indexed owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "spender"
         Type: address
         Source: "address indexed spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
ContractDefinition "BasicToken"
   Source: "contract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) {\r\n      \r\n      if (balances[msg.sender] < _value) {\r\n            // Balance too low\r\n            throw;\r\n        }\r\n      \r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "ERC20Basic"
    UserDefinedTypeName "ERC20Basic"
       Source: "ERC20Basic"
  UsingForDirective
     Gas costs: 0
     Source: "using SafeMath for uint256;"
    UserDefinedTypeName "SafeMath"
       Source: "SafeMath"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping(address => uint256) balances"
    Mapping
       Source: "mapping(address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) {\r\n      \r\n      if (balances[msg.sender] < _value) {\r\n            // Balance too low\r\n            throw;\r\n        }\r\n      \r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n      \r\n      if (balances[msg.sender] < _value) {\r\n            // Balance too low\r\n            throw;\r\n        }\r\n      \r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }"
      IfStatement
         Source: "if (balances[msg.sender] < _value) {\r\n            // Balance too low\r\n            throw;\r\n        }"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 304
           Source: "balances[msg.sender] < _value"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
        Block
           Source: "{\r\n            // Balance too low\r\n            throw;\r\n        }"
          Throw
             Gas costs: 6
             Source: "throw"
      ExpressionStatement
         Gas costs: 20437
         Source: "balances[msg.sender] = balances[msg.sender].sub(_value)"
        Assignment using operator =
           Type: uint256
           Source: "balances[msg.sender] = balances[msg.sender].sub(_value)"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          FunctionCall
             Type: uint256
             Source: "balances[msg.sender].sub(_value)"
            MemberAccess to member sub
               Type: function (uint256,uint256) returns (uint256)
               Source: "balances[msg.sender].sub"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 20433
         Source: "balances[_to] = balances[_to].add(_value)"
        Assignment using operator =
           Type: uint256
           Source: "balances[_to] = balances[_to].add(_value)"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
          FunctionCall
             Type: uint256
             Source: "balances[_to].add(_value)"
            MemberAccess to member add
               Type: function (uint256,uint256) returns (uint256)
               Source: "balances[_to].add"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: [???]
         Source: "Transfer(msg.sender, _to, _value)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(msg.sender, _to, _value)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    return balances[_owner];\r\n  }"
      Return
         Gas costs: 304
         Source: "return balances[_owner]"
        IndexAccess
           Type: uint256
           Source: "balances[_owner]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          Identifier _owner
             Type: address
             Source: "_owner"
ContractDefinition "StandardToken"
   Source: "contract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    if (balances[_from] < _value || allowed[_from][msg.sender] < _value) {\r\n            // Balance or allowance too low\r\n            throw;\r\n        }\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) {\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "ERC20"
    UserDefinedTypeName "ERC20"
       Source: "ERC20"
  InheritanceSpecifier
     Gas costs: 0
     Source: "BasicToken"
    UserDefinedTypeName "BasicToken"
       Source: "BasicToken"
  VariableDeclaration "allowed"
     Type: mapping(address => mapping(address => uint256))
     Gas costs: 0
     Source: "mapping (address => mapping (address => uint256)) allowed"
    Mapping
       Source: "mapping (address => mapping (address => uint256))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping (address => uint256)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _value) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    if (balances[_from] < _value || allowed[_from][msg.sender] < _value) {\r\n            // Balance or allowance too low\r\n            throw;\r\n        }\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    if (balances[_from] < _value || allowed[_from][msg.sender] < _value) {\r\n            // Balance or allowance too low\r\n            throw;\r\n        }\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }"
      VariableDeclarationStatement
         Gas costs: 396
         Source: "var _allowance = allowed[_from][msg.sender]"
        VariableDeclaration "_allowance"
           Type: uint256
           Source: "var _allowance"
        IndexAccess
           Type: uint256
           Source: "allowed[_from][msg.sender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowed[_from]"
            Identifier allowed
               Type: mapping(address => mapping(address => uint256))
               Source: "allowed"
            Identifier _from
               Type: address
               Source: "_from"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      IfStatement
         Source: "if (balances[_from] < _value || allowed[_from][msg.sender] < _value) {\r\n            // Balance or allowance too low\r\n            throw;\r\n        }"
        BinaryOperation using operator ||
           Type: bool
           Gas costs: 712
           Source: "balances[_from] < _value || allowed[_from][msg.sender] < _value"
          BinaryOperation using operator <
             Type: bool
             Source: "balances[_from] < _value"
            IndexAccess
               Type: uint256
               Source: "balances[_from]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _from
                 Type: address
                 Source: "_from"
            Identifier _value
               Type: uint256
               Source: "_value"
          BinaryOperation using operator <
             Type: bool
             Source: "allowed[_from][msg.sender] < _value"
            IndexAccess
               Type: uint256
               Source: "allowed[_from][msg.sender]"
              IndexAccess
                 Type: mapping(address => uint256)
                 Source: "allowed[_from]"
                Identifier allowed
                   Type: mapping(address => mapping(address => uint256))
                   Source: "allowed"
                Identifier _from
                   Type: address
                   Source: "_from"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
        Block
           Source: "{\r\n            // Balance or allowance too low\r\n            throw;\r\n        }"
          Throw
             Gas costs: 6
             Source: "throw"
      ExpressionStatement
         Gas costs: 20439
         Source: "balances[_to] = balances[_to].add(_value)"
        Assignment using operator =
           Type: uint256
           Source: "balances[_to] = balances[_to].add(_value)"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
          FunctionCall
             Type: uint256
             Source: "balances[_to].add(_value)"
            MemberAccess to member add
               Type: function (uint256,uint256) returns (uint256)
               Source: "balances[_to].add"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 20433
         Source: "balances[_from] = balances[_from].sub(_value)"
        Assignment using operator =
           Type: uint256
           Source: "balances[_from] = balances[_from].sub(_value)"
          IndexAccess
             Type: uint256
             Source: "balances[_from]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _from
               Type: address
               Source: "_from"
          FunctionCall
             Type: uint256
             Source: "balances[_from].sub(_value)"
            MemberAccess to member sub
               Type: function (uint256,uint256) returns (uint256)
               Source: "balances[_from].sub"
              IndexAccess
                 Type: uint256
                 Source: "balances[_from]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _from
                   Type: address
                   Source: "_from"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 20232
         Source: "allowed[_from][msg.sender] = _allowance.sub(_value)"
        Assignment using operator =
           Type: uint256
           Source: "allowed[_from][msg.sender] = _allowance.sub(_value)"
          IndexAccess
             Type: uint256
             Source: "allowed[_from][msg.sender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[_from]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              Identifier _from
                 Type: address
                 Source: "_from"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          FunctionCall
             Type: uint256
             Source: "_allowance.sub(_value)"
            MemberAccess to member sub
               Type: function (uint256,uint256) returns (uint256)
               Source: "_allowance.sub"
              Identifier _allowance
                 Type: uint256
                 Source: "_allowance"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: [???]
         Source: "Transfer(_from, _to, _value)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(_from, _to, _value)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint256 _value) {\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }"
      ExpressionStatement
         Gas costs: 20199
         Source: "allowed[msg.sender][_spender] = _value"
        Assignment using operator =
           Type: uint256
           Source: "allowed[msg.sender][_spender] = _value"
          IndexAccess
             Type: uint256
             Source: "allowed[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[msg.sender]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: [???]
         Source: "Approval(msg.sender, _spender, _value)"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender, _spender, _value)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint256 remaining"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    return allowed[_owner][_spender];\r\n  }"
      Return
         Gas costs: 394
         Source: "return allowed[_owner][_spender]"
        IndexAccess
           Type: uint256
           Source: "allowed[_owner][_spender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowed[_owner]"
            Identifier allowed
               Type: mapping(address => mapping(address => uint256))
               Source: "allowed"
            Identifier _owner
               Type: address
               Source: "_owner"
          Identifier _spender
             Type: address
             Source: "_spender"
ContractDefinition "owned"
   Source: "contract owned {\r\n     function owned() { owner = msg.sender; }\r\n     address owner;\r\n\r\n     // This contract only defines a modifier but does not use\r\n     // it - it will be used in derived contracts.\r\n     // The function body is inserted where the special symbol\r\n     // \"_;\" in the definition of a modifier appears.\r\n     // This means that if the owner calls this function, the\r\n     // function is executed and otherwise, an exception is\r\n     // thrown.\r\n     modifier onlyOwner {\r\n         if(msg.sender != owner)\r\n         {\r\n         throw;\r\n         }\r\n         _;\r\n     }\r\n }"
  FunctionDefinition "owned" - public
     Source: "function owned() { owner = msg.sender; }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{ owner = msg.sender; }"
      ExpressionStatement
         Gas costs: 0
         Source: "owner = msg.sender"
        Assignment using operator =
           Type: address
           Source: "owner = msg.sender"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  VariableDeclaration "owner"
     Type: address
     Gas costs: 0
     Source: "address owner"
    ElementaryTypeName address
       Source: "address"
  ModifierDefinition "onlyOwner"
     Source: "modifier onlyOwner {\r\n         if(msg.sender != owner)\r\n         {\r\n         throw;\r\n         }\r\n         _;\r\n     }"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n         if(msg.sender != owner)\r\n         {\r\n         throw;\r\n         }\r\n         _;\r\n     }"
      IfStatement
         Source: "if(msg.sender != owner)\r\n         {\r\n         throw;\r\n         }"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 1295
           Source: "msg.sender != owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier owner
             Type: address
             Source: "owner"
        Block
           Source: "{\r\n         throw;\r\n         }"
          Throw
             Gas costs: 30
             Source: "throw"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
ContractDefinition "UniContract"
   Source: "contract UniContract is StandardToken, owned {\r\n\r\n\r\n   string public constant name = \"SaveUNICOINs\";\r\n   string public constant symbol = \"UCN\";\r\n   uint256 public constant decimals = 0;\r\n   \r\n   //founder & fund collector\r\n   address public multisig;\r\n   address public founder; \r\n   \r\n   \r\n   //Timings\r\n   uint public start;  \r\n   uint public end;\r\n   uint public launch;\r\n   \r\n   //Dynamic Pricing PRICE IN UCN //UniContract V2\r\n   uint256 public PRICE = 217135;  \r\n   \r\n   //Dynamic Status of sold UCN Tokens //UniContract V2\r\n   uint256 public OVERALLSOLD = 3148890;  \r\n   \r\n   //Maximum of Tokens to be sold 85.000.000\r\n   uint256 public MAXTOKENSOLD = 85000000;  \r\n   \r\n   \r\n   \r\n   \r\n  \r\n   function UniContract() onlyOwner { \r\n       founder = 0x204244062B04089b6Ef55981Ad82119cEBf54F88; \r\n       multisig= 0x9FA2d2231FE8ac207831B376aa4aE35671619960;\r\n       \r\n       start = 1507543200;\r\n       end = 1509098400; \r\n \t   launch = 1509534000;\r\n \t   //UniContract V2\r\n       balances[founder] = balances[founder].add(18148890); // Founder (15% = 15.000.000 UCN + 3148890 redistribute)\r\n \r\n   }\r\n   \r\n   \r\n   \r\n   //Stage Pre-Sale Variables\r\n   \r\n   uint256 public constant PRICE_PRESALE = 300000;  \r\n   uint256 public constant FACTOR_PRESALE = 38;\r\n   uint256 public constant RANGESTART_PRESALE = 0; \r\n   uint256 public constant RANGEEND_PRESALE = 10000000; \r\n   \r\n   \r\n   //Stage 1\r\n   uint256 public constant PRICE_1 = 30000;  \r\n   uint256 public constant FACTOR_1 = 460;\r\n   uint256 public constant RANGESTART_1 = 10000001; \r\n   uint256 public constant RANGEEND_1 = 10100000;\r\n   \r\n   //Stage 2\r\n   uint256 public constant PRICE_2 = 29783;  \r\n   uint256 public constant FACTOR_2 = 495;\r\n   uint256 public constant RANGESTART_2 = 10100001; \r\n   uint256 public constant RANGEEND_2 = 11000000;\r\n   \r\n   //Stage 3\r\n   uint256 public constant PRICE_3 = 27964;  \r\n   uint256 public constant FACTOR_3 = 580;\r\n   uint256 public constant RANGESTART_3 = 11000001; \r\n   uint256 public constant RANGEEND_3 = 15000000;\r\n   \r\n   //Stage 4\r\n   uint256 public constant PRICE_4 = 21068;  \r\n   uint256 public constant FACTOR_4 = 800;\r\n   uint256 public constant RANGESTART_4 = 15000001; \r\n   uint256 public constant RANGEEND_4 = 20000000;\r\n   \r\n   //Stage 5\r\n   uint256 public constant PRICE_5 = 14818;  \r\n   uint256 public constant FACTOR_5 = 1332;\r\n   uint256 public constant RANGESTART_5 = 20000001; \r\n   uint256 public constant RANGEEND_5 = 30000000;\r\n   \r\n   //Stage 6\r\n   uint256 public constant PRICE_6 = 7310;  \r\n   uint256 public constant FACTOR_6 = 2700;\r\n   uint256 public constant RANGESTART_6 = 30000001; \r\n   uint256 public constant RANGEEND_6 = 40000000;\r\n   \r\n   //Stage 7\r\n   uint256 public constant PRICE_7 = 3607;  \r\n   uint256 public constant FACTOR_7 = 5450;\r\n   uint256 public constant RANGESTART_7 = 40000001; \r\n   uint256 public constant RANGEEND_7 = 50000000;\r\n   \r\n   //Stage 8\r\n   uint256 public constant PRICE_8 = 1772;  \r\n   uint256 public constant FACTOR_8 = 11000;\r\n   uint256 public constant RANGESTART_8 = 50000001; \r\n   uint256 public constant RANGEEND_8 = 60000000;\r\n   \r\n   //Stage 9\r\n   uint256 public constant PRICE_9 = 863;  \r\n   uint256 public constant FACTOR_9 = 23200;\r\n   uint256 public constant RANGESTART_9 = 60000001; \r\n   uint256 public constant RANGEEND_9 = 70000000;\r\n   \r\n   //Stage 10\r\n   uint256 public constant PRICE_10 = 432;  \r\n   uint256 public constant FACTOR_10 = 46000;\r\n   uint256 public constant RANGESTART_10 = 70000001; \r\n   uint256 public constant RANGEEND_10 = 80000000;\r\n   \r\n   //Stage 11\r\n   uint256 public constant PRICE_11 = 214;  \r\n   uint256 public constant FACTOR_11 = 78000;\r\n   uint256 public constant RANGESTART_11 = 80000001; \r\n   uint256 public constant RANGEEND_11 = 85000000;\r\n   \r\n\r\n   uint256 public UniCoinSize=0;\r\n\r\n \r\n   function () payable {\r\n     submitTokens(msg.sender);\r\n   }\r\n\r\n   /**\r\n    * @dev Creates tokens and send to the specified address.\r\n    * @param recipient The address which will recieve the new tokens.\r\n    */\r\n   function submitTokens(address recipient) payable {\r\n     \tif (msg.value == 0) {\r\n       \t\tthrow;\r\n     \t}\r\n\t\t\r\n   \t \t//Permit buying only between 10/09/17 - 10/27/2017 and after 11/01/2017\r\n   \t \tif((now > start && now < end) || now > launch)\r\n   \t \t\t{\t\t\t\t\r\n        \t\tuint256 tokens = msg.value.mul(PRICE).div( 1 ether);\r\n        \t\tif(tokens.add(OVERALLSOLD) > MAXTOKENSOLD)\r\n   \t \t\t\t\t{\r\n   \t\t\t\t\tthrow;\r\n   \t\t\t\t\t}\r\n\t\t\r\n   \t\t\t\t//Pre-Sale CAP 10,000,000 check\r\n   \t\t\t\tif(((tokens.add(OVERALLSOLD)) > RANGEEND_PRESALE) && (now > start && now < end))\r\n   \t\t\t\t\t{\r\n   \t\t\t\t\tthrow;\r\n   \t\t\t\t\t}\r\n\t\t\r\n \t\t\t\t   \r\n        \t\tOVERALLSOLD = OVERALLSOLD.add(tokens);\t\r\n\t\r\n   \t\t \t    // Send UCN to Recipient\t\r\n        \t\tbalances[recipient] = balances[recipient].add(tokens);\r\n\t \r\n   \t \t\t\t// Send Funds to MultiSig\r\n        \t\tif (!multisig.send(msg.value)) {\r\n          \t\t\tthrow;\r\n        \t\t\t}\r\n        \t\tTransfer(address(this), recipient, tokens);\r\n       \t\t}\r\n   \t  \t  else\r\n   \t  \t\t\t{\r\n   \t  \t  \t\tthrow;\r\n   \t \t\t   \t}\r\n\t\t\r\n\t\t\r\n\t\t//TIMING 10/09/17 - 10/27/17 OR CAP 10,000,000 reached\r\n\t\t\r\n\t\tif(now>start && now <end)\r\n\t\t{\r\n\t\t\t//Stage Pre-Sale Range 0 - 10,000,000 \r\n\t\t\tif(OVERALLSOLD >= RANGESTART_PRESALE && OVERALLSOLD <= RANGEEND_PRESALE) \r\n\t\t\t\t{\r\n\t\t\t\tPRICE = PRICE_PRESALE - (1 + OVERALLSOLD - RANGESTART_PRESALE).div(FACTOR_PRESALE);\r\n\t\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//TIMING 11/01/17 Start Token Sale\r\n\t\tif(now>launch)\r\n\t\t{\r\n\t\t//Stage Post-Pre-Sale Range 0 - 10,000,000 \r\n\t\tif(OVERALLSOLD >= RANGESTART_PRESALE && OVERALLSOLD <= RANGEEND_PRESALE) \r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_PRESALE - (1 + OVERALLSOLD - RANGESTART_PRESALE).div(FACTOR_PRESALE);\r\n\t\t\t}\r\n\t\t\r\n\t\t//Stage One 10,000,001 - 10,100,000 \r\n\t\tif(OVERALLSOLD >= RANGESTART_1 && OVERALLSOLD <= RANGEEND_1)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_1 - (1 + OVERALLSOLD - RANGESTART_1).div(FACTOR_1);\r\n\t\t\t}\r\n\r\n\t\t//Stage Two 10,100,001 - 11,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_2 && OVERALLSOLD <= RANGEEND_2)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_2 - (1 + OVERALLSOLD - RANGESTART_2).div(FACTOR_2);\r\n\t\t\t}\r\n\r\n\t\t//Stage Three 11,000,001 - 15,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_3 && OVERALLSOLD <= RANGEEND_3)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_3 - (1 + OVERALLSOLD - RANGESTART_3).div(FACTOR_3);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t//Stage Four 15,000,001 - 20,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_4 && OVERALLSOLD <= RANGEEND_4)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_4 - (1 + OVERALLSOLD - RANGESTART_4).div(FACTOR_4);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t//Stage Five 20,000,001 - 30,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_5 && OVERALLSOLD <= RANGEEND_5)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_5 - (1 + OVERALLSOLD - RANGESTART_5).div(FACTOR_5);\r\n\t\t\t}\r\n\t\t\r\n\t\t//Stage Six 30,000,001 - 40,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_6 && OVERALLSOLD <= RANGEEND_6)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_6 - (1 + OVERALLSOLD - RANGESTART_6).div(FACTOR_6);\r\n\t\t\t}\t\r\n\t\t\r\n\t\t//Stage Seven 40,000,001 - 50,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_7 && OVERALLSOLD <= RANGEEND_7)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_7 - (1 + OVERALLSOLD - RANGESTART_7).div(FACTOR_7);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t//Stage Eight 50,000,001 - 60,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_8 && OVERALLSOLD <= RANGEEND_8)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_8 - (1 + OVERALLSOLD - RANGESTART_8).div(FACTOR_8);\r\n\t\t\t}\r\n\t\t\r\n\t\t//Stage Nine 60,000,001 - 70,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_9 && OVERALLSOLD <= RANGEEND_9)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_9 - (1 + OVERALLSOLD - RANGESTART_9).div(FACTOR_9);\r\n\t\t\t}\r\n\t\t\r\n\t\t//Stage Ten 70,000,001 - 80,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_10 && OVERALLSOLD <= RANGEEND_10)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_10 - (1 + OVERALLSOLD - RANGESTART_10).div(FACTOR_10);\r\n\t\t\t}\t\r\n\t\t\r\n\t\t//Stage Eleven 80,000,001 - 85,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_11 && OVERALLSOLD <= RANGEEND_11)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_11 - (1 + OVERALLSOLD - RANGESTART_11).div(FACTOR_11);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\r\n   }\r\n\r\n\t \r\n   function submitEther(address recipient) payable {\r\n     if (msg.value == 0) {\r\n       throw;\r\n     }\r\n\r\n     if (!recipient.send(msg.value)) {\r\n       throw;\r\n     }\r\n    \r\n   }\r\n\r\n\r\n  //Unicorn Shoutbox\r\n\r\n  struct MessageQueue {\r\n           string message; \r\n  \t\t   string from;\r\n           uint expireTimestamp;  \r\n           uint startTimestamp;\r\n           address sender; \r\n       }\r\n\r\n\t \r\n     uint256 public constant maxSpendToken = 3600; //Message should last approx. 1 hour max\r\n\r\n     MessageQueue[] public mQueue;\r\n \r\n\t\r\n \r\n      function addMessageToQueue(string msg_from, string name_from, uint spendToken) {\r\n        if(balances[msg.sender]>=spendToken && spendToken>=10)\r\n        {\r\n           if(spendToken>maxSpendToken) \r\n               {\r\n                   spendToken=maxSpendToken;\r\n               }\r\n           \r\n\t\t   UniCoinSize=UniCoinSize+spendToken;\r\n           \r\n           balances[msg.sender] = balances[msg.sender].sub(spendToken);\r\n          \r\n\t\t  //If first message or last message already expired set newest timestamp\r\n  \t\t  uint expireTimestamp=now;\r\n\t\t  if(mQueue.length>0)\r\n\t\t\t{\r\n\t\t\t if(mQueue[mQueue.length-1].expireTimestamp>now)\r\n\t\t\t \t{\r\n\t\t\t \texpireTimestamp = mQueue[mQueue.length-1].expireTimestamp;\r\n\t\t\t\t}\r\n\t\t\t} \r\n\t\t\r\n\t\t \r\n\t\t \r\n           mQueue.push(MessageQueue({\r\n                   message: msg_from, \r\n  \t\t\t\t   from: name_from,\r\n                   expireTimestamp: expireTimestamp.add(spendToken)+60,  //give at least approx 60 seconds per msg\r\n                   startTimestamp: expireTimestamp,\r\n                   sender: msg.sender\r\n               }));\r\n    \r\n        \r\n\t\t \r\n        }\r\n\t\telse {\r\n\t\t      throw;\r\n\t\t      }\r\n      }\r\n\t  \r\n\t\r\n    function feedUnicorn(uint spendToken) {\r\n\t\r\n   \t \tif(balances[msg.sender] < spendToken)\r\n        \t{ throw; }\r\n       \t \tUniCoinSize=UniCoinSize.add(spendToken);\r\n        \tbalances[msg.sender] = balances[msg.sender].sub(spendToken);\r\n\t\t\t\r\n\t\t\r\n\t } \r\n\t\r\n\t\r\n   function getQueueLength() public constant returns (uint256 result) {\r\n\t return mQueue.length;\r\n   }\r\n   function getMessage(uint256 i) public constant returns (string, string, uint, uint, address){\r\n     return (mQueue[i].message,mQueue[i].from,mQueue[i].expireTimestamp,mQueue[i].startTimestamp,mQueue[i].sender );\r\n   }\r\n   function getPrice() constant returns (uint256 result) {\r\n     return PRICE;\r\n   }\r\n   function getSupply() constant returns (uint256 result) {\r\n     return totalSupply;\r\n   }\r\n   function getSold() constant returns (uint256 result) {\r\n     return OVERALLSOLD;\r\n   }\r\n   function getUniCoinSize() constant returns (uint256 result) {    \r\n     return UniCoinSize; \r\n   } \r\n    function getAddress() constant returns (address) {\r\n     return this;\r\n   }\r\n    \r\n\r\n\r\n  \r\n   // ADMIN Functions\r\n\r\n   \r\n   //In emergency cases to stop or change timings \r\n   function aSetStart(uint256 nstart) onlyOwner {\r\n     start=nstart;\r\n   }\r\n   function aSetEnd(uint256 nend) onlyOwner {\r\n     end=nend;\r\n   }\r\n   function aSetLaunch(uint256 nlaunch) onlyOwner {\r\n     launch=nlaunch;\r\n   }\r\n    \r\n\r\n   //We don't want the Unicorn to spread hateful messages \r\n   function aDeleteMessage(uint256 i,string f,string m) onlyOwner{\r\n     mQueue[i].message=m;\r\n\t mQueue[i].from=f; \r\n\t\t }\r\n   \r\n   //Clean house from time to time\r\n   function aPurgeMessages() onlyOwner{\r\n   delete mQueue; \r\n   }\r\n\r\n }"
  InheritanceSpecifier
     Gas costs: 0
     Source: "StandardToken"
    UserDefinedTypeName "StandardToken"
       Source: "StandardToken"
  InheritanceSpecifier
     Gas costs: 0
     Source: "owned"
    UserDefinedTypeName "owned"
       Source: "owned"
  VariableDeclaration "name"
     Type: string memory
     Gas costs: [???]
     Source: "string public constant name = \"SaveUNICOINs\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: SaveUNICOINs
       Type: literal_string "SaveUNICOINs"
       Source: "\"SaveUNICOINs\""
  VariableDeclaration "symbol"
     Type: string memory
     Gas costs: [???]
     Source: "string public constant symbol = \"UCN\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: UCN
       Type: literal_string "UCN"
       Source: "\"UCN\""
  VariableDeclaration "decimals"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant decimals = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "multisig"
     Type: address
     Gas costs: [???]
     Source: "address public multisig"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "founder"
     Type: address
     Gas costs: [???]
     Source: "address public founder"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "start"
     Type: uint256
     Gas costs: [???]
     Source: "uint public start"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "end"
     Type: uint256
     Gas costs: [???]
     Source: "uint public end"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "launch"
     Type: uint256
     Gas costs: [???]
     Source: "uint public launch"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "PRICE"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public PRICE = 217135"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 217135
       Type: int_const 217135
       Source: "217135"
  VariableDeclaration "OVERALLSOLD"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public OVERALLSOLD = 3148890"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 3148890
       Type: int_const 3148890
       Source: "3148890"
  VariableDeclaration "MAXTOKENSOLD"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public MAXTOKENSOLD = 85000000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 85000000
       Type: int_const 85000000
       Source: "85000000"
  FunctionDefinition "UniContract" - public
     Source: "function UniContract() onlyOwner { \r\n       founder = 0x204244062B04089b6Ef55981Ad82119cEBf54F88; \r\n       multisig= 0x9FA2d2231FE8ac207831B376aa4aE35671619960;\r\n       \r\n       start = 1507543200;\r\n       end = 1509098400; \r\n \t   launch = 1509534000;\r\n \t   //UniContract V2\r\n       balances[founder] = balances[founder].add(18148890); // Founder (15% = 15.000.000 UCN + 3148890 redistribute)\r\n \r\n   }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{ \r\n       founder = 0x204244062B04089b6Ef55981Ad82119cEBf54F88; \r\n       multisig= 0x9FA2d2231FE8ac207831B376aa4aE35671619960;\r\n       \r\n       start = 1507543200;\r\n       end = 1509098400; \r\n \t   launch = 1509534000;\r\n \t   //UniContract V2\r\n       balances[founder] = balances[founder].add(18148890); // Founder (15% = 15.000.000 UCN + 3148890 redistribute)\r\n \r\n   }"
      ExpressionStatement
         Gas costs: 0
         Source: "founder = 0x204244062B04089b6Ef55981Ad82119cEBf54F88"
        Assignment using operator =
           Type: address
           Source: "founder = 0x204244062B04089b6Ef55981Ad82119cEBf54F88"
          Identifier founder
             Type: address
             Source: "founder"
          Literal, token: [no token] value: 0x204244062B04089b6Ef55981Ad82119cEBf54F88
             Type: address
             Source: "0x204244062B04089b6Ef55981Ad82119cEBf54F88"
      ExpressionStatement
         Gas costs: 0
         Source: "multisig= 0x9FA2d2231FE8ac207831B376aa4aE35671619960"
        Assignment using operator =
           Type: address
           Source: "multisig= 0x9FA2d2231FE8ac207831B376aa4aE35671619960"
          Identifier multisig
             Type: address
             Source: "multisig"
          Literal, token: [no token] value: 0x9FA2d2231FE8ac207831B376aa4aE35671619960
             Type: address
             Source: "0x9FA2d2231FE8ac207831B376aa4aE35671619960"
      ExpressionStatement
         Gas costs: 0
         Source: "start = 1507543200"
        Assignment using operator =
           Type: uint256
           Source: "start = 1507543200"
          Identifier start
             Type: uint256
             Source: "start"
          Literal, token: [no token] value: 1507543200
             Type: int_const 1507543200
             Source: "1507543200"
      ExpressionStatement
         Gas costs: 0
         Source: "end = 1509098400"
        Assignment using operator =
           Type: uint256
           Source: "end = 1509098400"
          Identifier end
             Type: uint256
             Source: "end"
          Literal, token: [no token] value: 1509098400
             Type: int_const 1509098400
             Source: "1509098400"
      ExpressionStatement
         Gas costs: 0
         Source: "launch = 1509534000"
        Assignment using operator =
           Type: uint256
           Source: "launch = 1509534000"
          Identifier launch
             Type: uint256
             Source: "launch"
          Literal, token: [no token] value: 1509534000
             Type: int_const 1509534000
             Source: "1509534000"
      ExpressionStatement
         Gas costs: 0
         Source: "balances[founder] = balances[founder].add(18148890)"
        Assignment using operator =
           Type: uint256
           Source: "balances[founder] = balances[founder].add(18148890)"
          IndexAccess
             Type: uint256
             Source: "balances[founder]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier founder
               Type: address
               Source: "founder"
          FunctionCall
             Type: uint256
             Source: "balances[founder].add(18148890)"
            MemberAccess to member add
               Type: function (uint256,uint256) returns (uint256)
               Source: "balances[founder].add"
              IndexAccess
                 Type: uint256
                 Source: "balances[founder]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier founder
                   Type: address
                   Source: "founder"
            Literal, token: [no token] value: 18148890
               Type: int_const 18148890
               Source: "18148890"
  VariableDeclaration "PRICE_PRESALE"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant PRICE_PRESALE = 300000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 300000
       Type: int_const 300000
       Source: "300000"
  VariableDeclaration "FACTOR_PRESALE"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant FACTOR_PRESALE = 38"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 38
       Type: int_const 38
       Source: "38"
  VariableDeclaration "RANGESTART_PRESALE"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant RANGESTART_PRESALE = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "RANGEEND_PRESALE"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant RANGEEND_PRESALE = 10000000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 10000000
       Type: int_const 10000000
       Source: "10000000"
  VariableDeclaration "PRICE_1"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant PRICE_1 = 30000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 30000
       Type: int_const 30000
       Source: "30000"
  VariableDeclaration "FACTOR_1"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant FACTOR_1 = 460"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 460
       Type: int_const 460
       Source: "460"
  VariableDeclaration "RANGESTART_1"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant RANGESTART_1 = 10000001"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 10000001
       Type: int_const 10000001
       Source: "10000001"
  VariableDeclaration "RANGEEND_1"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant RANGEEND_1 = 10100000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 10100000
       Type: int_const 10100000
       Source: "10100000"
  VariableDeclaration "PRICE_2"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant PRICE_2 = 29783"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 29783
       Type: int_const 29783
       Source: "29783"
  VariableDeclaration "FACTOR_2"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant FACTOR_2 = 495"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 495
       Type: int_const 495
       Source: "495"
  VariableDeclaration "RANGESTART_2"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant RANGESTART_2 = 10100001"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 10100001
       Type: int_const 10100001
       Source: "10100001"
  VariableDeclaration "RANGEEND_2"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant RANGEEND_2 = 11000000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 11000000
       Type: int_const 11000000
       Source: "11000000"
  VariableDeclaration "PRICE_3"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant PRICE_3 = 27964"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 27964
       Type: int_const 27964
       Source: "27964"
  VariableDeclaration "FACTOR_3"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant FACTOR_3 = 580"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 580
       Type: int_const 580
       Source: "580"
  VariableDeclaration "RANGESTART_3"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant RANGESTART_3 = 11000001"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 11000001
       Type: int_const 11000001
       Source: "11000001"
  VariableDeclaration "RANGEEND_3"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant RANGEEND_3 = 15000000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 15000000
       Type: int_const 15000000
       Source: "15000000"
  VariableDeclaration "PRICE_4"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant PRICE_4 = 21068"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 21068
       Type: int_const 21068
       Source: "21068"
  VariableDeclaration "FACTOR_4"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant FACTOR_4 = 800"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 800
       Type: int_const 800
       Source: "800"
  VariableDeclaration "RANGESTART_4"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant RANGESTART_4 = 15000001"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 15000001
       Type: int_const 15000001
       Source: "15000001"
  VariableDeclaration "RANGEEND_4"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant RANGEEND_4 = 20000000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 20000000
       Type: int_const 20000000
       Source: "20000000"
  VariableDeclaration "PRICE_5"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant PRICE_5 = 14818"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 14818
       Type: int_const 14818
       Source: "14818"
  VariableDeclaration "FACTOR_5"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant FACTOR_5 = 1332"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 1332
       Type: int_const 1332
       Source: "1332"
  VariableDeclaration "RANGESTART_5"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant RANGESTART_5 = 20000001"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 20000001
       Type: int_const 20000001
       Source: "20000001"
  VariableDeclaration "RANGEEND_5"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant RANGEEND_5 = 30000000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 30000000
       Type: int_const 30000000
       Source: "30000000"
  VariableDeclaration "PRICE_6"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant PRICE_6 = 7310"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 7310
       Type: int_const 7310
       Source: "7310"
  VariableDeclaration "FACTOR_6"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant FACTOR_6 = 2700"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 2700
       Type: int_const 2700
       Source: "2700"
  VariableDeclaration "RANGESTART_6"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant RANGESTART_6 = 30000001"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 30000001
       Type: int_const 30000001
       Source: "30000001"
  VariableDeclaration "RANGEEND_6"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant RANGEEND_6 = 40000000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 40000000
       Type: int_const 40000000
       Source: "40000000"
  VariableDeclaration "PRICE_7"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant PRICE_7 = 3607"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 3607
       Type: int_const 3607
       Source: "3607"
  VariableDeclaration "FACTOR_7"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant FACTOR_7 = 5450"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 5450
       Type: int_const 5450
       Source: "5450"
  VariableDeclaration "RANGESTART_7"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant RANGESTART_7 = 40000001"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 40000001
       Type: int_const 40000001
       Source: "40000001"
  VariableDeclaration "RANGEEND_7"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant RANGEEND_7 = 50000000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 50000000
       Type: int_const 50000000
       Source: "50000000"
  VariableDeclaration "PRICE_8"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant PRICE_8 = 1772"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 1772
       Type: int_const 1772
       Source: "1772"
  VariableDeclaration "FACTOR_8"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant FACTOR_8 = 11000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 11000
       Type: int_const 11000
       Source: "11000"
  VariableDeclaration "RANGESTART_8"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant RANGESTART_8 = 50000001"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 50000001
       Type: int_const 50000001
       Source: "50000001"
  VariableDeclaration "RANGEEND_8"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant RANGEEND_8 = 60000000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 60000000
       Type: int_const 60000000
       Source: "60000000"
  VariableDeclaration "PRICE_9"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant PRICE_9 = 863"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 863
       Type: int_const 863
       Source: "863"
  VariableDeclaration "FACTOR_9"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant FACTOR_9 = 23200"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 23200
       Type: int_const 23200
       Source: "23200"
  VariableDeclaration "RANGESTART_9"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant RANGESTART_9 = 60000001"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 60000001
       Type: int_const 60000001
       Source: "60000001"
  VariableDeclaration "RANGEEND_9"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant RANGEEND_9 = 70000000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 70000000
       Type: int_const 70000000
       Source: "70000000"
  VariableDeclaration "PRICE_10"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant PRICE_10 = 432"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 432
       Type: int_const 432
       Source: "432"
  VariableDeclaration "FACTOR_10"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant FACTOR_10 = 46000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 46000
       Type: int_const 46000
       Source: "46000"
  VariableDeclaration "RANGESTART_10"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant RANGESTART_10 = 70000001"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 70000001
       Type: int_const 70000001
       Source: "70000001"
  VariableDeclaration "RANGEEND_10"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant RANGEEND_10 = 80000000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 80000000
       Type: int_const 80000000
       Source: "80000000"
  VariableDeclaration "PRICE_11"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant PRICE_11 = 214"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 214
       Type: int_const 214
       Source: "214"
  VariableDeclaration "FACTOR_11"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant FACTOR_11 = 78000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 78000
       Type: int_const 78000
       Source: "78000"
  VariableDeclaration "RANGESTART_11"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant RANGESTART_11 = 80000001"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 80000001
       Type: int_const 80000001
       Source: "80000001"
  VariableDeclaration "RANGEEND_11"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant RANGEEND_11 = 85000000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 85000000
       Type: int_const 85000000
       Source: "85000000"
  VariableDeclaration "UniCoinSize"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public UniCoinSize=0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  FunctionDefinition "" - public
     Source: "function () payable {\r\n     submitTokens(msg.sender);\r\n   }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n     submitTokens(msg.sender);\r\n   }"
      ExpressionStatement
         Gas costs: 6
         Source: "submitTokens(msg.sender)"
        FunctionCall
           Type: tuple()
           Source: "submitTokens(msg.sender)"
          Identifier submitTokens
             Type: function (address)
             Source: "submitTokens"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "submitTokens" - public
     Source: "function submitTokens(address recipient) payable {\r\n     \tif (msg.value == 0) {\r\n       \t\tthrow;\r\n     \t}\r\n\t\t\r\n   \t \t//Permit buying only between 10/09/17 - 10/27/2017 and after 11/01/2017\r\n   \t \tif((now > start && now < end) || now > launch)\r\n   \t \t\t{\t\t\t\t\r\n        \t\tuint256 tokens = msg.value.mul(PRICE).div( 1 ether);\r\n        \t\tif(tokens.add(OVERALLSOLD) > MAXTOKENSOLD)\r\n   \t \t\t\t\t{\r\n   \t\t\t\t\tthrow;\r\n   \t\t\t\t\t}\r\n\t\t\r\n   \t\t\t\t//Pre-Sale CAP 10,000,000 check\r\n   \t\t\t\tif(((tokens.add(OVERALLSOLD)) > RANGEEND_PRESALE) && (now > start && now < end))\r\n   \t\t\t\t\t{\r\n   \t\t\t\t\tthrow;\r\n   \t\t\t\t\t}\r\n\t\t\r\n \t\t\t\t   \r\n        \t\tOVERALLSOLD = OVERALLSOLD.add(tokens);\t\r\n\t\r\n   \t\t \t    // Send UCN to Recipient\t\r\n        \t\tbalances[recipient] = balances[recipient].add(tokens);\r\n\t \r\n   \t \t\t\t// Send Funds to MultiSig\r\n        \t\tif (!multisig.send(msg.value)) {\r\n          \t\t\tthrow;\r\n        \t\t\t}\r\n        \t\tTransfer(address(this), recipient, tokens);\r\n       \t\t}\r\n   \t  \t  else\r\n   \t  \t\t\t{\r\n   \t  \t  \t\tthrow;\r\n   \t \t\t   \t}\r\n\t\t\r\n\t\t\r\n\t\t//TIMING 10/09/17 - 10/27/17 OR CAP 10,000,000 reached\r\n\t\t\r\n\t\tif(now>start && now <end)\r\n\t\t{\r\n\t\t\t//Stage Pre-Sale Range 0 - 10,000,000 \r\n\t\t\tif(OVERALLSOLD >= RANGESTART_PRESALE && OVERALLSOLD <= RANGEEND_PRESALE) \r\n\t\t\t\t{\r\n\t\t\t\tPRICE = PRICE_PRESALE - (1 + OVERALLSOLD - RANGESTART_PRESALE).div(FACTOR_PRESALE);\r\n\t\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//TIMING 11/01/17 Start Token Sale\r\n\t\tif(now>launch)\r\n\t\t{\r\n\t\t//Stage Post-Pre-Sale Range 0 - 10,000,000 \r\n\t\tif(OVERALLSOLD >= RANGESTART_PRESALE && OVERALLSOLD <= RANGEEND_PRESALE) \r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_PRESALE - (1 + OVERALLSOLD - RANGESTART_PRESALE).div(FACTOR_PRESALE);\r\n\t\t\t}\r\n\t\t\r\n\t\t//Stage One 10,000,001 - 10,100,000 \r\n\t\tif(OVERALLSOLD >= RANGESTART_1 && OVERALLSOLD <= RANGEEND_1)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_1 - (1 + OVERALLSOLD - RANGESTART_1).div(FACTOR_1);\r\n\t\t\t}\r\n\r\n\t\t//Stage Two 10,100,001 - 11,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_2 && OVERALLSOLD <= RANGEEND_2)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_2 - (1 + OVERALLSOLD - RANGESTART_2).div(FACTOR_2);\r\n\t\t\t}\r\n\r\n\t\t//Stage Three 11,000,001 - 15,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_3 && OVERALLSOLD <= RANGEEND_3)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_3 - (1 + OVERALLSOLD - RANGESTART_3).div(FACTOR_3);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t//Stage Four 15,000,001 - 20,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_4 && OVERALLSOLD <= RANGEEND_4)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_4 - (1 + OVERALLSOLD - RANGESTART_4).div(FACTOR_4);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t//Stage Five 20,000,001 - 30,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_5 && OVERALLSOLD <= RANGEEND_5)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_5 - (1 + OVERALLSOLD - RANGESTART_5).div(FACTOR_5);\r\n\t\t\t}\r\n\t\t\r\n\t\t//Stage Six 30,000,001 - 40,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_6 && OVERALLSOLD <= RANGEEND_6)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_6 - (1 + OVERALLSOLD - RANGESTART_6).div(FACTOR_6);\r\n\t\t\t}\t\r\n\t\t\r\n\t\t//Stage Seven 40,000,001 - 50,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_7 && OVERALLSOLD <= RANGEEND_7)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_7 - (1 + OVERALLSOLD - RANGESTART_7).div(FACTOR_7);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t//Stage Eight 50,000,001 - 60,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_8 && OVERALLSOLD <= RANGEEND_8)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_8 - (1 + OVERALLSOLD - RANGESTART_8).div(FACTOR_8);\r\n\t\t\t}\r\n\t\t\r\n\t\t//Stage Nine 60,000,001 - 70,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_9 && OVERALLSOLD <= RANGEEND_9)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_9 - (1 + OVERALLSOLD - RANGESTART_9).div(FACTOR_9);\r\n\t\t\t}\r\n\t\t\r\n\t\t//Stage Ten 70,000,001 - 80,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_10 && OVERALLSOLD <= RANGEEND_10)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_10 - (1 + OVERALLSOLD - RANGESTART_10).div(FACTOR_10);\r\n\t\t\t}\t\r\n\t\t\r\n\t\t//Stage Eleven 80,000,001 - 85,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_11 && OVERALLSOLD <= RANGEEND_11)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_11 - (1 + OVERALLSOLD - RANGESTART_11).div(FACTOR_11);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\r\n   }"
    ParameterList
       Gas costs: 0
       Source: "(address recipient)"
      VariableDeclaration "recipient"
         Type: address
         Source: "address recipient"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n     \tif (msg.value == 0) {\r\n       \t\tthrow;\r\n     \t}\r\n\t\t\r\n   \t \t//Permit buying only between 10/09/17 - 10/27/2017 and after 11/01/2017\r\n   \t \tif((now > start && now < end) || now > launch)\r\n   \t \t\t{\t\t\t\t\r\n        \t\tuint256 tokens = msg.value.mul(PRICE).div( 1 ether);\r\n        \t\tif(tokens.add(OVERALLSOLD) > MAXTOKENSOLD)\r\n   \t \t\t\t\t{\r\n   \t\t\t\t\tthrow;\r\n   \t\t\t\t\t}\r\n\t\t\r\n   \t\t\t\t//Pre-Sale CAP 10,000,000 check\r\n   \t\t\t\tif(((tokens.add(OVERALLSOLD)) > RANGEEND_PRESALE) && (now > start && now < end))\r\n   \t\t\t\t\t{\r\n   \t\t\t\t\tthrow;\r\n   \t\t\t\t\t}\r\n\t\t\r\n \t\t\t\t   \r\n        \t\tOVERALLSOLD = OVERALLSOLD.add(tokens);\t\r\n\t\r\n   \t\t \t    // Send UCN to Recipient\t\r\n        \t\tbalances[recipient] = balances[recipient].add(tokens);\r\n\t \r\n   \t \t\t\t// Send Funds to MultiSig\r\n        \t\tif (!multisig.send(msg.value)) {\r\n          \t\t\tthrow;\r\n        \t\t\t}\r\n        \t\tTransfer(address(this), recipient, tokens);\r\n       \t\t}\r\n   \t  \t  else\r\n   \t  \t\t\t{\r\n   \t  \t  \t\tthrow;\r\n   \t \t\t   \t}\r\n\t\t\r\n\t\t\r\n\t\t//TIMING 10/09/17 - 10/27/17 OR CAP 10,000,000 reached\r\n\t\t\r\n\t\tif(now>start && now <end)\r\n\t\t{\r\n\t\t\t//Stage Pre-Sale Range 0 - 10,000,000 \r\n\t\t\tif(OVERALLSOLD >= RANGESTART_PRESALE && OVERALLSOLD <= RANGEEND_PRESALE) \r\n\t\t\t\t{\r\n\t\t\t\tPRICE = PRICE_PRESALE - (1 + OVERALLSOLD - RANGESTART_PRESALE).div(FACTOR_PRESALE);\r\n\t\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//TIMING 11/01/17 Start Token Sale\r\n\t\tif(now>launch)\r\n\t\t{\r\n\t\t//Stage Post-Pre-Sale Range 0 - 10,000,000 \r\n\t\tif(OVERALLSOLD >= RANGESTART_PRESALE && OVERALLSOLD <= RANGEEND_PRESALE) \r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_PRESALE - (1 + OVERALLSOLD - RANGESTART_PRESALE).div(FACTOR_PRESALE);\r\n\t\t\t}\r\n\t\t\r\n\t\t//Stage One 10,000,001 - 10,100,000 \r\n\t\tif(OVERALLSOLD >= RANGESTART_1 && OVERALLSOLD <= RANGEEND_1)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_1 - (1 + OVERALLSOLD - RANGESTART_1).div(FACTOR_1);\r\n\t\t\t}\r\n\r\n\t\t//Stage Two 10,100,001 - 11,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_2 && OVERALLSOLD <= RANGEEND_2)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_2 - (1 + OVERALLSOLD - RANGESTART_2).div(FACTOR_2);\r\n\t\t\t}\r\n\r\n\t\t//Stage Three 11,000,001 - 15,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_3 && OVERALLSOLD <= RANGEEND_3)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_3 - (1 + OVERALLSOLD - RANGESTART_3).div(FACTOR_3);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t//Stage Four 15,000,001 - 20,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_4 && OVERALLSOLD <= RANGEEND_4)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_4 - (1 + OVERALLSOLD - RANGESTART_4).div(FACTOR_4);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t//Stage Five 20,000,001 - 30,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_5 && OVERALLSOLD <= RANGEEND_5)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_5 - (1 + OVERALLSOLD - RANGESTART_5).div(FACTOR_5);\r\n\t\t\t}\r\n\t\t\r\n\t\t//Stage Six 30,000,001 - 40,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_6 && OVERALLSOLD <= RANGEEND_6)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_6 - (1 + OVERALLSOLD - RANGESTART_6).div(FACTOR_6);\r\n\t\t\t}\t\r\n\t\t\r\n\t\t//Stage Seven 40,000,001 - 50,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_7 && OVERALLSOLD <= RANGEEND_7)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_7 - (1 + OVERALLSOLD - RANGESTART_7).div(FACTOR_7);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t//Stage Eight 50,000,001 - 60,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_8 && OVERALLSOLD <= RANGEEND_8)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_8 - (1 + OVERALLSOLD - RANGESTART_8).div(FACTOR_8);\r\n\t\t\t}\r\n\t\t\r\n\t\t//Stage Nine 60,000,001 - 70,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_9 && OVERALLSOLD <= RANGEEND_9)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_9 - (1 + OVERALLSOLD - RANGESTART_9).div(FACTOR_9);\r\n\t\t\t}\r\n\t\t\r\n\t\t//Stage Ten 70,000,001 - 80,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_10 && OVERALLSOLD <= RANGEEND_10)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_10 - (1 + OVERALLSOLD - RANGESTART_10).div(FACTOR_10);\r\n\t\t\t}\t\r\n\t\t\r\n\t\t//Stage Eleven 80,000,001 - 85,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_11 && OVERALLSOLD <= RANGEEND_11)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_11 - (1 + OVERALLSOLD - RANGESTART_11).div(FACTOR_11);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\r\n   }"
      IfStatement
         Source: "if (msg.value == 0) {\r\n       \t\tthrow;\r\n     \t}"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 8
           Source: "msg.value == 0"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n       \t\tthrow;\r\n     \t}"
          Throw
             Gas costs: 6
             Source: "throw"
      IfStatement
         Source: "if((now > start && now < end) || now > launch)\r\n   \t \t\t{\t\t\t\t\r\n        \t\tuint256 tokens = msg.value.mul(PRICE).div( 1 ether);\r\n        \t\tif(tokens.add(OVERALLSOLD) > MAXTOKENSOLD)\r\n   \t \t\t\t\t{\r\n   \t\t\t\t\tthrow;\r\n   \t\t\t\t\t}\r\n\t\t\r\n   \t\t\t\t//Pre-Sale CAP 10,000,000 check\r\n   \t\t\t\tif(((tokens.add(OVERALLSOLD)) > RANGEEND_PRESALE) && (now > start && now < end))\r\n   \t\t\t\t\t{\r\n   \t\t\t\t\tthrow;\r\n   \t\t\t\t\t}\r\n\t\t\r\n \t\t\t\t   \r\n        \t\tOVERALLSOLD = OVERALLSOLD.add(tokens);\t\r\n\t\r\n   \t\t \t    // Send UCN to Recipient\t\r\n        \t\tbalances[recipient] = balances[recipient].add(tokens);\r\n\t \r\n   \t \t\t\t// Send Funds to MultiSig\r\n        \t\tif (!multisig.send(msg.value)) {\r\n          \t\t\tthrow;\r\n        \t\t\t}\r\n        \t\tTransfer(address(this), recipient, tokens);\r\n       \t\t}\r\n   \t  \t  else\r\n   \t  \t\t\t{\r\n   \t  \t  \t\tthrow;\r\n   \t \t\t   \t}"
        BinaryOperation using operator ||
           Type: bool
           Gas costs: 665
           Source: "(now > start && now < end) || now > launch"
          TupleExpression
             Type: bool
             Source: "(now > start && now < end)"
            BinaryOperation using operator &&
               Type: bool
               Source: "now > start && now < end"
              BinaryOperation using operator >
                 Type: bool
                 Source: "now > start"
                Identifier now
                   Type: uint256
                   Source: "now"
                Identifier start
                   Type: uint256
                   Source: "start"
              BinaryOperation using operator <
                 Type: bool
                 Source: "now < end"
                Identifier now
                   Type: uint256
                   Source: "now"
                Identifier end
                   Type: uint256
                   Source: "end"
          BinaryOperation using operator >
             Type: bool
             Source: "now > launch"
            Identifier now
               Type: uint256
               Source: "now"
            Identifier launch
               Type: uint256
               Source: "launch"
        Block
           Source: "{\t\t\t\t\r\n        \t\tuint256 tokens = msg.value.mul(PRICE).div( 1 ether);\r\n        \t\tif(tokens.add(OVERALLSOLD) > MAXTOKENSOLD)\r\n   \t \t\t\t\t{\r\n   \t\t\t\t\tthrow;\r\n   \t\t\t\t\t}\r\n\t\t\r\n   \t\t\t\t//Pre-Sale CAP 10,000,000 check\r\n   \t\t\t\tif(((tokens.add(OVERALLSOLD)) > RANGEEND_PRESALE) && (now > start && now < end))\r\n   \t\t\t\t\t{\r\n   \t\t\t\t\tthrow;\r\n   \t\t\t\t\t}\r\n\t\t\r\n \t\t\t\t   \r\n        \t\tOVERALLSOLD = OVERALLSOLD.add(tokens);\t\r\n\t\r\n   \t\t \t    // Send UCN to Recipient\t\r\n        \t\tbalances[recipient] = balances[recipient].add(tokens);\r\n\t \r\n   \t \t\t\t// Send Funds to MultiSig\r\n        \t\tif (!multisig.send(msg.value)) {\r\n          \t\t\tthrow;\r\n        \t\t\t}\r\n        \t\tTransfer(address(this), recipient, tokens);\r\n       \t\t}"
          VariableDeclarationStatement
             Gas costs: 276
             Source: "uint256 tokens = msg.value.mul(PRICE).div( 1 ether)"
            VariableDeclaration "tokens"
               Type: uint256
               Source: "uint256 tokens"
              ElementaryTypeName uint256
                 Source: "uint256"
            FunctionCall
               Type: uint256
               Source: "msg.value.mul(PRICE).div( 1 ether)"
              MemberAccess to member div
                 Type: function (uint256,uint256) returns (uint256)
                 Source: "msg.value.mul(PRICE).div"
                FunctionCall
                   Type: uint256
                   Source: "msg.value.mul(PRICE)"
                  MemberAccess to member mul
                     Type: function (uint256,uint256) returns (uint256)
                     Source: "msg.value.mul"
                    MemberAccess to member value
                       Type: uint256
                       Source: "msg.value"
                      Identifier msg
                         Type: msg
                         Source: "msg"
                  Identifier PRICE
                     Type: uint256
                     Source: "PRICE"
              Literal, token: [no token] value: 1
                 Type: int_const 1000000000000000000
                 Source: "1 ether"
          IfStatement
             Source: "if(tokens.add(OVERALLSOLD) > MAXTOKENSOLD)\r\n   \t \t\t\t\t{\r\n   \t\t\t\t\tthrow;\r\n   \t\t\t\t\t}"
            BinaryOperation using operator >
               Type: bool
               Gas costs: 442
               Source: "tokens.add(OVERALLSOLD) > MAXTOKENSOLD"
              FunctionCall
                 Type: uint256
                 Source: "tokens.add(OVERALLSOLD)"
                MemberAccess to member add
                   Type: function (uint256,uint256) returns (uint256)
                   Source: "tokens.add"
                  Identifier tokens
                     Type: uint256
                     Source: "tokens"
                Identifier OVERALLSOLD
                   Type: uint256
                   Source: "OVERALLSOLD"
              Identifier MAXTOKENSOLD
                 Type: uint256
                 Source: "MAXTOKENSOLD"
            Block
               Source: "{\r\n   \t\t\t\t\tthrow;\r\n   \t\t\t\t\t}"
              Throw
                 Gas costs: 6
                 Source: "throw"
          IfStatement
             Source: "if(((tokens.add(OVERALLSOLD)) > RANGEEND_PRESALE) && (now > start && now < end))\r\n   \t\t\t\t\t{\r\n   \t\t\t\t\tthrow;\r\n   \t\t\t\t\t}"
            BinaryOperation using operator &&
               Type: bool
               Gas costs: 699
               Source: "((tokens.add(OVERALLSOLD)) > RANGEEND_PRESALE) && (now > start && now < end)"
              TupleExpression
                 Type: bool
                 Source: "((tokens.add(OVERALLSOLD)) > RANGEEND_PRESALE)"
                BinaryOperation using operator >
                   Type: bool
                   Source: "(tokens.add(OVERALLSOLD)) > RANGEEND_PRESALE"
                  TupleExpression
                     Type: uint256
                     Source: "(tokens.add(OVERALLSOLD))"
                    FunctionCall
                       Type: uint256
                       Source: "tokens.add(OVERALLSOLD)"
                      MemberAccess to member add
                         Type: function (uint256,uint256) returns (uint256)
                         Source: "tokens.add"
                        Identifier tokens
                           Type: uint256
                           Source: "tokens"
                      Identifier OVERALLSOLD
                         Type: uint256
                         Source: "OVERALLSOLD"
                  Identifier RANGEEND_PRESALE
                     Type: uint256
                     Source: "RANGEEND_PRESALE"
              TupleExpression
                 Type: bool
                 Source: "(now > start && now < end)"
                BinaryOperation using operator &&
                   Type: bool
                   Source: "now > start && now < end"
                  BinaryOperation using operator >
                     Type: bool
                     Source: "now > start"
                    Identifier now
                       Type: uint256
                       Source: "now"
                    Identifier start
                       Type: uint256
                       Source: "start"
                  BinaryOperation using operator <
                     Type: bool
                     Source: "now < end"
                    Identifier now
                       Type: uint256
                       Source: "now"
                    Identifier end
                       Type: uint256
                       Source: "end"
            Block
               Source: "{\r\n   \t\t\t\t\tthrow;\r\n   \t\t\t\t\t}"
              Throw
                 Gas costs: 6
                 Source: "throw"
          ExpressionStatement
             Gas costs: 20247
             Source: "OVERALLSOLD = OVERALLSOLD.add(tokens)"
            Assignment using operator =
               Type: uint256
               Source: "OVERALLSOLD = OVERALLSOLD.add(tokens)"
              Identifier OVERALLSOLD
                 Type: uint256
                 Source: "OVERALLSOLD"
              FunctionCall
                 Type: uint256
                 Source: "OVERALLSOLD.add(tokens)"
                MemberAccess to member add
                   Type: function (uint256,uint256) returns (uint256)
                   Source: "OVERALLSOLD.add"
                  Identifier OVERALLSOLD
                     Type: uint256
                     Source: "OVERALLSOLD"
                Identifier tokens
                   Type: uint256
                   Source: "tokens"
          ExpressionStatement
             Gas costs: 20439
             Source: "balances[recipient] = balances[recipient].add(tokens)"
            Assignment using operator =
               Type: uint256
               Source: "balances[recipient] = balances[recipient].add(tokens)"
              IndexAccess
                 Type: uint256
                 Source: "balances[recipient]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier recipient
                   Type: address
                   Source: "recipient"
              FunctionCall
                 Type: uint256
                 Source: "balances[recipient].add(tokens)"
                MemberAccess to member add
                   Type: function (uint256,uint256) returns (uint256)
                   Source: "balances[recipient].add"
                  IndexAccess
                     Type: uint256
                     Source: "balances[recipient]"
                    Identifier balances
                       Type: mapping(address => uint256)
                       Source: "balances"
                    Identifier recipient
                       Type: address
                       Source: "recipient"
                Identifier tokens
                   Type: uint256
                   Source: "tokens"
          IfStatement
             Source: "if (!multisig.send(msg.value)) {\r\n          \t\t\tthrow;\r\n        \t\t\t}"
            UnaryOperation (prefix) !
               Type: bool
               Gas costs: [???]
               Source: "!multisig.send(msg.value)"
              FunctionCall
                 Type: bool
                 Source: "multisig.send(msg.value)"
                MemberAccess to member send
                   Type: function (uint256) returns (bool)
                   Source: "multisig.send"
                  Identifier multisig
                     Type: address
                     Source: "multisig"
                MemberAccess to member value
                   Type: uint256
                   Source: "msg.value"
                  Identifier msg
                     Type: msg
                     Source: "msg"
            Block
               Source: "{\r\n          \t\t\tthrow;\r\n        \t\t\t}"
              Throw
                 Gas costs: 6
                 Source: "throw"
          ExpressionStatement
             Gas costs: [???]
             Source: "Transfer(address(this), recipient, tokens)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(address(this), recipient, tokens)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              FunctionCall
                 Type: address
                 Source: "address(this)"
                ElementaryTypeNameExpression address
                   Type: type(address)
                   Source: "address"
                Identifier this
                   Type: contract UniContract
                   Source: "this"
              Identifier recipient
                 Type: address
                 Source: "recipient"
              Identifier tokens
                 Type: uint256
                 Source: "tokens"
        Block
           Source: "{\r\n   \t  \t  \t\tthrow;\r\n   \t \t\t   \t}"
          Throw
             Gas costs: 6
             Source: "throw"
      IfStatement
         Source: "if(now>start && now <end)\r\n\t\t{\r\n\t\t\t//Stage Pre-Sale Range 0 - 10,000,000 \r\n\t\t\tif(OVERALLSOLD >= RANGESTART_PRESALE && OVERALLSOLD <= RANGEEND_PRESALE) \r\n\t\t\t\t{\r\n\t\t\t\tPRICE = PRICE_PRESALE - (1 + OVERALLSOLD - RANGESTART_PRESALE).div(FACTOR_PRESALE);\r\n\t\t\t\t}\r\n\t\t}"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 438
           Source: "now>start && now <end"
          BinaryOperation using operator >
             Type: bool
             Source: "now>start"
            Identifier now
               Type: uint256
               Source: "now"
            Identifier start
               Type: uint256
               Source: "start"
          BinaryOperation using operator <
             Type: bool
             Source: "now <end"
            Identifier now
               Type: uint256
               Source: "now"
            Identifier end
               Type: uint256
               Source: "end"
        Block
           Source: "{\r\n\t\t\t//Stage Pre-Sale Range 0 - 10,000,000 \r\n\t\t\tif(OVERALLSOLD >= RANGESTART_PRESALE && OVERALLSOLD <= RANGEEND_PRESALE) \r\n\t\t\t\t{\r\n\t\t\t\tPRICE = PRICE_PRESALE - (1 + OVERALLSOLD - RANGESTART_PRESALE).div(FACTOR_PRESALE);\r\n\t\t\t\t}\r\n\t\t}"
          IfStatement
             Source: "if(OVERALLSOLD >= RANGESTART_PRESALE && OVERALLSOLD <= RANGEEND_PRESALE) \r\n\t\t\t\t{\r\n\t\t\t\tPRICE = PRICE_PRESALE - (1 + OVERALLSOLD - RANGESTART_PRESALE).div(FACTOR_PRESALE);\r\n\t\t\t\t}"
            BinaryOperation using operator &&
               Type: bool
               Gas costs: 440
               Source: "OVERALLSOLD >= RANGESTART_PRESALE && OVERALLSOLD <= RANGEEND_PRESALE"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "OVERALLSOLD >= RANGESTART_PRESALE"
                Identifier OVERALLSOLD
                   Type: uint256
                   Source: "OVERALLSOLD"
                Identifier RANGESTART_PRESALE
                   Type: uint256
                   Source: "RANGESTART_PRESALE"
              BinaryOperation using operator <=
                 Type: bool
                 Source: "OVERALLSOLD <= RANGEEND_PRESALE"
                Identifier OVERALLSOLD
                   Type: uint256
                   Source: "OVERALLSOLD"
                Identifier RANGEEND_PRESALE
                   Type: uint256
                   Source: "RANGEEND_PRESALE"
            Block
               Source: "{\r\n\t\t\t\tPRICE = PRICE_PRESALE - (1 + OVERALLSOLD - RANGESTART_PRESALE).div(FACTOR_PRESALE);\r\n\t\t\t\t}"
              ExpressionStatement
                 Gas costs: 20256
                 Source: "PRICE = PRICE_PRESALE - (1 + OVERALLSOLD - RANGESTART_PRESALE).div(FACTOR_PRESALE)"
                Assignment using operator =
                   Type: uint256
                   Source: "PRICE = PRICE_PRESALE - (1 + OVERALLSOLD - RANGESTART_PRESALE).div(FACTOR_PRESALE)"
                  Identifier PRICE
                     Type: uint256
                     Source: "PRICE"
                  BinaryOperation using operator -
                     Type: uint256
                     Source: "PRICE_PRESALE - (1 + OVERALLSOLD - RANGESTART_PRESALE).div(FACTOR_PRESALE)"
                    Identifier PRICE_PRESALE
                       Type: uint256
                       Source: "PRICE_PRESALE"
                    FunctionCall
                       Type: uint256
                       Source: "(1 + OVERALLSOLD - RANGESTART_PRESALE).div(FACTOR_PRESALE)"
                      MemberAccess to member div
                         Type: function (uint256,uint256) returns (uint256)
                         Source: "(1 + OVERALLSOLD - RANGESTART_PRESALE).div"
                        TupleExpression
                           Type: uint256
                           Source: "(1 + OVERALLSOLD - RANGESTART_PRESALE)"
                          BinaryOperation using operator -
                             Type: uint256
                             Source: "1 + OVERALLSOLD - RANGESTART_PRESALE"
                            BinaryOperation using operator +
                               Type: uint256
                               Source: "1 + OVERALLSOLD"
                              Literal, token: [no token] value: 1
                                 Type: int_const 1
                                 Source: "1"
                              Identifier OVERALLSOLD
                                 Type: uint256
                                 Source: "OVERALLSOLD"
                            Identifier RANGESTART_PRESALE
                               Type: uint256
                               Source: "RANGESTART_PRESALE"
                      Identifier FACTOR_PRESALE
                         Type: uint256
                         Source: "FACTOR_PRESALE"
      IfStatement
         Source: "if(now>launch)\r\n\t\t{\r\n\t\t//Stage Post-Pre-Sale Range 0 - 10,000,000 \r\n\t\tif(OVERALLSOLD >= RANGESTART_PRESALE && OVERALLSOLD <= RANGEEND_PRESALE) \r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_PRESALE - (1 + OVERALLSOLD - RANGESTART_PRESALE).div(FACTOR_PRESALE);\r\n\t\t\t}\r\n\t\t\r\n\t\t//Stage One 10,000,001 - 10,100,000 \r\n\t\tif(OVERALLSOLD >= RANGESTART_1 && OVERALLSOLD <= RANGEEND_1)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_1 - (1 + OVERALLSOLD - RANGESTART_1).div(FACTOR_1);\r\n\t\t\t}\r\n\r\n\t\t//Stage Two 10,100,001 - 11,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_2 && OVERALLSOLD <= RANGEEND_2)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_2 - (1 + OVERALLSOLD - RANGESTART_2).div(FACTOR_2);\r\n\t\t\t}\r\n\r\n\t\t//Stage Three 11,000,001 - 15,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_3 && OVERALLSOLD <= RANGEEND_3)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_3 - (1 + OVERALLSOLD - RANGESTART_3).div(FACTOR_3);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t//Stage Four 15,000,001 - 20,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_4 && OVERALLSOLD <= RANGEEND_4)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_4 - (1 + OVERALLSOLD - RANGESTART_4).div(FACTOR_4);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t//Stage Five 20,000,001 - 30,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_5 && OVERALLSOLD <= RANGEEND_5)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_5 - (1 + OVERALLSOLD - RANGESTART_5).div(FACTOR_5);\r\n\t\t\t}\r\n\t\t\r\n\t\t//Stage Six 30,000,001 - 40,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_6 && OVERALLSOLD <= RANGEEND_6)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_6 - (1 + OVERALLSOLD - RANGESTART_6).div(FACTOR_6);\r\n\t\t\t}\t\r\n\t\t\r\n\t\t//Stage Seven 40,000,001 - 50,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_7 && OVERALLSOLD <= RANGEEND_7)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_7 - (1 + OVERALLSOLD - RANGESTART_7).div(FACTOR_7);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t//Stage Eight 50,000,001 - 60,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_8 && OVERALLSOLD <= RANGEEND_8)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_8 - (1 + OVERALLSOLD - RANGESTART_8).div(FACTOR_8);\r\n\t\t\t}\r\n\t\t\r\n\t\t//Stage Nine 60,000,001 - 70,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_9 && OVERALLSOLD <= RANGEEND_9)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_9 - (1 + OVERALLSOLD - RANGESTART_9).div(FACTOR_9);\r\n\t\t\t}\r\n\t\t\r\n\t\t//Stage Ten 70,000,001 - 80,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_10 && OVERALLSOLD <= RANGEEND_10)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_10 - (1 + OVERALLSOLD - RANGESTART_10).div(FACTOR_10);\r\n\t\t\t}\t\r\n\t\t\r\n\t\t//Stage Eleven 80,000,001 - 85,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_11 && OVERALLSOLD <= RANGEEND_11)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_11 - (1 + OVERALLSOLD - RANGESTART_11).div(FACTOR_11);\r\n\t\t\t}\r\n\t\t}"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 208
           Source: "now>launch"
          Identifier now
             Type: uint256
             Source: "now"
          Identifier launch
             Type: uint256
             Source: "launch"
        Block
           Source: "{\r\n\t\t//Stage Post-Pre-Sale Range 0 - 10,000,000 \r\n\t\tif(OVERALLSOLD >= RANGESTART_PRESALE && OVERALLSOLD <= RANGEEND_PRESALE) \r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_PRESALE - (1 + OVERALLSOLD - RANGESTART_PRESALE).div(FACTOR_PRESALE);\r\n\t\t\t}\r\n\t\t\r\n\t\t//Stage One 10,000,001 - 10,100,000 \r\n\t\tif(OVERALLSOLD >= RANGESTART_1 && OVERALLSOLD <= RANGEEND_1)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_1 - (1 + OVERALLSOLD - RANGESTART_1).div(FACTOR_1);\r\n\t\t\t}\r\n\r\n\t\t//Stage Two 10,100,001 - 11,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_2 && OVERALLSOLD <= RANGEEND_2)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_2 - (1 + OVERALLSOLD - RANGESTART_2).div(FACTOR_2);\r\n\t\t\t}\r\n\r\n\t\t//Stage Three 11,000,001 - 15,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_3 && OVERALLSOLD <= RANGEEND_3)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_3 - (1 + OVERALLSOLD - RANGESTART_3).div(FACTOR_3);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t//Stage Four 15,000,001 - 20,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_4 && OVERALLSOLD <= RANGEEND_4)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_4 - (1 + OVERALLSOLD - RANGESTART_4).div(FACTOR_4);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t//Stage Five 20,000,001 - 30,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_5 && OVERALLSOLD <= RANGEEND_5)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_5 - (1 + OVERALLSOLD - RANGESTART_5).div(FACTOR_5);\r\n\t\t\t}\r\n\t\t\r\n\t\t//Stage Six 30,000,001 - 40,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_6 && OVERALLSOLD <= RANGEEND_6)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_6 - (1 + OVERALLSOLD - RANGESTART_6).div(FACTOR_6);\r\n\t\t\t}\t\r\n\t\t\r\n\t\t//Stage Seven 40,000,001 - 50,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_7 && OVERALLSOLD <= RANGEEND_7)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_7 - (1 + OVERALLSOLD - RANGESTART_7).div(FACTOR_7);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t//Stage Eight 50,000,001 - 60,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_8 && OVERALLSOLD <= RANGEEND_8)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_8 - (1 + OVERALLSOLD - RANGESTART_8).div(FACTOR_8);\r\n\t\t\t}\r\n\t\t\r\n\t\t//Stage Nine 60,000,001 - 70,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_9 && OVERALLSOLD <= RANGEEND_9)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_9 - (1 + OVERALLSOLD - RANGESTART_9).div(FACTOR_9);\r\n\t\t\t}\r\n\t\t\r\n\t\t//Stage Ten 70,000,001 - 80,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_10 && OVERALLSOLD <= RANGEEND_10)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_10 - (1 + OVERALLSOLD - RANGESTART_10).div(FACTOR_10);\r\n\t\t\t}\t\r\n\t\t\r\n\t\t//Stage Eleven 80,000,001 - 85,000,000\r\n\t\tif(OVERALLSOLD >= RANGESTART_11 && OVERALLSOLD <= RANGEEND_11)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_11 - (1 + OVERALLSOLD - RANGESTART_11).div(FACTOR_11);\r\n\t\t\t}\r\n\t\t}"
          IfStatement
             Source: "if(OVERALLSOLD >= RANGESTART_PRESALE && OVERALLSOLD <= RANGEEND_PRESALE) \r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_PRESALE - (1 + OVERALLSOLD - RANGESTART_PRESALE).div(FACTOR_PRESALE);\r\n\t\t\t}"
            BinaryOperation using operator &&
               Type: bool
               Gas costs: 440
               Source: "OVERALLSOLD >= RANGESTART_PRESALE && OVERALLSOLD <= RANGEEND_PRESALE"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "OVERALLSOLD >= RANGESTART_PRESALE"
                Identifier OVERALLSOLD
                   Type: uint256
                   Source: "OVERALLSOLD"
                Identifier RANGESTART_PRESALE
                   Type: uint256
                   Source: "RANGESTART_PRESALE"
              BinaryOperation using operator <=
                 Type: bool
                 Source: "OVERALLSOLD <= RANGEEND_PRESALE"
                Identifier OVERALLSOLD
                   Type: uint256
                   Source: "OVERALLSOLD"
                Identifier RANGEEND_PRESALE
                   Type: uint256
                   Source: "RANGEEND_PRESALE"
            Block
               Source: "{\r\n\t\t\tPRICE = PRICE_PRESALE - (1 + OVERALLSOLD - RANGESTART_PRESALE).div(FACTOR_PRESALE);\r\n\t\t\t}"
              ExpressionStatement
                 Gas costs: 20256
                 Source: "PRICE = PRICE_PRESALE - (1 + OVERALLSOLD - RANGESTART_PRESALE).div(FACTOR_PRESALE)"
                Assignment using operator =
                   Type: uint256
                   Source: "PRICE = PRICE_PRESALE - (1 + OVERALLSOLD - RANGESTART_PRESALE).div(FACTOR_PRESALE)"
                  Identifier PRICE
                     Type: uint256
                     Source: "PRICE"
                  BinaryOperation using operator -
                     Type: uint256
                     Source: "PRICE_PRESALE - (1 + OVERALLSOLD - RANGESTART_PRESALE).div(FACTOR_PRESALE)"
                    Identifier PRICE_PRESALE
                       Type: uint256
                       Source: "PRICE_PRESALE"
                    FunctionCall
                       Type: uint256
                       Source: "(1 + OVERALLSOLD - RANGESTART_PRESALE).div(FACTOR_PRESALE)"
                      MemberAccess to member div
                         Type: function (uint256,uint256) returns (uint256)
                         Source: "(1 + OVERALLSOLD - RANGESTART_PRESALE).div"
                        TupleExpression
                           Type: uint256
                           Source: "(1 + OVERALLSOLD - RANGESTART_PRESALE)"
                          BinaryOperation using operator -
                             Type: uint256
                             Source: "1 + OVERALLSOLD - RANGESTART_PRESALE"
                            BinaryOperation using operator +
                               Type: uint256
                               Source: "1 + OVERALLSOLD"
                              Literal, token: [no token] value: 1
                                 Type: int_const 1
                                 Source: "1"
                              Identifier OVERALLSOLD
                                 Type: uint256
                                 Source: "OVERALLSOLD"
                            Identifier RANGESTART_PRESALE
                               Type: uint256
                               Source: "RANGESTART_PRESALE"
                      Identifier FACTOR_PRESALE
                         Type: uint256
                         Source: "FACTOR_PRESALE"
          IfStatement
             Source: "if(OVERALLSOLD >= RANGESTART_1 && OVERALLSOLD <= RANGEEND_1)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_1 - (1 + OVERALLSOLD - RANGESTART_1).div(FACTOR_1);\r\n\t\t\t}"
            BinaryOperation using operator &&
               Type: bool
               Gas costs: 440
               Source: "OVERALLSOLD >= RANGESTART_1 && OVERALLSOLD <= RANGEEND_1"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "OVERALLSOLD >= RANGESTART_1"
                Identifier OVERALLSOLD
                   Type: uint256
                   Source: "OVERALLSOLD"
                Identifier RANGESTART_1
                   Type: uint256
                   Source: "RANGESTART_1"
              BinaryOperation using operator <=
                 Type: bool
                 Source: "OVERALLSOLD <= RANGEEND_1"
                Identifier OVERALLSOLD
                   Type: uint256
                   Source: "OVERALLSOLD"
                Identifier RANGEEND_1
                   Type: uint256
                   Source: "RANGEEND_1"
            Block
               Source: "{\r\n\t\t\tPRICE = PRICE_1 - (1 + OVERALLSOLD - RANGESTART_1).div(FACTOR_1);\r\n\t\t\t}"
              ExpressionStatement
                 Gas costs: 20256
                 Source: "PRICE = PRICE_1 - (1 + OVERALLSOLD - RANGESTART_1).div(FACTOR_1)"
                Assignment using operator =
                   Type: uint256
                   Source: "PRICE = PRICE_1 - (1 + OVERALLSOLD - RANGESTART_1).div(FACTOR_1)"
                  Identifier PRICE
                     Type: uint256
                     Source: "PRICE"
                  BinaryOperation using operator -
                     Type: uint256
                     Source: "PRICE_1 - (1 + OVERALLSOLD - RANGESTART_1).div(FACTOR_1)"
                    Identifier PRICE_1
                       Type: uint256
                       Source: "PRICE_1"
                    FunctionCall
                       Type: uint256
                       Source: "(1 + OVERALLSOLD - RANGESTART_1).div(FACTOR_1)"
                      MemberAccess to member div
                         Type: function (uint256,uint256) returns (uint256)
                         Source: "(1 + OVERALLSOLD - RANGESTART_1).div"
                        TupleExpression
                           Type: uint256
                           Source: "(1 + OVERALLSOLD - RANGESTART_1)"
                          BinaryOperation using operator -
                             Type: uint256
                             Source: "1 + OVERALLSOLD - RANGESTART_1"
                            BinaryOperation using operator +
                               Type: uint256
                               Source: "1 + OVERALLSOLD"
                              Literal, token: [no token] value: 1
                                 Type: int_const 1
                                 Source: "1"
                              Identifier OVERALLSOLD
                                 Type: uint256
                                 Source: "OVERALLSOLD"
                            Identifier RANGESTART_1
                               Type: uint256
                               Source: "RANGESTART_1"
                      Identifier FACTOR_1
                         Type: uint256
                         Source: "FACTOR_1"
          IfStatement
             Source: "if(OVERALLSOLD >= RANGESTART_2 && OVERALLSOLD <= RANGEEND_2)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_2 - (1 + OVERALLSOLD - RANGESTART_2).div(FACTOR_2);\r\n\t\t\t}"
            BinaryOperation using operator &&
               Type: bool
               Gas costs: 440
               Source: "OVERALLSOLD >= RANGESTART_2 && OVERALLSOLD <= RANGEEND_2"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "OVERALLSOLD >= RANGESTART_2"
                Identifier OVERALLSOLD
                   Type: uint256
                   Source: "OVERALLSOLD"
                Identifier RANGESTART_2
                   Type: uint256
                   Source: "RANGESTART_2"
              BinaryOperation using operator <=
                 Type: bool
                 Source: "OVERALLSOLD <= RANGEEND_2"
                Identifier OVERALLSOLD
                   Type: uint256
                   Source: "OVERALLSOLD"
                Identifier RANGEEND_2
                   Type: uint256
                   Source: "RANGEEND_2"
            Block
               Source: "{\r\n\t\t\tPRICE = PRICE_2 - (1 + OVERALLSOLD - RANGESTART_2).div(FACTOR_2);\r\n\t\t\t}"
              ExpressionStatement
                 Gas costs: 20256
                 Source: "PRICE = PRICE_2 - (1 + OVERALLSOLD - RANGESTART_2).div(FACTOR_2)"
                Assignment using operator =
                   Type: uint256
                   Source: "PRICE = PRICE_2 - (1 + OVERALLSOLD - RANGESTART_2).div(FACTOR_2)"
                  Identifier PRICE
                     Type: uint256
                     Source: "PRICE"
                  BinaryOperation using operator -
                     Type: uint256
                     Source: "PRICE_2 - (1 + OVERALLSOLD - RANGESTART_2).div(FACTOR_2)"
                    Identifier PRICE_2
                       Type: uint256
                       Source: "PRICE_2"
                    FunctionCall
                       Type: uint256
                       Source: "(1 + OVERALLSOLD - RANGESTART_2).div(FACTOR_2)"
                      MemberAccess to member div
                         Type: function (uint256,uint256) returns (uint256)
                         Source: "(1 + OVERALLSOLD - RANGESTART_2).div"
                        TupleExpression
                           Type: uint256
                           Source: "(1 + OVERALLSOLD - RANGESTART_2)"
                          BinaryOperation using operator -
                             Type: uint256
                             Source: "1 + OVERALLSOLD - RANGESTART_2"
                            BinaryOperation using operator +
                               Type: uint256
                               Source: "1 + OVERALLSOLD"
                              Literal, token: [no token] value: 1
                                 Type: int_const 1
                                 Source: "1"
                              Identifier OVERALLSOLD
                                 Type: uint256
                                 Source: "OVERALLSOLD"
                            Identifier RANGESTART_2
                               Type: uint256
                               Source: "RANGESTART_2"
                      Identifier FACTOR_2
                         Type: uint256
                         Source: "FACTOR_2"
          IfStatement
             Source: "if(OVERALLSOLD >= RANGESTART_3 && OVERALLSOLD <= RANGEEND_3)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_3 - (1 + OVERALLSOLD - RANGESTART_3).div(FACTOR_3);\r\n\t\t\t}"
            BinaryOperation using operator &&
               Type: bool
               Gas costs: 440
               Source: "OVERALLSOLD >= RANGESTART_3 && OVERALLSOLD <= RANGEEND_3"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "OVERALLSOLD >= RANGESTART_3"
                Identifier OVERALLSOLD
                   Type: uint256
                   Source: "OVERALLSOLD"
                Identifier RANGESTART_3
                   Type: uint256
                   Source: "RANGESTART_3"
              BinaryOperation using operator <=
                 Type: bool
                 Source: "OVERALLSOLD <= RANGEEND_3"
                Identifier OVERALLSOLD
                   Type: uint256
                   Source: "OVERALLSOLD"
                Identifier RANGEEND_3
                   Type: uint256
                   Source: "RANGEEND_3"
            Block
               Source: "{\r\n\t\t\tPRICE = PRICE_3 - (1 + OVERALLSOLD - RANGESTART_3).div(FACTOR_3);\r\n\t\t\t}"
              ExpressionStatement
                 Gas costs: 20256
                 Source: "PRICE = PRICE_3 - (1 + OVERALLSOLD - RANGESTART_3).div(FACTOR_3)"
                Assignment using operator =
                   Type: uint256
                   Source: "PRICE = PRICE_3 - (1 + OVERALLSOLD - RANGESTART_3).div(FACTOR_3)"
                  Identifier PRICE
                     Type: uint256
                     Source: "PRICE"
                  BinaryOperation using operator -
                     Type: uint256
                     Source: "PRICE_3 - (1 + OVERALLSOLD - RANGESTART_3).div(FACTOR_3)"
                    Identifier PRICE_3
                       Type: uint256
                       Source: "PRICE_3"
                    FunctionCall
                       Type: uint256
                       Source: "(1 + OVERALLSOLD - RANGESTART_3).div(FACTOR_3)"
                      MemberAccess to member div
                         Type: function (uint256,uint256) returns (uint256)
                         Source: "(1 + OVERALLSOLD - RANGESTART_3).div"
                        TupleExpression
                           Type: uint256
                           Source: "(1 + OVERALLSOLD - RANGESTART_3)"
                          BinaryOperation using operator -
                             Type: uint256
                             Source: "1 + OVERALLSOLD - RANGESTART_3"
                            BinaryOperation using operator +
                               Type: uint256
                               Source: "1 + OVERALLSOLD"
                              Literal, token: [no token] value: 1
                                 Type: int_const 1
                                 Source: "1"
                              Identifier OVERALLSOLD
                                 Type: uint256
                                 Source: "OVERALLSOLD"
                            Identifier RANGESTART_3
                               Type: uint256
                               Source: "RANGESTART_3"
                      Identifier FACTOR_3
                         Type: uint256
                         Source: "FACTOR_3"
          IfStatement
             Source: "if(OVERALLSOLD >= RANGESTART_4 && OVERALLSOLD <= RANGEEND_4)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_4 - (1 + OVERALLSOLD - RANGESTART_4).div(FACTOR_4);\r\n\t\t\t}"
            BinaryOperation using operator &&
               Type: bool
               Gas costs: 440
               Source: "OVERALLSOLD >= RANGESTART_4 && OVERALLSOLD <= RANGEEND_4"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "OVERALLSOLD >= RANGESTART_4"
                Identifier OVERALLSOLD
                   Type: uint256
                   Source: "OVERALLSOLD"
                Identifier RANGESTART_4
                   Type: uint256
                   Source: "RANGESTART_4"
              BinaryOperation using operator <=
                 Type: bool
                 Source: "OVERALLSOLD <= RANGEEND_4"
                Identifier OVERALLSOLD
                   Type: uint256
                   Source: "OVERALLSOLD"
                Identifier RANGEEND_4
                   Type: uint256
                   Source: "RANGEEND_4"
            Block
               Source: "{\r\n\t\t\tPRICE = PRICE_4 - (1 + OVERALLSOLD - RANGESTART_4).div(FACTOR_4);\r\n\t\t\t}"
              ExpressionStatement
                 Gas costs: 20256
                 Source: "PRICE = PRICE_4 - (1 + OVERALLSOLD - RANGESTART_4).div(FACTOR_4)"
                Assignment using operator =
                   Type: uint256
                   Source: "PRICE = PRICE_4 - (1 + OVERALLSOLD - RANGESTART_4).div(FACTOR_4)"
                  Identifier PRICE
                     Type: uint256
                     Source: "PRICE"
                  BinaryOperation using operator -
                     Type: uint256
                     Source: "PRICE_4 - (1 + OVERALLSOLD - RANGESTART_4).div(FACTOR_4)"
                    Identifier PRICE_4
                       Type: uint256
                       Source: "PRICE_4"
                    FunctionCall
                       Type: uint256
                       Source: "(1 + OVERALLSOLD - RANGESTART_4).div(FACTOR_4)"
                      MemberAccess to member div
                         Type: function (uint256,uint256) returns (uint256)
                         Source: "(1 + OVERALLSOLD - RANGESTART_4).div"
                        TupleExpression
                           Type: uint256
                           Source: "(1 + OVERALLSOLD - RANGESTART_4)"
                          BinaryOperation using operator -
                             Type: uint256
                             Source: "1 + OVERALLSOLD - RANGESTART_4"
                            BinaryOperation using operator +
                               Type: uint256
                               Source: "1 + OVERALLSOLD"
                              Literal, token: [no token] value: 1
                                 Type: int_const 1
                                 Source: "1"
                              Identifier OVERALLSOLD
                                 Type: uint256
                                 Source: "OVERALLSOLD"
                            Identifier RANGESTART_4
                               Type: uint256
                               Source: "RANGESTART_4"
                      Identifier FACTOR_4
                         Type: uint256
                         Source: "FACTOR_4"
          IfStatement
             Source: "if(OVERALLSOLD >= RANGESTART_5 && OVERALLSOLD <= RANGEEND_5)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_5 - (1 + OVERALLSOLD - RANGESTART_5).div(FACTOR_5);\r\n\t\t\t}"
            BinaryOperation using operator &&
               Type: bool
               Gas costs: 440
               Source: "OVERALLSOLD >= RANGESTART_5 && OVERALLSOLD <= RANGEEND_5"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "OVERALLSOLD >= RANGESTART_5"
                Identifier OVERALLSOLD
                   Type: uint256
                   Source: "OVERALLSOLD"
                Identifier RANGESTART_5
                   Type: uint256
                   Source: "RANGESTART_5"
              BinaryOperation using operator <=
                 Type: bool
                 Source: "OVERALLSOLD <= RANGEEND_5"
                Identifier OVERALLSOLD
                   Type: uint256
                   Source: "OVERALLSOLD"
                Identifier RANGEEND_5
                   Type: uint256
                   Source: "RANGEEND_5"
            Block
               Source: "{\r\n\t\t\tPRICE = PRICE_5 - (1 + OVERALLSOLD - RANGESTART_5).div(FACTOR_5);\r\n\t\t\t}"
              ExpressionStatement
                 Gas costs: 20256
                 Source: "PRICE = PRICE_5 - (1 + OVERALLSOLD - RANGESTART_5).div(FACTOR_5)"
                Assignment using operator =
                   Type: uint256
                   Source: "PRICE = PRICE_5 - (1 + OVERALLSOLD - RANGESTART_5).div(FACTOR_5)"
                  Identifier PRICE
                     Type: uint256
                     Source: "PRICE"
                  BinaryOperation using operator -
                     Type: uint256
                     Source: "PRICE_5 - (1 + OVERALLSOLD - RANGESTART_5).div(FACTOR_5)"
                    Identifier PRICE_5
                       Type: uint256
                       Source: "PRICE_5"
                    FunctionCall
                       Type: uint256
                       Source: "(1 + OVERALLSOLD - RANGESTART_5).div(FACTOR_5)"
                      MemberAccess to member div
                         Type: function (uint256,uint256) returns (uint256)
                         Source: "(1 + OVERALLSOLD - RANGESTART_5).div"
                        TupleExpression
                           Type: uint256
                           Source: "(1 + OVERALLSOLD - RANGESTART_5)"
                          BinaryOperation using operator -
                             Type: uint256
                             Source: "1 + OVERALLSOLD - RANGESTART_5"
                            BinaryOperation using operator +
                               Type: uint256
                               Source: "1 + OVERALLSOLD"
                              Literal, token: [no token] value: 1
                                 Type: int_const 1
                                 Source: "1"
                              Identifier OVERALLSOLD
                                 Type: uint256
                                 Source: "OVERALLSOLD"
                            Identifier RANGESTART_5
                               Type: uint256
                               Source: "RANGESTART_5"
                      Identifier FACTOR_5
                         Type: uint256
                         Source: "FACTOR_5"
          IfStatement
             Source: "if(OVERALLSOLD >= RANGESTART_6 && OVERALLSOLD <= RANGEEND_6)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_6 - (1 + OVERALLSOLD - RANGESTART_6).div(FACTOR_6);\r\n\t\t\t}"
            BinaryOperation using operator &&
               Type: bool
               Gas costs: 440
               Source: "OVERALLSOLD >= RANGESTART_6 && OVERALLSOLD <= RANGEEND_6"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "OVERALLSOLD >= RANGESTART_6"
                Identifier OVERALLSOLD
                   Type: uint256
                   Source: "OVERALLSOLD"
                Identifier RANGESTART_6
                   Type: uint256
                   Source: "RANGESTART_6"
              BinaryOperation using operator <=
                 Type: bool
                 Source: "OVERALLSOLD <= RANGEEND_6"
                Identifier OVERALLSOLD
                   Type: uint256
                   Source: "OVERALLSOLD"
                Identifier RANGEEND_6
                   Type: uint256
                   Source: "RANGEEND_6"
            Block
               Source: "{\r\n\t\t\tPRICE = PRICE_6 - (1 + OVERALLSOLD - RANGESTART_6).div(FACTOR_6);\r\n\t\t\t}"
              ExpressionStatement
                 Gas costs: 20256
                 Source: "PRICE = PRICE_6 - (1 + OVERALLSOLD - RANGESTART_6).div(FACTOR_6)"
                Assignment using operator =
                   Type: uint256
                   Source: "PRICE = PRICE_6 - (1 + OVERALLSOLD - RANGESTART_6).div(FACTOR_6)"
                  Identifier PRICE
                     Type: uint256
                     Source: "PRICE"
                  BinaryOperation using operator -
                     Type: uint256
                     Source: "PRICE_6 - (1 + OVERALLSOLD - RANGESTART_6).div(FACTOR_6)"
                    Identifier PRICE_6
                       Type: uint256
                       Source: "PRICE_6"
                    FunctionCall
                       Type: uint256
                       Source: "(1 + OVERALLSOLD - RANGESTART_6).div(FACTOR_6)"
                      MemberAccess to member div
                         Type: function (uint256,uint256) returns (uint256)
                         Source: "(1 + OVERALLSOLD - RANGESTART_6).div"
                        TupleExpression
                           Type: uint256
                           Source: "(1 + OVERALLSOLD - RANGESTART_6)"
                          BinaryOperation using operator -
                             Type: uint256
                             Source: "1 + OVERALLSOLD - RANGESTART_6"
                            BinaryOperation using operator +
                               Type: uint256
                               Source: "1 + OVERALLSOLD"
                              Literal, token: [no token] value: 1
                                 Type: int_const 1
                                 Source: "1"
                              Identifier OVERALLSOLD
                                 Type: uint256
                                 Source: "OVERALLSOLD"
                            Identifier RANGESTART_6
                               Type: uint256
                               Source: "RANGESTART_6"
                      Identifier FACTOR_6
                         Type: uint256
                         Source: "FACTOR_6"
          IfStatement
             Source: "if(OVERALLSOLD >= RANGESTART_7 && OVERALLSOLD <= RANGEEND_7)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_7 - (1 + OVERALLSOLD - RANGESTART_7).div(FACTOR_7);\r\n\t\t\t}"
            BinaryOperation using operator &&
               Type: bool
               Gas costs: 440
               Source: "OVERALLSOLD >= RANGESTART_7 && OVERALLSOLD <= RANGEEND_7"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "OVERALLSOLD >= RANGESTART_7"
                Identifier OVERALLSOLD
                   Type: uint256
                   Source: "OVERALLSOLD"
                Identifier RANGESTART_7
                   Type: uint256
                   Source: "RANGESTART_7"
              BinaryOperation using operator <=
                 Type: bool
                 Source: "OVERALLSOLD <= RANGEEND_7"
                Identifier OVERALLSOLD
                   Type: uint256
                   Source: "OVERALLSOLD"
                Identifier RANGEEND_7
                   Type: uint256
                   Source: "RANGEEND_7"
            Block
               Source: "{\r\n\t\t\tPRICE = PRICE_7 - (1 + OVERALLSOLD - RANGESTART_7).div(FACTOR_7);\r\n\t\t\t}"
              ExpressionStatement
                 Gas costs: 20256
                 Source: "PRICE = PRICE_7 - (1 + OVERALLSOLD - RANGESTART_7).div(FACTOR_7)"
                Assignment using operator =
                   Type: uint256
                   Source: "PRICE = PRICE_7 - (1 + OVERALLSOLD - RANGESTART_7).div(FACTOR_7)"
                  Identifier PRICE
                     Type: uint256
                     Source: "PRICE"
                  BinaryOperation using operator -
                     Type: uint256
                     Source: "PRICE_7 - (1 + OVERALLSOLD - RANGESTART_7).div(FACTOR_7)"
                    Identifier PRICE_7
                       Type: uint256
                       Source: "PRICE_7"
                    FunctionCall
                       Type: uint256
                       Source: "(1 + OVERALLSOLD - RANGESTART_7).div(FACTOR_7)"
                      MemberAccess to member div
                         Type: function (uint256,uint256) returns (uint256)
                         Source: "(1 + OVERALLSOLD - RANGESTART_7).div"
                        TupleExpression
                           Type: uint256
                           Source: "(1 + OVERALLSOLD - RANGESTART_7)"
                          BinaryOperation using operator -
                             Type: uint256
                             Source: "1 + OVERALLSOLD - RANGESTART_7"
                            BinaryOperation using operator +
                               Type: uint256
                               Source: "1 + OVERALLSOLD"
                              Literal, token: [no token] value: 1
                                 Type: int_const 1
                                 Source: "1"
                              Identifier OVERALLSOLD
                                 Type: uint256
                                 Source: "OVERALLSOLD"
                            Identifier RANGESTART_7
                               Type: uint256
                               Source: "RANGESTART_7"
                      Identifier FACTOR_7
                         Type: uint256
                         Source: "FACTOR_7"
          IfStatement
             Source: "if(OVERALLSOLD >= RANGESTART_8 && OVERALLSOLD <= RANGEEND_8)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_8 - (1 + OVERALLSOLD - RANGESTART_8).div(FACTOR_8);\r\n\t\t\t}"
            BinaryOperation using operator &&
               Type: bool
               Gas costs: 440
               Source: "OVERALLSOLD >= RANGESTART_8 && OVERALLSOLD <= RANGEEND_8"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "OVERALLSOLD >= RANGESTART_8"
                Identifier OVERALLSOLD
                   Type: uint256
                   Source: "OVERALLSOLD"
                Identifier RANGESTART_8
                   Type: uint256
                   Source: "RANGESTART_8"
              BinaryOperation using operator <=
                 Type: bool
                 Source: "OVERALLSOLD <= RANGEEND_8"
                Identifier OVERALLSOLD
                   Type: uint256
                   Source: "OVERALLSOLD"
                Identifier RANGEEND_8
                   Type: uint256
                   Source: "RANGEEND_8"
            Block
               Source: "{\r\n\t\t\tPRICE = PRICE_8 - (1 + OVERALLSOLD - RANGESTART_8).div(FACTOR_8);\r\n\t\t\t}"
              ExpressionStatement
                 Gas costs: 20256
                 Source: "PRICE = PRICE_8 - (1 + OVERALLSOLD - RANGESTART_8).div(FACTOR_8)"
                Assignment using operator =
                   Type: uint256
                   Source: "PRICE = PRICE_8 - (1 + OVERALLSOLD - RANGESTART_8).div(FACTOR_8)"
                  Identifier PRICE
                     Type: uint256
                     Source: "PRICE"
                  BinaryOperation using operator -
                     Type: uint256
                     Source: "PRICE_8 - (1 + OVERALLSOLD - RANGESTART_8).div(FACTOR_8)"
                    Identifier PRICE_8
                       Type: uint256
                       Source: "PRICE_8"
                    FunctionCall
                       Type: uint256
                       Source: "(1 + OVERALLSOLD - RANGESTART_8).div(FACTOR_8)"
                      MemberAccess to member div
                         Type: function (uint256,uint256) returns (uint256)
                         Source: "(1 + OVERALLSOLD - RANGESTART_8).div"
                        TupleExpression
                           Type: uint256
                           Source: "(1 + OVERALLSOLD - RANGESTART_8)"
                          BinaryOperation using operator -
                             Type: uint256
                             Source: "1 + OVERALLSOLD - RANGESTART_8"
                            BinaryOperation using operator +
                               Type: uint256
                               Source: "1 + OVERALLSOLD"
                              Literal, token: [no token] value: 1
                                 Type: int_const 1
                                 Source: "1"
                              Identifier OVERALLSOLD
                                 Type: uint256
                                 Source: "OVERALLSOLD"
                            Identifier RANGESTART_8
                               Type: uint256
                               Source: "RANGESTART_8"
                      Identifier FACTOR_8
                         Type: uint256
                         Source: "FACTOR_8"
          IfStatement
             Source: "if(OVERALLSOLD >= RANGESTART_9 && OVERALLSOLD <= RANGEEND_9)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_9 - (1 + OVERALLSOLD - RANGESTART_9).div(FACTOR_9);\r\n\t\t\t}"
            BinaryOperation using operator &&
               Type: bool
               Gas costs: 440
               Source: "OVERALLSOLD >= RANGESTART_9 && OVERALLSOLD <= RANGEEND_9"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "OVERALLSOLD >= RANGESTART_9"
                Identifier OVERALLSOLD
                   Type: uint256
                   Source: "OVERALLSOLD"
                Identifier RANGESTART_9
                   Type: uint256
                   Source: "RANGESTART_9"
              BinaryOperation using operator <=
                 Type: bool
                 Source: "OVERALLSOLD <= RANGEEND_9"
                Identifier OVERALLSOLD
                   Type: uint256
                   Source: "OVERALLSOLD"
                Identifier RANGEEND_9
                   Type: uint256
                   Source: "RANGEEND_9"
            Block
               Source: "{\r\n\t\t\tPRICE = PRICE_9 - (1 + OVERALLSOLD - RANGESTART_9).div(FACTOR_9);\r\n\t\t\t}"
              ExpressionStatement
                 Gas costs: 20256
                 Source: "PRICE = PRICE_9 - (1 + OVERALLSOLD - RANGESTART_9).div(FACTOR_9)"
                Assignment using operator =
                   Type: uint256
                   Source: "PRICE = PRICE_9 - (1 + OVERALLSOLD - RANGESTART_9).div(FACTOR_9)"
                  Identifier PRICE
                     Type: uint256
                     Source: "PRICE"
                  BinaryOperation using operator -
                     Type: uint256
                     Source: "PRICE_9 - (1 + OVERALLSOLD - RANGESTART_9).div(FACTOR_9)"
                    Identifier PRICE_9
                       Type: uint256
                       Source: "PRICE_9"
                    FunctionCall
                       Type: uint256
                       Source: "(1 + OVERALLSOLD - RANGESTART_9).div(FACTOR_9)"
                      MemberAccess to member div
                         Type: function (uint256,uint256) returns (uint256)
                         Source: "(1 + OVERALLSOLD - RANGESTART_9).div"
                        TupleExpression
                           Type: uint256
                           Source: "(1 + OVERALLSOLD - RANGESTART_9)"
                          BinaryOperation using operator -
                             Type: uint256
                             Source: "1 + OVERALLSOLD - RANGESTART_9"
                            BinaryOperation using operator +
                               Type: uint256
                               Source: "1 + OVERALLSOLD"
                              Literal, token: [no token] value: 1
                                 Type: int_const 1
                                 Source: "1"
                              Identifier OVERALLSOLD
                                 Type: uint256
                                 Source: "OVERALLSOLD"
                            Identifier RANGESTART_9
                               Type: uint256
                               Source: "RANGESTART_9"
                      Identifier FACTOR_9
                         Type: uint256
                         Source: "FACTOR_9"
          IfStatement
             Source: "if(OVERALLSOLD >= RANGESTART_10 && OVERALLSOLD <= RANGEEND_10)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_10 - (1 + OVERALLSOLD - RANGESTART_10).div(FACTOR_10);\r\n\t\t\t}"
            BinaryOperation using operator &&
               Type: bool
               Gas costs: 440
               Source: "OVERALLSOLD >= RANGESTART_10 && OVERALLSOLD <= RANGEEND_10"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "OVERALLSOLD >= RANGESTART_10"
                Identifier OVERALLSOLD
                   Type: uint256
                   Source: "OVERALLSOLD"
                Identifier RANGESTART_10
                   Type: uint256
                   Source: "RANGESTART_10"
              BinaryOperation using operator <=
                 Type: bool
                 Source: "OVERALLSOLD <= RANGEEND_10"
                Identifier OVERALLSOLD
                   Type: uint256
                   Source: "OVERALLSOLD"
                Identifier RANGEEND_10
                   Type: uint256
                   Source: "RANGEEND_10"
            Block
               Source: "{\r\n\t\t\tPRICE = PRICE_10 - (1 + OVERALLSOLD - RANGESTART_10).div(FACTOR_10);\r\n\t\t\t}"
              ExpressionStatement
                 Gas costs: 20256
                 Source: "PRICE = PRICE_10 - (1 + OVERALLSOLD - RANGESTART_10).div(FACTOR_10)"
                Assignment using operator =
                   Type: uint256
                   Source: "PRICE = PRICE_10 - (1 + OVERALLSOLD - RANGESTART_10).div(FACTOR_10)"
                  Identifier PRICE
                     Type: uint256
                     Source: "PRICE"
                  BinaryOperation using operator -
                     Type: uint256
                     Source: "PRICE_10 - (1 + OVERALLSOLD - RANGESTART_10).div(FACTOR_10)"
                    Identifier PRICE_10
                       Type: uint256
                       Source: "PRICE_10"
                    FunctionCall
                       Type: uint256
                       Source: "(1 + OVERALLSOLD - RANGESTART_10).div(FACTOR_10)"
                      MemberAccess to member div
                         Type: function (uint256,uint256) returns (uint256)
                         Source: "(1 + OVERALLSOLD - RANGESTART_10).div"
                        TupleExpression
                           Type: uint256
                           Source: "(1 + OVERALLSOLD - RANGESTART_10)"
                          BinaryOperation using operator -
                             Type: uint256
                             Source: "1 + OVERALLSOLD - RANGESTART_10"
                            BinaryOperation using operator +
                               Type: uint256
                               Source: "1 + OVERALLSOLD"
                              Literal, token: [no token] value: 1
                                 Type: int_const 1
                                 Source: "1"
                              Identifier OVERALLSOLD
                                 Type: uint256
                                 Source: "OVERALLSOLD"
                            Identifier RANGESTART_10
                               Type: uint256
                               Source: "RANGESTART_10"
                      Identifier FACTOR_10
                         Type: uint256
                         Source: "FACTOR_10"
          IfStatement
             Source: "if(OVERALLSOLD >= RANGESTART_11 && OVERALLSOLD <= RANGEEND_11)\r\n\t\t\t{\r\n\t\t\tPRICE = PRICE_11 - (1 + OVERALLSOLD - RANGESTART_11).div(FACTOR_11);\r\n\t\t\t}"
            BinaryOperation using operator &&
               Type: bool
               Gas costs: 440
               Source: "OVERALLSOLD >= RANGESTART_11 && OVERALLSOLD <= RANGEEND_11"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "OVERALLSOLD >= RANGESTART_11"
                Identifier OVERALLSOLD
                   Type: uint256
                   Source: "OVERALLSOLD"
                Identifier RANGESTART_11
                   Type: uint256
                   Source: "RANGESTART_11"
              BinaryOperation using operator <=
                 Type: bool
                 Source: "OVERALLSOLD <= RANGEEND_11"
                Identifier OVERALLSOLD
                   Type: uint256
                   Source: "OVERALLSOLD"
                Identifier RANGEEND_11
                   Type: uint256
                   Source: "RANGEEND_11"
            Block
               Source: "{\r\n\t\t\tPRICE = PRICE_11 - (1 + OVERALLSOLD - RANGESTART_11).div(FACTOR_11);\r\n\t\t\t}"
              ExpressionStatement
                 Gas costs: 20256
                 Source: "PRICE = PRICE_11 - (1 + OVERALLSOLD - RANGESTART_11).div(FACTOR_11)"
                Assignment using operator =
                   Type: uint256
                   Source: "PRICE = PRICE_11 - (1 + OVERALLSOLD - RANGESTART_11).div(FACTOR_11)"
                  Identifier PRICE
                     Type: uint256
                     Source: "PRICE"
                  BinaryOperation using operator -
                     Type: uint256
                     Source: "PRICE_11 - (1 + OVERALLSOLD - RANGESTART_11).div(FACTOR_11)"
                    Identifier PRICE_11
                       Type: uint256
                       Source: "PRICE_11"
                    FunctionCall
                       Type: uint256
                       Source: "(1 + OVERALLSOLD - RANGESTART_11).div(FACTOR_11)"
                      MemberAccess to member div
                         Type: function (uint256,uint256) returns (uint256)
                         Source: "(1 + OVERALLSOLD - RANGESTART_11).div"
                        TupleExpression
                           Type: uint256
                           Source: "(1 + OVERALLSOLD - RANGESTART_11)"
                          BinaryOperation using operator -
                             Type: uint256
                             Source: "1 + OVERALLSOLD - RANGESTART_11"
                            BinaryOperation using operator +
                               Type: uint256
                               Source: "1 + OVERALLSOLD"
                              Literal, token: [no token] value: 1
                                 Type: int_const 1
                                 Source: "1"
                              Identifier OVERALLSOLD
                                 Type: uint256
                                 Source: "OVERALLSOLD"
                            Identifier RANGESTART_11
                               Type: uint256
                               Source: "RANGESTART_11"
                      Identifier FACTOR_11
                         Type: uint256
                         Source: "FACTOR_11"
  FunctionDefinition "submitEther" - public
     Source: "function submitEther(address recipient) payable {\r\n     if (msg.value == 0) {\r\n       throw;\r\n     }\r\n\r\n     if (!recipient.send(msg.value)) {\r\n       throw;\r\n     }\r\n    \r\n   }"
    ParameterList
       Gas costs: 0
       Source: "(address recipient)"
      VariableDeclaration "recipient"
         Type: address
         Source: "address recipient"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n     if (msg.value == 0) {\r\n       throw;\r\n     }\r\n\r\n     if (!recipient.send(msg.value)) {\r\n       throw;\r\n     }\r\n    \r\n   }"
      IfStatement
         Source: "if (msg.value == 0) {\r\n       throw;\r\n     }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 8
           Source: "msg.value == 0"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n       throw;\r\n     }"
          Throw
             Gas costs: 6
             Source: "throw"
      IfStatement
         Source: "if (!recipient.send(msg.value)) {\r\n       throw;\r\n     }"
        UnaryOperation (prefix) !
           Type: bool
           Gas costs: [???]
           Source: "!recipient.send(msg.value)"
          FunctionCall
             Type: bool
             Source: "recipient.send(msg.value)"
            MemberAccess to member send
               Type: function (uint256) returns (bool)
               Source: "recipient.send"
              Identifier recipient
                 Type: address
                 Source: "recipient"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
        Block
           Source: "{\r\n       throw;\r\n     }"
          Throw
             Gas costs: 6
             Source: "throw"
  StructDefinition "MessageQueue"
     Gas costs: 0
     Source: "struct MessageQueue {\r\n           string message; \r\n  \t\t   string from;\r\n           uint expireTimestamp;  \r\n           uint startTimestamp;\r\n           address sender; \r\n       }"
    VariableDeclaration "message"
       Type: string storage pointer
       Source: "string message"
      ElementaryTypeName string
         Source: "string"
    VariableDeclaration "from"
       Type: string storage pointer
       Source: "string from"
      ElementaryTypeName string
         Source: "string"
    VariableDeclaration "expireTimestamp"
       Type: uint256
       Source: "uint expireTimestamp"
      ElementaryTypeName uint
         Source: "uint"
    VariableDeclaration "startTimestamp"
       Type: uint256
       Source: "uint startTimestamp"
      ElementaryTypeName uint
         Source: "uint"
    VariableDeclaration "sender"
       Type: address
       Source: "address sender"
      ElementaryTypeName address
         Source: "address"
  VariableDeclaration "maxSpendToken"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant maxSpendToken = 3600"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 3600
       Type: int_const 3600
       Source: "3600"
  VariableDeclaration "mQueue"
     Type: struct UniContract.MessageQueue storage ref[] storage ref
     Gas costs: [???]
     Source: "MessageQueue[] public mQueue"
    ArrayTypeName
       Source: "MessageQueue[]"
      UserDefinedTypeName "MessageQueue"
         Source: "MessageQueue"
  FunctionDefinition "addMessageToQueue" - public
     Source: "function addMessageToQueue(string msg_from, string name_from, uint spendToken) {\r\n        if(balances[msg.sender]>=spendToken && spendToken>=10)\r\n        {\r\n           if(spendToken>maxSpendToken) \r\n               {\r\n                   spendToken=maxSpendToken;\r\n               }\r\n           \r\n\t\t   UniCoinSize=UniCoinSize+spendToken;\r\n           \r\n           balances[msg.sender] = balances[msg.sender].sub(spendToken);\r\n          \r\n\t\t  //If first message or last message already expired set newest timestamp\r\n  \t\t  uint expireTimestamp=now;\r\n\t\t  if(mQueue.length>0)\r\n\t\t\t{\r\n\t\t\t if(mQueue[mQueue.length-1].expireTimestamp>now)\r\n\t\t\t \t{\r\n\t\t\t \texpireTimestamp = mQueue[mQueue.length-1].expireTimestamp;\r\n\t\t\t\t}\r\n\t\t\t} \r\n\t\t\r\n\t\t \r\n\t\t \r\n           mQueue.push(MessageQueue({\r\n                   message: msg_from, \r\n  \t\t\t\t   from: name_from,\r\n                   expireTimestamp: expireTimestamp.add(spendToken)+60,  //give at least approx 60 seconds per msg\r\n                   startTimestamp: expireTimestamp,\r\n                   sender: msg.sender\r\n               }));\r\n    \r\n        \r\n\t\t \r\n        }\r\n\t\telse {\r\n\t\t      throw;\r\n\t\t      }\r\n      }"
    ParameterList
       Gas costs: 0
       Source: "(string msg_from, string name_from, uint spendToken)"
      VariableDeclaration "msg_from"
         Type: string memory
         Source: "string msg_from"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "name_from"
         Type: string memory
         Source: "string name_from"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "spendToken"
         Type: uint256
         Source: "uint spendToken"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if(balances[msg.sender]>=spendToken && spendToken>=10)\r\n        {\r\n           if(spendToken>maxSpendToken) \r\n               {\r\n                   spendToken=maxSpendToken;\r\n               }\r\n           \r\n\t\t   UniCoinSize=UniCoinSize+spendToken;\r\n           \r\n           balances[msg.sender] = balances[msg.sender].sub(spendToken);\r\n          \r\n\t\t  //If first message or last message already expired set newest timestamp\r\n  \t\t  uint expireTimestamp=now;\r\n\t\t  if(mQueue.length>0)\r\n\t\t\t{\r\n\t\t\t if(mQueue[mQueue.length-1].expireTimestamp>now)\r\n\t\t\t \t{\r\n\t\t\t \texpireTimestamp = mQueue[mQueue.length-1].expireTimestamp;\r\n\t\t\t\t}\r\n\t\t\t} \r\n\t\t\r\n\t\t \r\n\t\t \r\n           mQueue.push(MessageQueue({\r\n                   message: msg_from, \r\n  \t\t\t\t   from: name_from,\r\n                   expireTimestamp: expireTimestamp.add(spendToken)+60,  //give at least approx 60 seconds per msg\r\n                   startTimestamp: expireTimestamp,\r\n                   sender: msg.sender\r\n               }));\r\n    \r\n        \r\n\t\t \r\n        }\r\n\t\telse {\r\n\t\t      throw;\r\n\t\t      }\r\n      }"
      IfStatement
         Source: "if(balances[msg.sender]>=spendToken && spendToken>=10)\r\n        {\r\n           if(spendToken>maxSpendToken) \r\n               {\r\n                   spendToken=maxSpendToken;\r\n               }\r\n           \r\n\t\t   UniCoinSize=UniCoinSize+spendToken;\r\n           \r\n           balances[msg.sender] = balances[msg.sender].sub(spendToken);\r\n          \r\n\t\t  //If first message or last message already expired set newest timestamp\r\n  \t\t  uint expireTimestamp=now;\r\n\t\t  if(mQueue.length>0)\r\n\t\t\t{\r\n\t\t\t if(mQueue[mQueue.length-1].expireTimestamp>now)\r\n\t\t\t \t{\r\n\t\t\t \texpireTimestamp = mQueue[mQueue.length-1].expireTimestamp;\r\n\t\t\t\t}\r\n\t\t\t} \r\n\t\t\r\n\t\t \r\n\t\t \r\n           mQueue.push(MessageQueue({\r\n                   message: msg_from, \r\n  \t\t\t\t   from: name_from,\r\n                   expireTimestamp: expireTimestamp.add(spendToken)+60,  //give at least approx 60 seconds per msg\r\n                   startTimestamp: expireTimestamp,\r\n                   sender: msg.sender\r\n               }));\r\n    \r\n        \r\n\t\t \r\n        }\r\n\t\telse {\r\n\t\t      throw;\r\n\t\t      }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 341
           Source: "balances[msg.sender]>=spendToken && spendToken>=10"
          BinaryOperation using operator >=
             Type: bool
             Source: "balances[msg.sender]>=spendToken"
            IndexAccess
               Type: uint256
               Source: "balances[msg.sender]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier spendToken
               Type: uint256
               Source: "spendToken"
          BinaryOperation using operator >=
             Type: bool
             Source: "spendToken>=10"
            Identifier spendToken
               Type: uint256
               Source: "spendToken"
            Literal, token: [no token] value: 10
               Type: int_const 10
               Source: "10"
        Block
           Source: "{\r\n           if(spendToken>maxSpendToken) \r\n               {\r\n                   spendToken=maxSpendToken;\r\n               }\r\n           \r\n\t\t   UniCoinSize=UniCoinSize+spendToken;\r\n           \r\n           balances[msg.sender] = balances[msg.sender].sub(spendToken);\r\n          \r\n\t\t  //If first message or last message already expired set newest timestamp\r\n  \t\t  uint expireTimestamp=now;\r\n\t\t  if(mQueue.length>0)\r\n\t\t\t{\r\n\t\t\t if(mQueue[mQueue.length-1].expireTimestamp>now)\r\n\t\t\t \t{\r\n\t\t\t \texpireTimestamp = mQueue[mQueue.length-1].expireTimestamp;\r\n\t\t\t\t}\r\n\t\t\t} \r\n\t\t\r\n\t\t \r\n\t\t \r\n           mQueue.push(MessageQueue({\r\n                   message: msg_from, \r\n  \t\t\t\t   from: name_from,\r\n                   expireTimestamp: expireTimestamp.add(spendToken)+60,  //give at least approx 60 seconds per msg\r\n                   startTimestamp: expireTimestamp,\r\n                   sender: msg.sender\r\n               }));\r\n    \r\n        \r\n\t\t \r\n        }"
          IfStatement
             Source: "if(spendToken>maxSpendToken) \r\n               {\r\n                   spendToken=maxSpendToken;\r\n               }"
            BinaryOperation using operator >
               Type: bool
               Gas costs: 6
               Source: "spendToken>maxSpendToken"
              Identifier spendToken
                 Type: uint256
                 Source: "spendToken"
              Identifier maxSpendToken
                 Type: uint256
                 Source: "maxSpendToken"
            Block
               Source: "{\r\n                   spendToken=maxSpendToken;\r\n               }"
              ExpressionStatement
                 Gas costs: 5
                 Source: "spendToken=maxSpendToken"
                Assignment using operator =
                   Type: uint256
                   Source: "spendToken=maxSpendToken"
                  Identifier spendToken
                     Type: uint256
                     Source: "spendToken"
                  Identifier maxSpendToken
                     Type: uint256
                     Source: "maxSpendToken"
          ExpressionStatement
             Gas costs: 20220
             Source: "UniCoinSize=UniCoinSize+spendToken"
            Assignment using operator =
               Type: uint256
               Source: "UniCoinSize=UniCoinSize+spendToken"
              Identifier UniCoinSize
                 Type: uint256
                 Source: "UniCoinSize"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "UniCoinSize+spendToken"
                Identifier UniCoinSize
                   Type: uint256
                   Source: "UniCoinSize"
                Identifier spendToken
                   Type: uint256
                   Source: "spendToken"
          ExpressionStatement
             Gas costs: 20437
             Source: "balances[msg.sender] = balances[msg.sender].sub(spendToken)"
            Assignment using operator =
               Type: uint256
               Source: "balances[msg.sender] = balances[msg.sender].sub(spendToken)"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              FunctionCall
                 Type: uint256
                 Source: "balances[msg.sender].sub(spendToken)"
                MemberAccess to member sub
                   Type: function (uint256,uint256) returns (uint256)
                   Source: "balances[msg.sender].sub"
                  IndexAccess
                     Type: uint256
                     Source: "balances[msg.sender]"
                    Identifier balances
                       Type: mapping(address => uint256)
                       Source: "balances"
                    MemberAccess to member sender
                       Type: address
                       Source: "msg.sender"
                      Identifier msg
                         Type: msg
                         Source: "msg"
                Identifier spendToken
                   Type: uint256
                   Source: "spendToken"
          VariableDeclarationStatement
             Gas costs: 10
             Source: "uint expireTimestamp=now"
            VariableDeclaration "expireTimestamp"
               Type: uint256
               Source: "uint expireTimestamp"
              ElementaryTypeName uint
                 Source: "uint"
            Identifier now
               Type: uint256
               Source: "now"
          IfStatement
             Source: "if(mQueue.length>0)\r\n\t\t\t{\r\n\t\t\t if(mQueue[mQueue.length-1].expireTimestamp>now)\r\n\t\t\t \t{\r\n\t\t\t \texpireTimestamp = mQueue[mQueue.length-1].expireTimestamp;\r\n\t\t\t\t}\r\n\t\t\t}"
            BinaryOperation using operator >
               Type: bool
               Gas costs: 217
               Source: "mQueue.length>0"
              MemberAccess to member length
                 Type: uint256
                 Source: "mQueue.length"
                Identifier mQueue
                   Type: struct UniContract.MessageQueue storage ref[] storage ref
                   Source: "mQueue"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
            Block
               Source: "{\r\n\t\t\t if(mQueue[mQueue.length-1].expireTimestamp>now)\r\n\t\t\t \t{\r\n\t\t\t \texpireTimestamp = mQueue[mQueue.length-1].expireTimestamp;\r\n\t\t\t\t}\r\n\t\t\t}"
              IfStatement
                 Source: "if(mQueue[mQueue.length-1].expireTimestamp>now)\r\n\t\t\t \t{\r\n\t\t\t \texpireTimestamp = mQueue[mQueue.length-1].expireTimestamp;\r\n\t\t\t\t}"
                BinaryOperation using operator >
                   Type: bool
                   Gas costs: 728
                   Source: "mQueue[mQueue.length-1].expireTimestamp>now"
                  MemberAccess to member expireTimestamp
                     Type: uint256
                     Source: "mQueue[mQueue.length-1].expireTimestamp"
                    IndexAccess
                       Type: struct UniContract.MessageQueue storage ref
                       Source: "mQueue[mQueue.length-1]"
                      Identifier mQueue
                         Type: struct UniContract.MessageQueue storage ref[] storage ref
                         Source: "mQueue"
                      BinaryOperation using operator -
                         Type: uint256
                         Source: "mQueue.length-1"
                        MemberAccess to member length
                           Type: uint256
                           Source: "mQueue.length"
                          Identifier mQueue
                             Type: struct UniContract.MessageQueue storage ref[] storage ref
                             Source: "mQueue"
                        Literal, token: [no token] value: 1
                           Type: int_const 1
                           Source: "1"
                  Identifier now
                     Type: uint256
                     Source: "now"
                Block
                   Source: "{\r\n\t\t\t \texpireTimestamp = mQueue[mQueue.length-1].expireTimestamp;\r\n\t\t\t\t}"
                  ExpressionStatement
                     Gas costs: 728
                     Source: "expireTimestamp = mQueue[mQueue.length-1].expireTimestamp"
                    Assignment using operator =
                       Type: uint256
                       Source: "expireTimestamp = mQueue[mQueue.length-1].expireTimestamp"
                      Identifier expireTimestamp
                         Type: uint256
                         Source: "expireTimestamp"
                      MemberAccess to member expireTimestamp
                         Type: uint256
                         Source: "mQueue[mQueue.length-1].expireTimestamp"
                        IndexAccess
                           Type: struct UniContract.MessageQueue storage ref
                           Source: "mQueue[mQueue.length-1]"
                          Identifier mQueue
                             Type: struct UniContract.MessageQueue storage ref[] storage ref
                             Source: "mQueue"
                          BinaryOperation using operator -
                             Type: uint256
                             Source: "mQueue.length-1"
                            MemberAccess to member length
                               Type: uint256
                               Source: "mQueue.length"
                              Identifier mQueue
                                 Type: struct UniContract.MessageQueue storage ref[] storage ref
                                 Source: "mQueue"
                            Literal, token: [no token] value: 1
                               Type: int_const 1
                               Source: "1"
          ExpressionStatement
             Gas costs: [???]
             Source: "mQueue.push(MessageQueue({\r\n                   message: msg_from, \r\n  \t\t\t\t   from: name_from,\r\n                   expireTimestamp: expireTimestamp.add(spendToken)+60,  //give at least approx 60 seconds per msg\r\n                   startTimestamp: expireTimestamp,\r\n                   sender: msg.sender\r\n               }))"
            FunctionCall
               Type: uint256
               Source: "mQueue.push(MessageQueue({\r\n                   message: msg_from, \r\n  \t\t\t\t   from: name_from,\r\n                   expireTimestamp: expireTimestamp.add(spendToken)+60,  //give at least approx 60 seconds per msg\r\n                   startTimestamp: expireTimestamp,\r\n                   sender: msg.sender\r\n               }))"
              MemberAccess to member push
                 Type: function (struct UniContract.MessageQueue storage ref) returns (uint256)
                 Source: "mQueue.push"
                Identifier mQueue
                   Type: struct UniContract.MessageQueue storage ref[] storage ref
                   Source: "mQueue"
              FunctionCall
                 Type: struct UniContract.MessageQueue memory
                 Source: "MessageQueue({\r\n                   message: msg_from, \r\n  \t\t\t\t   from: name_from,\r\n                   expireTimestamp: expireTimestamp.add(spendToken)+60,  //give at least approx 60 seconds per msg\r\n                   startTimestamp: expireTimestamp,\r\n                   sender: msg.sender\r\n               })"
                Identifier MessageQueue
                   Type: type(struct UniContract.MessageQueue storage pointer)
                   Source: "MessageQueue"
                Identifier msg_from
                   Type: string memory
                   Source: "msg_from"
                Identifier name_from
                   Type: string memory
                   Source: "name_from"
                BinaryOperation using operator +
                   Type: uint256
                   Source: "expireTimestamp.add(spendToken)+60"
                  FunctionCall
                     Type: uint256
                     Source: "expireTimestamp.add(spendToken)"
                    MemberAccess to member add
                       Type: function (uint256,uint256) returns (uint256)
                       Source: "expireTimestamp.add"
                      Identifier expireTimestamp
                         Type: uint256
                         Source: "expireTimestamp"
                    Identifier spendToken
                       Type: uint256
                       Source: "spendToken"
                  Literal, token: [no token] value: 60
                     Type: int_const 60
                     Source: "60"
                Identifier expireTimestamp
                   Type: uint256
                   Source: "expireTimestamp"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
        Block
           Source: "{\r\n\t\t      throw;\r\n\t\t      }"
          Throw
             Gas costs: 6
             Source: "throw"
  FunctionDefinition "feedUnicorn" - public
     Source: "function feedUnicorn(uint spendToken) {\r\n\t\r\n   \t \tif(balances[msg.sender] < spendToken)\r\n        \t{ throw; }\r\n       \t \tUniCoinSize=UniCoinSize.add(spendToken);\r\n        \tbalances[msg.sender] = balances[msg.sender].sub(spendToken);\r\n\t\t\t\r\n\t\t\r\n\t }"
    ParameterList
       Gas costs: 0
       Source: "(uint spendToken)"
      VariableDeclaration "spendToken"
         Type: uint256
         Source: "uint spendToken"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n\t\r\n   \t \tif(balances[msg.sender] < spendToken)\r\n        \t{ throw; }\r\n       \t \tUniCoinSize=UniCoinSize.add(spendToken);\r\n        \tbalances[msg.sender] = balances[msg.sender].sub(spendToken);\r\n\t\t\t\r\n\t\t\r\n\t }"
      IfStatement
         Source: "if(balances[msg.sender] < spendToken)\r\n        \t{ throw; }"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 304
           Source: "balances[msg.sender] < spendToken"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier spendToken
             Type: uint256
             Source: "spendToken"
        Block
           Source: "{ throw; }"
          Throw
             Gas costs: 6
             Source: "throw"
      ExpressionStatement
         Gas costs: 20247
         Source: "UniCoinSize=UniCoinSize.add(spendToken)"
        Assignment using operator =
           Type: uint256
           Source: "UniCoinSize=UniCoinSize.add(spendToken)"
          Identifier UniCoinSize
             Type: uint256
             Source: "UniCoinSize"
          FunctionCall
             Type: uint256
             Source: "UniCoinSize.add(spendToken)"
            MemberAccess to member add
               Type: function (uint256,uint256) returns (uint256)
               Source: "UniCoinSize.add"
              Identifier UniCoinSize
                 Type: uint256
                 Source: "UniCoinSize"
            Identifier spendToken
               Type: uint256
               Source: "spendToken"
      ExpressionStatement
         Gas costs: 20437
         Source: "balances[msg.sender] = balances[msg.sender].sub(spendToken)"
        Assignment using operator =
           Type: uint256
           Source: "balances[msg.sender] = balances[msg.sender].sub(spendToken)"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          FunctionCall
             Type: uint256
             Source: "balances[msg.sender].sub(spendToken)"
            MemberAccess to member sub
               Type: function (uint256,uint256) returns (uint256)
               Source: "balances[msg.sender].sub"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
            Identifier spendToken
               Type: uint256
               Source: "spendToken"
  FunctionDefinition "getQueueLength" - public - const
     Source: "function getQueueLength() public constant returns (uint256 result) {\r\n\t return mQueue.length;\r\n   }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256 result)"
      VariableDeclaration "result"
         Type: uint256
         Source: "uint256 result"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n\t return mQueue.length;\r\n   }"
      Return
         Gas costs: 216
         Source: "return mQueue.length"
        MemberAccess to member length
           Type: uint256
           Source: "mQueue.length"
          Identifier mQueue
             Type: struct UniContract.MessageQueue storage ref[] storage ref
             Source: "mQueue"
  FunctionDefinition "getMessage" - public - const
     Source: "function getMessage(uint256 i) public constant returns (string, string, uint, uint, address){\r\n     return (mQueue[i].message,mQueue[i].from,mQueue[i].expireTimestamp,mQueue[i].startTimestamp,mQueue[i].sender );\r\n   }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 i)"
      VariableDeclaration "i"
         Type: uint256
         Source: "uint256 i"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 15
       Source: "(string, string, uint, uint, address)"
      VariableDeclaration ""
         Type: string memory
         Source: "string"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration ""
         Type: string memory
         Source: "string"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\r\n     return (mQueue[i].message,mQueue[i].from,mQueue[i].expireTimestamp,mQueue[i].startTimestamp,mQueue[i].sender );\r\n   }"
      Return
         Gas costs: [???]
         Source: "return (mQueue[i].message,mQueue[i].from,mQueue[i].expireTimestamp,mQueue[i].startTimestamp,mQueue[i].sender )"
        TupleExpression
           Type: tuple(string storage ref,string storage ref,uint256,uint256,address)
           Source: "(mQueue[i].message,mQueue[i].from,mQueue[i].expireTimestamp,mQueue[i].startTimestamp,mQueue[i].sender )"
          MemberAccess to member message
             Type: string storage ref
             Source: "mQueue[i].message"
            IndexAccess
               Type: struct UniContract.MessageQueue storage ref
               Source: "mQueue[i]"
              Identifier mQueue
                 Type: struct UniContract.MessageQueue storage ref[] storage ref
                 Source: "mQueue"
              Identifier i
                 Type: uint256
                 Source: "i"
          MemberAccess to member from
             Type: string storage ref
             Source: "mQueue[i].from"
            IndexAccess
               Type: struct UniContract.MessageQueue storage ref
               Source: "mQueue[i]"
              Identifier mQueue
                 Type: struct UniContract.MessageQueue storage ref[] storage ref
                 Source: "mQueue"
              Identifier i
                 Type: uint256
                 Source: "i"
          MemberAccess to member expireTimestamp
             Type: uint256
             Source: "mQueue[i].expireTimestamp"
            IndexAccess
               Type: struct UniContract.MessageQueue storage ref
               Source: "mQueue[i]"
              Identifier mQueue
                 Type: struct UniContract.MessageQueue storage ref[] storage ref
                 Source: "mQueue"
              Identifier i
                 Type: uint256
                 Source: "i"
          MemberAccess to member startTimestamp
             Type: uint256
             Source: "mQueue[i].startTimestamp"
            IndexAccess
               Type: struct UniContract.MessageQueue storage ref
               Source: "mQueue[i]"
              Identifier mQueue
                 Type: struct UniContract.MessageQueue storage ref[] storage ref
                 Source: "mQueue"
              Identifier i
                 Type: uint256
                 Source: "i"
          MemberAccess to member sender
             Type: address
             Source: "mQueue[i].sender"
            IndexAccess
               Type: struct UniContract.MessageQueue storage ref
               Source: "mQueue[i]"
              Identifier mQueue
                 Type: struct UniContract.MessageQueue storage ref[] storage ref
                 Source: "mQueue"
              Identifier i
                 Type: uint256
                 Source: "i"
  FunctionDefinition "getPrice" - public - const
     Source: "function getPrice() constant returns (uint256 result) {\r\n     return PRICE;\r\n   }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256 result)"
      VariableDeclaration "result"
         Type: uint256
         Source: "uint256 result"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n     return PRICE;\r\n   }"
      Return
         Gas costs: 208
         Source: "return PRICE"
        Identifier PRICE
           Type: uint256
           Source: "PRICE"
  FunctionDefinition "getSupply" - public - const
     Source: "function getSupply() constant returns (uint256 result) {\r\n     return totalSupply;\r\n   }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256 result)"
      VariableDeclaration "result"
         Type: uint256
         Source: "uint256 result"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n     return totalSupply;\r\n   }"
      Return
         Gas costs: 208
         Source: "return totalSupply"
        Identifier totalSupply
           Type: uint256
           Source: "totalSupply"
  FunctionDefinition "getSold" - public - const
     Source: "function getSold() constant returns (uint256 result) {\r\n     return OVERALLSOLD;\r\n   }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256 result)"
      VariableDeclaration "result"
         Type: uint256
         Source: "uint256 result"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n     return OVERALLSOLD;\r\n   }"
      Return
         Gas costs: 208
         Source: "return OVERALLSOLD"
        Identifier OVERALLSOLD
           Type: uint256
           Source: "OVERALLSOLD"
  FunctionDefinition "getUniCoinSize" - public - const
     Source: "function getUniCoinSize() constant returns (uint256 result) {    \r\n     return UniCoinSize; \r\n   }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256 result)"
      VariableDeclaration "result"
         Type: uint256
         Source: "uint256 result"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{    \r\n     return UniCoinSize; \r\n   }"
      Return
         Gas costs: 208
         Source: "return UniCoinSize"
        Identifier UniCoinSize
           Type: uint256
           Source: "UniCoinSize"
  FunctionDefinition "getAddress" - public - const
     Source: "function getAddress() constant returns (address) {\r\n     return this;\r\n   }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(address)"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\r\n     return this;\r\n   }"
      Return
         Gas costs: 7
         Source: "return this"
        Identifier this
           Type: contract UniContract
           Source: "this"
  FunctionDefinition "aSetStart" - public
     Source: "function aSetStart(uint256 nstart) onlyOwner {\r\n     start=nstart;\r\n   }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 nstart)"
      VariableDeclaration "nstart"
         Type: uint256
         Source: "uint256 nstart"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n     start=nstart;\r\n   }"
      ExpressionStatement
         Gas costs: 20014
         Source: "start=nstart"
        Assignment using operator =
           Type: uint256
           Source: "start=nstart"
          Identifier start
             Type: uint256
             Source: "start"
          Identifier nstart
             Type: uint256
             Source: "nstart"
  FunctionDefinition "aSetEnd" - public
     Source: "function aSetEnd(uint256 nend) onlyOwner {\r\n     end=nend;\r\n   }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 nend)"
      VariableDeclaration "nend"
         Type: uint256
         Source: "uint256 nend"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n     end=nend;\r\n   }"
      ExpressionStatement
         Gas costs: 20014
         Source: "end=nend"
        Assignment using operator =
           Type: uint256
           Source: "end=nend"
          Identifier end
             Type: uint256
             Source: "end"
          Identifier nend
             Type: uint256
             Source: "nend"
  FunctionDefinition "aSetLaunch" - public
     Source: "function aSetLaunch(uint256 nlaunch) onlyOwner {\r\n     launch=nlaunch;\r\n   }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 nlaunch)"
      VariableDeclaration "nlaunch"
         Type: uint256
         Source: "uint256 nlaunch"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n     launch=nlaunch;\r\n   }"
      ExpressionStatement
         Gas costs: 20014
         Source: "launch=nlaunch"
        Assignment using operator =
           Type: uint256
           Source: "launch=nlaunch"
          Identifier launch
             Type: uint256
             Source: "launch"
          Identifier nlaunch
             Type: uint256
             Source: "nlaunch"
  FunctionDefinition "aDeleteMessage" - public
     Source: "function aDeleteMessage(uint256 i,string f,string m) onlyOwner{\r\n     mQueue[i].message=m;\r\n\t mQueue[i].from=f; \r\n\t\t }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 i,string f,string m)"
      VariableDeclaration "i"
         Type: uint256
         Source: "uint256 i"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "f"
         Type: string memory
         Source: "string f"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "m"
         Type: string memory
         Source: "string m"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n     mQueue[i].message=m;\r\n\t mQueue[i].from=f; \r\n\t\t }"
      ExpressionStatement
         Gas costs: [???]
         Source: "mQueue[i].message=m"
        Assignment using operator =
           Type: string storage ref
           Source: "mQueue[i].message=m"
          MemberAccess to member message
             Type: string storage ref
             Source: "mQueue[i].message"
            IndexAccess
               Type: struct UniContract.MessageQueue storage ref
               Source: "mQueue[i]"
              Identifier mQueue
                 Type: struct UniContract.MessageQueue storage ref[] storage ref
                 Source: "mQueue"
              Identifier i
                 Type: uint256
                 Source: "i"
          Identifier m
             Type: string memory
             Source: "m"
      ExpressionStatement
         Gas costs: [???]
         Source: "mQueue[i].from=f"
        Assignment using operator =
           Type: string storage ref
           Source: "mQueue[i].from=f"
          MemberAccess to member from
             Type: string storage ref
             Source: "mQueue[i].from"
            IndexAccess
               Type: struct UniContract.MessageQueue storage ref
               Source: "mQueue[i]"
              Identifier mQueue
                 Type: struct UniContract.MessageQueue storage ref[] storage ref
                 Source: "mQueue"
              Identifier i
                 Type: uint256
                 Source: "i"
          Identifier f
             Type: string memory
             Source: "f"
  FunctionDefinition "aPurgeMessages" - public
     Source: "function aPurgeMessages() onlyOwner{\r\n   delete mQueue; \r\n   }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n   delete mQueue; \r\n   }"
      ExpressionStatement
         Gas costs: 16
         Source: "delete mQueue"
        UnaryOperation (prefix) delete
           Type: tuple()
           Source: "delete mQueue"
          Identifier mQueue
             Type: struct UniContract.MessageQueue storage ref[] storage ref
             Source: "mQueue"
