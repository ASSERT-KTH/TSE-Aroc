Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0xca346d7550ad8796b757a9a9f00616d56474dd81.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.18;"
ContractDefinition "owned"
   Source: "contract owned {\r\n\taddress public owner;\r\n\taddress public server;\r\n\r\n\tfunction owned() {\r\n\t\towner = msg.sender;\r\n\t\tserver = msg.sender;\r\n\t}\r\n\r\n\tfunction changeOwner(address newOwner) onlyOwner {\r\n\t\towner = newOwner;\r\n\t}\r\n\r\n\tfunction changeServer(address newServer) onlyOwner {\r\n\t\tserver = newServer;\r\n\t}\r\n\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyServer {\r\n\t\trequire(msg.sender == server);\r\n\t\t_;\r\n\t}\r\n}"
  VariableDeclaration "owner"
     Type: address
     Gas costs: [???]
     Source: "address public owner"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "server"
     Type: address
     Gas costs: [???]
     Source: "address public server"
    ElementaryTypeName address
       Source: "address"
  FunctionDefinition "owned" - public
     Source: "function owned() {\r\n\t\towner = msg.sender;\r\n\t\tserver = msg.sender;\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n\t\towner = msg.sender;\r\n\t\tserver = msg.sender;\r\n\t}"
      ExpressionStatement
         Gas costs: 0
         Source: "owner = msg.sender"
        Assignment using operator =
           Type: address
           Source: "owner = msg.sender"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 0
         Source: "server = msg.sender"
        Assignment using operator =
           Type: address
           Source: "server = msg.sender"
          Identifier server
             Type: address
             Source: "server"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "changeOwner" - public
     Source: "function changeOwner(address newOwner) onlyOwner {\r\n\t\towner = newOwner;\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "(address newOwner)"
      VariableDeclaration "newOwner"
         Type: address
         Source: "address newOwner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n\t\towner = newOwner;\r\n\t}"
      ExpressionStatement
         Gas costs: 20267
         Source: "owner = newOwner"
        Assignment using operator =
           Type: address
           Source: "owner = newOwner"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier newOwner
             Type: address
             Source: "newOwner"
  FunctionDefinition "changeServer" - public
     Source: "function changeServer(address newServer) onlyOwner {\r\n\t\tserver = newServer;\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "(address newServer)"
      VariableDeclaration "newServer"
         Type: address
         Source: "address newServer"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n\t\tserver = newServer;\r\n\t}"
      ExpressionStatement
         Gas costs: 20267
         Source: "server = newServer"
        Assignment using operator =
           Type: address
           Source: "server = newServer"
          Identifier server
             Type: address
             Source: "server"
          Identifier newServer
             Type: address
             Source: "newServer"
  ModifierDefinition "onlyOwner"
     Source: "modifier onlyOwner {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}"
      ExpressionStatement
         Gas costs: 1692
         Source: "require(msg.sender == owner)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == owner)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == owner"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier owner
               Type: address
               Source: "owner"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "onlyServer"
     Source: "modifier onlyServer {\r\n\t\trequire(msg.sender == server);\r\n\t\t_;\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n\t\trequire(msg.sender == server);\r\n\t\t_;\r\n\t}"
      ExpressionStatement
         Gas costs: 0
         Source: "require(msg.sender == server)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == server)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == server"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier server
               Type: address
               Source: "server"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
ContractDefinition "Utils"
   Source: "contract Utils {\r\n\r\n\tfunction Utils() {\r\n\t}\r\n\r\n\t// Validates an address - currently only checks that it isn't null\r\n\tmodifier validAddress(address _address) {\r\n\t\trequire(_address != 0x0);\r\n\t\t_;\r\n\t}\r\n}"
  FunctionDefinition "Utils" - public
     Source: "function Utils() {\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Gas costs: 0
       Source: "{\r\n\t}"
  ModifierDefinition "validAddress"
     Source: "modifier validAddress(address _address) {\r\n\t\trequire(_address != 0x0);\r\n\t\t_;\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "(address _address)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\r\n\t\trequire(_address != 0x0);\r\n\t\t_;\r\n\t}"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_address != 0x0)"
        FunctionCall
           Type: tuple()
           Source: "require(_address != 0x0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "_address != 0x0"
            Identifier _address
               Type: address
               Source: "_address"
            Literal, token: [no token] value: 0x0
               Type: int_const 0
               Source: "0x0"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
ContractDefinition "Crowdsale"
   Source: "contract Crowdsale is owned,Utils {\r\n    \r\n    //*** Pre-sale ***//\r\n    uint preSaleStart=1513771200;\r\n    uint preSaleEnd=1515585600;\r\n    uint256 preSaleTotalTokens=30000000;\r\n    uint256 preSaleTokenCost=6000;\r\n    address preSaleAddress;\r\n    \r\n     //*** ICO ***//\r\n    uint icoStart;\r\n    uint256 icoSaleTotalTokens=400000000;\r\n    address icoAddress;\r\n    \r\n    //*** Advisers,Consultants ***//\r\n    uint256 advisersConsultantTokens=15000000;\r\n    address advisersConsultantsAddress;\r\n    \r\n    //*** Bounty ***//\r\n    uint256 bountyTokens=15000000;\r\n    address bountyAddress=0xD53E82Aea770feED8e57433D3D61674caEC1D1Be;\r\n    \r\n    //*** Founders ***//\r\n    uint256 founderTokens=40000000;\r\n    address founderAddress;\r\n    \r\n    //***Balance***//\r\n    mapping (address => uint256) public balanceOf;\r\n    \r\n    //*** Tranfer ***//\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    //*** GraphenePowerCrowdsale ***//\r\n    function GraphenePowerCrowdsale(){\r\n        balanceOf[this]=500000000;\r\n        preSaleAddress=0xC07850969A0EC345A84289f9C5bb5F979f27110f;\r\n        icoAddress=0x1C21Cf57BF4e2dd28883eE68C03a9725056D29F1;\r\n        advisersConsultantsAddress=0xe8B6dA1B801b7F57e3061C1c53a011b31C9315C7;\r\n        bountyAddress=0xD53E82Aea770feED8e57433D3D61674caEC1D1Be;\r\n        founderAddress=0xDA0D3Dad39165EA2d7386f18F96664Ee2e9FD8db;\r\n    }\r\n    \r\n    //*** Start ico ***//\r\n    function startIco() onlyOwner internal{\r\n        icoStart=now;\r\n    }\r\n    \r\n    //*** Is ico closed ***//\r\n    function isIcoClosed() constant returns (bool closed) {\r\n\t\treturn ((icoStart+(35*24*60*60)) >= now);\r\n\t}\r\n    \r\n    //*** Is preSale closed ***//\r\n    function isPreSaleClosed() constant returns (bool closed) {\r\n\t\treturn (preSaleEnd >= now);\r\n\t}\r\n\t\r\n\t//*** Get Bounty Tokens ***//\r\n\tfunction getBountyTokens() onlyOwner{\r\n\t    require(bountyTokens>0);\r\n\t    payment(bountyAddress,bountyTokens);\r\n\t    bountyTokens=0;\r\n\t}\r\n\t\r\n\t//*** Get Founders Tokens ***//\r\n\tfunction getFoundersTokens() onlyOwner{\r\n\t    require(founderTokens>0);\r\n\t    payment(founderAddress,founderTokens);\r\n\t    founderTokens=0;\r\n\t}\r\n\t\r\n\t//*** Get Advisers,Consultants Tokens ***//\r\n\tfunction getAdvisersConsultantsTokens() onlyOwner{\r\n\t    require(advisersConsultantTokens>0);\r\n\t    payment(advisersConsultantsAddress,advisersConsultantTokens);\r\n\t    advisersConsultantTokens=0;\r\n\t}\r\n\t\r\n\t//*** Payment ***//\r\n    function payment(address _from,uint256 _tokens) internal{\r\n        if(balanceOf[this] > _tokens){\r\n            balanceOf[msg.sender] += _tokens;\r\n            balanceOf[this] -= _tokens;\r\n            Transfer(this, _from, _tokens);\r\n        }\r\n    }\r\n    \r\n    //*** Payable ***//\r\n    function() payable {\r\n        require(msg.value>0);\r\n        \r\n        if(!isPreSaleClosed()){\r\n            uint256 tokensPreSale = preSaleTotalTokens * msg.value / 1000000000000000000;\r\n            require(preSaleTotalTokens >= tokensPreSale);\r\n            payment(msg.sender,tokensPreSale);\r\n        }\r\n        else if(!isIcoClosed()){\r\n             if((icoStart+(7*24*60*60)) >= now){\r\n                 uint256 tokensWeek1 = 4000 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek1);\r\n                 payment(msg.sender,tokensWeek1);\r\n                 icoSaleTotalTokens-=tokensWeek1;\r\n            }\r\n            else if((icoStart+(14*24*60*60)) >= now){\r\n                 uint256 tokensWeek2 = 3750 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek2);\r\n                 payment(msg.sender,tokensWeek2);\r\n                 icoSaleTotalTokens-=tokensWeek2;\r\n            }\r\n            else if((icoStart+(21*24*60*60)) >= now){\r\n                 uint256 tokensWeek3 = 3500 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek3);\r\n                 payment(msg.sender,tokensWeek3);\r\n                 icoSaleTotalTokens-=tokensWeek3;\r\n            }\r\n            else if((icoStart+(28*24*60*60)) >= now){\r\n                 uint256 tokensWeek4 = 3250 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek4);\r\n                 payment(msg.sender,tokensWeek4);\r\n                 icoSaleTotalTokens-=tokensWeek4;\r\n            }\r\n            else if((icoStart+(35*24*60*60)) >= now){\r\n                 uint256 tokensWeek5 = 3000 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek5);\r\n                 payment(msg.sender, tokensWeek5);\r\n                 icoSaleTotalTokens-=tokensWeek5;\r\n            }\r\n        }\r\n\t}\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "owned"
    UserDefinedTypeName "owned"
       Source: "owned"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Utils"
    UserDefinedTypeName "Utils"
       Source: "Utils"
  VariableDeclaration "preSaleStart"
     Type: uint256
     Gas costs: 0
     Source: "uint preSaleStart=1513771200"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 1513771200
       Type: int_const 1513771200
       Source: "1513771200"
  VariableDeclaration "preSaleEnd"
     Type: uint256
     Gas costs: 0
     Source: "uint preSaleEnd=1515585600"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 1515585600
       Type: int_const 1515585600
       Source: "1515585600"
  VariableDeclaration "preSaleTotalTokens"
     Type: uint256
     Gas costs: 0
     Source: "uint256 preSaleTotalTokens=30000000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 30000000
       Type: int_const 30000000
       Source: "30000000"
  VariableDeclaration "preSaleTokenCost"
     Type: uint256
     Gas costs: 0
     Source: "uint256 preSaleTokenCost=6000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 6000
       Type: int_const 6000
       Source: "6000"
  VariableDeclaration "preSaleAddress"
     Type: address
     Gas costs: 0
     Source: "address preSaleAddress"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "icoStart"
     Type: uint256
     Gas costs: 0
     Source: "uint icoStart"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "icoSaleTotalTokens"
     Type: uint256
     Gas costs: 0
     Source: "uint256 icoSaleTotalTokens=400000000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 400000000
       Type: int_const 400000000
       Source: "400000000"
  VariableDeclaration "icoAddress"
     Type: address
     Gas costs: 0
     Source: "address icoAddress"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "advisersConsultantTokens"
     Type: uint256
     Gas costs: 0
     Source: "uint256 advisersConsultantTokens=15000000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 15000000
       Type: int_const 15000000
       Source: "15000000"
  VariableDeclaration "advisersConsultantsAddress"
     Type: address
     Gas costs: 0
     Source: "address advisersConsultantsAddress"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "bountyTokens"
     Type: uint256
     Gas costs: 0
     Source: "uint256 bountyTokens=15000000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 15000000
       Type: int_const 15000000
       Source: "15000000"
  VariableDeclaration "bountyAddress"
     Type: address
     Gas costs: 0
     Source: "address bountyAddress=0xD53E82Aea770feED8e57433D3D61674caEC1D1Be"
    ElementaryTypeName address
       Source: "address"
    Literal, token: [no token] value: 0xD53E82Aea770feED8e57433D3D61674caEC1D1Be
       Type: address
       Source: "0xD53E82Aea770feED8e57433D3D61674caEC1D1Be"
  VariableDeclaration "founderTokens"
     Type: uint256
     Gas costs: 0
     Source: "uint256 founderTokens=40000000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 40000000
       Type: int_const 40000000
       Source: "40000000"
  VariableDeclaration "founderAddress"
     Type: address
     Gas costs: 0
     Source: "address founderAddress"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "balanceOf"
     Type: mapping(address => uint256)
     Gas costs: [???]
     Source: "mapping (address => uint256) public balanceOf"
    Mapping
       Source: "mapping (address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  EventDefinition "Transfer"
     Gas costs: 0
     Source: "event Transfer(address indexed from, address indexed to, uint256 value);"
    ParameterList
       Source: "(address indexed from, address indexed to, uint256 value)"
      VariableDeclaration "from"
         Type: address
         Source: "address indexed from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "to"
         Type: address
         Source: "address indexed to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "GraphenePowerCrowdsale" - public
     Source: "function GraphenePowerCrowdsale(){\r\n        balanceOf[this]=500000000;\r\n        preSaleAddress=0xC07850969A0EC345A84289f9C5bb5F979f27110f;\r\n        icoAddress=0x1C21Cf57BF4e2dd28883eE68C03a9725056D29F1;\r\n        advisersConsultantsAddress=0xe8B6dA1B801b7F57e3061C1c53a011b31C9315C7;\r\n        bountyAddress=0xD53E82Aea770feED8e57433D3D61674caEC1D1Be;\r\n        founderAddress=0xDA0D3Dad39165EA2d7386f18F96664Ee2e9FD8db;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        balanceOf[this]=500000000;\r\n        preSaleAddress=0xC07850969A0EC345A84289f9C5bb5F979f27110f;\r\n        icoAddress=0x1C21Cf57BF4e2dd28883eE68C03a9725056D29F1;\r\n        advisersConsultantsAddress=0xe8B6dA1B801b7F57e3061C1c53a011b31C9315C7;\r\n        bountyAddress=0xD53E82Aea770feED8e57433D3D61674caEC1D1Be;\r\n        founderAddress=0xDA0D3Dad39165EA2d7386f18F96664Ee2e9FD8db;\r\n    }"
      ExpressionStatement
         Gas costs: 20109
         Source: "balanceOf[this]=500000000"
        Assignment using operator =
           Type: uint256
           Source: "balanceOf[this]=500000000"
          IndexAccess
             Type: uint256
             Source: "balanceOf[this]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier this
               Type: contract Crowdsale
               Source: "this"
          Literal, token: [no token] value: 500000000
             Type: int_const 500000000
             Source: "500000000"
      ExpressionStatement
         Gas costs: 20267
         Source: "preSaleAddress=0xC07850969A0EC345A84289f9C5bb5F979f27110f"
        Assignment using operator =
           Type: address
           Source: "preSaleAddress=0xC07850969A0EC345A84289f9C5bb5F979f27110f"
          Identifier preSaleAddress
             Type: address
             Source: "preSaleAddress"
          Literal, token: [no token] value: 0xC07850969A0EC345A84289f9C5bb5F979f27110f
             Type: address
             Source: "0xC07850969A0EC345A84289f9C5bb5F979f27110f"
      ExpressionStatement
         Gas costs: 20267
         Source: "icoAddress=0x1C21Cf57BF4e2dd28883eE68C03a9725056D29F1"
        Assignment using operator =
           Type: address
           Source: "icoAddress=0x1C21Cf57BF4e2dd28883eE68C03a9725056D29F1"
          Identifier icoAddress
             Type: address
             Source: "icoAddress"
          Literal, token: [no token] value: 0x1C21Cf57BF4e2dd28883eE68C03a9725056D29F1
             Type: address
             Source: "0x1C21Cf57BF4e2dd28883eE68C03a9725056D29F1"
      ExpressionStatement
         Gas costs: 20267
         Source: "advisersConsultantsAddress=0xe8B6dA1B801b7F57e3061C1c53a011b31C9315C7"
        Assignment using operator =
           Type: address
           Source: "advisersConsultantsAddress=0xe8B6dA1B801b7F57e3061C1c53a011b31C9315C7"
          Identifier advisersConsultantsAddress
             Type: address
             Source: "advisersConsultantsAddress"
          Literal, token: [no token] value: 0xe8B6dA1B801b7F57e3061C1c53a011b31C9315C7
             Type: address
             Source: "0xe8B6dA1B801b7F57e3061C1c53a011b31C9315C7"
      ExpressionStatement
         Gas costs: 20267
         Source: "bountyAddress=0xD53E82Aea770feED8e57433D3D61674caEC1D1Be"
        Assignment using operator =
           Type: address
           Source: "bountyAddress=0xD53E82Aea770feED8e57433D3D61674caEC1D1Be"
          Identifier bountyAddress
             Type: address
             Source: "bountyAddress"
          Literal, token: [no token] value: 0xD53E82Aea770feED8e57433D3D61674caEC1D1Be
             Type: address
             Source: "0xD53E82Aea770feED8e57433D3D61674caEC1D1Be"
      ExpressionStatement
         Gas costs: 20267
         Source: "founderAddress=0xDA0D3Dad39165EA2d7386f18F96664Ee2e9FD8db"
        Assignment using operator =
           Type: address
           Source: "founderAddress=0xDA0D3Dad39165EA2d7386f18F96664Ee2e9FD8db"
          Identifier founderAddress
             Type: address
             Source: "founderAddress"
          Literal, token: [no token] value: 0xDA0D3Dad39165EA2d7386f18F96664Ee2e9FD8db
             Type: address
             Source: "0xDA0D3Dad39165EA2d7386f18F96664Ee2e9FD8db"
  FunctionDefinition "startIco"
     Source: "function startIco() onlyOwner internal{\r\n        icoStart=now;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        icoStart=now;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "icoStart=now"
        Assignment using operator =
           Type: uint256
           Source: "icoStart=now"
          Identifier icoStart
             Type: uint256
             Source: "icoStart"
          Identifier now
             Type: uint256
             Source: "now"
  FunctionDefinition "isIcoClosed" - public - const
     Source: "function isIcoClosed() constant returns (bool closed) {\r\n\t\treturn ((icoStart+(35*24*60*60)) >= now);\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(bool closed)"
      VariableDeclaration "closed"
         Type: bool
         Source: "bool closed"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n\t\treturn ((icoStart+(35*24*60*60)) >= now);\r\n\t}"
      Return
         Gas costs: 222
         Source: "return ((icoStart+(35*24*60*60)) >= now)"
        TupleExpression
           Type: bool
           Source: "((icoStart+(35*24*60*60)) >= now)"
          BinaryOperation using operator >=
             Type: bool
             Source: "(icoStart+(35*24*60*60)) >= now"
            TupleExpression
               Type: uint256
               Source: "(icoStart+(35*24*60*60))"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "icoStart+(35*24*60*60)"
                Identifier icoStart
                   Type: uint256
                   Source: "icoStart"
                TupleExpression
                   Type: int_const 3024000
                   Source: "(35*24*60*60)"
                  BinaryOperation using operator *
                     Type: int_const 3024000
                     Source: "35*24*60*60"
                    BinaryOperation using operator *
                       Type: int_const 50400
                       Source: "35*24*60"
                      BinaryOperation using operator *
                         Type: int_const 840
                         Source: "35*24"
                        Literal, token: [no token] value: 35
                           Type: int_const 35
                           Source: "35"
                        Literal, token: [no token] value: 24
                           Type: int_const 24
                           Source: "24"
                      Literal, token: [no token] value: 60
                         Type: int_const 60
                         Source: "60"
                    Literal, token: [no token] value: 60
                       Type: int_const 60
                       Source: "60"
            Identifier now
               Type: uint256
               Source: "now"
  FunctionDefinition "isPreSaleClosed" - public - const
     Source: "function isPreSaleClosed() constant returns (bool closed) {\r\n\t\treturn (preSaleEnd >= now);\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(bool closed)"
      VariableDeclaration "closed"
         Type: bool
         Source: "bool closed"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n\t\treturn (preSaleEnd >= now);\r\n\t}"
      Return
         Gas costs: 216
         Source: "return (preSaleEnd >= now)"
        TupleExpression
           Type: bool
           Source: "(preSaleEnd >= now)"
          BinaryOperation using operator >=
             Type: bool
             Source: "preSaleEnd >= now"
            Identifier preSaleEnd
               Type: uint256
               Source: "preSaleEnd"
            Identifier now
               Type: uint256
               Source: "now"
  FunctionDefinition "getBountyTokens" - public
     Source: "function getBountyTokens() onlyOwner{\r\n\t    require(bountyTokens>0);\r\n\t    payment(bountyAddress,bountyTokens);\r\n\t    bountyTokens=0;\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n\t    require(bountyTokens>0);\r\n\t    payment(bountyAddress,bountyTokens);\r\n\t    bountyTokens=0;\r\n\t}"
      ExpressionStatement
         Gas costs: 235
         Source: "require(bountyTokens>0)"
        FunctionCall
           Type: tuple()
           Source: "require(bountyTokens>0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "bountyTokens>0"
            Identifier bountyTokens
               Type: uint256
               Source: "bountyTokens"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: 457
         Source: "payment(bountyAddress,bountyTokens)"
        FunctionCall
           Type: tuple()
           Source: "payment(bountyAddress,bountyTokens)"
          Identifier payment
             Type: function (address,uint256)
             Source: "payment"
          Identifier bountyAddress
             Type: address
             Source: "bountyAddress"
          Identifier bountyTokens
             Type: uint256
             Source: "bountyTokens"
      ExpressionStatement
         Gas costs: 5014
         Source: "bountyTokens=0"
        Assignment using operator =
           Type: uint256
           Source: "bountyTokens=0"
          Identifier bountyTokens
             Type: uint256
             Source: "bountyTokens"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
  FunctionDefinition "getFoundersTokens" - public
     Source: "function getFoundersTokens() onlyOwner{\r\n\t    require(founderTokens>0);\r\n\t    payment(founderAddress,founderTokens);\r\n\t    founderTokens=0;\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n\t    require(founderTokens>0);\r\n\t    payment(founderAddress,founderTokens);\r\n\t    founderTokens=0;\r\n\t}"
      ExpressionStatement
         Gas costs: 235
         Source: "require(founderTokens>0)"
        FunctionCall
           Type: tuple()
           Source: "require(founderTokens>0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "founderTokens>0"
            Identifier founderTokens
               Type: uint256
               Source: "founderTokens"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: 457
         Source: "payment(founderAddress,founderTokens)"
        FunctionCall
           Type: tuple()
           Source: "payment(founderAddress,founderTokens)"
          Identifier payment
             Type: function (address,uint256)
             Source: "payment"
          Identifier founderAddress
             Type: address
             Source: "founderAddress"
          Identifier founderTokens
             Type: uint256
             Source: "founderTokens"
      ExpressionStatement
         Gas costs: 5014
         Source: "founderTokens=0"
        Assignment using operator =
           Type: uint256
           Source: "founderTokens=0"
          Identifier founderTokens
             Type: uint256
             Source: "founderTokens"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
  FunctionDefinition "getAdvisersConsultantsTokens" - public
     Source: "function getAdvisersConsultantsTokens() onlyOwner{\r\n\t    require(advisersConsultantTokens>0);\r\n\t    payment(advisersConsultantsAddress,advisersConsultantTokens);\r\n\t    advisersConsultantTokens=0;\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n\t    require(advisersConsultantTokens>0);\r\n\t    payment(advisersConsultantsAddress,advisersConsultantTokens);\r\n\t    advisersConsultantTokens=0;\r\n\t}"
      ExpressionStatement
         Gas costs: 235
         Source: "require(advisersConsultantTokens>0)"
        FunctionCall
           Type: tuple()
           Source: "require(advisersConsultantTokens>0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "advisersConsultantTokens>0"
            Identifier advisersConsultantTokens
               Type: uint256
               Source: "advisersConsultantTokens"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: 457
         Source: "payment(advisersConsultantsAddress,advisersConsultantTokens)"
        FunctionCall
           Type: tuple()
           Source: "payment(advisersConsultantsAddress,advisersConsultantTokens)"
          Identifier payment
             Type: function (address,uint256)
             Source: "payment"
          Identifier advisersConsultantsAddress
             Type: address
             Source: "advisersConsultantsAddress"
          Identifier advisersConsultantTokens
             Type: uint256
             Source: "advisersConsultantTokens"
      ExpressionStatement
         Gas costs: 5014
         Source: "advisersConsultantTokens=0"
        Assignment using operator =
           Type: uint256
           Source: "advisersConsultantTokens=0"
          Identifier advisersConsultantTokens
             Type: uint256
             Source: "advisersConsultantTokens"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
  FunctionDefinition "payment"
     Source: "function payment(address _from,uint256 _tokens) internal{\r\n        if(balanceOf[this] > _tokens){\r\n            balanceOf[msg.sender] += _tokens;\r\n            balanceOf[this] -= _tokens;\r\n            Transfer(this, _from, _tokens);\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from,uint256 _tokens)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_tokens"
         Type: uint256
         Source: "uint256 _tokens"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if(balanceOf[this] > _tokens){\r\n            balanceOf[msg.sender] += _tokens;\r\n            balanceOf[this] -= _tokens;\r\n            Transfer(this, _from, _tokens);\r\n        }\r\n    }"
      IfStatement
         Source: "if(balanceOf[this] > _tokens){\r\n            balanceOf[msg.sender] += _tokens;\r\n            balanceOf[this] -= _tokens;\r\n            Transfer(this, _from, _tokens);\r\n        }"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 304
           Source: "balanceOf[this] > _tokens"
          IndexAccess
             Type: uint256
             Source: "balanceOf[this]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier this
               Type: contract Crowdsale
               Source: "this"
          Identifier _tokens
             Type: uint256
             Source: "_tokens"
        Block
           Source: "{\r\n            balanceOf[msg.sender] += _tokens;\r\n            balanceOf[this] -= _tokens;\r\n            Transfer(this, _from, _tokens);\r\n        }"
          ExpressionStatement
             Gas costs: 20328
             Source: "balanceOf[msg.sender] += _tokens"
            Assignment using operator +=
               Type: uint256
               Source: "balanceOf[msg.sender] += _tokens"
              IndexAccess
                 Type: uint256
                 Source: "balanceOf[msg.sender]"
                Identifier balanceOf
                   Type: mapping(address => uint256)
                   Source: "balanceOf"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _tokens
                 Type: uint256
                 Source: "_tokens"
          ExpressionStatement
             Gas costs: 20322
             Source: "balanceOf[this] -= _tokens"
            Assignment using operator -=
               Type: uint256
               Source: "balanceOf[this] -= _tokens"
              IndexAccess
                 Type: uint256
                 Source: "balanceOf[this]"
                Identifier balanceOf
                   Type: mapping(address => uint256)
                   Source: "balanceOf"
                Identifier this
                   Type: contract Crowdsale
                   Source: "this"
              Identifier _tokens
                 Type: uint256
                 Source: "_tokens"
          ExpressionStatement
             Gas costs: [???]
             Source: "Transfer(this, _from, _tokens)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(this, _from, _tokens)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              Identifier this
                 Type: contract Crowdsale
                 Source: "this"
              Identifier _from
                 Type: address
                 Source: "_from"
              Identifier _tokens
                 Type: uint256
                 Source: "_tokens"
  FunctionDefinition "" - public
     Source: "function() payable {\r\n        require(msg.value>0);\r\n        \r\n        if(!isPreSaleClosed()){\r\n            uint256 tokensPreSale = preSaleTotalTokens * msg.value / 1000000000000000000;\r\n            require(preSaleTotalTokens >= tokensPreSale);\r\n            payment(msg.sender,tokensPreSale);\r\n        }\r\n        else if(!isIcoClosed()){\r\n             if((icoStart+(7*24*60*60)) >= now){\r\n                 uint256 tokensWeek1 = 4000 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek1);\r\n                 payment(msg.sender,tokensWeek1);\r\n                 icoSaleTotalTokens-=tokensWeek1;\r\n            }\r\n            else if((icoStart+(14*24*60*60)) >= now){\r\n                 uint256 tokensWeek2 = 3750 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek2);\r\n                 payment(msg.sender,tokensWeek2);\r\n                 icoSaleTotalTokens-=tokensWeek2;\r\n            }\r\n            else if((icoStart+(21*24*60*60)) >= now){\r\n                 uint256 tokensWeek3 = 3500 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek3);\r\n                 payment(msg.sender,tokensWeek3);\r\n                 icoSaleTotalTokens-=tokensWeek3;\r\n            }\r\n            else if((icoStart+(28*24*60*60)) >= now){\r\n                 uint256 tokensWeek4 = 3250 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek4);\r\n                 payment(msg.sender,tokensWeek4);\r\n                 icoSaleTotalTokens-=tokensWeek4;\r\n            }\r\n            else if((icoStart+(35*24*60*60)) >= now){\r\n                 uint256 tokensWeek5 = 3000 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek5);\r\n                 payment(msg.sender, tokensWeek5);\r\n                 icoSaleTotalTokens-=tokensWeek5;\r\n            }\r\n        }\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(msg.value>0);\r\n        \r\n        if(!isPreSaleClosed()){\r\n            uint256 tokensPreSale = preSaleTotalTokens * msg.value / 1000000000000000000;\r\n            require(preSaleTotalTokens >= tokensPreSale);\r\n            payment(msg.sender,tokensPreSale);\r\n        }\r\n        else if(!isIcoClosed()){\r\n             if((icoStart+(7*24*60*60)) >= now){\r\n                 uint256 tokensWeek1 = 4000 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek1);\r\n                 payment(msg.sender,tokensWeek1);\r\n                 icoSaleTotalTokens-=tokensWeek1;\r\n            }\r\n            else if((icoStart+(14*24*60*60)) >= now){\r\n                 uint256 tokensWeek2 = 3750 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek2);\r\n                 payment(msg.sender,tokensWeek2);\r\n                 icoSaleTotalTokens-=tokensWeek2;\r\n            }\r\n            else if((icoStart+(21*24*60*60)) >= now){\r\n                 uint256 tokensWeek3 = 3500 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek3);\r\n                 payment(msg.sender,tokensWeek3);\r\n                 icoSaleTotalTokens-=tokensWeek3;\r\n            }\r\n            else if((icoStart+(28*24*60*60)) >= now){\r\n                 uint256 tokensWeek4 = 3250 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek4);\r\n                 payment(msg.sender,tokensWeek4);\r\n                 icoSaleTotalTokens-=tokensWeek4;\r\n            }\r\n            else if((icoStart+(35*24*60*60)) >= now){\r\n                 uint256 tokensWeek5 = 3000 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek5);\r\n                 payment(msg.sender, tokensWeek5);\r\n                 icoSaleTotalTokens-=tokensWeek5;\r\n            }\r\n        }\r\n\t}"
      ExpressionStatement
         Gas costs: 34
         Source: "require(msg.value>0)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.value>0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "msg.value>0"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      IfStatement
         Source: "if(!isPreSaleClosed()){\r\n            uint256 tokensPreSale = preSaleTotalTokens * msg.value / 1000000000000000000;\r\n            require(preSaleTotalTokens >= tokensPreSale);\r\n            payment(msg.sender,tokensPreSale);\r\n        }\r\n        else if(!isIcoClosed()){\r\n             if((icoStart+(7*24*60*60)) >= now){\r\n                 uint256 tokensWeek1 = 4000 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek1);\r\n                 payment(msg.sender,tokensWeek1);\r\n                 icoSaleTotalTokens-=tokensWeek1;\r\n            }\r\n            else if((icoStart+(14*24*60*60)) >= now){\r\n                 uint256 tokensWeek2 = 3750 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek2);\r\n                 payment(msg.sender,tokensWeek2);\r\n                 icoSaleTotalTokens-=tokensWeek2;\r\n            }\r\n            else if((icoStart+(21*24*60*60)) >= now){\r\n                 uint256 tokensWeek3 = 3500 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek3);\r\n                 payment(msg.sender,tokensWeek3);\r\n                 icoSaleTotalTokens-=tokensWeek3;\r\n            }\r\n            else if((icoStart+(28*24*60*60)) >= now){\r\n                 uint256 tokensWeek4 = 3250 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek4);\r\n                 payment(msg.sender,tokensWeek4);\r\n                 icoSaleTotalTokens-=tokensWeek4;\r\n            }\r\n            else if((icoStart+(35*24*60*60)) >= now){\r\n                 uint256 tokensWeek5 = 3000 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek5);\r\n                 payment(msg.sender, tokensWeek5);\r\n                 icoSaleTotalTokens-=tokensWeek5;\r\n            }\r\n        }"
        UnaryOperation (prefix) !
           Type: bool
           Gas costs: 7
           Source: "!isPreSaleClosed()"
          FunctionCall
             Type: bool
             Source: "isPreSaleClosed()"
            Identifier isPreSaleClosed
               Type: function () view returns (bool)
               Source: "isPreSaleClosed"
        Block
           Source: "{\r\n            uint256 tokensPreSale = preSaleTotalTokens * msg.value / 1000000000000000000;\r\n            require(preSaleTotalTokens >= tokensPreSale);\r\n            payment(msg.sender,tokensPreSale);\r\n        }"
          VariableDeclarationStatement
             Gas costs: 249
             Source: "uint256 tokensPreSale = preSaleTotalTokens * msg.value / 1000000000000000000"
            VariableDeclaration "tokensPreSale"
               Type: uint256
               Source: "uint256 tokensPreSale"
              ElementaryTypeName uint256
                 Source: "uint256"
            BinaryOperation using operator /
               Type: uint256
               Source: "preSaleTotalTokens * msg.value / 1000000000000000000"
              BinaryOperation using operator *
                 Type: uint256
                 Source: "preSaleTotalTokens * msg.value"
                Identifier preSaleTotalTokens
                   Type: uint256
                   Source: "preSaleTotalTokens"
                MemberAccess to member value
                   Type: uint256
                   Source: "msg.value"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Literal, token: [no token] value: 1000000000000000000
                 Type: int_const 1000000000000000000
                 Source: "1000000000000000000"
          ExpressionStatement
             Gas costs: 238
             Source: "require(preSaleTotalTokens >= tokensPreSale)"
            FunctionCall
               Type: tuple()
               Source: "require(preSaleTotalTokens >= tokensPreSale)"
              Identifier require
                 Type: function (bool) pure
                 Source: "require"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "preSaleTotalTokens >= tokensPreSale"
                Identifier preSaleTotalTokens
                   Type: uint256
                   Source: "preSaleTotalTokens"
                Identifier tokensPreSale
                   Type: uint256
                   Source: "tokensPreSale"
          ExpressionStatement
             Gas costs: 9
             Source: "payment(msg.sender,tokensPreSale)"
            FunctionCall
               Type: tuple()
               Source: "payment(msg.sender,tokensPreSale)"
              Identifier payment
                 Type: function (address,uint256)
                 Source: "payment"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier tokensPreSale
                 Type: uint256
                 Source: "tokensPreSale"
        IfStatement
           Source: "if(!isIcoClosed()){\r\n             if((icoStart+(7*24*60*60)) >= now){\r\n                 uint256 tokensWeek1 = 4000 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek1);\r\n                 payment(msg.sender,tokensWeek1);\r\n                 icoSaleTotalTokens-=tokensWeek1;\r\n            }\r\n            else if((icoStart+(14*24*60*60)) >= now){\r\n                 uint256 tokensWeek2 = 3750 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek2);\r\n                 payment(msg.sender,tokensWeek2);\r\n                 icoSaleTotalTokens-=tokensWeek2;\r\n            }\r\n            else if((icoStart+(21*24*60*60)) >= now){\r\n                 uint256 tokensWeek3 = 3500 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek3);\r\n                 payment(msg.sender,tokensWeek3);\r\n                 icoSaleTotalTokens-=tokensWeek3;\r\n            }\r\n            else if((icoStart+(28*24*60*60)) >= now){\r\n                 uint256 tokensWeek4 = 3250 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek4);\r\n                 payment(msg.sender,tokensWeek4);\r\n                 icoSaleTotalTokens-=tokensWeek4;\r\n            }\r\n            else if((icoStart+(35*24*60*60)) >= now){\r\n                 uint256 tokensWeek5 = 3000 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek5);\r\n                 payment(msg.sender, tokensWeek5);\r\n                 icoSaleTotalTokens-=tokensWeek5;\r\n            }\r\n        }"
          UnaryOperation (prefix) !
             Type: bool
             Gas costs: 7
             Source: "!isIcoClosed()"
            FunctionCall
               Type: bool
               Source: "isIcoClosed()"
              Identifier isIcoClosed
                 Type: function () view returns (bool)
                 Source: "isIcoClosed"
          Block
             Source: "{\r\n             if((icoStart+(7*24*60*60)) >= now){\r\n                 uint256 tokensWeek1 = 4000 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek1);\r\n                 payment(msg.sender,tokensWeek1);\r\n                 icoSaleTotalTokens-=tokensWeek1;\r\n            }\r\n            else if((icoStart+(14*24*60*60)) >= now){\r\n                 uint256 tokensWeek2 = 3750 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek2);\r\n                 payment(msg.sender,tokensWeek2);\r\n                 icoSaleTotalTokens-=tokensWeek2;\r\n            }\r\n            else if((icoStart+(21*24*60*60)) >= now){\r\n                 uint256 tokensWeek3 = 3500 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek3);\r\n                 payment(msg.sender,tokensWeek3);\r\n                 icoSaleTotalTokens-=tokensWeek3;\r\n            }\r\n            else if((icoStart+(28*24*60*60)) >= now){\r\n                 uint256 tokensWeek4 = 3250 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek4);\r\n                 payment(msg.sender,tokensWeek4);\r\n                 icoSaleTotalTokens-=tokensWeek4;\r\n            }\r\n            else if((icoStart+(35*24*60*60)) >= now){\r\n                 uint256 tokensWeek5 = 3000 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek5);\r\n                 payment(msg.sender, tokensWeek5);\r\n                 icoSaleTotalTokens-=tokensWeek5;\r\n            }\r\n        }"
            IfStatement
               Source: "if((icoStart+(7*24*60*60)) >= now){\r\n                 uint256 tokensWeek1 = 4000 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek1);\r\n                 payment(msg.sender,tokensWeek1);\r\n                 icoSaleTotalTokens-=tokensWeek1;\r\n            }\r\n            else if((icoStart+(14*24*60*60)) >= now){\r\n                 uint256 tokensWeek2 = 3750 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek2);\r\n                 payment(msg.sender,tokensWeek2);\r\n                 icoSaleTotalTokens-=tokensWeek2;\r\n            }\r\n            else if((icoStart+(21*24*60*60)) >= now){\r\n                 uint256 tokensWeek3 = 3500 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek3);\r\n                 payment(msg.sender,tokensWeek3);\r\n                 icoSaleTotalTokens-=tokensWeek3;\r\n            }\r\n            else if((icoStart+(28*24*60*60)) >= now){\r\n                 uint256 tokensWeek4 = 3250 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek4);\r\n                 payment(msg.sender,tokensWeek4);\r\n                 icoSaleTotalTokens-=tokensWeek4;\r\n            }\r\n            else if((icoStart+(35*24*60*60)) >= now){\r\n                 uint256 tokensWeek5 = 3000 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek5);\r\n                 payment(msg.sender, tokensWeek5);\r\n                 icoSaleTotalTokens-=tokensWeek5;\r\n            }"
              BinaryOperation using operator >=
                 Type: bool
                 Gas costs: 217
                 Source: "(icoStart+(7*24*60*60)) >= now"
                TupleExpression
                   Type: uint256
                   Source: "(icoStart+(7*24*60*60))"
                  BinaryOperation using operator +
                     Type: uint256
                     Source: "icoStart+(7*24*60*60)"
                    Identifier icoStart
                       Type: uint256
                       Source: "icoStart"
                    TupleExpression
                       Type: int_const 604800
                       Source: "(7*24*60*60)"
                      BinaryOperation using operator *
                         Type: int_const 604800
                         Source: "7*24*60*60"
                        BinaryOperation using operator *
                           Type: int_const 10080
                           Source: "7*24*60"
                          BinaryOperation using operator *
                             Type: int_const 168
                             Source: "7*24"
                            Literal, token: [no token] value: 7
                               Type: int_const 7
                               Source: "7"
                            Literal, token: [no token] value: 24
                               Type: int_const 24
                               Source: "24"
                          Literal, token: [no token] value: 60
                             Type: int_const 60
                             Source: "60"
                        Literal, token: [no token] value: 60
                           Type: int_const 60
                           Source: "60"
                Identifier now
                   Type: uint256
                   Source: "now"
              Block
                 Source: "{\r\n                 uint256 tokensWeek1 = 4000 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek1);\r\n                 payment(msg.sender,tokensWeek1);\r\n                 icoSaleTotalTokens-=tokensWeek1;\r\n            }"
                VariableDeclarationStatement
                   Gas costs: 49
                   Source: "uint256 tokensWeek1 = 4000 * msg.value / 1000000000000000000"
                  VariableDeclaration "tokensWeek1"
                     Type: uint256
                     Source: "uint256 tokensWeek1"
                    ElementaryTypeName uint256
                       Source: "uint256"
                  BinaryOperation using operator /
                     Type: uint256
                     Source: "4000 * msg.value / 1000000000000000000"
                    BinaryOperation using operator *
                       Type: uint256
                       Source: "4000 * msg.value"
                      Literal, token: [no token] value: 4000
                         Type: int_const 4000
                         Source: "4000"
                      MemberAccess to member value
                         Type: uint256
                         Source: "msg.value"
                        Identifier msg
                           Type: msg
                           Source: "msg"
                    Literal, token: [no token] value: 1000000000000000000
                       Type: int_const 1000000000000000000
                       Source: "1000000000000000000"
                ExpressionStatement
                   Gas costs: 238
                   Source: "require(icoSaleTotalTokens >= tokensWeek1)"
                  FunctionCall
                     Type: tuple()
                     Source: "require(icoSaleTotalTokens >= tokensWeek1)"
                    Identifier require
                       Type: function (bool) pure
                       Source: "require"
                    BinaryOperation using operator >=
                       Type: bool
                       Source: "icoSaleTotalTokens >= tokensWeek1"
                      Identifier icoSaleTotalTokens
                         Type: uint256
                         Source: "icoSaleTotalTokens"
                      Identifier tokensWeek1
                         Type: uint256
                         Source: "tokensWeek1"
                ExpressionStatement
                   Gas costs: 20
                   Source: "payment(msg.sender,tokensWeek1)"
                  FunctionCall
                     Type: tuple()
                     Source: "payment(msg.sender,tokensWeek1)"
                    Identifier payment
                       Type: function (address,uint256)
                       Source: "payment"
                    MemberAccess to member sender
                       Type: address
                       Source: "msg.sender"
                      Identifier msg
                         Type: msg
                         Source: "msg"
                    Identifier tokensWeek1
                       Type: uint256
                       Source: "tokensWeek1"
                ExpressionStatement
                   Gas costs: 20233
                   Source: "icoSaleTotalTokens-=tokensWeek1"
                  Assignment using operator -=
                     Type: uint256
                     Source: "icoSaleTotalTokens-=tokensWeek1"
                    Identifier icoSaleTotalTokens
                       Type: uint256
                       Source: "icoSaleTotalTokens"
                    Identifier tokensWeek1
                       Type: uint256
                       Source: "tokensWeek1"
              IfStatement
                 Source: "if((icoStart+(14*24*60*60)) >= now){\r\n                 uint256 tokensWeek2 = 3750 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek2);\r\n                 payment(msg.sender,tokensWeek2);\r\n                 icoSaleTotalTokens-=tokensWeek2;\r\n            }\r\n            else if((icoStart+(21*24*60*60)) >= now){\r\n                 uint256 tokensWeek3 = 3500 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek3);\r\n                 payment(msg.sender,tokensWeek3);\r\n                 icoSaleTotalTokens-=tokensWeek3;\r\n            }\r\n            else if((icoStart+(28*24*60*60)) >= now){\r\n                 uint256 tokensWeek4 = 3250 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek4);\r\n                 payment(msg.sender,tokensWeek4);\r\n                 icoSaleTotalTokens-=tokensWeek4;\r\n            }\r\n            else if((icoStart+(35*24*60*60)) >= now){\r\n                 uint256 tokensWeek5 = 3000 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek5);\r\n                 payment(msg.sender, tokensWeek5);\r\n                 icoSaleTotalTokens-=tokensWeek5;\r\n            }"
                BinaryOperation using operator >=
                   Type: bool
                   Gas costs: 217
                   Source: "(icoStart+(14*24*60*60)) >= now"
                  TupleExpression
                     Type: uint256
                     Source: "(icoStart+(14*24*60*60))"
                    BinaryOperation using operator +
                       Type: uint256
                       Source: "icoStart+(14*24*60*60)"
                      Identifier icoStart
                         Type: uint256
                         Source: "icoStart"
                      TupleExpression
                         Type: int_const 1209600
                         Source: "(14*24*60*60)"
                        BinaryOperation using operator *
                           Type: int_const 1209600
                           Source: "14*24*60*60"
                          BinaryOperation using operator *
                             Type: int_const 20160
                             Source: "14*24*60"
                            BinaryOperation using operator *
                               Type: int_const 336
                               Source: "14*24"
                              Literal, token: [no token] value: 14
                                 Type: int_const 14
                                 Source: "14"
                              Literal, token: [no token] value: 24
                                 Type: int_const 24
                                 Source: "24"
                            Literal, token: [no token] value: 60
                               Type: int_const 60
                               Source: "60"
                          Literal, token: [no token] value: 60
                             Type: int_const 60
                             Source: "60"
                  Identifier now
                     Type: uint256
                     Source: "now"
                Block
                   Source: "{\r\n                 uint256 tokensWeek2 = 3750 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek2);\r\n                 payment(msg.sender,tokensWeek2);\r\n                 icoSaleTotalTokens-=tokensWeek2;\r\n            }"
                  VariableDeclarationStatement
                     Gas costs: 49
                     Source: "uint256 tokensWeek2 = 3750 * msg.value / 1000000000000000000"
                    VariableDeclaration "tokensWeek2"
                       Type: uint256
                       Source: "uint256 tokensWeek2"
                      ElementaryTypeName uint256
                         Source: "uint256"
                    BinaryOperation using operator /
                       Type: uint256
                       Source: "3750 * msg.value / 1000000000000000000"
                      BinaryOperation using operator *
                         Type: uint256
                         Source: "3750 * msg.value"
                        Literal, token: [no token] value: 3750
                           Type: int_const 3750
                           Source: "3750"
                        MemberAccess to member value
                           Type: uint256
                           Source: "msg.value"
                          Identifier msg
                             Type: msg
                             Source: "msg"
                      Literal, token: [no token] value: 1000000000000000000
                         Type: int_const 1000000000000000000
                         Source: "1000000000000000000"
                  ExpressionStatement
                     Gas costs: 238
                     Source: "require(icoSaleTotalTokens >= tokensWeek2)"
                    FunctionCall
                       Type: tuple()
                       Source: "require(icoSaleTotalTokens >= tokensWeek2)"
                      Identifier require
                         Type: function (bool) pure
                         Source: "require"
                      BinaryOperation using operator >=
                         Type: bool
                         Source: "icoSaleTotalTokens >= tokensWeek2"
                        Identifier icoSaleTotalTokens
                           Type: uint256
                           Source: "icoSaleTotalTokens"
                        Identifier tokensWeek2
                           Type: uint256
                           Source: "tokensWeek2"
                  ExpressionStatement
                     Gas costs: 20
                     Source: "payment(msg.sender,tokensWeek2)"
                    FunctionCall
                       Type: tuple()
                       Source: "payment(msg.sender,tokensWeek2)"
                      Identifier payment
                         Type: function (address,uint256)
                         Source: "payment"
                      MemberAccess to member sender
                         Type: address
                         Source: "msg.sender"
                        Identifier msg
                           Type: msg
                           Source: "msg"
                      Identifier tokensWeek2
                         Type: uint256
                         Source: "tokensWeek2"
                  ExpressionStatement
                     Gas costs: 20233
                     Source: "icoSaleTotalTokens-=tokensWeek2"
                    Assignment using operator -=
                       Type: uint256
                       Source: "icoSaleTotalTokens-=tokensWeek2"
                      Identifier icoSaleTotalTokens
                         Type: uint256
                         Source: "icoSaleTotalTokens"
                      Identifier tokensWeek2
                         Type: uint256
                         Source: "tokensWeek2"
                IfStatement
                   Source: "if((icoStart+(21*24*60*60)) >= now){\r\n                 uint256 tokensWeek3 = 3500 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek3);\r\n                 payment(msg.sender,tokensWeek3);\r\n                 icoSaleTotalTokens-=tokensWeek3;\r\n            }\r\n            else if((icoStart+(28*24*60*60)) >= now){\r\n                 uint256 tokensWeek4 = 3250 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek4);\r\n                 payment(msg.sender,tokensWeek4);\r\n                 icoSaleTotalTokens-=tokensWeek4;\r\n            }\r\n            else if((icoStart+(35*24*60*60)) >= now){\r\n                 uint256 tokensWeek5 = 3000 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek5);\r\n                 payment(msg.sender, tokensWeek5);\r\n                 icoSaleTotalTokens-=tokensWeek5;\r\n            }"
                  BinaryOperation using operator >=
                     Type: bool
                     Gas costs: 217
                     Source: "(icoStart+(21*24*60*60)) >= now"
                    TupleExpression
                       Type: uint256
                       Source: "(icoStart+(21*24*60*60))"
                      BinaryOperation using operator +
                         Type: uint256
                         Source: "icoStart+(21*24*60*60)"
                        Identifier icoStart
                           Type: uint256
                           Source: "icoStart"
                        TupleExpression
                           Type: int_const 1814400
                           Source: "(21*24*60*60)"
                          BinaryOperation using operator *
                             Type: int_const 1814400
                             Source: "21*24*60*60"
                            BinaryOperation using operator *
                               Type: int_const 30240
                               Source: "21*24*60"
                              BinaryOperation using operator *
                                 Type: int_const 504
                                 Source: "21*24"
                                Literal, token: [no token] value: 21
                                   Type: int_const 21
                                   Source: "21"
                                Literal, token: [no token] value: 24
                                   Type: int_const 24
                                   Source: "24"
                              Literal, token: [no token] value: 60
                                 Type: int_const 60
                                 Source: "60"
                            Literal, token: [no token] value: 60
                               Type: int_const 60
                               Source: "60"
                    Identifier now
                       Type: uint256
                       Source: "now"
                  Block
                     Source: "{\r\n                 uint256 tokensWeek3 = 3500 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek3);\r\n                 payment(msg.sender,tokensWeek3);\r\n                 icoSaleTotalTokens-=tokensWeek3;\r\n            }"
                    VariableDeclarationStatement
                       Gas costs: 49
                       Source: "uint256 tokensWeek3 = 3500 * msg.value / 1000000000000000000"
                      VariableDeclaration "tokensWeek3"
                         Type: uint256
                         Source: "uint256 tokensWeek3"
                        ElementaryTypeName uint256
                           Source: "uint256"
                      BinaryOperation using operator /
                         Type: uint256
                         Source: "3500 * msg.value / 1000000000000000000"
                        BinaryOperation using operator *
                           Type: uint256
                           Source: "3500 * msg.value"
                          Literal, token: [no token] value: 3500
                             Type: int_const 3500
                             Source: "3500"
                          MemberAccess to member value
                             Type: uint256
                             Source: "msg.value"
                            Identifier msg
                               Type: msg
                               Source: "msg"
                        Literal, token: [no token] value: 1000000000000000000
                           Type: int_const 1000000000000000000
                           Source: "1000000000000000000"
                    ExpressionStatement
                       Gas costs: 238
                       Source: "require(icoSaleTotalTokens >= tokensWeek3)"
                      FunctionCall
                         Type: tuple()
                         Source: "require(icoSaleTotalTokens >= tokensWeek3)"
                        Identifier require
                           Type: function (bool) pure
                           Source: "require"
                        BinaryOperation using operator >=
                           Type: bool
                           Source: "icoSaleTotalTokens >= tokensWeek3"
                          Identifier icoSaleTotalTokens
                             Type: uint256
                             Source: "icoSaleTotalTokens"
                          Identifier tokensWeek3
                             Type: uint256
                             Source: "tokensWeek3"
                    ExpressionStatement
                       Gas costs: 20
                       Source: "payment(msg.sender,tokensWeek3)"
                      FunctionCall
                         Type: tuple()
                         Source: "payment(msg.sender,tokensWeek3)"
                        Identifier payment
                           Type: function (address,uint256)
                           Source: "payment"
                        MemberAccess to member sender
                           Type: address
                           Source: "msg.sender"
                          Identifier msg
                             Type: msg
                             Source: "msg"
                        Identifier tokensWeek3
                           Type: uint256
                           Source: "tokensWeek3"
                    ExpressionStatement
                       Gas costs: 20233
                       Source: "icoSaleTotalTokens-=tokensWeek3"
                      Assignment using operator -=
                         Type: uint256
                         Source: "icoSaleTotalTokens-=tokensWeek3"
                        Identifier icoSaleTotalTokens
                           Type: uint256
                           Source: "icoSaleTotalTokens"
                        Identifier tokensWeek3
                           Type: uint256
                           Source: "tokensWeek3"
                  IfStatement
                     Source: "if((icoStart+(28*24*60*60)) >= now){\r\n                 uint256 tokensWeek4 = 3250 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek4);\r\n                 payment(msg.sender,tokensWeek4);\r\n                 icoSaleTotalTokens-=tokensWeek4;\r\n            }\r\n            else if((icoStart+(35*24*60*60)) >= now){\r\n                 uint256 tokensWeek5 = 3000 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek5);\r\n                 payment(msg.sender, tokensWeek5);\r\n                 icoSaleTotalTokens-=tokensWeek5;\r\n            }"
                    BinaryOperation using operator >=
                       Type: bool
                       Gas costs: 217
                       Source: "(icoStart+(28*24*60*60)) >= now"
                      TupleExpression
                         Type: uint256
                         Source: "(icoStart+(28*24*60*60))"
                        BinaryOperation using operator +
                           Type: uint256
                           Source: "icoStart+(28*24*60*60)"
                          Identifier icoStart
                             Type: uint256
                             Source: "icoStart"
                          TupleExpression
                             Type: int_const 2419200
                             Source: "(28*24*60*60)"
                            BinaryOperation using operator *
                               Type: int_const 2419200
                               Source: "28*24*60*60"
                              BinaryOperation using operator *
                                 Type: int_const 40320
                                 Source: "28*24*60"
                                BinaryOperation using operator *
                                   Type: int_const 672
                                   Source: "28*24"
                                  Literal, token: [no token] value: 28
                                     Type: int_const 28
                                     Source: "28"
                                  Literal, token: [no token] value: 24
                                     Type: int_const 24
                                     Source: "24"
                                Literal, token: [no token] value: 60
                                   Type: int_const 60
                                   Source: "60"
                              Literal, token: [no token] value: 60
                                 Type: int_const 60
                                 Source: "60"
                      Identifier now
                         Type: uint256
                         Source: "now"
                    Block
                       Source: "{\r\n                 uint256 tokensWeek4 = 3250 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek4);\r\n                 payment(msg.sender,tokensWeek4);\r\n                 icoSaleTotalTokens-=tokensWeek4;\r\n            }"
                      VariableDeclarationStatement
                         Gas costs: 49
                         Source: "uint256 tokensWeek4 = 3250 * msg.value / 1000000000000000000"
                        VariableDeclaration "tokensWeek4"
                           Type: uint256
                           Source: "uint256 tokensWeek4"
                          ElementaryTypeName uint256
                             Source: "uint256"
                        BinaryOperation using operator /
                           Type: uint256
                           Source: "3250 * msg.value / 1000000000000000000"
                          BinaryOperation using operator *
                             Type: uint256
                             Source: "3250 * msg.value"
                            Literal, token: [no token] value: 3250
                               Type: int_const 3250
                               Source: "3250"
                            MemberAccess to member value
                               Type: uint256
                               Source: "msg.value"
                              Identifier msg
                                 Type: msg
                                 Source: "msg"
                          Literal, token: [no token] value: 1000000000000000000
                             Type: int_const 1000000000000000000
                             Source: "1000000000000000000"
                      ExpressionStatement
                         Gas costs: 238
                         Source: "require(icoSaleTotalTokens >= tokensWeek4)"
                        FunctionCall
                           Type: tuple()
                           Source: "require(icoSaleTotalTokens >= tokensWeek4)"
                          Identifier require
                             Type: function (bool) pure
                             Source: "require"
                          BinaryOperation using operator >=
                             Type: bool
                             Source: "icoSaleTotalTokens >= tokensWeek4"
                            Identifier icoSaleTotalTokens
                               Type: uint256
                               Source: "icoSaleTotalTokens"
                            Identifier tokensWeek4
                               Type: uint256
                               Source: "tokensWeek4"
                      ExpressionStatement
                         Gas costs: 20
                         Source: "payment(msg.sender,tokensWeek4)"
                        FunctionCall
                           Type: tuple()
                           Source: "payment(msg.sender,tokensWeek4)"
                          Identifier payment
                             Type: function (address,uint256)
                             Source: "payment"
                          MemberAccess to member sender
                             Type: address
                             Source: "msg.sender"
                            Identifier msg
                               Type: msg
                               Source: "msg"
                          Identifier tokensWeek4
                             Type: uint256
                             Source: "tokensWeek4"
                      ExpressionStatement
                         Gas costs: 20233
                         Source: "icoSaleTotalTokens-=tokensWeek4"
                        Assignment using operator -=
                           Type: uint256
                           Source: "icoSaleTotalTokens-=tokensWeek4"
                          Identifier icoSaleTotalTokens
                             Type: uint256
                             Source: "icoSaleTotalTokens"
                          Identifier tokensWeek4
                             Type: uint256
                             Source: "tokensWeek4"
                    IfStatement
                       Source: "if((icoStart+(35*24*60*60)) >= now){\r\n                 uint256 tokensWeek5 = 3000 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek5);\r\n                 payment(msg.sender, tokensWeek5);\r\n                 icoSaleTotalTokens-=tokensWeek5;\r\n            }"
                      BinaryOperation using operator >=
                         Type: bool
                         Gas costs: 217
                         Source: "(icoStart+(35*24*60*60)) >= now"
                        TupleExpression
                           Type: uint256
                           Source: "(icoStart+(35*24*60*60))"
                          BinaryOperation using operator +
                             Type: uint256
                             Source: "icoStart+(35*24*60*60)"
                            Identifier icoStart
                               Type: uint256
                               Source: "icoStart"
                            TupleExpression
                               Type: int_const 3024000
                               Source: "(35*24*60*60)"
                              BinaryOperation using operator *
                                 Type: int_const 3024000
                                 Source: "35*24*60*60"
                                BinaryOperation using operator *
                                   Type: int_const 50400
                                   Source: "35*24*60"
                                  BinaryOperation using operator *
                                     Type: int_const 840
                                     Source: "35*24"
                                    Literal, token: [no token] value: 35
                                       Type: int_const 35
                                       Source: "35"
                                    Literal, token: [no token] value: 24
                                       Type: int_const 24
                                       Source: "24"
                                  Literal, token: [no token] value: 60
                                     Type: int_const 60
                                     Source: "60"
                                Literal, token: [no token] value: 60
                                   Type: int_const 60
                                   Source: "60"
                        Identifier now
                           Type: uint256
                           Source: "now"
                      Block
                         Source: "{\r\n                 uint256 tokensWeek5 = 3000 * msg.value / 1000000000000000000;\r\n                 require(icoSaleTotalTokens >= tokensWeek5);\r\n                 payment(msg.sender, tokensWeek5);\r\n                 icoSaleTotalTokens-=tokensWeek5;\r\n            }"
                        VariableDeclarationStatement
                           Gas costs: 49
                           Source: "uint256 tokensWeek5 = 3000 * msg.value / 1000000000000000000"
                          VariableDeclaration "tokensWeek5"
                             Type: uint256
                             Source: "uint256 tokensWeek5"
                            ElementaryTypeName uint256
                               Source: "uint256"
                          BinaryOperation using operator /
                             Type: uint256
                             Source: "3000 * msg.value / 1000000000000000000"
                            BinaryOperation using operator *
                               Type: uint256
                               Source: "3000 * msg.value"
                              Literal, token: [no token] value: 3000
                                 Type: int_const 3000
                                 Source: "3000"
                              MemberAccess to member value
                                 Type: uint256
                                 Source: "msg.value"
                                Identifier msg
                                   Type: msg
                                   Source: "msg"
                            Literal, token: [no token] value: 1000000000000000000
                               Type: int_const 1000000000000000000
                               Source: "1000000000000000000"
                        ExpressionStatement
                           Gas costs: 238
                           Source: "require(icoSaleTotalTokens >= tokensWeek5)"
                          FunctionCall
                             Type: tuple()
                             Source: "require(icoSaleTotalTokens >= tokensWeek5)"
                            Identifier require
                               Type: function (bool) pure
                               Source: "require"
                            BinaryOperation using operator >=
                               Type: bool
                               Source: "icoSaleTotalTokens >= tokensWeek5"
                              Identifier icoSaleTotalTokens
                                 Type: uint256
                                 Source: "icoSaleTotalTokens"
                              Identifier tokensWeek5
                                 Type: uint256
                                 Source: "tokensWeek5"
                        ExpressionStatement
                           Gas costs: 20
                           Source: "payment(msg.sender, tokensWeek5)"
                          FunctionCall
                             Type: tuple()
                             Source: "payment(msg.sender, tokensWeek5)"
                            Identifier payment
                               Type: function (address,uint256)
                               Source: "payment"
                            MemberAccess to member sender
                               Type: address
                               Source: "msg.sender"
                              Identifier msg
                                 Type: msg
                                 Source: "msg"
                            Identifier tokensWeek5
                               Type: uint256
                               Source: "tokensWeek5"
                        ExpressionStatement
                           Gas costs: 20233
                           Source: "icoSaleTotalTokens-=tokensWeek5"
                          Assignment using operator -=
                             Type: uint256
                             Source: "icoSaleTotalTokens-=tokensWeek5"
                            Identifier icoSaleTotalTokens
                               Type: uint256
                               Source: "icoSaleTotalTokens"
                            Identifier tokensWeek5
                               Type: uint256
                               Source: "tokensWeek5"
ContractDefinition "GraphenePowerToken"
   Source: "contract GraphenePowerToken is Crowdsale {\r\n    \r\n    /* Public variables of the token */\r\n\tstring public standard = 'Token 0.1';\r\n\r\n\tstring public name = 'Graphene Power';\r\n\r\n\tstring public symbol = 'GRP';\r\n\r\n\tuint8 public decimals = 18;\r\n\r\n\tuint256 _totalSupply =500000000;\r\n\r\n\t/* This creates an array with all balances */\r\n\tmapping (address => uint256) balances;\r\n\r\n\t/* This generates a public event on the blockchain that will notify clients */\r\n\tevent Transfer(address from, address to, uint256 value);\r\n\r\n    bool transfersEnable=false;\r\n    \r\n\t//*** Total Supply ***//\r\n\tfunction totalSupply() constant returns (uint256 totalSupply) {\r\n\t\ttotalSupply = _totalSupply;\r\n\t}\r\n\t\r\n\t/*** Send coins ***/\r\n\tfunction transfer(address _to, uint256 _value) returns (bool success) {\r\n\t\tif (transfersEnable) {\r\n\t       require(balanceOf[msg.sender] >= _value);\r\n           balanceOf[msg.sender] -= _value;\r\n           balanceOf[_to] += _value;\r\n           Transfer(msg.sender, _to, _value);\r\n\t\t   return true;\r\n\t\t}\r\n      \telse{\r\n\t           return false;\r\n\t        }\r\n\t}\r\n\t\r\n\t//*** Transfer Enabled ***//\r\n\tfunction transfersEnabled() onlyOwner{\r\n\t    require(!transfersEnable);\r\n\t    transfersEnable=true;\r\n\t}\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Crowdsale"
    UserDefinedTypeName "Crowdsale"
       Source: "Crowdsale"
  VariableDeclaration "standard"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public standard = 'Token 0.1'"
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: Token 0.1
       Type: literal_string "Token 0.1"
       Source: "'Token 0.1'"
  VariableDeclaration "name"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public name = 'Graphene Power'"
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: Graphene Power
       Type: literal_string "Graphene Power"
       Source: "'Graphene Power'"
  VariableDeclaration "symbol"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public symbol = 'GRP'"
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: GRP
       Type: literal_string "GRP"
       Source: "'GRP'"
  VariableDeclaration "decimals"
     Type: uint8
     Gas costs: [???]
     Source: "uint8 public decimals = 18"
    ElementaryTypeName uint8
       Source: "uint8"
    Literal, token: [no token] value: 18
       Type: int_const 18
       Source: "18"
  VariableDeclaration "_totalSupply"
     Type: uint256
     Gas costs: 0
     Source: "uint256 _totalSupply =500000000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 500000000
       Type: int_const 500000000
       Source: "500000000"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping (address => uint256) balances"
    Mapping
       Source: "mapping (address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  EventDefinition "Transfer"
     Gas costs: 0
     Source: "event Transfer(address from, address to, uint256 value);"
    ParameterList
       Source: "(address from, address to, uint256 value)"
      VariableDeclaration "from"
         Type: address
         Source: "address from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
  VariableDeclaration "transfersEnable"
     Type: bool
     Gas costs: 0
     Source: "bool transfersEnable=false"
    ElementaryTypeName bool
       Source: "bool"
    Literal, token: false value: false
       Type: bool
       Source: "false"
  FunctionDefinition "totalSupply" - public - const
     Source: "function totalSupply() constant returns (uint256 totalSupply) {\r\n\t\ttotalSupply = _totalSupply;\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256 totalSupply)"
      VariableDeclaration "totalSupply"
         Type: uint256
         Source: "uint256 totalSupply"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n\t\ttotalSupply = _totalSupply;\r\n\t}"
      ExpressionStatement
         Gas costs: 208
         Source: "totalSupply = _totalSupply"
        Assignment using operator =
           Type: uint256
           Source: "totalSupply = _totalSupply"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          Identifier _totalSupply
             Type: uint256
             Source: "_totalSupply"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) returns (bool success) {\r\n\t\tif (transfersEnable) {\r\n\t       require(balanceOf[msg.sender] >= _value);\r\n           balanceOf[msg.sender] -= _value;\r\n           balanceOf[_to] += _value;\r\n           Transfer(msg.sender, _to, _value);\r\n\t\t   return true;\r\n\t\t}\r\n      \telse{\r\n\t           return false;\r\n\t        }\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n\t\tif (transfersEnable) {\r\n\t       require(balanceOf[msg.sender] >= _value);\r\n           balanceOf[msg.sender] -= _value;\r\n           balanceOf[_to] += _value;\r\n           Transfer(msg.sender, _to, _value);\r\n\t\t   return true;\r\n\t\t}\r\n      \telse{\r\n\t           return false;\r\n\t        }\r\n\t}"
      IfStatement
         Source: "if (transfersEnable) {\r\n\t       require(balanceOf[msg.sender] >= _value);\r\n           balanceOf[msg.sender] -= _value;\r\n           balanceOf[_to] += _value;\r\n           Transfer(msg.sender, _to, _value);\r\n\t\t   return true;\r\n\t\t}\r\n      \telse{\r\n\t           return false;\r\n\t        }"
        Identifier transfersEnable
           Type: bool
           Gas costs: 239
           Source: "transfersEnable"
        Block
           Source: "{\r\n\t       require(balanceOf[msg.sender] >= _value);\r\n           balanceOf[msg.sender] -= _value;\r\n           balanceOf[_to] += _value;\r\n           Transfer(msg.sender, _to, _value);\r\n\t\t   return true;\r\n\t\t}"
          ExpressionStatement
             Gas costs: 333
             Source: "require(balanceOf[msg.sender] >= _value)"
            FunctionCall
               Type: tuple()
               Source: "require(balanceOf[msg.sender] >= _value)"
              Identifier require
                 Type: function (bool) pure
                 Source: "require"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "balanceOf[msg.sender] >= _value"
                IndexAccess
                   Type: uint256
                   Source: "balanceOf[msg.sender]"
                  Identifier balanceOf
                     Type: mapping(address => uint256)
                     Source: "balanceOf"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
                Identifier _value
                   Type: uint256
                   Source: "_value"
          ExpressionStatement
             Gas costs: 20328
             Source: "balanceOf[msg.sender] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "balanceOf[msg.sender] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "balanceOf[msg.sender]"
                Identifier balanceOf
                   Type: mapping(address => uint256)
                   Source: "balanceOf"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20323
             Source: "balanceOf[_to] += _value"
            Assignment using operator +=
               Type: uint256
               Source: "balanceOf[_to] += _value"
              IndexAccess
                 Type: uint256
                 Source: "balanceOf[_to]"
                Identifier balanceOf
                   Type: mapping(address => uint256)
                   Source: "balanceOf"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: [???]
             Source: "Transfer(msg.sender, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(msg.sender, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{\r\n\t           return false;\r\n\t        }"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "transfersEnabled" - public
     Source: "function transfersEnabled() onlyOwner{\r\n\t    require(!transfersEnable);\r\n\t    transfersEnable=true;\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n\t    require(!transfersEnable);\r\n\t    transfersEnable=true;\r\n\t}"
      ExpressionStatement
         Gas costs: 268
         Source: "require(!transfersEnable)"
        FunctionCall
           Type: tuple()
           Source: "require(!transfersEnable)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!transfersEnable"
            Identifier transfersEnable
               Type: bool
               Source: "transfersEnable"
      ExpressionStatement
         Gas costs: 20267
         Source: "transfersEnable=true"
        Assignment using operator =
           Type: bool
           Source: "transfersEnable=true"
          Identifier transfersEnable
             Type: bool
             Source: "transfersEnable"
          Literal, token: true value: true
             Type: bool
             Source: "true"
