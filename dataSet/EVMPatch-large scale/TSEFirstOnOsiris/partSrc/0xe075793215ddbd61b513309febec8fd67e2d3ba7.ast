Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0xe075793215ddbd61b513309febec8fd67e2d3ba7.sol =======
ContractDefinition "ERC223ReceivingContract"
   Source: "contract ERC223ReceivingContract {\r\n     \r\n    struct iGn {\r\n        address sender;\r\n        uint value;\r\n        bytes data;\r\n        bytes4 sig;\r\n    }\r\n    \r\n      function tokenFallback(address _from, uint _value, bytes _data){\r\n      iGn memory ignite;\r\n      ignite.sender = _from;\r\n      ignite.value = _value;\r\n      ignite.data = _data;\r\n      uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\r\n      ignite.sig = bytes4(u);\r\n \r\n    }\r\n}"
  StructDefinition "iGn"
     Gas costs: 0
     Source: "struct iGn {\r\n        address sender;\r\n        uint value;\r\n        bytes data;\r\n        bytes4 sig;\r\n    }"
    VariableDeclaration "sender"
       Type: address
       Source: "address sender"
      ElementaryTypeName address
         Source: "address"
    VariableDeclaration "value"
       Type: uint256
       Source: "uint value"
      ElementaryTypeName uint
         Source: "uint"
    VariableDeclaration "data"
       Type: bytes storage pointer
       Source: "bytes data"
      ElementaryTypeName bytes
         Source: "bytes"
    VariableDeclaration "sig"
       Type: bytes4
       Source: "bytes4 sig"
      ElementaryTypeName bytes4
         Source: "bytes4"
  FunctionDefinition "tokenFallback" - public
     Source: "function tokenFallback(address _from, uint _value, bytes _data){\r\n      iGn memory ignite;\r\n      ignite.sender = _from;\r\n      ignite.value = _value;\r\n      ignite.data = _data;\r\n      uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\r\n      ignite.sig = bytes4(u);\r\n \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, uint _value, bytes _data)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_data"
         Type: bytes memory
         Source: "bytes _data"
        ElementaryTypeName bytes
           Source: "bytes"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n      iGn memory ignite;\r\n      ignite.sender = _from;\r\n      ignite.value = _value;\r\n      ignite.data = _data;\r\n      uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\r\n      ignite.sig = bytes4(u);\r\n \r\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "iGn memory ignite"
        VariableDeclaration "ignite"
           Type: struct ERC223ReceivingContract.iGn memory
           Source: "iGn memory ignite"
          UserDefinedTypeName "iGn"
             Source: "iGn"
      ExpressionStatement
         Gas costs: 0
         Source: "ignite.sender = _from"
        Assignment using operator =
           Type: address
           Source: "ignite.sender = _from"
          MemberAccess to member sender
             Type: address
             Source: "ignite.sender"
            Identifier ignite
               Type: struct ERC223ReceivingContract.iGn memory
               Source: "ignite"
          Identifier _from
             Type: address
             Source: "_from"
      ExpressionStatement
         Gas costs: 0
         Source: "ignite.value = _value"
        Assignment using operator =
           Type: uint256
           Source: "ignite.value = _value"
          MemberAccess to member value
             Type: uint256
             Source: "ignite.value"
            Identifier ignite
               Type: struct ERC223ReceivingContract.iGn memory
               Source: "ignite"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 0
         Source: "ignite.data = _data"
        Assignment using operator =
           Type: bytes memory
           Source: "ignite.data = _data"
          MemberAccess to member data
             Type: bytes memory
             Source: "ignite.data"
            Identifier ignite
               Type: struct ERC223ReceivingContract.iGn memory
               Source: "ignite"
          Identifier _data
             Type: bytes memory
             Source: "_data"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24)"
        VariableDeclaration "u"
           Type: uint32
           Source: "uint32 u"
          ElementaryTypeName uint32
             Source: "uint32"
        BinaryOperation using operator +
           Type: uint32
           Source: "uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24)"
          BinaryOperation using operator +
             Type: uint32
             Source: "uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16)"
            BinaryOperation using operator +
               Type: uint32
               Source: "uint32(_data[3]) + (uint32(_data[2]) << 8)"
              FunctionCall
                 Type: uint32
                 Source: "uint32(_data[3])"
                ElementaryTypeNameExpression uint32
                   Type: type(uint32)
                   Source: "uint32"
                IndexAccess
                   Type: bytes1
                   Source: "_data[3]"
                  Identifier _data
                     Type: bytes memory
                     Source: "_data"
                  Literal, token: [no token] value: 3
                     Type: int_const 3
                     Source: "3"
              TupleExpression
                 Type: uint32
                 Source: "(uint32(_data[2]) << 8)"
                BinaryOperation using operator <<
                   Type: uint32
                   Source: "uint32(_data[2]) << 8"
                  FunctionCall
                     Type: uint32
                     Source: "uint32(_data[2])"
                    ElementaryTypeNameExpression uint32
                       Type: type(uint32)
                       Source: "uint32"
                    IndexAccess
                       Type: bytes1
                       Source: "_data[2]"
                      Identifier _data
                         Type: bytes memory
                         Source: "_data"
                      Literal, token: [no token] value: 2
                         Type: int_const 2
                         Source: "2"
                  Literal, token: [no token] value: 8
                     Type: int_const 8
                     Source: "8"
            TupleExpression
               Type: uint32
               Source: "(uint32(_data[1]) << 16)"
              BinaryOperation using operator <<
                 Type: uint32
                 Source: "uint32(_data[1]) << 16"
                FunctionCall
                   Type: uint32
                   Source: "uint32(_data[1])"
                  ElementaryTypeNameExpression uint32
                     Type: type(uint32)
                     Source: "uint32"
                  IndexAccess
                     Type: bytes1
                     Source: "_data[1]"
                    Identifier _data
                       Type: bytes memory
                       Source: "_data"
                    Literal, token: [no token] value: 1
                       Type: int_const 1
                       Source: "1"
                Literal, token: [no token] value: 16
                   Type: int_const 16
                   Source: "16"
          TupleExpression
             Type: uint32
             Source: "(uint32(_data[0]) << 24)"
            BinaryOperation using operator <<
               Type: uint32
               Source: "uint32(_data[0]) << 24"
              FunctionCall
                 Type: uint32
                 Source: "uint32(_data[0])"
                ElementaryTypeNameExpression uint32
                   Type: type(uint32)
                   Source: "uint32"
                IndexAccess
                   Type: bytes1
                   Source: "_data[0]"
                  Identifier _data
                     Type: bytes memory
                     Source: "_data"
                  Literal, token: [no token] value: 0
                     Type: int_const 0
                     Source: "0"
              Literal, token: [no token] value: 24
                 Type: int_const 24
                 Source: "24"
      ExpressionStatement
         Gas costs: 0
         Source: "ignite.sig = bytes4(u)"
        Assignment using operator =
           Type: bytes4
           Source: "ignite.sig = bytes4(u)"
          MemberAccess to member sig
             Type: bytes4
             Source: "ignite.sig"
            Identifier ignite
               Type: struct ERC223ReceivingContract.iGn memory
               Source: "ignite"
          FunctionCall
             Type: bytes4
             Source: "bytes4(u)"
            ElementaryTypeNameExpression bytes4
               Type: type(bytes4)
               Source: "bytes4"
            Identifier u
               Type: uint32
               Source: "u"
ContractDefinition "SafeMath"
   Source: "contract SafeMath {\r\n    uint256 constant public MAX_UINT256 =\r\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n \r\n    function safeAdd(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        if (x > MAX_UINT256 - y) throw;\r\n        return x + y;\r\n    }\r\n \r\n    function safeSub(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        if (x < y) throw;\r\n        return x - y;\r\n    }\r\n \r\n    function safeMul(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        if (y == 0) return 0;\r\n        if (x > MAX_UINT256 / y) throw;\r\n        return x * y;\r\n    }\r\n}"
  VariableDeclaration "MAX_UINT256"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 constant public MAX_UINT256 =\r\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
       Type: int_const 1157...(70 digits omitted)...9935
       Source: "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
  FunctionDefinition "safeAdd" - const
     Source: "function safeAdd(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        if (x > MAX_UINT256 - y) throw;\r\n        return x + y;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 x, uint256 y)"
      VariableDeclaration "x"
         Type: uint256
         Source: "uint256 x"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "y"
         Type: uint256
         Source: "uint256 y"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256 z)"
      VariableDeclaration "z"
         Type: uint256
         Source: "uint256 z"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        if (x > MAX_UINT256 - y) throw;\r\n        return x + y;\r\n    }"
      IfStatement
         Source: "if (x > MAX_UINT256 - y) throw"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 0
           Source: "x > MAX_UINT256 - y"
          Identifier x
             Type: uint256
             Source: "x"
          BinaryOperation using operator -
             Type: uint256
             Source: "MAX_UINT256 - y"
            Identifier MAX_UINT256
               Type: uint256
               Source: "MAX_UINT256"
            Identifier y
               Type: uint256
               Source: "y"
        Throw
           Gas costs: 0
           Source: "throw"
      Return
         Gas costs: 0
         Source: "return x + y"
        BinaryOperation using operator +
           Type: uint256
           Source: "x + y"
          Identifier x
             Type: uint256
             Source: "x"
          Identifier y
             Type: uint256
             Source: "y"
  FunctionDefinition "safeSub" - const
     Source: "function safeSub(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        if (x < y) throw;\r\n        return x - y;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 x, uint256 y)"
      VariableDeclaration "x"
         Type: uint256
         Source: "uint256 x"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "y"
         Type: uint256
         Source: "uint256 y"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256 z)"
      VariableDeclaration "z"
         Type: uint256
         Source: "uint256 z"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        if (x < y) throw;\r\n        return x - y;\r\n    }"
      IfStatement
         Source: "if (x < y) throw"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 0
           Source: "x < y"
          Identifier x
             Type: uint256
             Source: "x"
          Identifier y
             Type: uint256
             Source: "y"
        Throw
           Gas costs: 0
           Source: "throw"
      Return
         Gas costs: 0
         Source: "return x - y"
        BinaryOperation using operator -
           Type: uint256
           Source: "x - y"
          Identifier x
             Type: uint256
             Source: "x"
          Identifier y
             Type: uint256
             Source: "y"
  FunctionDefinition "safeMul" - const
     Source: "function safeMul(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        if (y == 0) return 0;\r\n        if (x > MAX_UINT256 / y) throw;\r\n        return x * y;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 x, uint256 y)"
      VariableDeclaration "x"
         Type: uint256
         Source: "uint256 x"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "y"
         Type: uint256
         Source: "uint256 y"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256 z)"
      VariableDeclaration "z"
         Type: uint256
         Source: "uint256 z"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        if (y == 0) return 0;\r\n        if (x > MAX_UINT256 / y) throw;\r\n        return x * y;\r\n    }"
      IfStatement
         Source: "if (y == 0) return 0"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 0
           Source: "y == 0"
          Identifier y
             Type: uint256
             Source: "y"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Return
           Gas costs: 0
           Source: "return 0"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      IfStatement
         Source: "if (x > MAX_UINT256 / y) throw"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 0
           Source: "x > MAX_UINT256 / y"
          Identifier x
             Type: uint256
             Source: "x"
          BinaryOperation using operator /
             Type: uint256
             Source: "MAX_UINT256 / y"
            Identifier MAX_UINT256
               Type: uint256
               Source: "MAX_UINT256"
            Identifier y
               Type: uint256
               Source: "y"
        Throw
           Gas costs: 0
           Source: "throw"
      Return
         Gas costs: 0
         Source: "return x * y"
        BinaryOperation using operator *
           Type: uint256
           Source: "x * y"
          Identifier x
             Type: uint256
             Source: "x"
          Identifier y
             Type: uint256
             Source: "y"
ContractDefinition "iGnite"
   Source: "contract iGnite is SafeMath { \r\n\r\n    string public name;\r\n    bytes32 public symbol;\r\n    uint8 public decimals;\r\n    uint256 public rewardPerBlockPerAddress;\r\n    uint256 public totalGenesisAddresses;\r\n    address public genesisCallerAddress;\r\n    uint256 public initialSupplyPerAddress;\r\n    uint256 public genesisBlockCount;\r\n    uint256 private minedBlocks;\r\n    uint256 private iGnited;\r\n    uint256 private genesisSupplyPerAddress;\r\n    uint256 private totalMaxAvailableAmount;\r\n    uint256 private availableAmount;\r\n    uint256 private availableBalance;\r\n    uint256 private balanceOfAddress;\r\n    uint256 private genesisSupply;\r\n    uint256 private _totalSupply;\r\n   \r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => uint) balances; //balances\r\n    mapping(address => bool) public genesisAddress;\r\n    mapping (address => mapping (address => uint)) internal _allowances;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n    function iGnite() {\r\n\r\n        genesisSupplyPerAddress = 10000000000; //10000\r\n        genesisBlockCount = 4498200; \r\n        rewardPerBlockPerAddress = 135;\r\n        totalGenesisAddresses = 1000;\r\n        genesisSupply = initialSupplyPerAddress * totalGenesisAddresses; \r\n\r\n        genesisCallerAddress = 0x0000000000000000000000000000000000000000;\r\n    }\r\n\r\n    function currentBlock() constant returns (uint256 blockNumber)\r\n    {\r\n        return block.number;\r\n    }\r\n\r\n    function blockDiff() constant returns (uint256 blockNumber)\r\n    {\r\n        return block.number - genesisBlockCount;\r\n    }\r\n\r\n    function assignGenesisAddresses(address[] _address) public returns (bool success)\r\n    {\r\n        if (block.number <= 4538447) \r\n        { \r\n            if (msg.sender == genesisCallerAddress)\r\n            {\r\n                for (uint i = 0; i < _address.length; i++)\r\n                {\r\n                    balanceOf[_address[i]] = genesisSupplyPerAddress;\r\n                    genesisAddress[_address[i]] = true;\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    \r\n\r\n    function balanceOf(address _address) constant returns (uint256 Balance) //how much?\r\n    {\r\n        if (genesisAddress[_address]) {\r\n            minedBlocks = block.number - genesisBlockCount;\r\n\r\n            if (minedBlocks >= 75000000) return balanceOf[_address]; //app. 2052\r\n\r\n            availableAmount = rewardPerBlockPerAddress * minedBlocks;\r\n            availableBalance = balanceOf[_address] + availableAmount;\r\n\r\n            return availableBalance;\r\n        }\r\n        else\r\n            return balanceOf[_address];\r\n    }\r\n\r\n    function name() constant returns (string _name)\r\n    {\r\n        name = \"iGnite\";\r\n        return name;\r\n    }\r\n    \r\n    function symbol() constant returns (bytes32 _symbol)\r\n    {\r\n        symbol = \"iGn\";\r\n        return symbol;\r\n    }\r\n    \r\n    function decimals() constant returns (uint8 _decimals)\r\n    {\r\n        decimals = 6;\r\n        return decimals;\r\n    }\r\n    \r\n    function totalSupply() constant returns (uint256 totalSupply)\r\n    {\r\n        minedBlocks = block.number - genesisBlockCount;\r\n        availableAmount = rewardPerBlockPerAddress * minedBlocks;\r\n        iGnited = availableAmount * totalGenesisAddresses;\r\n        return iGnited + genesisSupply;\r\n    }\r\n    \r\n    function minedTotalSupply() constant returns (uint256 minedBlocks)\r\n    {\r\n        minedBlocks = block.number - genesisBlockCount;\r\n        availableAmount = rewardPerBlockPerAddress * minedBlocks;\r\n        return availableAmount * totalGenesisAddresses;\r\n    }\r\n\r\n    function initialiGnSupply() constant returns (uint256 maxSupply)  \r\n    {\r\n        return genesisSupplyPerAddress * totalGenesisAddresses;\r\n    }\r\n\r\n   \r\n    //burn tokens\r\n    function burn(uint256 _value) public returns(bool success) {\r\n        \r\n        //get sum\r\n        minedBlocks = block.number - genesisBlockCount;\r\n        availableAmount = rewardPerBlockPerAddress * minedBlocks;\r\n        iGnited = availableAmount * totalGenesisAddresses;\r\n        _totalSupply = iGnited + genesisSupply;\r\n        \r\n        //burn time\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] -= _value;\r\n        _totalSupply -= _value;\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }//\r\n\r\n    function assignGenesisCallerAddress(address _caller) public returns(bool success)\r\n    {\r\n        if (genesisCallerAddress != 0x0000000000000000000000000000000000000000) return false;\r\n\r\n        genesisCallerAddress = _caller;\r\n\r\n        return true;\r\n    }\r\n    \r\n    function transfer(address _to, uint _value) public returns (bool) {\r\n        if (_value > 0 && _value <= balanceOf[msg.sender] && !isContract(_to)) {\r\n            balanceOf[msg.sender] -= _value;\r\n            balanceOf[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool) {\r\n        if (_value > 0 && _value <= balanceOf[msg.sender] && isContract(_to)) {\r\n            balanceOf[msg.sender] -= _value;\r\n            balanceOf[_to] += _value;\r\n            ERC223ReceivingContract _contract = ERC223ReceivingContract(_to);\r\n                _contract.tokenFallback(msg.sender, _value, _data);\r\n            Transfer(msg.sender, _to, _value, _data);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function isContract(address _addr) returns (bool) {\r\n        uint codeSize;\r\n        assembly {\r\n            codeSize := extcodesize(_addr)\r\n        }\r\n        return codeSize > 0;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\r\n        if (_allowances[_from][msg.sender] > 0 && _value > 0 && _allowances[_from][msg.sender] >= _value &&\r\n            balanceOf[_from] >= _value) {\r\n            balanceOf[_from] -= _value;\r\n            balanceOf[_to] += _value;\r\n            _allowances[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function approve(address _spender, uint _value) public returns (bool) {\r\n        _allowances[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) public constant returns (uint) {\r\n        return _allowances[_owner][_spender];\r\n    }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "SafeMath"
    UserDefinedTypeName "SafeMath"
       Source: "SafeMath"
  VariableDeclaration "name"
     Type: string storage ref
     Gas costs: 0
     Source: "string public name"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "symbol"
     Type: bytes32
     Gas costs: 0
     Source: "bytes32 public symbol"
    ElementaryTypeName bytes32
       Source: "bytes32"
  VariableDeclaration "decimals"
     Type: uint8
     Gas costs: 0
     Source: "uint8 public decimals"
    ElementaryTypeName uint8
       Source: "uint8"
  VariableDeclaration "rewardPerBlockPerAddress"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public rewardPerBlockPerAddress"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "totalGenesisAddresses"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public totalGenesisAddresses"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "genesisCallerAddress"
     Type: address
     Gas costs: [???]
     Source: "address public genesisCallerAddress"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "initialSupplyPerAddress"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public initialSupplyPerAddress"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "genesisBlockCount"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public genesisBlockCount"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "minedBlocks"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private minedBlocks"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "iGnited"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private iGnited"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "genesisSupplyPerAddress"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private genesisSupplyPerAddress"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "totalMaxAvailableAmount"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private totalMaxAvailableAmount"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "availableAmount"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private availableAmount"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "availableBalance"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private availableBalance"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "balanceOfAddress"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private balanceOfAddress"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "genesisSupply"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private genesisSupply"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "_totalSupply"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private _totalSupply"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "balanceOf"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping(address => uint256) public balanceOf"
    Mapping
       Source: "mapping(address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping(address => uint) balances"
    Mapping
       Source: "mapping(address => uint)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint
         Source: "uint"
  VariableDeclaration "genesisAddress"
     Type: mapping(address => bool)
     Gas costs: [???]
     Source: "mapping(address => bool) public genesisAddress"
    Mapping
       Source: "mapping(address => bool)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName bool
         Source: "bool"
  VariableDeclaration "_allowances"
     Type: mapping(address => mapping(address => uint256))
     Gas costs: 0
     Source: "mapping (address => mapping (address => uint)) internal _allowances"
    Mapping
       Source: "mapping (address => mapping (address => uint))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping (address => uint)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "Transfer"
     Gas costs: 0
     Source: "event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);"
    ParameterList
       Source: "(address indexed from, address indexed to, uint value, bytes indexed data)"
      VariableDeclaration "from"
         Type: address
         Source: "address indexed from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "to"
         Type: address
         Source: "address indexed to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "data"
         Type: bytes memory
         Source: "bytes indexed data"
        ElementaryTypeName bytes
           Source: "bytes"
  EventDefinition "Transfer"
     Gas costs: 0
     Source: "event Transfer(address indexed from, address indexed to, uint256 value);"
    ParameterList
       Source: "(address indexed from, address indexed to, uint256 value)"
      VariableDeclaration "from"
         Type: address
         Source: "address indexed from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "to"
         Type: address
         Source: "address indexed to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Burn"
     Gas costs: 0
     Source: "event Burn(address indexed from, uint256 value);"
    ParameterList
       Source: "(address indexed from, uint256 value)"
      VariableDeclaration "from"
         Type: address
         Source: "address indexed from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Approval"
     Gas costs: 0
     Source: "event Approval(address indexed _owner, address indexed _spender, uint _value);"
    ParameterList
       Source: "(address indexed _owner, address indexed _spender, uint _value)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address indexed _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address indexed _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
  FunctionDefinition "iGnite" - public
     Source: "function iGnite() {\r\n\r\n        genesisSupplyPerAddress = 10000000000; //10000\r\n        genesisBlockCount = 4498200; \r\n        rewardPerBlockPerAddress = 135;\r\n        totalGenesisAddresses = 1000;\r\n        genesisSupply = initialSupplyPerAddress * totalGenesisAddresses; \r\n\r\n        genesisCallerAddress = 0x0000000000000000000000000000000000000000;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n\r\n        genesisSupplyPerAddress = 10000000000; //10000\r\n        genesisBlockCount = 4498200; \r\n        rewardPerBlockPerAddress = 135;\r\n        totalGenesisAddresses = 1000;\r\n        genesisSupply = initialSupplyPerAddress * totalGenesisAddresses; \r\n\r\n        genesisCallerAddress = 0x0000000000000000000000000000000000000000;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "genesisSupplyPerAddress = 10000000000"
        Assignment using operator =
           Type: uint256
           Source: "genesisSupplyPerAddress = 10000000000"
          Identifier genesisSupplyPerAddress
             Type: uint256
             Source: "genesisSupplyPerAddress"
          Literal, token: [no token] value: 10000000000
             Type: int_const 10000000000
             Source: "10000000000"
      ExpressionStatement
         Gas costs: 0
         Source: "genesisBlockCount = 4498200"
        Assignment using operator =
           Type: uint256
           Source: "genesisBlockCount = 4498200"
          Identifier genesisBlockCount
             Type: uint256
             Source: "genesisBlockCount"
          Literal, token: [no token] value: 4498200
             Type: int_const 4498200
             Source: "4498200"
      ExpressionStatement
         Gas costs: 0
         Source: "rewardPerBlockPerAddress = 135"
        Assignment using operator =
           Type: uint256
           Source: "rewardPerBlockPerAddress = 135"
          Identifier rewardPerBlockPerAddress
             Type: uint256
             Source: "rewardPerBlockPerAddress"
          Literal, token: [no token] value: 135
             Type: int_const 135
             Source: "135"
      ExpressionStatement
         Gas costs: 0
         Source: "totalGenesisAddresses = 1000"
        Assignment using operator =
           Type: uint256
           Source: "totalGenesisAddresses = 1000"
          Identifier totalGenesisAddresses
             Type: uint256
             Source: "totalGenesisAddresses"
          Literal, token: [no token] value: 1000
             Type: int_const 1000
             Source: "1000"
      ExpressionStatement
         Gas costs: 0
         Source: "genesisSupply = initialSupplyPerAddress * totalGenesisAddresses"
        Assignment using operator =
           Type: uint256
           Source: "genesisSupply = initialSupplyPerAddress * totalGenesisAddresses"
          Identifier genesisSupply
             Type: uint256
             Source: "genesisSupply"
          BinaryOperation using operator *
             Type: uint256
             Source: "initialSupplyPerAddress * totalGenesisAddresses"
            Identifier initialSupplyPerAddress
               Type: uint256
               Source: "initialSupplyPerAddress"
            Identifier totalGenesisAddresses
               Type: uint256
               Source: "totalGenesisAddresses"
      ExpressionStatement
         Gas costs: 0
         Source: "genesisCallerAddress = 0x0000000000000000000000000000000000000000"
        Assignment using operator =
           Type: address
           Source: "genesisCallerAddress = 0x0000000000000000000000000000000000000000"
          Identifier genesisCallerAddress
             Type: address
             Source: "genesisCallerAddress"
          Literal, token: [no token] value: 0x0000000000000000000000000000000000000000
             Type: address
             Source: "0x0000000000000000000000000000000000000000"
  FunctionDefinition "currentBlock" - public - const
     Source: "function currentBlock() constant returns (uint256 blockNumber)\r\n    {\r\n        return block.number;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256 blockNumber)"
      VariableDeclaration "blockNumber"
         Type: uint256
         Source: "uint256 blockNumber"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return block.number;\r\n    }"
      Return
         Gas costs: 7
         Source: "return block.number"
        MemberAccess to member number
           Type: uint256
           Source: "block.number"
          Identifier block
             Type: block
             Source: "block"
  FunctionDefinition "blockDiff" - public - const
     Source: "function blockDiff() constant returns (uint256 blockNumber)\r\n    {\r\n        return block.number - genesisBlockCount;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256 blockNumber)"
      VariableDeclaration "blockNumber"
         Type: uint256
         Source: "uint256 blockNumber"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return block.number - genesisBlockCount;\r\n    }"
      Return
         Gas costs: 213
         Source: "return block.number - genesisBlockCount"
        BinaryOperation using operator -
           Type: uint256
           Source: "block.number - genesisBlockCount"
          MemberAccess to member number
             Type: uint256
             Source: "block.number"
            Identifier block
               Type: block
               Source: "block"
          Identifier genesisBlockCount
             Type: uint256
             Source: "genesisBlockCount"
  FunctionDefinition "assignGenesisAddresses" - public
     Source: "function assignGenesisAddresses(address[] _address) public returns (bool success)\r\n    {\r\n        if (block.number <= 4538447) \r\n        { \r\n            if (msg.sender == genesisCallerAddress)\r\n            {\r\n                for (uint i = 0; i < _address.length; i++)\r\n                {\r\n                    balanceOf[_address[i]] = genesisSupplyPerAddress;\r\n                    genesisAddress[_address[i]] = true;\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address[] _address)"
      VariableDeclaration "_address"
         Type: address[] memory
         Source: "address[] _address"
        ArrayTypeName
           Source: "address[]"
          ElementaryTypeName address
             Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        if (block.number <= 4538447) \r\n        { \r\n            if (msg.sender == genesisCallerAddress)\r\n            {\r\n                for (uint i = 0; i < _address.length; i++)\r\n                {\r\n                    balanceOf[_address[i]] = genesisSupplyPerAddress;\r\n                    genesisAddress[_address[i]] = true;\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }"
      IfStatement
         Source: "if (block.number <= 4538447) \r\n        { \r\n            if (msg.sender == genesisCallerAddress)\r\n            {\r\n                for (uint i = 0; i < _address.length; i++)\r\n                {\r\n                    balanceOf[_address[i]] = genesisSupplyPerAddress;\r\n                    genesisAddress[_address[i]] = true;\r\n                }\r\n                return true;\r\n            }\r\n        }"
        BinaryOperation using operator <=
           Type: bool
           Gas costs: 11
           Source: "block.number <= 4538447"
          MemberAccess to member number
             Type: uint256
             Source: "block.number"
            Identifier block
               Type: block
               Source: "block"
          Literal, token: [no token] value: 4538447
             Type: int_const 4538447
             Source: "4538447"
        Block
           Source: "{ \r\n            if (msg.sender == genesisCallerAddress)\r\n            {\r\n                for (uint i = 0; i < _address.length; i++)\r\n                {\r\n                    balanceOf[_address[i]] = genesisSupplyPerAddress;\r\n                    genesisAddress[_address[i]] = true;\r\n                }\r\n                return true;\r\n            }\r\n        }"
          IfStatement
             Source: "if (msg.sender == genesisCallerAddress)\r\n            {\r\n                for (uint i = 0; i < _address.length; i++)\r\n                {\r\n                    balanceOf[_address[i]] = genesisSupplyPerAddress;\r\n                    genesisAddress[_address[i]] = true;\r\n                }\r\n                return true;\r\n            }"
            BinaryOperation using operator ==
               Type: bool
               Gas costs: 256
               Source: "msg.sender == genesisCallerAddress"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier genesisCallerAddress
                 Type: address
                 Source: "genesisCallerAddress"
            Block
               Source: "{\r\n                for (uint i = 0; i < _address.length; i++)\r\n                {\r\n                    balanceOf[_address[i]] = genesisSupplyPerAddress;\r\n                    genesisAddress[_address[i]] = true;\r\n                }\r\n                return true;\r\n            }"
              ForStatement
                 Source: "for (uint i = 0; i < _address.length; i++)\r\n                {\r\n                    balanceOf[_address[i]] = genesisSupplyPerAddress;\r\n                    genesisAddress[_address[i]] = true;\r\n                }"
                VariableDeclarationStatement
                   Gas costs: 11
                   Source: "uint i = 0"
                  VariableDeclaration "i"
                     Type: uint256
                     Source: "uint i"
                    ElementaryTypeName uint
                       Source: "uint"
                  Literal, token: [no token] value: 0
                     Type: int_const 0
                     Source: "0"
                BinaryOperation using operator <
                   Type: bool
                   Gas costs: [???]
                   Source: "i < _address.length"
                  Identifier i
                     Type: uint256
                     Source: "i"
                  MemberAccess to member length
                     Type: uint256
                     Source: "_address.length"
                    Identifier _address
                       Type: address[] memory
                       Source: "_address"
                ExpressionStatement
                   Gas costs: 19
                   Source: "i++"
                  UnaryOperation (postfix) ++
                     Type: uint256
                     Source: "i++"
                    Identifier i
                       Type: uint256
                       Source: "i"
                Block
                   Source: "{\r\n                    balanceOf[_address[i]] = genesisSupplyPerAddress;\r\n                    genesisAddress[_address[i]] = true;\r\n                }"
                  ExpressionStatement
                     Gas costs: [???]
                     Source: "balanceOf[_address[i]] = genesisSupplyPerAddress"
                    Assignment using operator =
                       Type: uint256
                       Source: "balanceOf[_address[i]] = genesisSupplyPerAddress"
                      IndexAccess
                         Type: uint256
                         Source: "balanceOf[_address[i]]"
                        Identifier balanceOf
                           Type: mapping(address => uint256)
                           Source: "balanceOf"
                        IndexAccess
                           Type: address
                           Source: "_address[i]"
                          Identifier _address
                             Type: address[] memory
                             Source: "_address"
                          Identifier i
                             Type: uint256
                             Source: "i"
                      Identifier genesisSupplyPerAddress
                         Type: uint256
                         Source: "genesisSupplyPerAddress"
                  ExpressionStatement
                     Gas costs: [???]
                     Source: "genesisAddress[_address[i]] = true"
                    Assignment using operator =
                       Type: bool
                       Source: "genesisAddress[_address[i]] = true"
                      IndexAccess
                         Type: bool
                         Source: "genesisAddress[_address[i]]"
                        Identifier genesisAddress
                           Type: mapping(address => bool)
                           Source: "genesisAddress"
                        IndexAccess
                           Type: address
                           Source: "_address[i]"
                          Identifier _address
                             Type: address[] memory
                             Source: "_address"
                          Identifier i
                             Type: uint256
                             Source: "i"
                      Literal, token: true value: true
                         Type: bool
                         Source: "true"
              Return
                 Gas costs: 19
                 Source: "return true"
                Literal, token: true value: true
                   Type: bool
                   Source: "true"
      Return
         Gas costs: 8
         Source: "return false"
        Literal, token: false value: false
           Type: bool
           Source: "false"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _address) constant returns (uint256 Balance) //how much?\r\n    {\r\n        if (genesisAddress[_address]) {\r\n            minedBlocks = block.number - genesisBlockCount;\r\n\r\n            if (minedBlocks >= 75000000) return balanceOf[_address]; //app. 2052\r\n\r\n            availableAmount = rewardPerBlockPerAddress * minedBlocks;\r\n            availableBalance = balanceOf[_address] + availableAmount;\r\n\r\n            return availableBalance;\r\n        }\r\n        else\r\n            return balanceOf[_address];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _address)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 Balance)"
      VariableDeclaration "Balance"
         Type: uint256
         Source: "uint256 Balance"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        if (genesisAddress[_address]) {\r\n            minedBlocks = block.number - genesisBlockCount;\r\n\r\n            if (minedBlocks >= 75000000) return balanceOf[_address]; //app. 2052\r\n\r\n            availableAmount = rewardPerBlockPerAddress * minedBlocks;\r\n            availableBalance = balanceOf[_address] + availableAmount;\r\n\r\n            return availableBalance;\r\n        }\r\n        else\r\n            return balanceOf[_address];\r\n    }"
      IfStatement
         Source: "if (genesisAddress[_address]) {\r\n            minedBlocks = block.number - genesisBlockCount;\r\n\r\n            if (minedBlocks >= 75000000) return balanceOf[_address]; //app. 2052\r\n\r\n            availableAmount = rewardPerBlockPerAddress * minedBlocks;\r\n            availableBalance = balanceOf[_address] + availableAmount;\r\n\r\n            return availableBalance;\r\n        }\r\n        else\r\n            return balanceOf[_address]"
        IndexAccess
           Type: bool
           Gas costs: 335
           Source: "genesisAddress[_address]"
          Identifier genesisAddress
             Type: mapping(address => bool)
             Source: "genesisAddress"
          Identifier _address
             Type: address
             Source: "_address"
        Block
           Source: "{\r\n            minedBlocks = block.number - genesisBlockCount;\r\n\r\n            if (minedBlocks >= 75000000) return balanceOf[_address]; //app. 2052\r\n\r\n            availableAmount = rewardPerBlockPerAddress * minedBlocks;\r\n            availableBalance = balanceOf[_address] + availableAmount;\r\n\r\n            return availableBalance;\r\n        }"
          ExpressionStatement
             Gas costs: 20219
             Source: "minedBlocks = block.number - genesisBlockCount"
            Assignment using operator =
               Type: uint256
               Source: "minedBlocks = block.number - genesisBlockCount"
              Identifier minedBlocks
                 Type: uint256
                 Source: "minedBlocks"
              BinaryOperation using operator -
                 Type: uint256
                 Source: "block.number - genesisBlockCount"
                MemberAccess to member number
                   Type: uint256
                   Source: "block.number"
                  Identifier block
                     Type: block
                     Source: "block"
                Identifier genesisBlockCount
                   Type: uint256
                   Source: "genesisBlockCount"
          IfStatement
             Source: "if (minedBlocks >= 75000000) return balanceOf[_address]"
            BinaryOperation using operator >=
               Type: bool
               Gas costs: 212
               Source: "minedBlocks >= 75000000"
              Identifier minedBlocks
                 Type: uint256
                 Source: "minedBlocks"
              Literal, token: [no token] value: 75000000
                 Type: int_const 75000000
                 Source: "75000000"
            Return
               Gas costs: 315
               Source: "return balanceOf[_address]"
              IndexAccess
                 Type: uint256
                 Source: "balanceOf[_address]"
                Identifier balanceOf
                   Type: mapping(address => uint256)
                   Source: "balanceOf"
                Identifier _address
                   Type: address
                   Source: "_address"
          ExpressionStatement
             Gas costs: 20422
             Source: "availableAmount = rewardPerBlockPerAddress * minedBlocks"
            Assignment using operator =
               Type: uint256
               Source: "availableAmount = rewardPerBlockPerAddress * minedBlocks"
              Identifier availableAmount
                 Type: uint256
                 Source: "availableAmount"
              BinaryOperation using operator *
                 Type: uint256
                 Source: "rewardPerBlockPerAddress * minedBlocks"
                Identifier rewardPerBlockPerAddress
                   Type: uint256
                   Source: "rewardPerBlockPerAddress"
                Identifier minedBlocks
                   Type: uint256
                   Source: "minedBlocks"
          ExpressionStatement
             Gas costs: 20516
             Source: "availableBalance = balanceOf[_address] + availableAmount"
            Assignment using operator =
               Type: uint256
               Source: "availableBalance = balanceOf[_address] + availableAmount"
              Identifier availableBalance
                 Type: uint256
                 Source: "availableBalance"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "balanceOf[_address] + availableAmount"
                IndexAccess
                   Type: uint256
                   Source: "balanceOf[_address]"
                  Identifier balanceOf
                     Type: mapping(address => uint256)
                     Source: "balanceOf"
                  Identifier _address
                     Type: address
                     Source: "_address"
                Identifier availableAmount
                   Type: uint256
                   Source: "availableAmount"
          Return
             Gas costs: 219
             Source: "return availableBalance"
            Identifier availableBalance
               Type: uint256
               Source: "availableBalance"
        Return
           Gas costs: 304
           Source: "return balanceOf[_address]"
          IndexAccess
             Type: uint256
             Source: "balanceOf[_address]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier _address
               Type: address
               Source: "_address"
  FunctionDefinition "name" - public - const
     Source: "function name() constant returns (string _name)\r\n    {\r\n        name = \"iGnite\";\r\n        return name;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(string _name)"
      VariableDeclaration "_name"
         Type: string memory
         Source: "string _name"
        ElementaryTypeName string
           Source: "string"
    Block
       Source: "{\r\n        name = \"iGnite\";\r\n        return name;\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "name = \"iGnite\""
        Assignment using operator =
           Type: string storage ref
           Source: "name = \"iGnite\""
          Identifier name
             Type: string storage ref
             Source: "name"
          Literal, token: [no token] value: iGnite
             Type: literal_string "iGnite"
             Source: "\"iGnite\""
      Return
         Gas costs: [???]
         Source: "return name"
        Identifier name
           Type: string storage ref
           Source: "name"
  FunctionDefinition "symbol" - public - const
     Source: "function symbol() constant returns (bytes32 _symbol)\r\n    {\r\n        symbol = \"iGn\";\r\n        return symbol;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(bytes32 _symbol)"
      VariableDeclaration "_symbol"
         Type: bytes32
         Source: "bytes32 _symbol"
        ElementaryTypeName bytes32
           Source: "bytes32"
    Block
       Source: "{\r\n        symbol = \"iGn\";\r\n        return symbol;\r\n    }"
      ExpressionStatement
         Gas costs: 20023
         Source: "symbol = \"iGn\""
        Assignment using operator =
           Type: bytes32
           Source: "symbol = \"iGn\""
          Identifier symbol
             Type: bytes32
             Source: "symbol"
          Literal, token: [no token] value: iGn
             Type: literal_string "iGn"
             Source: "\"iGn\""
      Return
         Gas costs: 208
         Source: "return symbol"
        Identifier symbol
           Type: bytes32
           Source: "symbol"
  FunctionDefinition "decimals" - public - const
     Source: "function decimals() constant returns (uint8 _decimals)\r\n    {\r\n        decimals = 6;\r\n        return decimals;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint8 _decimals)"
      VariableDeclaration "_decimals"
         Type: uint8
         Source: "uint8 _decimals"
        ElementaryTypeName uint8
           Source: "uint8"
    Block
       Source: "{\r\n        decimals = 6;\r\n        return decimals;\r\n    }"
      ExpressionStatement
         Gas costs: 20267
         Source: "decimals = 6"
        Assignment using operator =
           Type: uint8
           Source: "decimals = 6"
          Identifier decimals
             Type: uint8
             Source: "decimals"
          Literal, token: [no token] value: 6
             Type: int_const 6
             Source: "6"
      Return
         Gas costs: 244
         Source: "return decimals"
        Identifier decimals
           Type: uint8
           Source: "decimals"
  FunctionDefinition "totalSupply" - public - const
     Source: "function totalSupply() constant returns (uint256 totalSupply)\r\n    {\r\n        minedBlocks = block.number - genesisBlockCount;\r\n        availableAmount = rewardPerBlockPerAddress * minedBlocks;\r\n        iGnited = availableAmount * totalGenesisAddresses;\r\n        return iGnited + genesisSupply;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256 totalSupply)"
      VariableDeclaration "totalSupply"
         Type: uint256
         Source: "uint256 totalSupply"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        minedBlocks = block.number - genesisBlockCount;\r\n        availableAmount = rewardPerBlockPerAddress * minedBlocks;\r\n        iGnited = availableAmount * totalGenesisAddresses;\r\n        return iGnited + genesisSupply;\r\n    }"
      ExpressionStatement
         Gas costs: 20219
         Source: "minedBlocks = block.number - genesisBlockCount"
        Assignment using operator =
           Type: uint256
           Source: "minedBlocks = block.number - genesisBlockCount"
          Identifier minedBlocks
             Type: uint256
             Source: "minedBlocks"
          BinaryOperation using operator -
             Type: uint256
             Source: "block.number - genesisBlockCount"
            MemberAccess to member number
               Type: uint256
               Source: "block.number"
              Identifier block
                 Type: block
                 Source: "block"
            Identifier genesisBlockCount
               Type: uint256
               Source: "genesisBlockCount"
      ExpressionStatement
         Gas costs: 20422
         Source: "availableAmount = rewardPerBlockPerAddress * minedBlocks"
        Assignment using operator =
           Type: uint256
           Source: "availableAmount = rewardPerBlockPerAddress * minedBlocks"
          Identifier availableAmount
             Type: uint256
             Source: "availableAmount"
          BinaryOperation using operator *
             Type: uint256
             Source: "rewardPerBlockPerAddress * minedBlocks"
            Identifier rewardPerBlockPerAddress
               Type: uint256
               Source: "rewardPerBlockPerAddress"
            Identifier minedBlocks
               Type: uint256
               Source: "minedBlocks"
      ExpressionStatement
         Gas costs: 20422
         Source: "iGnited = availableAmount * totalGenesisAddresses"
        Assignment using operator =
           Type: uint256
           Source: "iGnited = availableAmount * totalGenesisAddresses"
          Identifier iGnited
             Type: uint256
             Source: "iGnited"
          BinaryOperation using operator *
             Type: uint256
             Source: "availableAmount * totalGenesisAddresses"
            Identifier availableAmount
               Type: uint256
               Source: "availableAmount"
            Identifier totalGenesisAddresses
               Type: uint256
               Source: "totalGenesisAddresses"
      Return
         Gas costs: 414
         Source: "return iGnited + genesisSupply"
        BinaryOperation using operator +
           Type: uint256
           Source: "iGnited + genesisSupply"
          Identifier iGnited
             Type: uint256
             Source: "iGnited"
          Identifier genesisSupply
             Type: uint256
             Source: "genesisSupply"
  FunctionDefinition "minedTotalSupply" - public - const
     Source: "function minedTotalSupply() constant returns (uint256 minedBlocks)\r\n    {\r\n        minedBlocks = block.number - genesisBlockCount;\r\n        availableAmount = rewardPerBlockPerAddress * minedBlocks;\r\n        return availableAmount * totalGenesisAddresses;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256 minedBlocks)"
      VariableDeclaration "minedBlocks"
         Type: uint256
         Source: "uint256 minedBlocks"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        minedBlocks = block.number - genesisBlockCount;\r\n        availableAmount = rewardPerBlockPerAddress * minedBlocks;\r\n        return availableAmount * totalGenesisAddresses;\r\n    }"
      ExpressionStatement
         Gas costs: 213
         Source: "minedBlocks = block.number - genesisBlockCount"
        Assignment using operator =
           Type: uint256
           Source: "minedBlocks = block.number - genesisBlockCount"
          Identifier minedBlocks
             Type: uint256
             Source: "minedBlocks"
          BinaryOperation using operator -
             Type: uint256
             Source: "block.number - genesisBlockCount"
            MemberAccess to member number
               Type: uint256
               Source: "block.number"
              Identifier block
                 Type: block
                 Source: "block"
            Identifier genesisBlockCount
               Type: uint256
               Source: "genesisBlockCount"
      ExpressionStatement
         Gas costs: 20222
         Source: "availableAmount = rewardPerBlockPerAddress * minedBlocks"
        Assignment using operator =
           Type: uint256
           Source: "availableAmount = rewardPerBlockPerAddress * minedBlocks"
          Identifier availableAmount
             Type: uint256
             Source: "availableAmount"
          BinaryOperation using operator *
             Type: uint256
             Source: "rewardPerBlockPerAddress * minedBlocks"
            Identifier rewardPerBlockPerAddress
               Type: uint256
               Source: "rewardPerBlockPerAddress"
            Identifier minedBlocks
               Type: uint256
               Source: "minedBlocks"
      Return
         Gas costs: 416
         Source: "return availableAmount * totalGenesisAddresses"
        BinaryOperation using operator *
           Type: uint256
           Source: "availableAmount * totalGenesisAddresses"
          Identifier availableAmount
             Type: uint256
             Source: "availableAmount"
          Identifier totalGenesisAddresses
             Type: uint256
             Source: "totalGenesisAddresses"
  FunctionDefinition "initialiGnSupply" - public - const
     Source: "function initialiGnSupply() constant returns (uint256 maxSupply)  \r\n    {\r\n        return genesisSupplyPerAddress * totalGenesisAddresses;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256 maxSupply)"
      VariableDeclaration "maxSupply"
         Type: uint256
         Source: "uint256 maxSupply"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return genesisSupplyPerAddress * totalGenesisAddresses;\r\n    }"
      Return
         Gas costs: 416
         Source: "return genesisSupplyPerAddress * totalGenesisAddresses"
        BinaryOperation using operator *
           Type: uint256
           Source: "genesisSupplyPerAddress * totalGenesisAddresses"
          Identifier genesisSupplyPerAddress
             Type: uint256
             Source: "genesisSupplyPerAddress"
          Identifier totalGenesisAddresses
             Type: uint256
             Source: "totalGenesisAddresses"
  FunctionDefinition "burn" - public
     Source: "function burn(uint256 _value) public returns(bool success) {\r\n        \r\n        //get sum\r\n        minedBlocks = block.number - genesisBlockCount;\r\n        availableAmount = rewardPerBlockPerAddress * minedBlocks;\r\n        iGnited = availableAmount * totalGenesisAddresses;\r\n        _totalSupply = iGnited + genesisSupply;\r\n        \r\n        //burn time\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] -= _value;\r\n        _totalSupply -= _value;\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _value)"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        \r\n        //get sum\r\n        minedBlocks = block.number - genesisBlockCount;\r\n        availableAmount = rewardPerBlockPerAddress * minedBlocks;\r\n        iGnited = availableAmount * totalGenesisAddresses;\r\n        _totalSupply = iGnited + genesisSupply;\r\n        \r\n        //burn time\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] -= _value;\r\n        _totalSupply -= _value;\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 20219
         Source: "minedBlocks = block.number - genesisBlockCount"
        Assignment using operator =
           Type: uint256
           Source: "minedBlocks = block.number - genesisBlockCount"
          Identifier minedBlocks
             Type: uint256
             Source: "minedBlocks"
          BinaryOperation using operator -
             Type: uint256
             Source: "block.number - genesisBlockCount"
            MemberAccess to member number
               Type: uint256
               Source: "block.number"
              Identifier block
                 Type: block
                 Source: "block"
            Identifier genesisBlockCount
               Type: uint256
               Source: "genesisBlockCount"
      ExpressionStatement
         Gas costs: 20422
         Source: "availableAmount = rewardPerBlockPerAddress * minedBlocks"
        Assignment using operator =
           Type: uint256
           Source: "availableAmount = rewardPerBlockPerAddress * minedBlocks"
          Identifier availableAmount
             Type: uint256
             Source: "availableAmount"
          BinaryOperation using operator *
             Type: uint256
             Source: "rewardPerBlockPerAddress * minedBlocks"
            Identifier rewardPerBlockPerAddress
               Type: uint256
               Source: "rewardPerBlockPerAddress"
            Identifier minedBlocks
               Type: uint256
               Source: "minedBlocks"
      ExpressionStatement
         Gas costs: 20422
         Source: "iGnited = availableAmount * totalGenesisAddresses"
        Assignment using operator =
           Type: uint256
           Source: "iGnited = availableAmount * totalGenesisAddresses"
          Identifier iGnited
             Type: uint256
             Source: "iGnited"
          BinaryOperation using operator *
             Type: uint256
             Source: "availableAmount * totalGenesisAddresses"
            Identifier availableAmount
               Type: uint256
               Source: "availableAmount"
            Identifier totalGenesisAddresses
               Type: uint256
               Source: "totalGenesisAddresses"
      ExpressionStatement
         Gas costs: 20420
         Source: "_totalSupply = iGnited + genesisSupply"
        Assignment using operator =
           Type: uint256
           Source: "_totalSupply = iGnited + genesisSupply"
          Identifier _totalSupply
             Type: uint256
             Source: "_totalSupply"
          BinaryOperation using operator +
             Type: uint256
             Source: "iGnited + genesisSupply"
            Identifier iGnited
               Type: uint256
               Source: "iGnited"
            Identifier genesisSupply
               Type: uint256
               Source: "genesisSupply"
      ExpressionStatement
         Gas costs: 333
         Source: "require(balanceOf[msg.sender] >= _value)"
        FunctionCall
           Type: tuple()
           Source: "require(balanceOf[msg.sender] >= _value)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "balanceOf[msg.sender] >= _value"
            IndexAccess
               Type: uint256
               Source: "balanceOf[msg.sender]"
              Identifier balanceOf
                 Type: mapping(address => uint256)
                 Source: "balanceOf"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 20328
         Source: "balanceOf[msg.sender] -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "balanceOf[msg.sender] -= _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[msg.sender]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 20233
         Source: "_totalSupply -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "_totalSupply -= _value"
          Identifier _totalSupply
             Type: uint256
             Source: "_totalSupply"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: [???]
         Source: "Burn(msg.sender, _value)"
        FunctionCall
           Type: tuple()
           Source: "Burn(msg.sender, _value)"
          Identifier Burn
             Type: function (address,uint256)
             Source: "Burn"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "assignGenesisCallerAddress" - public
     Source: "function assignGenesisCallerAddress(address _caller) public returns(bool success)\r\n    {\r\n        if (genesisCallerAddress != 0x0000000000000000000000000000000000000000) return false;\r\n\r\n        genesisCallerAddress = _caller;\r\n\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _caller)"
      VariableDeclaration "_caller"
         Type: address
         Source: "address _caller"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        if (genesisCallerAddress != 0x0000000000000000000000000000000000000000) return false;\r\n\r\n        genesisCallerAddress = _caller;\r\n\r\n        return true;\r\n    }"
      IfStatement
         Source: "if (genesisCallerAddress != 0x0000000000000000000000000000000000000000) return false"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 260
           Source: "genesisCallerAddress != 0x0000000000000000000000000000000000000000"
          Identifier genesisCallerAddress
             Type: address
             Source: "genesisCallerAddress"
          Literal, token: [no token] value: 0x0000000000000000000000000000000000000000
             Type: address
             Source: "0x0000000000000000000000000000000000000000"
        Return
           Gas costs: 19
           Source: "return false"
          Literal, token: false value: false
             Type: bool
             Source: "false"
      ExpressionStatement
         Gas costs: 20267
         Source: "genesisCallerAddress = _caller"
        Assignment using operator =
           Type: address
           Source: "genesisCallerAddress = _caller"
          Identifier genesisCallerAddress
             Type: address
             Source: "genesisCallerAddress"
          Identifier _caller
             Type: address
             Source: "_caller"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint _value) public returns (bool) {\r\n        if (_value > 0 && _value <= balanceOf[msg.sender] && !isContract(_to)) {\r\n            balanceOf[msg.sender] -= _value;\r\n            balanceOf[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        if (_value > 0 && _value <= balanceOf[msg.sender] && !isContract(_to)) {\r\n            balanceOf[msg.sender] -= _value;\r\n            balanceOf[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }"
      IfStatement
         Source: "if (_value > 0 && _value <= balanceOf[msg.sender] && !isContract(_to)) {\r\n            balanceOf[msg.sender] -= _value;\r\n            balanceOf[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 381
           Source: "_value > 0 && _value <= balanceOf[msg.sender] && !isContract(_to)"
          BinaryOperation using operator &&
             Type: bool
             Source: "_value > 0 && _value <= balanceOf[msg.sender]"
            BinaryOperation using operator >
               Type: bool
               Source: "_value > 0"
              Identifier _value
                 Type: uint256
                 Source: "_value"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
            BinaryOperation using operator <=
               Type: bool
               Source: "_value <= balanceOf[msg.sender]"
              Identifier _value
                 Type: uint256
                 Source: "_value"
              IndexAccess
                 Type: uint256
                 Source: "balanceOf[msg.sender]"
                Identifier balanceOf
                   Type: mapping(address => uint256)
                   Source: "balanceOf"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!isContract(_to)"
            FunctionCall
               Type: bool
               Source: "isContract(_to)"
              Identifier isContract
                 Type: function (address) returns (bool)
                 Source: "isContract"
              Identifier _to
                 Type: address
                 Source: "_to"
        Block
           Source: "{\r\n            balanceOf[msg.sender] -= _value;\r\n            balanceOf[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }"
          ExpressionStatement
             Gas costs: 20328
             Source: "balanceOf[msg.sender] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "balanceOf[msg.sender] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "balanceOf[msg.sender]"
                Identifier balanceOf
                   Type: mapping(address => uint256)
                   Source: "balanceOf"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20323
             Source: "balanceOf[_to] += _value"
            Assignment using operator +=
               Type: uint256
               Source: "balanceOf[_to] += _value"
              IndexAccess
                 Type: uint256
                 Source: "balanceOf[_to]"
                Identifier balanceOf
                   Type: mapping(address => uint256)
                   Source: "balanceOf"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: [???]
             Source: "Transfer(msg.sender, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(msg.sender, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
      Return
         Gas costs: 8
         Source: "return false"
        Literal, token: false value: false
           Type: bool
           Source: "false"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint _value, bytes _data) public returns (bool) {\r\n        if (_value > 0 && _value <= balanceOf[msg.sender] && isContract(_to)) {\r\n            balanceOf[msg.sender] -= _value;\r\n            balanceOf[_to] += _value;\r\n            ERC223ReceivingContract _contract = ERC223ReceivingContract(_to);\r\n                _contract.tokenFallback(msg.sender, _value, _data);\r\n            Transfer(msg.sender, _to, _value, _data);\r\n            return true;\r\n        }\r\n        return false;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint _value, bytes _data)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_data"
         Type: bytes memory
         Source: "bytes _data"
        ElementaryTypeName bytes
           Source: "bytes"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        if (_value > 0 && _value <= balanceOf[msg.sender] && isContract(_to)) {\r\n            balanceOf[msg.sender] -= _value;\r\n            balanceOf[_to] += _value;\r\n            ERC223ReceivingContract _contract = ERC223ReceivingContract(_to);\r\n                _contract.tokenFallback(msg.sender, _value, _data);\r\n            Transfer(msg.sender, _to, _value, _data);\r\n            return true;\r\n        }\r\n        return false;\r\n    }"
      IfStatement
         Source: "if (_value > 0 && _value <= balanceOf[msg.sender] && isContract(_to)) {\r\n            balanceOf[msg.sender] -= _value;\r\n            balanceOf[_to] += _value;\r\n            ERC223ReceivingContract _contract = ERC223ReceivingContract(_to);\r\n                _contract.tokenFallback(msg.sender, _value, _data);\r\n            Transfer(msg.sender, _to, _value, _data);\r\n            return true;\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 378
           Source: "_value > 0 && _value <= balanceOf[msg.sender] && isContract(_to)"
          BinaryOperation using operator &&
             Type: bool
             Source: "_value > 0 && _value <= balanceOf[msg.sender]"
            BinaryOperation using operator >
               Type: bool
               Source: "_value > 0"
              Identifier _value
                 Type: uint256
                 Source: "_value"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
            BinaryOperation using operator <=
               Type: bool
               Source: "_value <= balanceOf[msg.sender]"
              Identifier _value
                 Type: uint256
                 Source: "_value"
              IndexAccess
                 Type: uint256
                 Source: "balanceOf[msg.sender]"
                Identifier balanceOf
                   Type: mapping(address => uint256)
                   Source: "balanceOf"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
          FunctionCall
             Type: bool
             Source: "isContract(_to)"
            Identifier isContract
               Type: function (address) returns (bool)
               Source: "isContract"
            Identifier _to
               Type: address
               Source: "_to"
        Block
           Source: "{\r\n            balanceOf[msg.sender] -= _value;\r\n            balanceOf[_to] += _value;\r\n            ERC223ReceivingContract _contract = ERC223ReceivingContract(_to);\r\n                _contract.tokenFallback(msg.sender, _value, _data);\r\n            Transfer(msg.sender, _to, _value, _data);\r\n            return true;\r\n        }"
          ExpressionStatement
             Gas costs: 20328
             Source: "balanceOf[msg.sender] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "balanceOf[msg.sender] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "balanceOf[msg.sender]"
                Identifier balanceOf
                   Type: mapping(address => uint256)
                   Source: "balanceOf"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20323
             Source: "balanceOf[_to] += _value"
            Assignment using operator +=
               Type: uint256
               Source: "balanceOf[_to] += _value"
              IndexAccess
                 Type: uint256
                 Source: "balanceOf[_to]"
                Identifier balanceOf
                   Type: mapping(address => uint256)
                   Source: "balanceOf"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          VariableDeclarationStatement
             Gas costs: 11
             Source: "ERC223ReceivingContract _contract = ERC223ReceivingContract(_to)"
            VariableDeclaration "_contract"
               Type: contract ERC223ReceivingContract
               Source: "ERC223ReceivingContract _contract"
              UserDefinedTypeName "ERC223ReceivingContract"
                 Source: "ERC223ReceivingContract"
            FunctionCall
               Type: contract ERC223ReceivingContract
               Source: "ERC223ReceivingContract(_to)"
              Identifier ERC223ReceivingContract
                 Type: type(contract ERC223ReceivingContract)
                 Source: "ERC223ReceivingContract"
              Identifier _to
                 Type: address
                 Source: "_to"
          ExpressionStatement
             Gas costs: [???]
             Source: "_contract.tokenFallback(msg.sender, _value, _data)"
            FunctionCall
               Type: tuple()
               Source: "_contract.tokenFallback(msg.sender, _value, _data)"
              MemberAccess to member tokenFallback
                 Type: function (address,uint256,bytes memory) external
                 Source: "_contract.tokenFallback"
                Identifier _contract
                   Type: contract ERC223ReceivingContract
                   Source: "_contract"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
              Identifier _data
                 Type: bytes memory
                 Source: "_data"
          ExpressionStatement
             Gas costs: [???]
             Source: "Transfer(msg.sender, _to, _value, _data)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(msg.sender, _to, _value, _data)"
              Identifier Transfer
                 Type: function (address,address,uint256,bytes memory)
                 Source: "Transfer"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
              Identifier _data
                 Type: bytes memory
                 Source: "_data"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
      Return
         Gas costs: 8
         Source: "return false"
        Literal, token: false value: false
           Type: bool
           Source: "false"
  FunctionDefinition "isContract" - public
     Source: "function isContract(address _addr) returns (bool) {\r\n        uint codeSize;\r\n        assembly {\r\n            codeSize := extcodesize(_addr)\r\n        }\r\n        return codeSize > 0;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _addr)"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        uint codeSize;\r\n        assembly {\r\n            codeSize := extcodesize(_addr)\r\n        }\r\n        return codeSize > 0;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 3
         Source: "uint codeSize"
        VariableDeclaration "codeSize"
           Type: uint256
           Source: "uint codeSize"
          ElementaryTypeName uint
             Source: "uint"
      InlineAssembly
         Gas costs: 0
         Source: "assembly {\r\n            codeSize := extcodesize(_addr)\r\n        }\r\n        return"
      Return
         Gas costs: 14
         Source: "return codeSize > 0"
        BinaryOperation using operator >
           Type: bool
           Source: "codeSize > 0"
          Identifier codeSize
             Type: uint256
             Source: "codeSize"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint _value) public returns (bool) {\r\n        if (_allowances[_from][msg.sender] > 0 && _value > 0 && _allowances[_from][msg.sender] >= _value &&\r\n            balanceOf[_from] >= _value) {\r\n            balanceOf[_from] -= _value;\r\n            balanceOf[_to] += _value;\r\n            _allowances[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        if (_allowances[_from][msg.sender] > 0 && _value > 0 && _allowances[_from][msg.sender] >= _value &&\r\n            balanceOf[_from] >= _value) {\r\n            balanceOf[_from] -= _value;\r\n            balanceOf[_to] += _value;\r\n            _allowances[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }"
      IfStatement
         Source: "if (_allowances[_from][msg.sender] > 0 && _value > 0 && _allowances[_from][msg.sender] >= _value &&\r\n            balanceOf[_from] >= _value) {\r\n            balanceOf[_from] -= _value;\r\n            balanceOf[_to] += _value;\r\n            _allowances[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 1174
           Source: "_allowances[_from][msg.sender] > 0 && _value > 0 && _allowances[_from][msg.sender] >= _value &&\r\n            balanceOf[_from] >= _value"
          BinaryOperation using operator &&
             Type: bool
             Source: "_allowances[_from][msg.sender] > 0 && _value > 0 && _allowances[_from][msg.sender] >= _value"
            BinaryOperation using operator &&
               Type: bool
               Source: "_allowances[_from][msg.sender] > 0 && _value > 0"
              BinaryOperation using operator >
                 Type: bool
                 Source: "_allowances[_from][msg.sender] > 0"
                IndexAccess
                   Type: uint256
                   Source: "_allowances[_from][msg.sender]"
                  IndexAccess
                     Type: mapping(address => uint256)
                     Source: "_allowances[_from]"
                    Identifier _allowances
                       Type: mapping(address => mapping(address => uint256))
                       Source: "_allowances"
                    Identifier _from
                       Type: address
                       Source: "_from"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
                Literal, token: [no token] value: 0
                   Type: int_const 0
                   Source: "0"
              BinaryOperation using operator >
                 Type: bool
                 Source: "_value > 0"
                Identifier _value
                   Type: uint256
                   Source: "_value"
                Literal, token: [no token] value: 0
                   Type: int_const 0
                   Source: "0"
            BinaryOperation using operator >=
               Type: bool
               Source: "_allowances[_from][msg.sender] >= _value"
              IndexAccess
                 Type: uint256
                 Source: "_allowances[_from][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "_allowances[_from]"
                  Identifier _allowances
                     Type: mapping(address => mapping(address => uint256))
                     Source: "_allowances"
                  Identifier _from
                     Type: address
                     Source: "_from"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          BinaryOperation using operator >=
             Type: bool
             Source: "balanceOf[_from] >= _value"
            IndexAccess
               Type: uint256
               Source: "balanceOf[_from]"
              Identifier balanceOf
                 Type: mapping(address => uint256)
                 Source: "balanceOf"
              Identifier _from
                 Type: address
                 Source: "_from"
            Identifier _value
               Type: uint256
               Source: "_value"
        Block
           Source: "{\r\n            balanceOf[_from] -= _value;\r\n            balanceOf[_to] += _value;\r\n            _allowances[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }"
          ExpressionStatement
             Gas costs: 20329
             Source: "balanceOf[_from] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "balanceOf[_from] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "balanceOf[_from]"
                Identifier balanceOf
                   Type: mapping(address => uint256)
                   Source: "balanceOf"
                Identifier _from
                   Type: address
                   Source: "_from"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20323
             Source: "balanceOf[_to] += _value"
            Assignment using operator +=
               Type: uint256
               Source: "balanceOf[_to] += _value"
              IndexAccess
                 Type: uint256
                 Source: "balanceOf[_to]"
                Identifier balanceOf
                   Type: mapping(address => uint256)
                   Source: "balanceOf"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20412
             Source: "_allowances[_from][msg.sender] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "_allowances[_from][msg.sender] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "_allowances[_from][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "_allowances[_from]"
                  Identifier _allowances
                     Type: mapping(address => mapping(address => uint256))
                     Source: "_allowances"
                  Identifier _from
                     Type: address
                     Source: "_from"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: [???]
             Source: "Transfer(_from, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(_from, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              Identifier _from
                 Type: address
                 Source: "_from"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
      Return
         Gas costs: 8
         Source: "return false"
        Literal, token: false value: false
           Type: bool
           Source: "false"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint _value) public returns (bool) {\r\n        _allowances[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        _allowances[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 20199
         Source: "_allowances[msg.sender][_spender] = _value"
        Assignment using operator =
           Type: uint256
           Source: "_allowances[msg.sender][_spender] = _value"
          IndexAccess
             Type: uint256
             Source: "_allowances[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "_allowances[msg.sender]"
              Identifier _allowances
                 Type: mapping(address => mapping(address => uint256))
                 Source: "_allowances"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: [???]
         Source: "Approval(msg.sender, _spender, _value)"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender, _spender, _value)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) public constant returns (uint) {\r\n        return _allowances[_owner][_spender];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        return _allowances[_owner][_spender];\r\n    }"
      Return
         Gas costs: 394
         Source: "return _allowances[_owner][_spender]"
        IndexAccess
           Type: uint256
           Source: "_allowances[_owner][_spender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "_allowances[_owner]"
            Identifier _allowances
               Type: mapping(address => mapping(address => uint256))
               Source: "_allowances"
            Identifier _owner
               Type: address
               Source: "_owner"
          Identifier _spender
             Type: address
             Source: "_spender"
