Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0x07e76a4c93ea197cb578fef37d046972890df61b.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.16;"
ContractDefinition "ERC20"
   Gas costs: 0
   Source: "contract ERC20 {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"
  VariableDeclaration "totalSupply"
     Type: uint256
     Source: "uint256 public totalSupply"
    ElementaryTypeName uint256
       Source: "uint256"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address who) public constant returns (uint256);"
    ParameterList
       Source: "(address who)"
      VariableDeclaration "who"
         Type: address
         Source: "address who"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address to, uint256 value) public returns (bool);"
    ParameterList
       Source: "(address to, uint256 value)"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address owner, address spender) public constant returns (uint256);"
    ParameterList
       Source: "(address owner, address spender)"
      VariableDeclaration "owner"
         Type: address
         Source: "address owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "spender"
         Type: address
         Source: "address spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address from, address to, uint256 value) public returns (bool);"
    ParameterList
       Source: "(address from, address to, uint256 value)"
      VariableDeclaration "from"
         Type: address
         Source: "address from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "approve" - public
     Source: "function approve(address spender, uint256 value) public returns (bool);"
    ParameterList
       Source: "(address spender, uint256 value)"
      VariableDeclaration "spender"
         Type: address
         Source: "address spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
  EventDefinition "Transfer"
     Source: "event Transfer(address indexed from, address indexed to, uint256 value);"
    ParameterList
       Source: "(address indexed from, address indexed to, uint256 value)"
      VariableDeclaration "from"
         Type: address
         Source: "address indexed from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "to"
         Type: address
         Source: "address indexed to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Approval"
     Source: "event Approval(address indexed owner, address indexed spender, uint256 value);"
    ParameterList
       Source: "(address indexed owner, address indexed spender, uint256 value)"
      VariableDeclaration "owner"
         Type: address
         Source: "address indexed owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "spender"
         Type: address
         Source: "address indexed spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
ContractDefinition "SafeMath"
   Source: "library SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}"
  FunctionDefinition "mul" - const
     Source: "function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 c = a * b"
        VariableDeclaration "c"
           Type: uint256
           Source: "uint256 c"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator *
           Type: uint256
           Source: "a * b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
      ExpressionStatement
         Gas costs: 0
         Source: "assert(a == 0 || c / a == b)"
        FunctionCall
           Type: tuple()
           Source: "assert(a == 0 || c / a == b)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator ||
             Type: bool
             Source: "a == 0 || c / a == b"
            BinaryOperation using operator ==
               Type: bool
               Source: "a == 0"
              Identifier a
                 Type: uint256
                 Source: "a"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
            BinaryOperation using operator ==
               Type: bool
               Source: "c / a == b"
              BinaryOperation using operator /
                 Type: uint256
                 Source: "c / a"
                Identifier c
                   Type: uint256
                   Source: "c"
                Identifier a
                   Type: uint256
                   Source: "a"
              Identifier b
                 Type: uint256
                 Source: "b"
      Return
         Gas costs: 0
         Source: "return c"
        Identifier c
           Type: uint256
           Source: "c"
  FunctionDefinition "div" - const
     Source: "function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 c = a / b"
        VariableDeclaration "c"
           Type: uint256
           Source: "uint256 c"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator /
           Type: uint256
           Source: "a / b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
      Return
         Gas costs: 0
         Source: "return c"
        Identifier c
           Type: uint256
           Source: "c"
  FunctionDefinition "sub" - const
     Source: "function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        assert(b <= a);\r\n        return a - b;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "assert(b <= a)"
        FunctionCall
           Type: tuple()
           Source: "assert(b <= a)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator <=
             Type: bool
             Source: "b <= a"
            Identifier b
               Type: uint256
               Source: "b"
            Identifier a
               Type: uint256
               Source: "a"
      Return
         Gas costs: 0
         Source: "return a - b"
        BinaryOperation using operator -
           Type: uint256
           Source: "a - b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
  FunctionDefinition "add" - const
     Source: "function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 17
         Source: "uint256 c = a + b"
        VariableDeclaration "c"
           Type: uint256
           Source: "uint256 c"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator +
           Type: uint256
           Source: "a + b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
      ExpressionStatement
         Gas costs: 32
         Source: "assert(c >= a)"
        FunctionCall
           Type: tuple()
           Source: "assert(c >= a)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator >=
             Type: bool
             Source: "c >= a"
            Identifier c
               Type: uint256
               Source: "c"
            Identifier a
               Type: uint256
               Source: "a"
      Return
         Gas costs: 8
         Source: "return c"
        Identifier c
           Type: uint256
           Source: "c"
ContractDefinition "Ownable"
   Source: "contract Ownable {\r\n    mapping(address => bool)  internal owners;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() {\r\n        owners[msg.sender] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owners[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    function addOwner(address newAllowed) onlyOwner public {\r\n        owners[newAllowed] = true;\r\n    }\r\n\r\n    function removeOwner(address toRemove) onlyOwner public {\r\n        owners[toRemove] = false;\r\n    }\r\n\r\n}"
  VariableDeclaration "owners"
     Type: mapping(address => bool)
     Gas costs: 0
     Source: "mapping(address => bool)  internal owners"
    Mapping
       Source: "mapping(address => bool)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName bool
         Source: "bool"
  EventDefinition "OwnershipTransferred"
     Gas costs: 0
     Source: "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);"
    ParameterList
       Source: "(address indexed previousOwner, address indexed newOwner)"
      VariableDeclaration "previousOwner"
         Type: address
         Source: "address indexed previousOwner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "newOwner"
         Type: address
         Source: "address indexed newOwner"
        ElementaryTypeName address
           Source: "address"
  FunctionDefinition "Ownable" - public
     Source: "function Ownable() {\r\n        owners[msg.sender] = true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        owners[msg.sender] = true;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "owners[msg.sender] = true"
        Assignment using operator =
           Type: bool
           Source: "owners[msg.sender] = true"
          IndexAccess
             Type: bool
             Source: "owners[msg.sender]"
            Identifier owners
               Type: mapping(address => bool)
               Source: "owners"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Literal, token: true value: true
             Type: bool
             Source: "true"
  ModifierDefinition "onlyOwner"
     Source: "modifier onlyOwner() {\r\n        require(owners[msg.sender] == true);\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n        require(owners[msg.sender] == true);\r\n        _;\r\n    }"
      ExpressionStatement
         Gas costs: 2268
         Source: "require(owners[msg.sender] == true)"
        FunctionCall
           Type: tuple()
           Source: "require(owners[msg.sender] == true)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "owners[msg.sender] == true"
            IndexAccess
               Type: bool
               Source: "owners[msg.sender]"
              Identifier owners
                 Type: mapping(address => bool)
                 Source: "owners"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Literal, token: true value: true
               Type: bool
               Source: "true"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "addOwner" - public
     Source: "function addOwner(address newAllowed) onlyOwner public {\r\n        owners[newAllowed] = true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address newAllowed)"
      VariableDeclaration "newAllowed"
         Type: address
         Source: "address newAllowed"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        owners[newAllowed] = true;\r\n    }"
      ExpressionStatement
         Gas costs: 20363
         Source: "owners[newAllowed] = true"
        Assignment using operator =
           Type: bool
           Source: "owners[newAllowed] = true"
          IndexAccess
             Type: bool
             Source: "owners[newAllowed]"
            Identifier owners
               Type: mapping(address => bool)
               Source: "owners"
            Identifier newAllowed
               Type: address
               Source: "newAllowed"
          Literal, token: true value: true
             Type: bool
             Source: "true"
  FunctionDefinition "removeOwner" - public
     Source: "function removeOwner(address toRemove) onlyOwner public {\r\n        owners[toRemove] = false;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address toRemove)"
      VariableDeclaration "toRemove"
         Type: address
         Source: "address toRemove"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        owners[toRemove] = false;\r\n    }"
      ExpressionStatement
         Gas costs: 20363
         Source: "owners[toRemove] = false"
        Assignment using operator =
           Type: bool
           Source: "owners[toRemove] = false"
          IndexAccess
             Type: bool
             Source: "owners[toRemove]"
            Identifier owners
               Type: mapping(address => bool)
               Source: "owners"
            Identifier toRemove
               Type: address
               Source: "toRemove"
          Literal, token: false value: false
             Type: bool
             Source: "false"
ContractDefinition "BigToken"
   Source: "contract BigToken is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"Big Token\";\r\n    string public symbol = \"BIG\";\r\n    uint256 public decimals = 18;\r\n    uint256 public mintPerBlock = 333333333333333;\r\n\r\n    struct BigTransaction {\r\n        uint blockNumber;\r\n        uint256 amount;\r\n    }\r\n\r\n    uint public commissionPercent = 10;\r\n    uint256 public totalTransactions = 0;\r\n    bool public enabledMint = true;\r\n    uint256 public totalMembers;\r\n\r\n    mapping(address => mapping (address => uint256)) internal allowed;\r\n    mapping(uint256 => BigTransaction) public transactions;\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => uint) public lastMint;\r\n    mapping(address => bool) invested;\r\n    mapping(address => bool) public confirmed;\r\n    mapping(address => bool) public members;\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event Commission(uint256 amount);\r\n\r\n    /**\r\n     * @dev transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool)  {\r\n        require(_to != address(0));\r\n\r\n        uint256 currentBalance = balances[msg.sender];\r\n        uint256 balanceToMint = getBalanceToMint(msg.sender);\r\n        uint256 commission = _value * commissionPercent / 100;\r\n        require((_value + commission) <= (currentBalance + balanceToMint));\r\n\r\n        if(balanceToMint > 0){\r\n            currentBalance = currentBalance.add(balanceToMint);\r\n            Mint(msg.sender, balanceToMint);\r\n            lastMint[msg.sender] = block.number;\r\n            totalSupply = totalSupply.add(balanceToMint);\r\n        }\r\n        \r\n        \r\n\r\n        if(block.number == transactions[totalTransactions - 1].blockNumber) {\r\n            transactions[totalTransactions - 1].amount = transactions[totalTransactions - 1].amount + (commission / totalMembers);\r\n        } else {\r\n            uint transactionID = totalTransactions++;\r\n            transactions[transactionID] = BigTransaction(block.number, commission / totalMembers);\r\n        }\r\n        \r\n        balances[msg.sender] = currentBalance.sub(_value + commission);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        uint256 currentBalance = balances[_from];\r\n        uint256 balanceToMint = getBalanceToMint(_from);\r\n        uint256 commission = _value * commissionPercent / 100;\r\n        require((_value + commission) <= (currentBalance + balanceToMint));\r\n\r\n        if(balanceToMint > 0){\r\n            currentBalance = currentBalance.add(balanceToMint);\r\n            Mint(_from, balanceToMint);\r\n            lastMint[_from] = block.number;\r\n            totalSupply = totalSupply.add(balanceToMint);\r\n        }\r\n        \r\n        \r\n        if(block.number == transactions[totalTransactions - 1].blockNumber) {\r\n            transactions[totalTransactions - 1].amount = transactions[totalTransactions - 1].amount + (commission / totalMembers);\r\n        } else {\r\n            uint transactionID = totalTransactions++;\r\n            transactions[transactionID] = BigTransaction(block.number, commission / totalMembers);\r\n        }\r\n\r\n        balances[_from] = currentBalance.sub(_value + commission);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        if(lastMint[_owner] != 0){\r\n            return balances[_owner] + getBalanceToMint(_owner);\r\n        } else {\r\n            return balances[_owner];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function refreshBalance(address _address) public returns (uint256){\r\n        if(!members[_address]) return;\r\n        \r\n        uint256 balanceToMint = getBalanceToMint(_address);\r\n        totalSupply = totalSupply.add(balanceToMint);\r\n        balances[_address] = balances[_address] + balanceToMint;\r\n        lastMint[_address] = block.number;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(0x0, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function getBalanceToMint(address _address) public constant returns (uint256){\r\n        if(!enabledMint) return 0;\r\n        if(!members[_address]) return 0;\r\n        if(lastMint[_address] == 0) return 0;\r\n\r\n        uint256 balanceToMint = (block.number - lastMint[_address]) * mintPerBlock;\r\n        \r\n        for(uint i = totalTransactions - 1; i >= 0; i--){\r\n            if(block.number == transactions[i].blockNumber) continue;\r\n            if(transactions[i].blockNumber < lastMint[_address]) return balanceToMint;\r\n            if(transactions[i].amount > mintPerBlock) {\r\n                balanceToMint = balanceToMint.add(transactions[i].amount - mintPerBlock);\r\n            }\r\n        }\r\n\r\n        return balanceToMint;\r\n    }\r\n\r\n    function stopMint() public onlyOwner{\r\n        enabledMint = false;\r\n    }\r\n\r\n    function startMint() public onlyOwner{\r\n        enabledMint = true;\r\n    }\r\n\r\n    function confirm(address _address) onlyOwner public {\r\n        confirmed[_address] = true;\r\n        if(!members[_address] && invested[_address]){\r\n            members[_address] = true;\r\n            totalMembers = totalMembers.add(1);\r\n            setLastMint(_address, block.number);\r\n        }\r\n    }\r\n\r\n    function unconfirm(address _address) onlyOwner public {\r\n        confirmed[_address] = false;\r\n        if(members[_address]){\r\n            members[_address] = false;\r\n            totalMembers = totalMembers.sub(1);\r\n        }\r\n    }\r\n    \r\n    function setLastMint(address _address, uint _block) onlyOwner public{\r\n        lastMint[_address] = _block;\r\n    }\r\n\r\n    function setCommission(uint _commission) onlyOwner public{\r\n        commissionPercent = _commission;\r\n    }\r\n\r\n    function setMintPerBlock(uint256 _mintPerBlock) onlyOwner public{\r\n        mintPerBlock = _mintPerBlock;\r\n    }\r\n\r\n    function setInvested(address _address) onlyOwner public{\r\n        invested[_address] = true;\r\n        if(confirmed[_address] && !members[_address]){\r\n            members[_address] = true;\r\n            totalMembers = totalMembers.add(1);\r\n            refreshBalance(_address);\r\n        }\r\n    }\r\n\r\n    function isMember(address _address) public constant returns(bool){\r\n        return members[_address];\r\n    }\r\n\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "ERC20"
    UserDefinedTypeName "ERC20"
       Source: "ERC20"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Ownable"
    UserDefinedTypeName "Ownable"
       Source: "Ownable"
  UsingForDirective
     Gas costs: 0
     Source: "using SafeMath for uint256;"
    UserDefinedTypeName "SafeMath"
       Source: "SafeMath"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "name"
     Type: string storage ref
     Gas costs: 0
     Source: "string public name = \"Big Token\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: Big Token
       Type: literal_string "Big Token"
       Source: "\"Big Token\""
  VariableDeclaration "symbol"
     Type: string storage ref
     Gas costs: 0
     Source: "string public symbol = \"BIG\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: BIG
       Type: literal_string "BIG"
       Source: "\"BIG\""
  VariableDeclaration "decimals"
     Type: uint256
     Gas costs: 0
     Source: "uint256 public decimals = 18"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 18
       Type: int_const 18
       Source: "18"
  VariableDeclaration "mintPerBlock"
     Type: uint256
     Gas costs: 0
     Source: "uint256 public mintPerBlock = 333333333333333"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 333333333333333
       Type: int_const 333333333333333
       Source: "333333333333333"
  StructDefinition "BigTransaction"
     Gas costs: 0
     Source: "struct BigTransaction {\r\n        uint blockNumber;\r\n        uint256 amount;\r\n    }"
    VariableDeclaration "blockNumber"
       Type: uint256
       Source: "uint blockNumber"
      ElementaryTypeName uint
         Source: "uint"
    VariableDeclaration "amount"
       Type: uint256
       Source: "uint256 amount"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "commissionPercent"
     Type: uint256
     Gas costs: 0
     Source: "uint public commissionPercent = 10"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 10
       Type: int_const 10
       Source: "10"
  VariableDeclaration "totalTransactions"
     Type: uint256
     Gas costs: 0
     Source: "uint256 public totalTransactions = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "enabledMint"
     Type: bool
     Gas costs: 0
     Source: "bool public enabledMint = true"
    ElementaryTypeName bool
       Source: "bool"
    Literal, token: true value: true
       Type: bool
       Source: "true"
  VariableDeclaration "totalMembers"
     Type: uint256
     Gas costs: 0
     Source: "uint256 public totalMembers"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "allowed"
     Type: mapping(address => mapping(address => uint256))
     Gas costs: 0
     Source: "mapping(address => mapping (address => uint256)) internal allowed"
    Mapping
       Source: "mapping(address => mapping (address => uint256))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping (address => uint256)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint256
           Source: "uint256"
  VariableDeclaration "transactions"
     Type: mapping(uint256 => struct BigToken.BigTransaction storage ref)
     Gas costs: 0
     Source: "mapping(uint256 => BigTransaction) public transactions"
    Mapping
       Source: "mapping(uint256 => BigTransaction)"
      ElementaryTypeName uint256
         Source: "uint256"
      UserDefinedTypeName "BigTransaction"
         Source: "BigTransaction"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping(address => uint256) public balances"
    Mapping
       Source: "mapping(address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "lastMint"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping(address => uint) public lastMint"
    Mapping
       Source: "mapping(address => uint)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint
         Source: "uint"
  VariableDeclaration "invested"
     Type: mapping(address => bool)
     Gas costs: 0
     Source: "mapping(address => bool) invested"
    Mapping
       Source: "mapping(address => bool)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName bool
         Source: "bool"
  VariableDeclaration "confirmed"
     Type: mapping(address => bool)
     Gas costs: 0
     Source: "mapping(address => bool) public confirmed"
    Mapping
       Source: "mapping(address => bool)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName bool
         Source: "bool"
  VariableDeclaration "members"
     Type: mapping(address => bool)
     Gas costs: 0
     Source: "mapping(address => bool) public members"
    Mapping
       Source: "mapping(address => bool)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName bool
         Source: "bool"
  EventDefinition "Mint"
     Gas costs: 0
     Source: "event Mint(address indexed to, uint256 amount);"
    ParameterList
       Source: "(address indexed to, uint256 amount)"
      VariableDeclaration "to"
         Type: address
         Source: "address indexed to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "amount"
         Type: uint256
         Source: "uint256 amount"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Commission"
     Gas costs: 0
     Source: "event Commission(uint256 amount);"
    ParameterList
       Source: "(uint256 amount)"
      VariableDeclaration "amount"
         Type: uint256
         Source: "uint256 amount"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) public returns (bool)  {\r\n        require(_to != address(0));\r\n\r\n        uint256 currentBalance = balances[msg.sender];\r\n        uint256 balanceToMint = getBalanceToMint(msg.sender);\r\n        uint256 commission = _value * commissionPercent / 100;\r\n        require((_value + commission) <= (currentBalance + balanceToMint));\r\n\r\n        if(balanceToMint > 0){\r\n            currentBalance = currentBalance.add(balanceToMint);\r\n            Mint(msg.sender, balanceToMint);\r\n            lastMint[msg.sender] = block.number;\r\n            totalSupply = totalSupply.add(balanceToMint);\r\n        }\r\n        \r\n        \r\n\r\n        if(block.number == transactions[totalTransactions - 1].blockNumber) {\r\n            transactions[totalTransactions - 1].amount = transactions[totalTransactions - 1].amount + (commission / totalMembers);\r\n        } else {\r\n            uint transactionID = totalTransactions++;\r\n            transactions[transactionID] = BigTransaction(block.number, commission / totalMembers);\r\n        }\r\n        \r\n        balances[msg.sender] = currentBalance.sub(_value + commission);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        require(_to != address(0));\r\n\r\n        uint256 currentBalance = balances[msg.sender];\r\n        uint256 balanceToMint = getBalanceToMint(msg.sender);\r\n        uint256 commission = _value * commissionPercent / 100;\r\n        require((_value + commission) <= (currentBalance + balanceToMint));\r\n\r\n        if(balanceToMint > 0){\r\n            currentBalance = currentBalance.add(balanceToMint);\r\n            Mint(msg.sender, balanceToMint);\r\n            lastMint[msg.sender] = block.number;\r\n            totalSupply = totalSupply.add(balanceToMint);\r\n        }\r\n        \r\n        \r\n\r\n        if(block.number == transactions[totalTransactions - 1].blockNumber) {\r\n            transactions[totalTransactions - 1].amount = transactions[totalTransactions - 1].amount + (commission / totalMembers);\r\n        } else {\r\n            uint transactionID = totalTransactions++;\r\n            transactions[transactionID] = BigTransaction(block.number, commission / totalMembers);\r\n        }\r\n        \r\n        balances[msg.sender] = currentBalance.sub(_value + commission);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_to != address(0))"
        FunctionCall
           Type: tuple()
           Source: "require(_to != address(0))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "_to != address(0)"
            Identifier _to
               Type: address
               Source: "_to"
            FunctionCall
               Type: address
               Source: "address(0)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 currentBalance = balances[msg.sender]"
        VariableDeclaration "currentBalance"
           Type: uint256
           Source: "uint256 currentBalance"
          ElementaryTypeName uint256
             Source: "uint256"
        IndexAccess
           Type: uint256
           Source: "balances[msg.sender]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 balanceToMint = getBalanceToMint(msg.sender)"
        VariableDeclaration "balanceToMint"
           Type: uint256
           Source: "uint256 balanceToMint"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "getBalanceToMint(msg.sender)"
          Identifier getBalanceToMint
             Type: function (address) view returns (uint256)
             Source: "getBalanceToMint"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 commission = _value * commissionPercent / 100"
        VariableDeclaration "commission"
           Type: uint256
           Source: "uint256 commission"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator /
           Type: uint256
           Source: "_value * commissionPercent / 100"
          BinaryOperation using operator *
             Type: uint256
             Source: "_value * commissionPercent"
            Identifier _value
               Type: uint256
               Source: "_value"
            Identifier commissionPercent
               Type: uint256
               Source: "commissionPercent"
          Literal, token: [no token] value: 100
             Type: int_const 100
             Source: "100"
      ExpressionStatement
         Gas costs: 0
         Source: "require((_value + commission) <= (currentBalance + balanceToMint))"
        FunctionCall
           Type: tuple()
           Source: "require((_value + commission) <= (currentBalance + balanceToMint))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator <=
             Type: bool
             Source: "(_value + commission) <= (currentBalance + balanceToMint)"
            TupleExpression
               Type: uint256
               Source: "(_value + commission)"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "_value + commission"
                Identifier _value
                   Type: uint256
                   Source: "_value"
                Identifier commission
                   Type: uint256
                   Source: "commission"
            TupleExpression
               Type: uint256
               Source: "(currentBalance + balanceToMint)"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "currentBalance + balanceToMint"
                Identifier currentBalance
                   Type: uint256
                   Source: "currentBalance"
                Identifier balanceToMint
                   Type: uint256
                   Source: "balanceToMint"
      IfStatement
         Source: "if(balanceToMint > 0){\r\n            currentBalance = currentBalance.add(balanceToMint);\r\n            Mint(msg.sender, balanceToMint);\r\n            lastMint[msg.sender] = block.number;\r\n            totalSupply = totalSupply.add(balanceToMint);\r\n        }"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 0
           Source: "balanceToMint > 0"
          Identifier balanceToMint
             Type: uint256
             Source: "balanceToMint"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n            currentBalance = currentBalance.add(balanceToMint);\r\n            Mint(msg.sender, balanceToMint);\r\n            lastMint[msg.sender] = block.number;\r\n            totalSupply = totalSupply.add(balanceToMint);\r\n        }"
          ExpressionStatement
             Gas costs: 0
             Source: "currentBalance = currentBalance.add(balanceToMint)"
            Assignment using operator =
               Type: uint256
               Source: "currentBalance = currentBalance.add(balanceToMint)"
              Identifier currentBalance
                 Type: uint256
                 Source: "currentBalance"
              FunctionCall
                 Type: uint256
                 Source: "currentBalance.add(balanceToMint)"
                MemberAccess to member add
                   Type: function (uint256,uint256) view returns (uint256)
                   Source: "currentBalance.add"
                  Identifier currentBalance
                     Type: uint256
                     Source: "currentBalance"
                Identifier balanceToMint
                   Type: uint256
                   Source: "balanceToMint"
          ExpressionStatement
             Gas costs: 0
             Source: "Mint(msg.sender, balanceToMint)"
            FunctionCall
               Type: tuple()
               Source: "Mint(msg.sender, balanceToMint)"
              Identifier Mint
                 Type: function (address,uint256)
                 Source: "Mint"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier balanceToMint
                 Type: uint256
                 Source: "balanceToMint"
          ExpressionStatement
             Gas costs: 0
             Source: "lastMint[msg.sender] = block.number"
            Assignment using operator =
               Type: uint256
               Source: "lastMint[msg.sender] = block.number"
              IndexAccess
                 Type: uint256
                 Source: "lastMint[msg.sender]"
                Identifier lastMint
                   Type: mapping(address => uint256)
                   Source: "lastMint"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              MemberAccess to member number
                 Type: uint256
                 Source: "block.number"
                Identifier block
                   Type: block
                   Source: "block"
          ExpressionStatement
             Gas costs: 0
             Source: "totalSupply = totalSupply.add(balanceToMint)"
            Assignment using operator =
               Type: uint256
               Source: "totalSupply = totalSupply.add(balanceToMint)"
              Identifier totalSupply
                 Type: uint256
                 Source: "totalSupply"
              FunctionCall
                 Type: uint256
                 Source: "totalSupply.add(balanceToMint)"
                MemberAccess to member add
                   Type: function (uint256,uint256) view returns (uint256)
                   Source: "totalSupply.add"
                  Identifier totalSupply
                     Type: uint256
                     Source: "totalSupply"
                Identifier balanceToMint
                   Type: uint256
                   Source: "balanceToMint"
      IfStatement
         Source: "if(block.number == transactions[totalTransactions - 1].blockNumber) {\r\n            transactions[totalTransactions - 1].amount = transactions[totalTransactions - 1].amount + (commission / totalMembers);\r\n        } else {\r\n            uint transactionID = totalTransactions++;\r\n            transactions[transactionID] = BigTransaction(block.number, commission / totalMembers);\r\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 0
           Source: "block.number == transactions[totalTransactions - 1].blockNumber"
          MemberAccess to member number
             Type: uint256
             Source: "block.number"
            Identifier block
               Type: block
               Source: "block"
          MemberAccess to member blockNumber
             Type: uint256
             Source: "transactions[totalTransactions - 1].blockNumber"
            IndexAccess
               Type: struct BigToken.BigTransaction storage ref
               Source: "transactions[totalTransactions - 1]"
              Identifier transactions
                 Type: mapping(uint256 => struct BigToken.BigTransaction storage ref)
                 Source: "transactions"
              BinaryOperation using operator -
                 Type: uint256
                 Source: "totalTransactions - 1"
                Identifier totalTransactions
                   Type: uint256
                   Source: "totalTransactions"
                Literal, token: [no token] value: 1
                   Type: int_const 1
                   Source: "1"
        Block
           Source: "{\r\n            transactions[totalTransactions - 1].amount = transactions[totalTransactions - 1].amount + (commission / totalMembers);\r\n        }"
          ExpressionStatement
             Gas costs: 0
             Source: "transactions[totalTransactions - 1].amount = transactions[totalTransactions - 1].amount + (commission / totalMembers)"
            Assignment using operator =
               Type: uint256
               Source: "transactions[totalTransactions - 1].amount = transactions[totalTransactions - 1].amount + (commission / totalMembers)"
              MemberAccess to member amount
                 Type: uint256
                 Source: "transactions[totalTransactions - 1].amount"
                IndexAccess
                   Type: struct BigToken.BigTransaction storage ref
                   Source: "transactions[totalTransactions - 1]"
                  Identifier transactions
                     Type: mapping(uint256 => struct BigToken.BigTransaction storage ref)
                     Source: "transactions"
                  BinaryOperation using operator -
                     Type: uint256
                     Source: "totalTransactions - 1"
                    Identifier totalTransactions
                       Type: uint256
                       Source: "totalTransactions"
                    Literal, token: [no token] value: 1
                       Type: int_const 1
                       Source: "1"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "transactions[totalTransactions - 1].amount + (commission / totalMembers)"
                MemberAccess to member amount
                   Type: uint256
                   Source: "transactions[totalTransactions - 1].amount"
                  IndexAccess
                     Type: struct BigToken.BigTransaction storage ref
                     Source: "transactions[totalTransactions - 1]"
                    Identifier transactions
                       Type: mapping(uint256 => struct BigToken.BigTransaction storage ref)
                       Source: "transactions"
                    BinaryOperation using operator -
                       Type: uint256
                       Source: "totalTransactions - 1"
                      Identifier totalTransactions
                         Type: uint256
                         Source: "totalTransactions"
                      Literal, token: [no token] value: 1
                         Type: int_const 1
                         Source: "1"
                TupleExpression
                   Type: uint256
                   Source: "(commission / totalMembers)"
                  BinaryOperation using operator /
                     Type: uint256
                     Source: "commission / totalMembers"
                    Identifier commission
                       Type: uint256
                       Source: "commission"
                    Identifier totalMembers
                       Type: uint256
                       Source: "totalMembers"
        Block
           Source: "{\r\n            uint transactionID = totalTransactions++;\r\n            transactions[transactionID] = BigTransaction(block.number, commission / totalMembers);\r\n        }"
          VariableDeclarationStatement
             Gas costs: 0
             Source: "uint transactionID = totalTransactions++"
            VariableDeclaration "transactionID"
               Type: uint256
               Source: "uint transactionID"
              ElementaryTypeName uint
                 Source: "uint"
            UnaryOperation (postfix) ++
               Type: uint256
               Source: "totalTransactions++"
              Identifier totalTransactions
                 Type: uint256
                 Source: "totalTransactions"
          ExpressionStatement
             Gas costs: 0
             Source: "transactions[transactionID] = BigTransaction(block.number, commission / totalMembers)"
            Assignment using operator =
               Type: struct BigToken.BigTransaction storage ref
               Source: "transactions[transactionID] = BigTransaction(block.number, commission / totalMembers)"
              IndexAccess
                 Type: struct BigToken.BigTransaction storage ref
                 Source: "transactions[transactionID]"
                Identifier transactions
                   Type: mapping(uint256 => struct BigToken.BigTransaction storage ref)
                   Source: "transactions"
                Identifier transactionID
                   Type: uint256
                   Source: "transactionID"
              FunctionCall
                 Type: struct BigToken.BigTransaction memory
                 Source: "BigTransaction(block.number, commission / totalMembers)"
                Identifier BigTransaction
                   Type: type(struct BigToken.BigTransaction storage pointer)
                   Source: "BigTransaction"
                MemberAccess to member number
                   Type: uint256
                   Source: "block.number"
                  Identifier block
                     Type: block
                     Source: "block"
                BinaryOperation using operator /
                   Type: uint256
                   Source: "commission / totalMembers"
                  Identifier commission
                     Type: uint256
                     Source: "commission"
                  Identifier totalMembers
                     Type: uint256
                     Source: "totalMembers"
      ExpressionStatement
         Gas costs: 0
         Source: "balances[msg.sender] = currentBalance.sub(_value + commission)"
        Assignment using operator =
           Type: uint256
           Source: "balances[msg.sender] = currentBalance.sub(_value + commission)"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          FunctionCall
             Type: uint256
             Source: "currentBalance.sub(_value + commission)"
            MemberAccess to member sub
               Type: function (uint256,uint256) view returns (uint256)
               Source: "currentBalance.sub"
              Identifier currentBalance
                 Type: uint256
                 Source: "currentBalance"
            BinaryOperation using operator +
               Type: uint256
               Source: "_value + commission"
              Identifier _value
                 Type: uint256
                 Source: "_value"
              Identifier commission
                 Type: uint256
                 Source: "commission"
      ExpressionStatement
         Gas costs: 0
         Source: "balances[_to] = balances[_to].add(_value)"
        Assignment using operator =
           Type: uint256
           Source: "balances[_to] = balances[_to].add(_value)"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
          FunctionCall
             Type: uint256
             Source: "balances[_to].add(_value)"
            MemberAccess to member add
               Type: function (uint256,uint256) view returns (uint256)
               Source: "balances[_to].add"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 0
         Source: "Transfer(msg.sender, _to, _value)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(msg.sender, _to, _value)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 0
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        uint256 currentBalance = balances[_from];\r\n        uint256 balanceToMint = getBalanceToMint(_from);\r\n        uint256 commission = _value * commissionPercent / 100;\r\n        require((_value + commission) <= (currentBalance + balanceToMint));\r\n\r\n        if(balanceToMint > 0){\r\n            currentBalance = currentBalance.add(balanceToMint);\r\n            Mint(_from, balanceToMint);\r\n            lastMint[_from] = block.number;\r\n            totalSupply = totalSupply.add(balanceToMint);\r\n        }\r\n        \r\n        \r\n        if(block.number == transactions[totalTransactions - 1].blockNumber) {\r\n            transactions[totalTransactions - 1].amount = transactions[totalTransactions - 1].amount + (commission / totalMembers);\r\n        } else {\r\n            uint transactionID = totalTransactions++;\r\n            transactions[transactionID] = BigTransaction(block.number, commission / totalMembers);\r\n        }\r\n\r\n        balances[_from] = currentBalance.sub(_value + commission);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        require(_to != address(0));\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        uint256 currentBalance = balances[_from];\r\n        uint256 balanceToMint = getBalanceToMint(_from);\r\n        uint256 commission = _value * commissionPercent / 100;\r\n        require((_value + commission) <= (currentBalance + balanceToMint));\r\n\r\n        if(balanceToMint > 0){\r\n            currentBalance = currentBalance.add(balanceToMint);\r\n            Mint(_from, balanceToMint);\r\n            lastMint[_from] = block.number;\r\n            totalSupply = totalSupply.add(balanceToMint);\r\n        }\r\n        \r\n        \r\n        if(block.number == transactions[totalTransactions - 1].blockNumber) {\r\n            transactions[totalTransactions - 1].amount = transactions[totalTransactions - 1].amount + (commission / totalMembers);\r\n        } else {\r\n            uint transactionID = totalTransactions++;\r\n            transactions[transactionID] = BigTransaction(block.number, commission / totalMembers);\r\n        }\r\n\r\n        balances[_from] = currentBalance.sub(_value + commission);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_to != address(0))"
        FunctionCall
           Type: tuple()
           Source: "require(_to != address(0))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "_to != address(0)"
            Identifier _to
               Type: address
               Source: "_to"
            FunctionCall
               Type: address
               Source: "address(0)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_value <= allowed[_from][msg.sender])"
        FunctionCall
           Type: tuple()
           Source: "require(_value <= allowed[_from][msg.sender])"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator <=
             Type: bool
             Source: "_value <= allowed[_from][msg.sender]"
            Identifier _value
               Type: uint256
               Source: "_value"
            IndexAccess
               Type: uint256
               Source: "allowed[_from][msg.sender]"
              IndexAccess
                 Type: mapping(address => uint256)
                 Source: "allowed[_from]"
                Identifier allowed
                   Type: mapping(address => mapping(address => uint256))
                   Source: "allowed"
                Identifier _from
                   Type: address
                   Source: "_from"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 currentBalance = balances[_from]"
        VariableDeclaration "currentBalance"
           Type: uint256
           Source: "uint256 currentBalance"
          ElementaryTypeName uint256
             Source: "uint256"
        IndexAccess
           Type: uint256
           Source: "balances[_from]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          Identifier _from
             Type: address
             Source: "_from"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 balanceToMint = getBalanceToMint(_from)"
        VariableDeclaration "balanceToMint"
           Type: uint256
           Source: "uint256 balanceToMint"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "getBalanceToMint(_from)"
          Identifier getBalanceToMint
             Type: function (address) view returns (uint256)
             Source: "getBalanceToMint"
          Identifier _from
             Type: address
             Source: "_from"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 commission = _value * commissionPercent / 100"
        VariableDeclaration "commission"
           Type: uint256
           Source: "uint256 commission"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator /
           Type: uint256
           Source: "_value * commissionPercent / 100"
          BinaryOperation using operator *
             Type: uint256
             Source: "_value * commissionPercent"
            Identifier _value
               Type: uint256
               Source: "_value"
            Identifier commissionPercent
               Type: uint256
               Source: "commissionPercent"
          Literal, token: [no token] value: 100
             Type: int_const 100
             Source: "100"
      ExpressionStatement
         Gas costs: 0
         Source: "require((_value + commission) <= (currentBalance + balanceToMint))"
        FunctionCall
           Type: tuple()
           Source: "require((_value + commission) <= (currentBalance + balanceToMint))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator <=
             Type: bool
             Source: "(_value + commission) <= (currentBalance + balanceToMint)"
            TupleExpression
               Type: uint256
               Source: "(_value + commission)"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "_value + commission"
                Identifier _value
                   Type: uint256
                   Source: "_value"
                Identifier commission
                   Type: uint256
                   Source: "commission"
            TupleExpression
               Type: uint256
               Source: "(currentBalance + balanceToMint)"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "currentBalance + balanceToMint"
                Identifier currentBalance
                   Type: uint256
                   Source: "currentBalance"
                Identifier balanceToMint
                   Type: uint256
                   Source: "balanceToMint"
      IfStatement
         Source: "if(balanceToMint > 0){\r\n            currentBalance = currentBalance.add(balanceToMint);\r\n            Mint(_from, balanceToMint);\r\n            lastMint[_from] = block.number;\r\n            totalSupply = totalSupply.add(balanceToMint);\r\n        }"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 0
           Source: "balanceToMint > 0"
          Identifier balanceToMint
             Type: uint256
             Source: "balanceToMint"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n            currentBalance = currentBalance.add(balanceToMint);\r\n            Mint(_from, balanceToMint);\r\n            lastMint[_from] = block.number;\r\n            totalSupply = totalSupply.add(balanceToMint);\r\n        }"
          ExpressionStatement
             Gas costs: 0
             Source: "currentBalance = currentBalance.add(balanceToMint)"
            Assignment using operator =
               Type: uint256
               Source: "currentBalance = currentBalance.add(balanceToMint)"
              Identifier currentBalance
                 Type: uint256
                 Source: "currentBalance"
              FunctionCall
                 Type: uint256
                 Source: "currentBalance.add(balanceToMint)"
                MemberAccess to member add
                   Type: function (uint256,uint256) view returns (uint256)
                   Source: "currentBalance.add"
                  Identifier currentBalance
                     Type: uint256
                     Source: "currentBalance"
                Identifier balanceToMint
                   Type: uint256
                   Source: "balanceToMint"
          ExpressionStatement
             Gas costs: 0
             Source: "Mint(_from, balanceToMint)"
            FunctionCall
               Type: tuple()
               Source: "Mint(_from, balanceToMint)"
              Identifier Mint
                 Type: function (address,uint256)
                 Source: "Mint"
              Identifier _from
                 Type: address
                 Source: "_from"
              Identifier balanceToMint
                 Type: uint256
                 Source: "balanceToMint"
          ExpressionStatement
             Gas costs: 0
             Source: "lastMint[_from] = block.number"
            Assignment using operator =
               Type: uint256
               Source: "lastMint[_from] = block.number"
              IndexAccess
                 Type: uint256
                 Source: "lastMint[_from]"
                Identifier lastMint
                   Type: mapping(address => uint256)
                   Source: "lastMint"
                Identifier _from
                   Type: address
                   Source: "_from"
              MemberAccess to member number
                 Type: uint256
                 Source: "block.number"
                Identifier block
                   Type: block
                   Source: "block"
          ExpressionStatement
             Gas costs: 0
             Source: "totalSupply = totalSupply.add(balanceToMint)"
            Assignment using operator =
               Type: uint256
               Source: "totalSupply = totalSupply.add(balanceToMint)"
              Identifier totalSupply
                 Type: uint256
                 Source: "totalSupply"
              FunctionCall
                 Type: uint256
                 Source: "totalSupply.add(balanceToMint)"
                MemberAccess to member add
                   Type: function (uint256,uint256) view returns (uint256)
                   Source: "totalSupply.add"
                  Identifier totalSupply
                     Type: uint256
                     Source: "totalSupply"
                Identifier balanceToMint
                   Type: uint256
                   Source: "balanceToMint"
      IfStatement
         Source: "if(block.number == transactions[totalTransactions - 1].blockNumber) {\r\n            transactions[totalTransactions - 1].amount = transactions[totalTransactions - 1].amount + (commission / totalMembers);\r\n        } else {\r\n            uint transactionID = totalTransactions++;\r\n            transactions[transactionID] = BigTransaction(block.number, commission / totalMembers);\r\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 0
           Source: "block.number == transactions[totalTransactions - 1].blockNumber"
          MemberAccess to member number
             Type: uint256
             Source: "block.number"
            Identifier block
               Type: block
               Source: "block"
          MemberAccess to member blockNumber
             Type: uint256
             Source: "transactions[totalTransactions - 1].blockNumber"
            IndexAccess
               Type: struct BigToken.BigTransaction storage ref
               Source: "transactions[totalTransactions - 1]"
              Identifier transactions
                 Type: mapping(uint256 => struct BigToken.BigTransaction storage ref)
                 Source: "transactions"
              BinaryOperation using operator -
                 Type: uint256
                 Source: "totalTransactions - 1"
                Identifier totalTransactions
                   Type: uint256
                   Source: "totalTransactions"
                Literal, token: [no token] value: 1
                   Type: int_const 1
                   Source: "1"
        Block
           Source: "{\r\n            transactions[totalTransactions - 1].amount = transactions[totalTransactions - 1].amount + (commission / totalMembers);\r\n        }"
          ExpressionStatement
             Gas costs: 0
             Source: "transactions[totalTransactions - 1].amount = transactions[totalTransactions - 1].amount + (commission / totalMembers)"
            Assignment using operator =
               Type: uint256
               Source: "transactions[totalTransactions - 1].amount = transactions[totalTransactions - 1].amount + (commission / totalMembers)"
              MemberAccess to member amount
                 Type: uint256
                 Source: "transactions[totalTransactions - 1].amount"
                IndexAccess
                   Type: struct BigToken.BigTransaction storage ref
                   Source: "transactions[totalTransactions - 1]"
                  Identifier transactions
                     Type: mapping(uint256 => struct BigToken.BigTransaction storage ref)
                     Source: "transactions"
                  BinaryOperation using operator -
                     Type: uint256
                     Source: "totalTransactions - 1"
                    Identifier totalTransactions
                       Type: uint256
                       Source: "totalTransactions"
                    Literal, token: [no token] value: 1
                       Type: int_const 1
                       Source: "1"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "transactions[totalTransactions - 1].amount + (commission / totalMembers)"
                MemberAccess to member amount
                   Type: uint256
                   Source: "transactions[totalTransactions - 1].amount"
                  IndexAccess
                     Type: struct BigToken.BigTransaction storage ref
                     Source: "transactions[totalTransactions - 1]"
                    Identifier transactions
                       Type: mapping(uint256 => struct BigToken.BigTransaction storage ref)
                       Source: "transactions"
                    BinaryOperation using operator -
                       Type: uint256
                       Source: "totalTransactions - 1"
                      Identifier totalTransactions
                         Type: uint256
                         Source: "totalTransactions"
                      Literal, token: [no token] value: 1
                         Type: int_const 1
                         Source: "1"
                TupleExpression
                   Type: uint256
                   Source: "(commission / totalMembers)"
                  BinaryOperation using operator /
                     Type: uint256
                     Source: "commission / totalMembers"
                    Identifier commission
                       Type: uint256
                       Source: "commission"
                    Identifier totalMembers
                       Type: uint256
                       Source: "totalMembers"
        Block
           Source: "{\r\n            uint transactionID = totalTransactions++;\r\n            transactions[transactionID] = BigTransaction(block.number, commission / totalMembers);\r\n        }"
          VariableDeclarationStatement
             Gas costs: 0
             Source: "uint transactionID = totalTransactions++"
            VariableDeclaration "transactionID"
               Type: uint256
               Source: "uint transactionID"
              ElementaryTypeName uint
                 Source: "uint"
            UnaryOperation (postfix) ++
               Type: uint256
               Source: "totalTransactions++"
              Identifier totalTransactions
                 Type: uint256
                 Source: "totalTransactions"
          ExpressionStatement
             Gas costs: 0
             Source: "transactions[transactionID] = BigTransaction(block.number, commission / totalMembers)"
            Assignment using operator =
               Type: struct BigToken.BigTransaction storage ref
               Source: "transactions[transactionID] = BigTransaction(block.number, commission / totalMembers)"
              IndexAccess
                 Type: struct BigToken.BigTransaction storage ref
                 Source: "transactions[transactionID]"
                Identifier transactions
                   Type: mapping(uint256 => struct BigToken.BigTransaction storage ref)
                   Source: "transactions"
                Identifier transactionID
                   Type: uint256
                   Source: "transactionID"
              FunctionCall
                 Type: struct BigToken.BigTransaction memory
                 Source: "BigTransaction(block.number, commission / totalMembers)"
                Identifier BigTransaction
                   Type: type(struct BigToken.BigTransaction storage pointer)
                   Source: "BigTransaction"
                MemberAccess to member number
                   Type: uint256
                   Source: "block.number"
                  Identifier block
                     Type: block
                     Source: "block"
                BinaryOperation using operator /
                   Type: uint256
                   Source: "commission / totalMembers"
                  Identifier commission
                     Type: uint256
                     Source: "commission"
                  Identifier totalMembers
                     Type: uint256
                     Source: "totalMembers"
      ExpressionStatement
         Gas costs: 0
         Source: "balances[_from] = currentBalance.sub(_value + commission)"
        Assignment using operator =
           Type: uint256
           Source: "balances[_from] = currentBalance.sub(_value + commission)"
          IndexAccess
             Type: uint256
             Source: "balances[_from]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _from
               Type: address
               Source: "_from"
          FunctionCall
             Type: uint256
             Source: "currentBalance.sub(_value + commission)"
            MemberAccess to member sub
               Type: function (uint256,uint256) view returns (uint256)
               Source: "currentBalance.sub"
              Identifier currentBalance
                 Type: uint256
                 Source: "currentBalance"
            BinaryOperation using operator +
               Type: uint256
               Source: "_value + commission"
              Identifier _value
                 Type: uint256
                 Source: "_value"
              Identifier commission
                 Type: uint256
                 Source: "commission"
      ExpressionStatement
         Gas costs: 0
         Source: "balances[_to] = balances[_to].add(_value)"
        Assignment using operator =
           Type: uint256
           Source: "balances[_to] = balances[_to].add(_value)"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
          FunctionCall
             Type: uint256
             Source: "balances[_to].add(_value)"
            MemberAccess to member add
               Type: function (uint256,uint256) view returns (uint256)
               Source: "balances[_to].add"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 0
         Source: "allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)"
        Assignment using operator =
           Type: uint256
           Source: "allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)"
          IndexAccess
             Type: uint256
             Source: "allowed[_from][msg.sender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[_from]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              Identifier _from
                 Type: address
                 Source: "_from"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          FunctionCall
             Type: uint256
             Source: "allowed[_from][msg.sender].sub(_value)"
            MemberAccess to member sub
               Type: function (uint256,uint256) view returns (uint256)
               Source: "allowed[_from][msg.sender].sub"
              IndexAccess
                 Type: uint256
                 Source: "allowed[_from][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[_from]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  Identifier _from
                     Type: address
                     Source: "_from"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 0
         Source: "Transfer(_from, _to, _value)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(_from, _to, _value)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 0
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        if(lastMint[_owner] != 0){\r\n            return balances[_owner] + getBalanceToMint(_owner);\r\n        } else {\r\n            return balances[_owner];\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: "(uint256 balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        if(lastMint[_owner] != 0){\r\n            return balances[_owner] + getBalanceToMint(_owner);\r\n        } else {\r\n            return balances[_owner];\r\n        }\r\n    }"
      IfStatement
         Source: "if(lastMint[_owner] != 0){\r\n            return balances[_owner] + getBalanceToMint(_owner);\r\n        } else {\r\n            return balances[_owner];\r\n        }"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 0
           Source: "lastMint[_owner] != 0"
          IndexAccess
             Type: uint256
             Source: "lastMint[_owner]"
            Identifier lastMint
               Type: mapping(address => uint256)
               Source: "lastMint"
            Identifier _owner
               Type: address
               Source: "_owner"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n            return balances[_owner] + getBalanceToMint(_owner);\r\n        }"
          Return
             Gas costs: 0
             Source: "return balances[_owner] + getBalanceToMint(_owner)"
            BinaryOperation using operator +
               Type: uint256
               Source: "balances[_owner] + getBalanceToMint(_owner)"
              IndexAccess
                 Type: uint256
                 Source: "balances[_owner]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _owner
                   Type: address
                   Source: "_owner"
              FunctionCall
                 Type: uint256
                 Source: "getBalanceToMint(_owner)"
                Identifier getBalanceToMint
                   Type: function (address) view returns (uint256)
                   Source: "getBalanceToMint"
                Identifier _owner
                   Type: address
                   Source: "_owner"
        Block
           Source: "{\r\n            return balances[_owner];\r\n        }"
          Return
             Gas costs: 0
             Source: "return balances[_owner]"
            IndexAccess
               Type: uint256
               Source: "balances[_owner]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _owner
                 Type: address
                 Source: "_owner"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "allowed[msg.sender][_spender] = _value"
        Assignment using operator =
           Type: uint256
           Source: "allowed[msg.sender][_spender] = _value"
          IndexAccess
             Type: uint256
             Source: "allowed[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[msg.sender]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 0
         Source: "Approval(msg.sender, _spender, _value)"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender, _spender, _value)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 0
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: "(uint256 remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint256 remaining"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return allowed[_owner][_spender];\r\n    }"
      Return
         Gas costs: 0
         Source: "return allowed[_owner][_spender]"
        IndexAccess
           Type: uint256
           Source: "allowed[_owner][_spender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowed[_owner]"
            Identifier allowed
               Type: mapping(address => mapping(address => uint256))
               Source: "allowed"
            Identifier _owner
               Type: address
               Source: "_owner"
          Identifier _spender
             Type: address
             Source: "_spender"
  FunctionDefinition "increaseApproval" - public
     Source: "function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint _addedValue)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_addedValue"
         Type: uint256
         Source: "uint _addedValue"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)"
        Assignment using operator =
           Type: uint256
           Source: "allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)"
          IndexAccess
             Type: uint256
             Source: "allowed[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[msg.sender]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          FunctionCall
             Type: uint256
             Source: "allowed[msg.sender][_spender].add(_addedValue)"
            MemberAccess to member add
               Type: function (uint256,uint256) view returns (uint256)
               Source: "allowed[msg.sender][_spender].add"
              IndexAccess
                 Type: uint256
                 Source: "allowed[msg.sender][_spender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[msg.sender]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
                Identifier _spender
                   Type: address
                   Source: "_spender"
            Identifier _addedValue
               Type: uint256
               Source: "_addedValue"
      ExpressionStatement
         Gas costs: 0
         Source: "Approval(msg.sender, _spender, allowed[msg.sender][_spender])"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender, _spender, allowed[msg.sender][_spender])"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          IndexAccess
             Type: uint256
             Source: "allowed[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[msg.sender]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
      Return
         Gas costs: 0
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "decreaseApproval" - public
     Source: "function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint _subtractedValue)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_subtractedValue"
         Type: uint256
         Source: "uint _subtractedValue"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint oldValue = allowed[msg.sender][_spender]"
        VariableDeclaration "oldValue"
           Type: uint256
           Source: "uint oldValue"
          ElementaryTypeName uint
             Source: "uint"
        IndexAccess
           Type: uint256
           Source: "allowed[msg.sender][_spender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowed[msg.sender]"
            Identifier allowed
               Type: mapping(address => mapping(address => uint256))
               Source: "allowed"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
      IfStatement
         Source: "if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 0
           Source: "_subtractedValue > oldValue"
          Identifier _subtractedValue
             Type: uint256
             Source: "_subtractedValue"
          Identifier oldValue
             Type: uint256
             Source: "oldValue"
        Block
           Source: "{\r\n            allowed[msg.sender][_spender] = 0;\r\n        }"
          ExpressionStatement
             Gas costs: 0
             Source: "allowed[msg.sender][_spender] = 0"
            Assignment using operator =
               Type: uint256
               Source: "allowed[msg.sender][_spender] = 0"
              IndexAccess
                 Type: uint256
                 Source: "allowed[msg.sender][_spender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[msg.sender]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
                Identifier _spender
                   Type: address
                   Source: "_spender"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
        Block
           Source: "{\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }"
          ExpressionStatement
             Gas costs: 0
             Source: "allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)"
            Assignment using operator =
               Type: uint256
               Source: "allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue)"
              IndexAccess
                 Type: uint256
                 Source: "allowed[msg.sender][_spender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[msg.sender]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
                Identifier _spender
                   Type: address
                   Source: "_spender"
              FunctionCall
                 Type: uint256
                 Source: "oldValue.sub(_subtractedValue)"
                MemberAccess to member sub
                   Type: function (uint256,uint256) view returns (uint256)
                   Source: "oldValue.sub"
                  Identifier oldValue
                     Type: uint256
                     Source: "oldValue"
                Identifier _subtractedValue
                   Type: uint256
                   Source: "_subtractedValue"
      ExpressionStatement
         Gas costs: 0
         Source: "Approval(msg.sender, _spender, allowed[msg.sender][_spender])"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender, _spender, allowed[msg.sender][_spender])"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          IndexAccess
             Type: uint256
             Source: "allowed[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[msg.sender]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
      Return
         Gas costs: 0
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "refreshBalance" - public
     Source: "function refreshBalance(address _address) public returns (uint256){\r\n        if(!members[_address]) return;\r\n        \r\n        uint256 balanceToMint = getBalanceToMint(_address);\r\n        totalSupply = totalSupply.add(balanceToMint);\r\n        balances[_address] = balances[_address] + balanceToMint;\r\n        lastMint[_address] = block.number;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _address)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        if(!members[_address]) return;\r\n        \r\n        uint256 balanceToMint = getBalanceToMint(_address);\r\n        totalSupply = totalSupply.add(balanceToMint);\r\n        balances[_address] = balances[_address] + balanceToMint;\r\n        lastMint[_address] = block.number;\r\n    }"
      IfStatement
         Source: "if(!members[_address]) return;"
        UnaryOperation (prefix) !
           Type: bool
           Gas costs: 0
           Source: "!members[_address]"
          IndexAccess
             Type: bool
             Source: "members[_address]"
            Identifier members
               Type: mapping(address => bool)
               Source: "members"
            Identifier _address
               Type: address
               Source: "_address"
        Return
           Gas costs: 0
           Source: "return;"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 balanceToMint = getBalanceToMint(_address)"
        VariableDeclaration "balanceToMint"
           Type: uint256
           Source: "uint256 balanceToMint"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "getBalanceToMint(_address)"
          Identifier getBalanceToMint
             Type: function (address) view returns (uint256)
             Source: "getBalanceToMint"
          Identifier _address
             Type: address
             Source: "_address"
      ExpressionStatement
         Gas costs: 0
         Source: "totalSupply = totalSupply.add(balanceToMint)"
        Assignment using operator =
           Type: uint256
           Source: "totalSupply = totalSupply.add(balanceToMint)"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          FunctionCall
             Type: uint256
             Source: "totalSupply.add(balanceToMint)"
            MemberAccess to member add
               Type: function (uint256,uint256) view returns (uint256)
               Source: "totalSupply.add"
              Identifier totalSupply
                 Type: uint256
                 Source: "totalSupply"
            Identifier balanceToMint
               Type: uint256
               Source: "balanceToMint"
      ExpressionStatement
         Gas costs: 0
         Source: "balances[_address] = balances[_address] + balanceToMint"
        Assignment using operator =
           Type: uint256
           Source: "balances[_address] = balances[_address] + balanceToMint"
          IndexAccess
             Type: uint256
             Source: "balances[_address]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _address
               Type: address
               Source: "_address"
          BinaryOperation using operator +
             Type: uint256
             Source: "balances[_address] + balanceToMint"
            IndexAccess
               Type: uint256
               Source: "balances[_address]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _address
                 Type: address
                 Source: "_address"
            Identifier balanceToMint
               Type: uint256
               Source: "balanceToMint"
      ExpressionStatement
         Gas costs: 0
         Source: "lastMint[_address] = block.number"
        Assignment using operator =
           Type: uint256
           Source: "lastMint[_address] = block.number"
          IndexAccess
             Type: uint256
             Source: "lastMint[_address]"
            Identifier lastMint
               Type: mapping(address => uint256)
               Source: "lastMint"
            Identifier _address
               Type: address
               Source: "_address"
          MemberAccess to member number
             Type: uint256
             Source: "block.number"
            Identifier block
               Type: block
               Source: "block"
  FunctionDefinition "mint" - public
     Source: "function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(0x0, _to, _amount);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _amount)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(0x0, _to, _amount);\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "totalSupply = totalSupply.add(_amount)"
        Assignment using operator =
           Type: uint256
           Source: "totalSupply = totalSupply.add(_amount)"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          FunctionCall
             Type: uint256
             Source: "totalSupply.add(_amount)"
            MemberAccess to member add
               Type: function (uint256,uint256) view returns (uint256)
               Source: "totalSupply.add"
              Identifier totalSupply
                 Type: uint256
                 Source: "totalSupply"
            Identifier _amount
               Type: uint256
               Source: "_amount"
      ExpressionStatement
         Gas costs: 0
         Source: "balances[_to] = balances[_to].add(_amount)"
        Assignment using operator =
           Type: uint256
           Source: "balances[_to] = balances[_to].add(_amount)"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
          FunctionCall
             Type: uint256
             Source: "balances[_to].add(_amount)"
            MemberAccess to member add
               Type: function (uint256,uint256) view returns (uint256)
               Source: "balances[_to].add"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
            Identifier _amount
               Type: uint256
               Source: "_amount"
      ExpressionStatement
         Gas costs: 0
         Source: "Mint(_to, _amount)"
        FunctionCall
           Type: tuple()
           Source: "Mint(_to, _amount)"
          Identifier Mint
             Type: function (address,uint256)
             Source: "Mint"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      ExpressionStatement
         Gas costs: 0
         Source: "Transfer(0x0, _to, _amount)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(0x0, _to, _amount)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          Literal, token: [no token] value: 0x0
             Type: int_const 0
             Source: "0x0"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      Return
         Gas costs: 0
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "getBalanceToMint" - public - const
     Source: "function getBalanceToMint(address _address) public constant returns (uint256){\r\n        if(!enabledMint) return 0;\r\n        if(!members[_address]) return 0;\r\n        if(lastMint[_address] == 0) return 0;\r\n\r\n        uint256 balanceToMint = (block.number - lastMint[_address]) * mintPerBlock;\r\n        \r\n        for(uint i = totalTransactions - 1; i >= 0; i--){\r\n            if(block.number == transactions[i].blockNumber) continue;\r\n            if(transactions[i].blockNumber < lastMint[_address]) return balanceToMint;\r\n            if(transactions[i].amount > mintPerBlock) {\r\n                balanceToMint = balanceToMint.add(transactions[i].amount - mintPerBlock);\r\n            }\r\n        }\r\n\r\n        return balanceToMint;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _address)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        if(!enabledMint) return 0;\r\n        if(!members[_address]) return 0;\r\n        if(lastMint[_address] == 0) return 0;\r\n\r\n        uint256 balanceToMint = (block.number - lastMint[_address]) * mintPerBlock;\r\n        \r\n        for(uint i = totalTransactions - 1; i >= 0; i--){\r\n            if(block.number == transactions[i].blockNumber) continue;\r\n            if(transactions[i].blockNumber < lastMint[_address]) return balanceToMint;\r\n            if(transactions[i].amount > mintPerBlock) {\r\n                balanceToMint = balanceToMint.add(transactions[i].amount - mintPerBlock);\r\n            }\r\n        }\r\n\r\n        return balanceToMint;\r\n    }"
      IfStatement
         Source: "if(!enabledMint) return 0"
        UnaryOperation (prefix) !
           Type: bool
           Gas costs: 0
           Source: "!enabledMint"
          Identifier enabledMint
             Type: bool
             Source: "enabledMint"
        Return
           Gas costs: 0
           Source: "return 0"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      IfStatement
         Source: "if(!members[_address]) return 0"
        UnaryOperation (prefix) !
           Type: bool
           Gas costs: 0
           Source: "!members[_address]"
          IndexAccess
             Type: bool
             Source: "members[_address]"
            Identifier members
               Type: mapping(address => bool)
               Source: "members"
            Identifier _address
               Type: address
               Source: "_address"
        Return
           Gas costs: 0
           Source: "return 0"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      IfStatement
         Source: "if(lastMint[_address] == 0) return 0"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 0
           Source: "lastMint[_address] == 0"
          IndexAccess
             Type: uint256
             Source: "lastMint[_address]"
            Identifier lastMint
               Type: mapping(address => uint256)
               Source: "lastMint"
            Identifier _address
               Type: address
               Source: "_address"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Return
           Gas costs: 0
           Source: "return 0"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 balanceToMint = (block.number - lastMint[_address]) * mintPerBlock"
        VariableDeclaration "balanceToMint"
           Type: uint256
           Source: "uint256 balanceToMint"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator *
           Type: uint256
           Source: "(block.number - lastMint[_address]) * mintPerBlock"
          TupleExpression
             Type: uint256
             Source: "(block.number - lastMint[_address])"
            BinaryOperation using operator -
               Type: uint256
               Source: "block.number - lastMint[_address]"
              MemberAccess to member number
                 Type: uint256
                 Source: "block.number"
                Identifier block
                   Type: block
                   Source: "block"
              IndexAccess
                 Type: uint256
                 Source: "lastMint[_address]"
                Identifier lastMint
                   Type: mapping(address => uint256)
                   Source: "lastMint"
                Identifier _address
                   Type: address
                   Source: "_address"
          Identifier mintPerBlock
             Type: uint256
             Source: "mintPerBlock"
      ForStatement
         Source: "for(uint i = totalTransactions - 1; i >= 0; i--){\r\n            if(block.number == transactions[i].blockNumber) continue;\r\n            if(transactions[i].blockNumber < lastMint[_address]) return balanceToMint;\r\n            if(transactions[i].amount > mintPerBlock) {\r\n                balanceToMint = balanceToMint.add(transactions[i].amount - mintPerBlock);\r\n            }\r\n        }"
        VariableDeclarationStatement
           Gas costs: 0
           Source: "uint i = totalTransactions - 1"
          VariableDeclaration "i"
             Type: uint256
             Source: "uint i"
            ElementaryTypeName uint
               Source: "uint"
          BinaryOperation using operator -
             Type: uint256
             Source: "totalTransactions - 1"
            Identifier totalTransactions
               Type: uint256
               Source: "totalTransactions"
            Literal, token: [no token] value: 1
               Type: int_const 1
               Source: "1"
        BinaryOperation using operator >=
           Type: bool
           Gas costs: 0
           Source: "i >= 0"
          Identifier i
             Type: uint256
             Source: "i"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        ExpressionStatement
           Gas costs: 0
           Source: "i--"
          UnaryOperation (postfix) --
             Type: uint256
             Source: "i--"
            Identifier i
               Type: uint256
               Source: "i"
        Block
           Source: "{\r\n            if(block.number == transactions[i].blockNumber) continue;\r\n            if(transactions[i].blockNumber < lastMint[_address]) return balanceToMint;\r\n            if(transactions[i].amount > mintPerBlock) {\r\n                balanceToMint = balanceToMint.add(transactions[i].amount - mintPerBlock);\r\n            }\r\n        }"
          IfStatement
             Source: "if(block.number == transactions[i].blockNumber) continue"
            BinaryOperation using operator ==
               Type: bool
               Gas costs: 0
               Source: "block.number == transactions[i].blockNumber"
              MemberAccess to member number
                 Type: uint256
                 Source: "block.number"
                Identifier block
                   Type: block
                   Source: "block"
              MemberAccess to member blockNumber
                 Type: uint256
                 Source: "transactions[i].blockNumber"
                IndexAccess
                   Type: struct BigToken.BigTransaction storage ref
                   Source: "transactions[i]"
                  Identifier transactions
                     Type: mapping(uint256 => struct BigToken.BigTransaction storage ref)
                     Source: "transactions"
                  Identifier i
                     Type: uint256
                     Source: "i"
            Continue
               Gas costs: 0
               Source: "continue"
          IfStatement
             Source: "if(transactions[i].blockNumber < lastMint[_address]) return balanceToMint"
            BinaryOperation using operator <
               Type: bool
               Gas costs: 0
               Source: "transactions[i].blockNumber < lastMint[_address]"
              MemberAccess to member blockNumber
                 Type: uint256
                 Source: "transactions[i].blockNumber"
                IndexAccess
                   Type: struct BigToken.BigTransaction storage ref
                   Source: "transactions[i]"
                  Identifier transactions
                     Type: mapping(uint256 => struct BigToken.BigTransaction storage ref)
                     Source: "transactions"
                  Identifier i
                     Type: uint256
                     Source: "i"
              IndexAccess
                 Type: uint256
                 Source: "lastMint[_address]"
                Identifier lastMint
                   Type: mapping(address => uint256)
                   Source: "lastMint"
                Identifier _address
                   Type: address
                   Source: "_address"
            Return
               Gas costs: 0
               Source: "return balanceToMint"
              Identifier balanceToMint
                 Type: uint256
                 Source: "balanceToMint"
          IfStatement
             Source: "if(transactions[i].amount > mintPerBlock) {\r\n                balanceToMint = balanceToMint.add(transactions[i].amount - mintPerBlock);\r\n            }"
            BinaryOperation using operator >
               Type: bool
               Gas costs: 0
               Source: "transactions[i].amount > mintPerBlock"
              MemberAccess to member amount
                 Type: uint256
                 Source: "transactions[i].amount"
                IndexAccess
                   Type: struct BigToken.BigTransaction storage ref
                   Source: "transactions[i]"
                  Identifier transactions
                     Type: mapping(uint256 => struct BigToken.BigTransaction storage ref)
                     Source: "transactions"
                  Identifier i
                     Type: uint256
                     Source: "i"
              Identifier mintPerBlock
                 Type: uint256
                 Source: "mintPerBlock"
            Block
               Source: "{\r\n                balanceToMint = balanceToMint.add(transactions[i].amount - mintPerBlock);\r\n            }"
              ExpressionStatement
                 Gas costs: 0
                 Source: "balanceToMint = balanceToMint.add(transactions[i].amount - mintPerBlock)"
                Assignment using operator =
                   Type: uint256
                   Source: "balanceToMint = balanceToMint.add(transactions[i].amount - mintPerBlock)"
                  Identifier balanceToMint
                     Type: uint256
                     Source: "balanceToMint"
                  FunctionCall
                     Type: uint256
                     Source: "balanceToMint.add(transactions[i].amount - mintPerBlock)"
                    MemberAccess to member add
                       Type: function (uint256,uint256) view returns (uint256)
                       Source: "balanceToMint.add"
                      Identifier balanceToMint
                         Type: uint256
                         Source: "balanceToMint"
                    BinaryOperation using operator -
                       Type: uint256
                       Source: "transactions[i].amount - mintPerBlock"
                      MemberAccess to member amount
                         Type: uint256
                         Source: "transactions[i].amount"
                        IndexAccess
                           Type: struct BigToken.BigTransaction storage ref
                           Source: "transactions[i]"
                          Identifier transactions
                             Type: mapping(uint256 => struct BigToken.BigTransaction storage ref)
                             Source: "transactions"
                          Identifier i
                             Type: uint256
                             Source: "i"
                      Identifier mintPerBlock
                         Type: uint256
                         Source: "mintPerBlock"
      Return
         Gas costs: 0
         Source: "return balanceToMint"
        Identifier balanceToMint
           Type: uint256
           Source: "balanceToMint"
  FunctionDefinition "stopMint" - public
     Source: "function stopMint() public onlyOwner{\r\n        enabledMint = false;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        enabledMint = false;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "enabledMint = false"
        Assignment using operator =
           Type: bool
           Source: "enabledMint = false"
          Identifier enabledMint
             Type: bool
             Source: "enabledMint"
          Literal, token: false value: false
             Type: bool
             Source: "false"
  FunctionDefinition "startMint" - public
     Source: "function startMint() public onlyOwner{\r\n        enabledMint = true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        enabledMint = true;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "enabledMint = true"
        Assignment using operator =
           Type: bool
           Source: "enabledMint = true"
          Identifier enabledMint
             Type: bool
             Source: "enabledMint"
          Literal, token: true value: true
             Type: bool
             Source: "true"
  FunctionDefinition "confirm" - public
     Source: "function confirm(address _address) onlyOwner public {\r\n        confirmed[_address] = true;\r\n        if(!members[_address] && invested[_address]){\r\n            members[_address] = true;\r\n            totalMembers = totalMembers.add(1);\r\n            setLastMint(_address, block.number);\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _address)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        confirmed[_address] = true;\r\n        if(!members[_address] && invested[_address]){\r\n            members[_address] = true;\r\n            totalMembers = totalMembers.add(1);\r\n            setLastMint(_address, block.number);\r\n        }\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "confirmed[_address] = true"
        Assignment using operator =
           Type: bool
           Source: "confirmed[_address] = true"
          IndexAccess
             Type: bool
             Source: "confirmed[_address]"
            Identifier confirmed
               Type: mapping(address => bool)
               Source: "confirmed"
            Identifier _address
               Type: address
               Source: "_address"
          Literal, token: true value: true
             Type: bool
             Source: "true"
      IfStatement
         Source: "if(!members[_address] && invested[_address]){\r\n            members[_address] = true;\r\n            totalMembers = totalMembers.add(1);\r\n            setLastMint(_address, block.number);\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 0
           Source: "!members[_address] && invested[_address]"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!members[_address]"
            IndexAccess
               Type: bool
               Source: "members[_address]"
              Identifier members
                 Type: mapping(address => bool)
                 Source: "members"
              Identifier _address
                 Type: address
                 Source: "_address"
          IndexAccess
             Type: bool
             Source: "invested[_address]"
            Identifier invested
               Type: mapping(address => bool)
               Source: "invested"
            Identifier _address
               Type: address
               Source: "_address"
        Block
           Source: "{\r\n            members[_address] = true;\r\n            totalMembers = totalMembers.add(1);\r\n            setLastMint(_address, block.number);\r\n        }"
          ExpressionStatement
             Gas costs: 0
             Source: "members[_address] = true"
            Assignment using operator =
               Type: bool
               Source: "members[_address] = true"
              IndexAccess
                 Type: bool
                 Source: "members[_address]"
                Identifier members
                   Type: mapping(address => bool)
                   Source: "members"
                Identifier _address
                   Type: address
                   Source: "_address"
              Literal, token: true value: true
                 Type: bool
                 Source: "true"
          ExpressionStatement
             Gas costs: 0
             Source: "totalMembers = totalMembers.add(1)"
            Assignment using operator =
               Type: uint256
               Source: "totalMembers = totalMembers.add(1)"
              Identifier totalMembers
                 Type: uint256
                 Source: "totalMembers"
              FunctionCall
                 Type: uint256
                 Source: "totalMembers.add(1)"
                MemberAccess to member add
                   Type: function (uint256,uint256) view returns (uint256)
                   Source: "totalMembers.add"
                  Identifier totalMembers
                     Type: uint256
                     Source: "totalMembers"
                Literal, token: [no token] value: 1
                   Type: int_const 1
                   Source: "1"
          ExpressionStatement
             Gas costs: 0
             Source: "setLastMint(_address, block.number)"
            FunctionCall
               Type: tuple()
               Source: "setLastMint(_address, block.number)"
              Identifier setLastMint
                 Type: function (address,uint256)
                 Source: "setLastMint"
              Identifier _address
                 Type: address
                 Source: "_address"
              MemberAccess to member number
                 Type: uint256
                 Source: "block.number"
                Identifier block
                   Type: block
                   Source: "block"
  FunctionDefinition "unconfirm" - public
     Source: "function unconfirm(address _address) onlyOwner public {\r\n        confirmed[_address] = false;\r\n        if(members[_address]){\r\n            members[_address] = false;\r\n            totalMembers = totalMembers.sub(1);\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _address)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        confirmed[_address] = false;\r\n        if(members[_address]){\r\n            members[_address] = false;\r\n            totalMembers = totalMembers.sub(1);\r\n        }\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "confirmed[_address] = false"
        Assignment using operator =
           Type: bool
           Source: "confirmed[_address] = false"
          IndexAccess
             Type: bool
             Source: "confirmed[_address]"
            Identifier confirmed
               Type: mapping(address => bool)
               Source: "confirmed"
            Identifier _address
               Type: address
               Source: "_address"
          Literal, token: false value: false
             Type: bool
             Source: "false"
      IfStatement
         Source: "if(members[_address]){\r\n            members[_address] = false;\r\n            totalMembers = totalMembers.sub(1);\r\n        }"
        IndexAccess
           Type: bool
           Gas costs: 0
           Source: "members[_address]"
          Identifier members
             Type: mapping(address => bool)
             Source: "members"
          Identifier _address
             Type: address
             Source: "_address"
        Block
           Source: "{\r\n            members[_address] = false;\r\n            totalMembers = totalMembers.sub(1);\r\n        }"
          ExpressionStatement
             Gas costs: 0
             Source: "members[_address] = false"
            Assignment using operator =
               Type: bool
               Source: "members[_address] = false"
              IndexAccess
                 Type: bool
                 Source: "members[_address]"
                Identifier members
                   Type: mapping(address => bool)
                   Source: "members"
                Identifier _address
                   Type: address
                   Source: "_address"
              Literal, token: false value: false
                 Type: bool
                 Source: "false"
          ExpressionStatement
             Gas costs: 0
             Source: "totalMembers = totalMembers.sub(1)"
            Assignment using operator =
               Type: uint256
               Source: "totalMembers = totalMembers.sub(1)"
              Identifier totalMembers
                 Type: uint256
                 Source: "totalMembers"
              FunctionCall
                 Type: uint256
                 Source: "totalMembers.sub(1)"
                MemberAccess to member sub
                   Type: function (uint256,uint256) view returns (uint256)
                   Source: "totalMembers.sub"
                  Identifier totalMembers
                     Type: uint256
                     Source: "totalMembers"
                Literal, token: [no token] value: 1
                   Type: int_const 1
                   Source: "1"
  FunctionDefinition "setLastMint" - public
     Source: "function setLastMint(address _address, uint _block) onlyOwner public{\r\n        lastMint[_address] = _block;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _address, uint _block)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_block"
         Type: uint256
         Source: "uint _block"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        lastMint[_address] = _block;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "lastMint[_address] = _block"
        Assignment using operator =
           Type: uint256
           Source: "lastMint[_address] = _block"
          IndexAccess
             Type: uint256
             Source: "lastMint[_address]"
            Identifier lastMint
               Type: mapping(address => uint256)
               Source: "lastMint"
            Identifier _address
               Type: address
               Source: "_address"
          Identifier _block
             Type: uint256
             Source: "_block"
  FunctionDefinition "setCommission" - public
     Source: "function setCommission(uint _commission) onlyOwner public{\r\n        commissionPercent = _commission;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint _commission)"
      VariableDeclaration "_commission"
         Type: uint256
         Source: "uint _commission"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        commissionPercent = _commission;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "commissionPercent = _commission"
        Assignment using operator =
           Type: uint256
           Source: "commissionPercent = _commission"
          Identifier commissionPercent
             Type: uint256
             Source: "commissionPercent"
          Identifier _commission
             Type: uint256
             Source: "_commission"
  FunctionDefinition "setMintPerBlock" - public
     Source: "function setMintPerBlock(uint256 _mintPerBlock) onlyOwner public{\r\n        mintPerBlock = _mintPerBlock;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _mintPerBlock)"
      VariableDeclaration "_mintPerBlock"
         Type: uint256
         Source: "uint256 _mintPerBlock"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        mintPerBlock = _mintPerBlock;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "mintPerBlock = _mintPerBlock"
        Assignment using operator =
           Type: uint256
           Source: "mintPerBlock = _mintPerBlock"
          Identifier mintPerBlock
             Type: uint256
             Source: "mintPerBlock"
          Identifier _mintPerBlock
             Type: uint256
             Source: "_mintPerBlock"
  FunctionDefinition "setInvested" - public
     Source: "function setInvested(address _address) onlyOwner public{\r\n        invested[_address] = true;\r\n        if(confirmed[_address] && !members[_address]){\r\n            members[_address] = true;\r\n            totalMembers = totalMembers.add(1);\r\n            refreshBalance(_address);\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _address)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        invested[_address] = true;\r\n        if(confirmed[_address] && !members[_address]){\r\n            members[_address] = true;\r\n            totalMembers = totalMembers.add(1);\r\n            refreshBalance(_address);\r\n        }\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "invested[_address] = true"
        Assignment using operator =
           Type: bool
           Source: "invested[_address] = true"
          IndexAccess
             Type: bool
             Source: "invested[_address]"
            Identifier invested
               Type: mapping(address => bool)
               Source: "invested"
            Identifier _address
               Type: address
               Source: "_address"
          Literal, token: true value: true
             Type: bool
             Source: "true"
      IfStatement
         Source: "if(confirmed[_address] && !members[_address]){\r\n            members[_address] = true;\r\n            totalMembers = totalMembers.add(1);\r\n            refreshBalance(_address);\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 0
           Source: "confirmed[_address] && !members[_address]"
          IndexAccess
             Type: bool
             Source: "confirmed[_address]"
            Identifier confirmed
               Type: mapping(address => bool)
               Source: "confirmed"
            Identifier _address
               Type: address
               Source: "_address"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!members[_address]"
            IndexAccess
               Type: bool
               Source: "members[_address]"
              Identifier members
                 Type: mapping(address => bool)
                 Source: "members"
              Identifier _address
                 Type: address
                 Source: "_address"
        Block
           Source: "{\r\n            members[_address] = true;\r\n            totalMembers = totalMembers.add(1);\r\n            refreshBalance(_address);\r\n        }"
          ExpressionStatement
             Gas costs: 0
             Source: "members[_address] = true"
            Assignment using operator =
               Type: bool
               Source: "members[_address] = true"
              IndexAccess
                 Type: bool
                 Source: "members[_address]"
                Identifier members
                   Type: mapping(address => bool)
                   Source: "members"
                Identifier _address
                   Type: address
                   Source: "_address"
              Literal, token: true value: true
                 Type: bool
                 Source: "true"
          ExpressionStatement
             Gas costs: 0
             Source: "totalMembers = totalMembers.add(1)"
            Assignment using operator =
               Type: uint256
               Source: "totalMembers = totalMembers.add(1)"
              Identifier totalMembers
                 Type: uint256
                 Source: "totalMembers"
              FunctionCall
                 Type: uint256
                 Source: "totalMembers.add(1)"
                MemberAccess to member add
                   Type: function (uint256,uint256) view returns (uint256)
                   Source: "totalMembers.add"
                  Identifier totalMembers
                     Type: uint256
                     Source: "totalMembers"
                Literal, token: [no token] value: 1
                   Type: int_const 1
                   Source: "1"
          ExpressionStatement
             Gas costs: 0
             Source: "refreshBalance(_address)"
            FunctionCall
               Type: uint256
               Source: "refreshBalance(_address)"
              Identifier refreshBalance
                 Type: function (address) returns (uint256)
                 Source: "refreshBalance"
              Identifier _address
                 Type: address
                 Source: "_address"
  FunctionDefinition "isMember" - public - const
     Source: "function isMember(address _address) public constant returns(bool){\r\n        return members[_address];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _address)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        return members[_address];\r\n    }"
      Return
         Gas costs: 0
         Source: "return members[_address]"
        IndexAccess
           Type: bool
           Source: "members[_address]"
          Identifier members
             Type: mapping(address => bool)
             Source: "members"
          Identifier _address
             Type: address
             Source: "_address"
ContractDefinition "Crowdsale"
   Source: "contract Crowdsale is Ownable{\r\n\r\n    using SafeMath for uint;\r\n\r\n    BigToken public token;\r\n    uint public collected;\r\n    address public benefeciar;\r\n\r\n    function Crowdsale(address _token, address _benefeciar){\r\n        token = BigToken(_token);\r\n        benefeciar = _benefeciar;\r\n        owners[msg.sender] = true;\r\n    }\r\n\r\n    function () payable {\r\n        require(msg.value >= 0.01 ether);\r\n        uint256 amount = msg.value / 0.01 ether * 1 ether;\r\n\r\n        if(msg.value >= 100 ether && msg.value < 500 ether) amount = amount * 11 / 10;\r\n        if(msg.value >= 500 ether && msg.value < 1000 ether) amount = amount * 12 / 10;\r\n        if(msg.value >= 1000 ether && msg.value < 5000 ether) amount = amount * 13 / 10;\r\n        if(msg.value >= 5000 ether && msg.value < 10000 ether) amount = amount * 14 / 10;\r\n        if(msg.value >= 10000 ether) amount = amount * 15 / 10;\r\n\r\n        collected = collected.add(msg.value);\r\n\r\n        token.mint(msg.sender, amount);\r\n        token.setInvested(msg.sender);\r\n    }\r\n\r\n\r\n    function confirmAddress(address _address) public onlyOwner{\r\n        token.confirm(_address);\r\n    }\r\n\r\n    function unconfirmAddress(address _address) public onlyOwner{\r\n        token.unconfirm(_address);\r\n    }\r\n\r\n    function setBenefeciar(address _benefeciar) public onlyOwner{\r\n        benefeciar = _benefeciar;\r\n    }\r\n\r\n    function withdraw() public onlyOwner{\r\n        benefeciar.transfer(this.balance);\r\n    }\r\n\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Ownable"
    UserDefinedTypeName "Ownable"
       Source: "Ownable"
  UsingForDirective
     Gas costs: 0
     Source: "using SafeMath for uint;"
    UserDefinedTypeName "SafeMath"
       Source: "SafeMath"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "token"
     Type: contract BigToken
     Gas costs: [???]
     Source: "BigToken public token"
    UserDefinedTypeName "BigToken"
       Source: "BigToken"
  VariableDeclaration "collected"
     Type: uint256
     Gas costs: [???]
     Source: "uint public collected"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "benefeciar"
     Type: address
     Gas costs: [???]
     Source: "address public benefeciar"
    ElementaryTypeName address
       Source: "address"
  FunctionDefinition "Crowdsale" - public
     Source: "function Crowdsale(address _token, address _benefeciar){\r\n        token = BigToken(_token);\r\n        benefeciar = _benefeciar;\r\n        owners[msg.sender] = true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _token, address _benefeciar)"
      VariableDeclaration "_token"
         Type: address
         Source: "address _token"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_benefeciar"
         Type: address
         Source: "address _benefeciar"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        token = BigToken(_token);\r\n        benefeciar = _benefeciar;\r\n        owners[msg.sender] = true;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "token = BigToken(_token)"
        Assignment using operator =
           Type: contract BigToken
           Source: "token = BigToken(_token)"
          Identifier token
             Type: contract BigToken
             Source: "token"
          FunctionCall
             Type: contract BigToken
             Source: "BigToken(_token)"
            Identifier BigToken
               Type: type(contract BigToken)
               Source: "BigToken"
            Identifier _token
               Type: address
               Source: "_token"
      ExpressionStatement
         Gas costs: 0
         Source: "benefeciar = _benefeciar"
        Assignment using operator =
           Type: address
           Source: "benefeciar = _benefeciar"
          Identifier benefeciar
             Type: address
             Source: "benefeciar"
          Identifier _benefeciar
             Type: address
             Source: "_benefeciar"
      ExpressionStatement
         Gas costs: 0
         Source: "owners[msg.sender] = true"
        Assignment using operator =
           Type: bool
           Source: "owners[msg.sender] = true"
          IndexAccess
             Type: bool
             Source: "owners[msg.sender]"
            Identifier owners
               Type: mapping(address => bool)
               Source: "owners"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Literal, token: true value: true
             Type: bool
             Source: "true"
  FunctionDefinition "" - public
     Source: "function () payable {\r\n        require(msg.value >= 0.01 ether);\r\n        uint256 amount = msg.value / 0.01 ether * 1 ether;\r\n\r\n        if(msg.value >= 100 ether && msg.value < 500 ether) amount = amount * 11 / 10;\r\n        if(msg.value >= 500 ether && msg.value < 1000 ether) amount = amount * 12 / 10;\r\n        if(msg.value >= 1000 ether && msg.value < 5000 ether) amount = amount * 13 / 10;\r\n        if(msg.value >= 5000 ether && msg.value < 10000 ether) amount = amount * 14 / 10;\r\n        if(msg.value >= 10000 ether) amount = amount * 15 / 10;\r\n\r\n        collected = collected.add(msg.value);\r\n\r\n        token.mint(msg.sender, amount);\r\n        token.setInvested(msg.sender);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(msg.value >= 0.01 ether);\r\n        uint256 amount = msg.value / 0.01 ether * 1 ether;\r\n\r\n        if(msg.value >= 100 ether && msg.value < 500 ether) amount = amount * 11 / 10;\r\n        if(msg.value >= 500 ether && msg.value < 1000 ether) amount = amount * 12 / 10;\r\n        if(msg.value >= 1000 ether && msg.value < 5000 ether) amount = amount * 13 / 10;\r\n        if(msg.value >= 5000 ether && msg.value < 10000 ether) amount = amount * 14 / 10;\r\n        if(msg.value >= 10000 ether) amount = amount * 15 / 10;\r\n\r\n        collected = collected.add(msg.value);\r\n\r\n        token.mint(msg.sender, amount);\r\n        token.setInvested(msg.sender);\r\n    }"
      ExpressionStatement
         Gas costs: 37
         Source: "require(msg.value >= 0.01 ether)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.value >= 0.01 ether)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "msg.value >= 0.01 ether"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Literal, token: [no token] value: 0.01
               Type: int_const 10000000000000000
               Source: "0.01 ether"
      VariableDeclarationStatement
         Gas costs: 49
         Source: "uint256 amount = msg.value / 0.01 ether * 1 ether"
        VariableDeclaration "amount"
           Type: uint256
           Source: "uint256 amount"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator *
           Type: uint256
           Source: "msg.value / 0.01 ether * 1 ether"
          BinaryOperation using operator /
             Type: uint256
             Source: "msg.value / 0.01 ether"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Literal, token: [no token] value: 0.01
               Type: int_const 10000000000000000
               Source: "0.01 ether"
          Literal, token: [no token] value: 1
             Type: int_const 1000000000000000000
             Source: "1 ether"
      IfStatement
         Source: "if(msg.value >= 100 ether && msg.value < 500 ether) amount = amount * 11 / 10"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 41
           Source: "msg.value >= 100 ether && msg.value < 500 ether"
          BinaryOperation using operator >=
             Type: bool
             Source: "msg.value >= 100 ether"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Literal, token: [no token] value: 100
               Type: int_const 100000000000000000000
               Source: "100 ether"
          BinaryOperation using operator <
             Type: bool
             Source: "msg.value < 500 ether"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Literal, token: [no token] value: 500
               Type: int_const 500000000000000000000
               Source: "500 ether"
        ExpressionStatement
           Gas costs: 47
           Source: "amount = amount * 11 / 10"
          Assignment using operator =
             Type: uint256
             Source: "amount = amount * 11 / 10"
            Identifier amount
               Type: uint256
               Source: "amount"
            BinaryOperation using operator /
               Type: uint256
               Source: "amount * 11 / 10"
              BinaryOperation using operator *
                 Type: uint256
                 Source: "amount * 11"
                Identifier amount
                   Type: uint256
                   Source: "amount"
                Literal, token: [no token] value: 11
                   Type: int_const 11
                   Source: "11"
              Literal, token: [no token] value: 10
                 Type: int_const 10
                 Source: "10"
      IfStatement
         Source: "if(msg.value >= 500 ether && msg.value < 1000 ether) amount = amount * 12 / 10"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 41
           Source: "msg.value >= 500 ether && msg.value < 1000 ether"
          BinaryOperation using operator >=
             Type: bool
             Source: "msg.value >= 500 ether"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Literal, token: [no token] value: 500
               Type: int_const 500000000000000000000
               Source: "500 ether"
          BinaryOperation using operator <
             Type: bool
             Source: "msg.value < 1000 ether"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Literal, token: [no token] value: 1000
               Type: int_const 1000000000000000000000
               Source: "1000 ether"
        ExpressionStatement
           Gas costs: 47
           Source: "amount = amount * 12 / 10"
          Assignment using operator =
             Type: uint256
             Source: "amount = amount * 12 / 10"
            Identifier amount
               Type: uint256
               Source: "amount"
            BinaryOperation using operator /
               Type: uint256
               Source: "amount * 12 / 10"
              BinaryOperation using operator *
                 Type: uint256
                 Source: "amount * 12"
                Identifier amount
                   Type: uint256
                   Source: "amount"
                Literal, token: [no token] value: 12
                   Type: int_const 12
                   Source: "12"
              Literal, token: [no token] value: 10
                 Type: int_const 10
                 Source: "10"
      IfStatement
         Source: "if(msg.value >= 1000 ether && msg.value < 5000 ether) amount = amount * 13 / 10"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 41
           Source: "msg.value >= 1000 ether && msg.value < 5000 ether"
          BinaryOperation using operator >=
             Type: bool
             Source: "msg.value >= 1000 ether"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Literal, token: [no token] value: 1000
               Type: int_const 1000000000000000000000
               Source: "1000 ether"
          BinaryOperation using operator <
             Type: bool
             Source: "msg.value < 5000 ether"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Literal, token: [no token] value: 5000
               Type: int_const 5000000000000000000000
               Source: "5000 ether"
        ExpressionStatement
           Gas costs: 47
           Source: "amount = amount * 13 / 10"
          Assignment using operator =
             Type: uint256
             Source: "amount = amount * 13 / 10"
            Identifier amount
               Type: uint256
               Source: "amount"
            BinaryOperation using operator /
               Type: uint256
               Source: "amount * 13 / 10"
              BinaryOperation using operator *
                 Type: uint256
                 Source: "amount * 13"
                Identifier amount
                   Type: uint256
                   Source: "amount"
                Literal, token: [no token] value: 13
                   Type: int_const 13
                   Source: "13"
              Literal, token: [no token] value: 10
                 Type: int_const 10
                 Source: "10"
      IfStatement
         Source: "if(msg.value >= 5000 ether && msg.value < 10000 ether) amount = amount * 14 / 10"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 41
           Source: "msg.value >= 5000 ether && msg.value < 10000 ether"
          BinaryOperation using operator >=
             Type: bool
             Source: "msg.value >= 5000 ether"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Literal, token: [no token] value: 5000
               Type: int_const 5000000000000000000000
               Source: "5000 ether"
          BinaryOperation using operator <
             Type: bool
             Source: "msg.value < 10000 ether"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Literal, token: [no token] value: 10000
               Type: int_const 10000000000000000000000
               Source: "10000 ether"
        ExpressionStatement
           Gas costs: 47
           Source: "amount = amount * 14 / 10"
          Assignment using operator =
             Type: uint256
             Source: "amount = amount * 14 / 10"
            Identifier amount
               Type: uint256
               Source: "amount"
            BinaryOperation using operator /
               Type: uint256
               Source: "amount * 14 / 10"
              BinaryOperation using operator *
                 Type: uint256
                 Source: "amount * 14"
                Identifier amount
                   Type: uint256
                   Source: "amount"
                Literal, token: [no token] value: 14
                   Type: int_const 14
                   Source: "14"
              Literal, token: [no token] value: 10
                 Type: int_const 10
                 Source: "10"
      IfStatement
         Source: "if(msg.value >= 10000 ether) amount = amount * 15 / 10"
        BinaryOperation using operator >=
           Type: bool
           Gas costs: 11
           Source: "msg.value >= 10000 ether"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
          Literal, token: [no token] value: 10000
             Type: int_const 10000000000000000000000
             Source: "10000 ether"
        ExpressionStatement
           Gas costs: 47
           Source: "amount = amount * 15 / 10"
          Assignment using operator =
             Type: uint256
             Source: "amount = amount * 15 / 10"
            Identifier amount
               Type: uint256
               Source: "amount"
            BinaryOperation using operator /
               Type: uint256
               Source: "amount * 15 / 10"
              BinaryOperation using operator *
                 Type: uint256
                 Source: "amount * 15"
                Identifier amount
                   Type: uint256
                   Source: "amount"
                Literal, token: [no token] value: 15
                   Type: int_const 15
                   Source: "15"
              Literal, token: [no token] value: 10
                 Type: int_const 10
                 Source: "10"
      ExpressionStatement
         Gas costs: 20246
         Source: "collected = collected.add(msg.value)"
        Assignment using operator =
           Type: uint256
           Source: "collected = collected.add(msg.value)"
          Identifier collected
             Type: uint256
             Source: "collected"
          FunctionCall
             Type: uint256
             Source: "collected.add(msg.value)"
            MemberAccess to member add
               Type: function (uint256,uint256) view returns (uint256)
               Source: "collected.add"
              Identifier collected
                 Type: uint256
                 Source: "collected"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
      ExpressionStatement
         Gas costs: [???]
         Source: "token.mint(msg.sender, amount)"
        FunctionCall
           Type: bool
           Source: "token.mint(msg.sender, amount)"
          MemberAccess to member mint
             Type: function (address,uint256) external returns (bool)
             Source: "token.mint"
            Identifier token
               Type: contract BigToken
               Source: "token"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier amount
             Type: uint256
             Source: "amount"
      ExpressionStatement
         Gas costs: [???]
         Source: "token.setInvested(msg.sender)"
        FunctionCall
           Type: tuple()
           Source: "token.setInvested(msg.sender)"
          MemberAccess to member setInvested
             Type: function (address) external
             Source: "token.setInvested"
            Identifier token
               Type: contract BigToken
               Source: "token"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "confirmAddress" - public
     Source: "function confirmAddress(address _address) public onlyOwner{\r\n        token.confirm(_address);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _address)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        token.confirm(_address);\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "token.confirm(_address)"
        FunctionCall
           Type: tuple()
           Source: "token.confirm(_address)"
          MemberAccess to member confirm
             Type: function (address) external
             Source: "token.confirm"
            Identifier token
               Type: contract BigToken
               Source: "token"
          Identifier _address
             Type: address
             Source: "_address"
  FunctionDefinition "unconfirmAddress" - public
     Source: "function unconfirmAddress(address _address) public onlyOwner{\r\n        token.unconfirm(_address);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _address)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        token.unconfirm(_address);\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "token.unconfirm(_address)"
        FunctionCall
           Type: tuple()
           Source: "token.unconfirm(_address)"
          MemberAccess to member unconfirm
             Type: function (address) external
             Source: "token.unconfirm"
            Identifier token
               Type: contract BigToken
               Source: "token"
          Identifier _address
             Type: address
             Source: "_address"
  FunctionDefinition "setBenefeciar" - public
     Source: "function setBenefeciar(address _benefeciar) public onlyOwner{\r\n        benefeciar = _benefeciar;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _benefeciar)"
      VariableDeclaration "_benefeciar"
         Type: address
         Source: "address _benefeciar"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        benefeciar = _benefeciar;\r\n    }"
      ExpressionStatement
         Gas costs: 20267
         Source: "benefeciar = _benefeciar"
        Assignment using operator =
           Type: address
           Source: "benefeciar = _benefeciar"
          Identifier benefeciar
             Type: address
             Source: "benefeciar"
          Identifier _benefeciar
             Type: address
             Source: "_benefeciar"
  FunctionDefinition "withdraw" - public
     Source: "function withdraw() public onlyOwner{\r\n        benefeciar.transfer(this.balance);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        benefeciar.transfer(this.balance);\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "benefeciar.transfer(this.balance)"
        FunctionCall
           Type: tuple()
           Source: "benefeciar.transfer(this.balance)"
          MemberAccess to member transfer
             Type: function (uint256)
             Source: "benefeciar.transfer"
            Identifier benefeciar
               Type: address
               Source: "benefeciar"
          MemberAccess to member balance
             Type: uint256
             Source: "this.balance"
            Identifier this
               Type: contract Crowdsale
               Source: "this"
