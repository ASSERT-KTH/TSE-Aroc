Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0x12759512d326303b45f1cec8f7b6fd96f387778e.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.18;"
ContractDefinition "SafeMath"
   Source: "contract SafeMath {\r\n\r\n    // it is recommended to define functions which can neither read the state of blockchain nor write in it as pure instead of constant\r\n\r\n    function safeAdd(uint256 x, uint256 y) internal pure returns(uint256) {\r\n        uint256 z = x + y;\r\n        assert((z >= x));\r\n        return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) internal pure returns(uint256) {\r\n        assert(x >= y);\r\n        return x - y;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) internal pure returns(uint256) {\r\n        uint256 z = x * y;\r\n        assert((x == 0)||(z/x == y));\r\n        return z;\r\n    }\r\n\r\n    function safeDiv(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x / y;\r\n        return z;\r\n    }\r\n\r\n    // mitigate short address attack\r\n    // thanks to https://github.com/numerai/contract/blob/c182465f82e50ced8dacb3977ec374a892f5fa8c/contracts/Safe.sol#L30-L34.\r\n    // TODO: doublecheck implication of >= compared to ==\r\n    modifier onlyPayloadSize(uint numWords) {\r\n        assert(msg.data.length >= numWords * 32 + 4);\r\n        _;\r\n    }\r\n\r\n}"
  FunctionDefinition "safeAdd"
     Source: "function safeAdd(uint256 x, uint256 y) internal pure returns(uint256) {\r\n        uint256 z = x + y;\r\n        assert((z >= x));\r\n        return z;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 x, uint256 y)"
      VariableDeclaration "x"
         Type: uint256
         Source: "uint256 x"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "y"
         Type: uint256
         Source: "uint256 y"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        uint256 z = x + y;\r\n        assert((z >= x));\r\n        return z;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 z = x + y"
        VariableDeclaration "z"
           Type: uint256
           Source: "uint256 z"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator +
           Type: uint256
           Source: "x + y"
          Identifier x
             Type: uint256
             Source: "x"
          Identifier y
             Type: uint256
             Source: "y"
      ExpressionStatement
         Gas costs: 0
         Source: "assert((z >= x))"
        FunctionCall
           Type: tuple()
           Source: "assert((z >= x))"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          TupleExpression
             Type: bool
             Source: "(z >= x)"
            BinaryOperation using operator >=
               Type: bool
               Source: "z >= x"
              Identifier z
                 Type: uint256
                 Source: "z"
              Identifier x
                 Type: uint256
                 Source: "x"
      Return
         Gas costs: 0
         Source: "return z"
        Identifier z
           Type: uint256
           Source: "z"
  FunctionDefinition "safeSubtract"
     Source: "function safeSubtract(uint256 x, uint256 y) internal pure returns(uint256) {\r\n        assert(x >= y);\r\n        return x - y;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 x, uint256 y)"
      VariableDeclaration "x"
         Type: uint256
         Source: "uint256 x"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "y"
         Type: uint256
         Source: "uint256 y"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        assert(x >= y);\r\n        return x - y;\r\n    }"
      ExpressionStatement
         Gas costs: 32
         Source: "assert(x >= y)"
        FunctionCall
           Type: tuple()
           Source: "assert(x >= y)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator >=
             Type: bool
             Source: "x >= y"
            Identifier x
               Type: uint256
               Source: "x"
            Identifier y
               Type: uint256
               Source: "y"
      Return
         Gas costs: 14
         Source: "return x - y"
        BinaryOperation using operator -
           Type: uint256
           Source: "x - y"
          Identifier x
             Type: uint256
             Source: "x"
          Identifier y
             Type: uint256
             Source: "y"
  FunctionDefinition "safeMult"
     Source: "function safeMult(uint256 x, uint256 y) internal pure returns(uint256) {\r\n        uint256 z = x * y;\r\n        assert((x == 0)||(z/x == y));\r\n        return z;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 x, uint256 y)"
      VariableDeclaration "x"
         Type: uint256
         Source: "uint256 x"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "y"
         Type: uint256
         Source: "uint256 y"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        uint256 z = x * y;\r\n        assert((x == 0)||(z/x == y));\r\n        return z;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 z = x * y"
        VariableDeclaration "z"
           Type: uint256
           Source: "uint256 z"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator *
           Type: uint256
           Source: "x * y"
          Identifier x
             Type: uint256
             Source: "x"
          Identifier y
             Type: uint256
             Source: "y"
      ExpressionStatement
         Gas costs: 0
         Source: "assert((x == 0)||(z/x == y))"
        FunctionCall
           Type: tuple()
           Source: "assert((x == 0)||(z/x == y))"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator ||
             Type: bool
             Source: "(x == 0)||(z/x == y)"
            TupleExpression
               Type: bool
               Source: "(x == 0)"
              BinaryOperation using operator ==
                 Type: bool
                 Source: "x == 0"
                Identifier x
                   Type: uint256
                   Source: "x"
                Literal, token: [no token] value: 0
                   Type: int_const 0
                   Source: "0"
            TupleExpression
               Type: bool
               Source: "(z/x == y)"
              BinaryOperation using operator ==
                 Type: bool
                 Source: "z/x == y"
                BinaryOperation using operator /
                   Type: uint256
                   Source: "z/x"
                  Identifier z
                     Type: uint256
                     Source: "z"
                  Identifier x
                     Type: uint256
                     Source: "x"
                Identifier y
                   Type: uint256
                   Source: "y"
      Return
         Gas costs: 0
         Source: "return z"
        Identifier z
           Type: uint256
           Source: "z"
  FunctionDefinition "safeDiv"
     Source: "function safeDiv(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x / y;\r\n        return z;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 x, uint256 y)"
      VariableDeclaration "x"
         Type: uint256
         Source: "uint256 x"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "y"
         Type: uint256
         Source: "uint256 y"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        uint256 z = x / y;\r\n        return z;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 z = x / y"
        VariableDeclaration "z"
           Type: uint256
           Source: "uint256 z"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator /
           Type: uint256
           Source: "x / y"
          Identifier x
             Type: uint256
             Source: "x"
          Identifier y
             Type: uint256
             Source: "y"
      Return
         Gas costs: 0
         Source: "return z"
        Identifier z
           Type: uint256
           Source: "z"
  ModifierDefinition "onlyPayloadSize"
     Source: "modifier onlyPayloadSize(uint numWords) {\r\n        assert(msg.data.length >= numWords * 32 + 4);\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint numWords)"
      VariableDeclaration "numWords"
         Type: uint256
         Source: "uint numWords"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        assert(msg.data.length >= numWords * 32 + 4);\r\n        _;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "assert(msg.data.length >= numWords * 32 + 4)"
        FunctionCall
           Type: tuple()
           Source: "assert(msg.data.length >= numWords * 32 + 4)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator >=
             Type: bool
             Source: "msg.data.length >= numWords * 32 + 4"
            MemberAccess to member length
               Type: uint256
               Source: "msg.data.length"
              MemberAccess to member data
                 Type: bytes calldata
                 Source: "msg.data"
                Identifier msg
                   Type: msg
                   Source: "msg"
            BinaryOperation using operator +
               Type: uint256
               Source: "numWords * 32 + 4"
              BinaryOperation using operator *
                 Type: uint256
                 Source: "numWords * 32"
                Identifier numWords
                   Type: uint256
                   Source: "numWords"
                Literal, token: [no token] value: 32
                   Type: int_const 32
                   Source: "32"
              Literal, token: [no token] value: 4
                 Type: int_const 4
                 Source: "4"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
ContractDefinition "ERC20"
   Gas costs: 287
   Source: "contract ERC20 {\r\n    uint256 public totalSupply;\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    function balanceOf(address _owner) constant public returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n    /*\r\n     *  Events\r\n     */\r\n    // this generates a public event on blockchain that will notify clients\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n\r\n}"
  VariableDeclaration "totalSupply"
     Type: uint256
     Source: "uint256 public totalSupply"
    ElementaryTypeName uint256
       Source: "uint256"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) constant public returns (uint256 balance);"
    ParameterList
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256 balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) public returns (bool success);"
    ParameterList
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);"
    ParameterList
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint256 _value) public returns (bool success);"
    ParameterList
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) public constant returns (uint256 remaining);"
    ParameterList
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256 remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint256 remaining"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Transfer"
     Source: "event Transfer(address indexed _from, address indexed _to, uint256 _value);"
    ParameterList
       Source: "(address indexed _from, address indexed _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address indexed _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address indexed _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Approval"
     Source: "event Approval(address indexed _owner, address indexed _spender, uint256 _value);"
    ParameterList
       Source: "(address indexed _owner, address indexed _spender, uint256 _value)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address indexed _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address indexed _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Burn"
     Source: "event Burn(address indexed from, uint256 value);"
    ParameterList
       Source: "(address indexed from, uint256 value)"
      VariableDeclaration "from"
         Type: address
         Source: "address indexed from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
ContractDefinition "StandardToken"
   Source: "contract StandardToken is ERC20,SafeMath {\r\n\r\n    /*\r\n     *  Storage\r\n    */\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    /// @dev Transfers sender's tokens to a given address. Returns success\r\n    /// @param _to Address of token receiver\r\n    /// @param _value Number of tokens to transfer\r\n    /// @return Was transfer successful?\r\n\r\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2) public returns (bool success) {\r\n      if (balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success\r\n    /// @param _from Address from where tokens are withdrawn\r\n    /// @param _to Address to where tokens are sent\r\n    /// @param _value Number of tokens to transfer\r\n    /// @return Was transfer successful?\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3) public returns (bool success) {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n\r\n    /// @dev Returns number of tokens owned by given address\r\n    /// @param _owner Address of token owner\r\n    /// @return Balance of owner\r\n\r\n    // it is recommended to define functions which can read the state of blockchain but cannot write in it as view instead of constant\r\n\r\n    function balanceOf(address _owner) view public returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// @dev Sets approved amount of tokens for spender. Returns success\r\n    /// @param _spender Address of allowed account\r\n    /// @param _value Number of approved tokens\r\n    /// @return Was approval successful?\r\n\r\n    function approve(address _spender, uint256 _value) onlyPayloadSize(2) public returns (bool success) {\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\r\n        require(_value == 0 && (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function changeApproval(address _spender, uint256 _oldValue, uint256 _newValue) onlyPayloadSize(3) public returns (bool success) {\r\n        require(allowed[msg.sender][_spender] == _oldValue);\r\n        allowed[msg.sender][_spender] = _newValue;\r\n        Approval(msg.sender, _spender, _newValue);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    /// @dev Returns number of allowed tokens for given address\r\n    /// @param _owner Address of token owner\r\n    /// @param _spender Address of token spender\r\n    /// @return Remaining allowance for spender\r\n    function allowance(address _owner, address _spender) public  view returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Burns a specific amount of tokens.\r\n    * @param _value The amount of token to be burned.\r\n    */\r\n\r\n    function burn(uint256 _value) public returns (bool burnSuccess) {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] =  safeSubtract(balances[burner],_value);\r\n        totalSupply = safeSubtract(totalSupply,_value);\r\n        Burn(burner, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "ERC20"
    UserDefinedTypeName "ERC20"
       Source: "ERC20"
  InheritanceSpecifier
     Gas costs: 0
     Source: "SafeMath"
    UserDefinedTypeName "SafeMath"
       Source: "SafeMath"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping (address => uint256) balances"
    Mapping
       Source: "mapping (address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "allowed"
     Type: mapping(address => mapping(address => uint256))
     Gas costs: 0
     Source: "mapping (address => mapping (address => uint256)) allowed"
    Mapping
       Source: "mapping (address => mapping (address => uint256))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping (address => uint256)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) onlyPayloadSize(2) public returns (bool success) {\r\n      if (balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "onlyPayloadSize"
       Gas costs: 3
       Source: "onlyPayloadSize(2)"
      Identifier onlyPayloadSize
         Type: modifier (uint256)
         Source: "onlyPayloadSize"
      Literal, token: [no token] value: 2
         Type: int_const 2
         Source: "2"
    Block
       Source: "{\r\n      if (balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }"
      IfStatement
         Source: "if (balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 961
           Source: "balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]"
          BinaryOperation using operator &&
             Type: bool
             Source: "balances[msg.sender] >= _value && _value > 0"
            BinaryOperation using operator >=
               Type: bool
               Source: "balances[msg.sender] >= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
            BinaryOperation using operator >
               Type: bool
               Source: "_value > 0"
              Identifier _value
                 Type: uint256
                 Source: "_value"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
          BinaryOperation using operator >
             Type: bool
             Source: "balances[_to] + _value > balances[_to]"
            BinaryOperation using operator +
               Type: uint256
               Source: "balances[_to] + _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
            IndexAccess
               Type: uint256
               Source: "balances[_to]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _to
                 Type: address
                 Source: "_to"
        Block
           Source: "{\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n      }"
          ExpressionStatement
             Gas costs: 20328
             Source: "balances[msg.sender] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "balances[msg.sender] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20323
             Source: "balances[_to] += _value"
            Assignment using operator +=
               Type: uint256
               Source: "balances[_to] += _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 1837
             Source: "Transfer(msg.sender, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(msg.sender, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{\r\n        return false;\r\n      }"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3) public returns (bool success) {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "onlyPayloadSize"
       Gas costs: 3
       Source: "onlyPayloadSize(3)"
      Identifier onlyPayloadSize
         Type: modifier (uint256)
         Source: "onlyPayloadSize"
      Literal, token: [no token] value: 3
         Type: int_const 3
         Source: "3"
    Block
       Source: "{\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }"
      IfStatement
         Source: "if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 758
           Source: "balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0"
          BinaryOperation using operator &&
             Type: bool
             Source: "balances[_from] >= _value && allowed[_from][msg.sender] >= _value"
            BinaryOperation using operator >=
               Type: bool
               Source: "balances[_from] >= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_from]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _from
                   Type: address
                   Source: "_from"
              Identifier _value
                 Type: uint256
                 Source: "_value"
            BinaryOperation using operator >=
               Type: bool
               Source: "allowed[_from][msg.sender] >= _value"
              IndexAccess
                 Type: uint256
                 Source: "allowed[_from][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[_from]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  Identifier _from
                     Type: address
                     Source: "_from"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          BinaryOperation using operator >
             Type: bool
             Source: "_value > 0"
            Identifier _value
               Type: uint256
               Source: "_value"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
        Block
           Source: "{\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      }"
          ExpressionStatement
             Gas costs: 20329
             Source: "balances[_to] += _value"
            Assignment using operator +=
               Type: uint256
               Source: "balances[_to] += _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20323
             Source: "balances[_from] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "balances[_from] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_from]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _from
                   Type: address
                   Source: "_from"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20412
             Source: "allowed[_from][msg.sender] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "allowed[_from][msg.sender] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "allowed[_from][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[_from]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  Identifier _from
                     Type: address
                     Source: "_from"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 1838
             Source: "Transfer(_from, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(_from, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              Identifier _from
                 Type: address
                 Source: "_from"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{\r\n        return false;\r\n      }"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) view public returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return balances[_owner];\r\n    }"
      Return
         Gas costs: 304
         Source: "return balances[_owner]"
        IndexAccess
           Type: uint256
           Source: "balances[_owner]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          Identifier _owner
             Type: address
             Source: "_owner"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint256 _value) onlyPayloadSize(2) public returns (bool success) {\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\r\n        require(_value == 0 && (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "onlyPayloadSize"
       Gas costs: 3
       Source: "onlyPayloadSize(2)"
      Identifier onlyPayloadSize
         Type: modifier (uint256)
         Source: "onlyPayloadSize"
      Literal, token: [no token] value: 2
         Type: int_const 2
         Source: "2"
    Block
       Source: "{\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\r\n        require(_value == 0 && (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 451
         Source: "require(_value == 0 && (allowed[msg.sender][_spender] == 0))"
        FunctionCall
           Type: tuple()
           Source: "require(_value == 0 && (allowed[msg.sender][_spender] == 0))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator &&
             Type: bool
             Source: "_value == 0 && (allowed[msg.sender][_spender] == 0)"
            BinaryOperation using operator ==
               Type: bool
               Source: "_value == 0"
              Identifier _value
                 Type: uint256
                 Source: "_value"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
            TupleExpression
               Type: bool
               Source: "(allowed[msg.sender][_spender] == 0)"
              BinaryOperation using operator ==
                 Type: bool
                 Source: "allowed[msg.sender][_spender] == 0"
                IndexAccess
                   Type: uint256
                   Source: "allowed[msg.sender][_spender]"
                  IndexAccess
                     Type: mapping(address => uint256)
                     Source: "allowed[msg.sender]"
                    Identifier allowed
                       Type: mapping(address => mapping(address => uint256))
                       Source: "allowed"
                    MemberAccess to member sender
                       Type: address
                       Source: "msg.sender"
                      Identifier msg
                         Type: msg
                         Source: "msg"
                  Identifier _spender
                     Type: address
                     Source: "_spender"
                Literal, token: [no token] value: 0
                   Type: int_const 0
                   Source: "0"
      ExpressionStatement
         Gas costs: 20199
         Source: "allowed[msg.sender][_spender] = _value"
        Assignment using operator =
           Type: uint256
           Source: "allowed[msg.sender][_spender] = _value"
          IndexAccess
             Type: uint256
             Source: "allowed[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[msg.sender]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 1837
         Source: "Approval(msg.sender, _spender, _value)"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender, _spender, _value)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "changeApproval" - public
     Source: "function changeApproval(address _spender, uint256 _oldValue, uint256 _newValue) onlyPayloadSize(3) public returns (bool success) {\r\n        require(allowed[msg.sender][_spender] == _oldValue);\r\n        allowed[msg.sender][_spender] = _newValue;\r\n        Approval(msg.sender, _spender, _newValue);\r\n\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint256 _oldValue, uint256 _newValue)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_oldValue"
         Type: uint256
         Source: "uint256 _oldValue"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_newValue"
         Type: uint256
         Source: "uint256 _newValue"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "onlyPayloadSize"
       Gas costs: 3
       Source: "onlyPayloadSize(3)"
      Identifier onlyPayloadSize
         Type: modifier (uint256)
         Source: "onlyPayloadSize"
      Literal, token: [no token] value: 3
         Type: int_const 3
         Source: "3"
    Block
       Source: "{\r\n        require(allowed[msg.sender][_spender] == _oldValue);\r\n        allowed[msg.sender][_spender] = _newValue;\r\n        Approval(msg.sender, _spender, _newValue);\r\n\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 420
         Source: "require(allowed[msg.sender][_spender] == _oldValue)"
        FunctionCall
           Type: tuple()
           Source: "require(allowed[msg.sender][_spender] == _oldValue)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "allowed[msg.sender][_spender] == _oldValue"
            IndexAccess
               Type: uint256
               Source: "allowed[msg.sender][_spender]"
              IndexAccess
                 Type: mapping(address => uint256)
                 Source: "allowed[msg.sender]"
                Identifier allowed
                   Type: mapping(address => mapping(address => uint256))
                   Source: "allowed"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _spender
                 Type: address
                 Source: "_spender"
            Identifier _oldValue
               Type: uint256
               Source: "_oldValue"
      ExpressionStatement
         Gas costs: 20199
         Source: "allowed[msg.sender][_spender] = _newValue"
        Assignment using operator =
           Type: uint256
           Source: "allowed[msg.sender][_spender] = _newValue"
          IndexAccess
             Type: uint256
             Source: "allowed[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[msg.sender]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _newValue
             Type: uint256
             Source: "_newValue"
      ExpressionStatement
         Gas costs: 1837
         Source: "Approval(msg.sender, _spender, _newValue)"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender, _spender, _newValue)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _newValue
             Type: uint256
             Source: "_newValue"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) public  view returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint256 remaining"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n      return allowed[_owner][_spender];\r\n    }"
      Return
         Gas costs: 394
         Source: "return allowed[_owner][_spender]"
        IndexAccess
           Type: uint256
           Source: "allowed[_owner][_spender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowed[_owner]"
            Identifier allowed
               Type: mapping(address => mapping(address => uint256))
               Source: "allowed"
            Identifier _owner
               Type: address
               Source: "_owner"
          Identifier _spender
             Type: address
             Source: "_spender"
  FunctionDefinition "burn" - public
     Source: "function burn(uint256 _value) public returns (bool burnSuccess) {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] =  safeSubtract(balances[burner],_value);\r\n        totalSupply = safeSubtract(totalSupply,_value);\r\n        Burn(burner, _value);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _value)"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool burnSuccess)"
      VariableDeclaration "burnSuccess"
         Type: bool
         Source: "bool burnSuccess"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] =  safeSubtract(balances[burner],_value);\r\n        totalSupply = safeSubtract(totalSupply,_value);\r\n        Burn(burner, _value);\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 35
         Source: "require(_value > 0)"
        FunctionCall
           Type: tuple()
           Source: "require(_value > 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "_value > 0"
            Identifier _value
               Type: uint256
               Source: "_value"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: 333
         Source: "require(_value <= balances[msg.sender])"
        FunctionCall
           Type: tuple()
           Source: "require(_value <= balances[msg.sender])"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator <=
             Type: bool
             Source: "_value <= balances[msg.sender]"
            Identifier _value
               Type: uint256
               Source: "_value"
            IndexAccess
               Type: uint256
               Source: "balances[msg.sender]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
      VariableDeclarationStatement
         Gas costs: 10
         Source: "address burner = msg.sender"
        VariableDeclaration "burner"
           Type: address
           Source: "address burner"
          ElementaryTypeName address
             Source: "address"
        MemberAccess to member sender
           Type: address
           Source: "msg.sender"
          Identifier msg
             Type: msg
             Source: "msg"
      ExpressionStatement
         Gas costs: 20413
         Source: "balances[burner] =  safeSubtract(balances[burner],_value)"
        Assignment using operator =
           Type: uint256
           Source: "balances[burner] =  safeSubtract(balances[burner],_value)"
          IndexAccess
             Type: uint256
             Source: "balances[burner]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier burner
               Type: address
               Source: "burner"
          FunctionCall
             Type: uint256
             Source: "safeSubtract(balances[burner],_value)"
            Identifier safeSubtract
               Type: function (uint256,uint256) pure returns (uint256)
               Source: "safeSubtract"
            IndexAccess
               Type: uint256
               Source: "balances[burner]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier burner
                 Type: address
                 Source: "burner"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 20232
         Source: "totalSupply = safeSubtract(totalSupply,_value)"
        Assignment using operator =
           Type: uint256
           Source: "totalSupply = safeSubtract(totalSupply,_value)"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          FunctionCall
             Type: uint256
             Source: "safeSubtract(totalSupply,_value)"
            Identifier safeSubtract
               Type: function (uint256,uint256) pure returns (uint256)
               Source: "safeSubtract"
            Identifier totalSupply
               Type: uint256
               Source: "totalSupply"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 1460
         Source: "Burn(burner, _value)"
        FunctionCall
           Type: tuple()
           Source: "Burn(burner, _value)"
          Identifier Burn
             Type: function (address,uint256)
             Source: "Burn"
          Identifier burner
             Type: address
             Source: "burner"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
ContractDefinition "TrakToken"
   Source: "contract TrakToken is StandardToken {\r\n    // FIELDS\r\n    string constant public  name = \"TrakInvest Token\" ;\r\n    string constant public  symbol = \"TRAK\";\r\n    uint256 constant public  decimals = 18;\r\n\r\n    // The flag indicates if the crowdsale contract is in Funding state.\r\n    bool public fundraising = true;\r\n\r\n    // who created smart contract\r\n    address public creator;\r\n    // owns the total supply of tokens - it would be DAO\r\n    address public tokensOwner;\r\n    mapping (address => bool) public frozenAccounts;\r\n\r\n  /// events\r\n    event FrozenFund(address target ,bool frozen);\r\n\r\n  /// modifiers\r\n\r\n    modifier isCreator() { \r\n      require(msg.sender == creator);  \r\n      _; \r\n    }\r\n\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == tokensOwner);\r\n        _;\r\n    }\r\n\r\n    modifier manageTransfer() {\r\n        if (msg.sender == tokensOwner) {\r\n            _;\r\n        }\r\n        else {\r\n            require(fundraising == false);\r\n            _;\r\n        }\r\n    }\r\n\r\n  /// constructor\r\n    function TrakToken(\r\n      address _fundsWallet,\r\n      uint256 initialSupply\r\n      ) public {\r\n      creator = msg.sender;\r\n\r\n      if (_fundsWallet !=0) {\r\n        tokensOwner = _fundsWallet;\r\n      }\r\n      else {\r\n        tokensOwner = msg.sender;\r\n      }\r\n\r\n      totalSupply = initialSupply * (uint256(10) ** decimals);\r\n      balances[tokensOwner] = totalSupply;\r\n      Transfer(0x0, tokensOwner, totalSupply);\r\n    }\r\n\r\n\r\n  /// overriden methods\r\n\r\n    function transfer(address _to, uint256 _value)  public manageTransfer onlyPayloadSize(2 * 32) returns (bool success) {\r\n      require(!frozenAccounts[msg.sender]);\r\n      require(_to != address(0));\r\n      return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)  public manageTransfer onlyPayloadSize(3 * 32) returns (bool success) {\r\n      require(!frozenAccounts[msg.sender]);\r\n      require(_to != address(0));\r\n      require(_from != address(0));\r\n      return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n\r\n    function freezeAccount (address target ,bool freeze) public onlyOwner {\r\n      frozenAccounts[target] = freeze;\r\n      FrozenFund(target,freeze);  \r\n    }\r\n\r\n    function burn(uint256 _value) public onlyOwner returns (bool burnSuccess) {\r\n        require(fundraising == false);\r\n        return super.burn(_value);\r\n    }\r\n\r\n    /// @param newAddress Address of new owner.\r\n    function changeTokensWallet(address newAddress) public onlyOwner returns (bool)\r\n    {\r\n        require(newAddress != address(0));\r\n        tokensOwner = newAddress;\r\n    }\r\n\r\n    function finalize() public  onlyOwner {\r\n        require(fundraising != false);\r\n        // Switch to Operational state. This is the only place this can happen.\r\n        fundraising = false;\r\n    }\r\n\r\n\r\n    function() public {\r\n        revert();\r\n    }\r\n\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "StandardToken"
    UserDefinedTypeName "StandardToken"
       Source: "StandardToken"
  VariableDeclaration "name"
     Type: string memory
     Gas costs: [???]
     Source: "string constant public  name = \"TrakInvest Token\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: TrakInvest Token
       Type: literal_string "TrakInvest Token"
       Source: "\"TrakInvest Token\""
  VariableDeclaration "symbol"
     Type: string memory
     Gas costs: [???]
     Source: "string constant public  symbol = \"TRAK\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: TRAK
       Type: literal_string "TRAK"
       Source: "\"TRAK\""
  VariableDeclaration "decimals"
     Type: uint256
     Gas costs: 87
     Source: "uint256 constant public  decimals = 18"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 18
       Type: int_const 18
       Source: "18"
  VariableDeclaration "fundraising"
     Type: bool
     Gas costs: 335
     Source: "bool public fundraising = true"
    ElementaryTypeName bool
       Source: "bool"
    Literal, token: true value: true
       Type: bool
       Source: "true"
  VariableDeclaration "creator"
     Type: address
     Gas costs: 385
     Source: "address public creator"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "tokensOwner"
     Type: address
     Gas costs: 335
     Source: "address public tokensOwner"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "frozenAccounts"
     Type: mapping(address => bool)
     Gas costs: 468
     Source: "mapping (address => bool) public frozenAccounts"
    Mapping
       Source: "mapping (address => bool)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName bool
         Source: "bool"
  EventDefinition "FrozenFund"
     Gas costs: 0
     Source: "event FrozenFund(address target ,bool frozen);"
    ParameterList
       Source: "(address target ,bool frozen)"
      VariableDeclaration "target"
         Type: address
         Source: "address target"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "frozen"
         Type: bool
         Source: "bool frozen"
        ElementaryTypeName bool
           Source: "bool"
  ModifierDefinition "isCreator"
     Source: "modifier isCreator() { \r\n      require(msg.sender == creator);  \r\n      _; \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{ \r\n      require(msg.sender == creator);  \r\n      _; \r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "require(msg.sender == creator)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == creator)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == creator"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier creator
               Type: address
               Source: "creator"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "onlyPayloadSize"
     Source: "modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length >= size + 4);\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint size)"
      VariableDeclaration "size"
         Type: uint256
         Source: "uint size"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        assert(msg.data.length >= size + 4);\r\n        _;\r\n    }"
      ExpressionStatement
         Gas costs: 360
         Source: "assert(msg.data.length >= size + 4)"
        FunctionCall
           Type: tuple()
           Source: "assert(msg.data.length >= size + 4)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator >=
             Type: bool
             Source: "msg.data.length >= size + 4"
            MemberAccess to member length
               Type: uint256
               Source: "msg.data.length"
              MemberAccess to member data
                 Type: bytes calldata
                 Source: "msg.data"
                Identifier msg
                   Type: msg
                   Source: "msg"
            BinaryOperation using operator +
               Type: uint256
               Source: "size + 4"
              Identifier size
                 Type: uint256
                 Source: "size"
              Literal, token: [no token] value: 4
                 Type: int_const 4
                 Source: "4"
      PlaceholderStatement
         Gas costs: 2
         Source: "_"
  ModifierDefinition "onlyOwner"
     Source: "modifier onlyOwner() {\r\n        require(msg.sender == tokensOwner);\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n        require(msg.sender == tokensOwner);\r\n        _;\r\n    }"
      ExpressionStatement
         Gas costs: 1128
         Source: "require(msg.sender == tokensOwner)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == tokensOwner)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == tokensOwner"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier tokensOwner
               Type: address
               Source: "tokensOwner"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "manageTransfer"
     Source: "modifier manageTransfer() {\r\n        if (msg.sender == tokensOwner) {\r\n            _;\r\n        }\r\n        else {\r\n            require(fundraising == false);\r\n            _;\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n        if (msg.sender == tokensOwner) {\r\n            _;\r\n        }\r\n        else {\r\n            require(fundraising == false);\r\n            _;\r\n        }\r\n    }"
      IfStatement
         Source: "if (msg.sender == tokensOwner) {\r\n            _;\r\n        }\r\n        else {\r\n            require(fundraising == false);\r\n            _;\r\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 512
           Source: "msg.sender == tokensOwner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier tokensOwner
             Type: address
             Source: "tokensOwner"
        Block
           Source: "{\r\n            _;\r\n        }"
          PlaceholderStatement
             Gas costs: 4
             Source: "_"
        Block
           Source: "{\r\n            require(fundraising == false);\r\n            _;\r\n        }"
          ExpressionStatement
             Gas costs: 566
             Source: "require(fundraising == false)"
            FunctionCall
               Type: tuple()
               Source: "require(fundraising == false)"
              Identifier require
                 Type: function (bool) pure
                 Source: "require"
              BinaryOperation using operator ==
                 Type: bool
                 Source: "fundraising == false"
                Identifier fundraising
                   Type: bool
                   Source: "fundraising"
                Literal, token: false value: false
                   Type: bool
                   Source: "false"
          PlaceholderStatement
             Gas costs: 4
             Source: "_"
  FunctionDefinition "TrakToken" - public
     Source: "function TrakToken(\r\n      address _fundsWallet,\r\n      uint256 initialSupply\r\n      ) public {\r\n      creator = msg.sender;\r\n\r\n      if (_fundsWallet !=0) {\r\n        tokensOwner = _fundsWallet;\r\n      }\r\n      else {\r\n        tokensOwner = msg.sender;\r\n      }\r\n\r\n      totalSupply = initialSupply * (uint256(10) ** decimals);\r\n      balances[tokensOwner] = totalSupply;\r\n      Transfer(0x0, tokensOwner, totalSupply);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(\r\n      address _fundsWallet,\r\n      uint256 initialSupply\r\n      )"
      VariableDeclaration "_fundsWallet"
         Type: address
         Source: "address _fundsWallet"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "initialSupply"
         Type: uint256
         Source: "uint256 initialSupply"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n      creator = msg.sender;\r\n\r\n      if (_fundsWallet !=0) {\r\n        tokensOwner = _fundsWallet;\r\n      }\r\n      else {\r\n        tokensOwner = msg.sender;\r\n      }\r\n\r\n      totalSupply = initialSupply * (uint256(10) ** decimals);\r\n      balances[tokensOwner] = totalSupply;\r\n      Transfer(0x0, tokensOwner, totalSupply);\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "creator = msg.sender"
        Assignment using operator =
           Type: address
           Source: "creator = msg.sender"
          Identifier creator
             Type: address
             Source: "creator"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      IfStatement
         Source: "if (_fundsWallet !=0) {\r\n        tokensOwner = _fundsWallet;\r\n      }\r\n      else {\r\n        tokensOwner = msg.sender;\r\n      }"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 0
           Source: "_fundsWallet !=0"
          Identifier _fundsWallet
             Type: address
             Source: "_fundsWallet"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n        tokensOwner = _fundsWallet;\r\n      }"
          ExpressionStatement
             Gas costs: 0
             Source: "tokensOwner = _fundsWallet"
            Assignment using operator =
               Type: address
               Source: "tokensOwner = _fundsWallet"
              Identifier tokensOwner
                 Type: address
                 Source: "tokensOwner"
              Identifier _fundsWallet
                 Type: address
                 Source: "_fundsWallet"
        Block
           Source: "{\r\n        tokensOwner = msg.sender;\r\n      }"
          ExpressionStatement
             Gas costs: 0
             Source: "tokensOwner = msg.sender"
            Assignment using operator =
               Type: address
               Source: "tokensOwner = msg.sender"
              Identifier tokensOwner
                 Type: address
                 Source: "tokensOwner"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
      ExpressionStatement
         Gas costs: 0
         Source: "totalSupply = initialSupply * (uint256(10) ** decimals)"
        Assignment using operator =
           Type: uint256
           Source: "totalSupply = initialSupply * (uint256(10) ** decimals)"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          BinaryOperation using operator *
             Type: uint256
             Source: "initialSupply * (uint256(10) ** decimals)"
            Identifier initialSupply
               Type: uint256
               Source: "initialSupply"
            TupleExpression
               Type: uint256
               Source: "(uint256(10) ** decimals)"
              BinaryOperation using operator **
                 Type: uint256
                 Source: "uint256(10) ** decimals"
                FunctionCall
                   Type: uint256
                   Source: "uint256(10)"
                  ElementaryTypeNameExpression uint256
                     Type: type(uint256)
                     Source: "uint256"
                  Literal, token: [no token] value: 10
                     Type: int_const 10
                     Source: "10"
                Identifier decimals
                   Type: uint256
                   Source: "decimals"
      ExpressionStatement
         Gas costs: 0
         Source: "balances[tokensOwner] = totalSupply"
        Assignment using operator =
           Type: uint256
           Source: "balances[tokensOwner] = totalSupply"
          IndexAccess
             Type: uint256
             Source: "balances[tokensOwner]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier tokensOwner
               Type: address
               Source: "tokensOwner"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
      ExpressionStatement
         Gas costs: 0
         Source: "Transfer(0x0, tokensOwner, totalSupply)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(0x0, tokensOwner, totalSupply)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          Literal, token: [no token] value: 0x0
             Type: int_const 0
             Source: "0x0"
          Identifier tokensOwner
             Type: address
             Source: "tokensOwner"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value)  public manageTransfer onlyPayloadSize(2 * 32) returns (bool success) {\r\n      require(!frozenAccounts[msg.sender]);\r\n      require(_to != address(0));\r\n      return super.transfer(_to, _value);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "manageTransfer"
       Gas costs: 0
       Source: "manageTransfer"
      Identifier manageTransfer
         Type: modifier ()
         Source: "manageTransfer"
    ModifierInvocation "onlyPayloadSize"
       Gas costs: 6
       Source: "onlyPayloadSize(2 * 32)"
      Identifier onlyPayloadSize
         Type: modifier (uint256)
         Source: "onlyPayloadSize"
      BinaryOperation using operator *
         Type: int_const 64
         Source: "2 * 32"
        Literal, token: [no token] value: 2
           Type: int_const 2
           Source: "2"
        Literal, token: [no token] value: 32
           Type: int_const 32
           Source: "32"
    Block
       Source: "{\r\n      require(!frozenAccounts[msg.sender]);\r\n      require(_to != address(0));\r\n      return super.transfer(_to, _value);\r\n    }"
      ExpressionStatement
         Gas costs: 726
         Source: "require(!frozenAccounts[msg.sender])"
        FunctionCall
           Type: tuple()
           Source: "require(!frozenAccounts[msg.sender])"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!frozenAccounts[msg.sender]"
            IndexAccess
               Type: bool
               Source: "frozenAccounts[msg.sender]"
              Identifier frozenAccounts
                 Type: mapping(address => bool)
                 Source: "frozenAccounts"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
      ExpressionStatement
         Gas costs: 100
         Source: "require(_to != address(0))"
        FunctionCall
           Type: tuple()
           Source: "require(_to != address(0))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "_to != address(0)"
            Identifier _to
               Type: address
               Source: "_to"
            FunctionCall
               Type: address
               Source: "address(0)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      Return
         Gas costs: 41
         Source: "return super.transfer(_to, _value)"
        FunctionCall
           Type: bool
           Source: "super.transfer(_to, _value)"
          MemberAccess to member transfer
             Type: function (address,uint256) returns (bool)
             Source: "super.transfer"
            Identifier super
               Type: contract super TrakToken
               Source: "super"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _value)  public manageTransfer onlyPayloadSize(3 * 32) returns (bool success) {\r\n      require(!frozenAccounts[msg.sender]);\r\n      require(_to != address(0));\r\n      require(_from != address(0));\r\n      return super.transferFrom(_from, _to, _value);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "manageTransfer"
       Gas costs: 0
       Source: "manageTransfer"
      Identifier manageTransfer
         Type: modifier ()
         Source: "manageTransfer"
    ModifierInvocation "onlyPayloadSize"
       Gas costs: 6
       Source: "onlyPayloadSize(3 * 32)"
      Identifier onlyPayloadSize
         Type: modifier (uint256)
         Source: "onlyPayloadSize"
      BinaryOperation using operator *
         Type: int_const 96
         Source: "3 * 32"
        Literal, token: [no token] value: 3
           Type: int_const 3
           Source: "3"
        Literal, token: [no token] value: 32
           Type: int_const 32
           Source: "32"
    Block
       Source: "{\r\n      require(!frozenAccounts[msg.sender]);\r\n      require(_to != address(0));\r\n      require(_from != address(0));\r\n      return super.transferFrom(_from, _to, _value);\r\n    }"
      ExpressionStatement
         Gas costs: 726
         Source: "require(!frozenAccounts[msg.sender])"
        FunctionCall
           Type: tuple()
           Source: "require(!frozenAccounts[msg.sender])"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!frozenAccounts[msg.sender]"
            IndexAccess
               Type: bool
               Source: "frozenAccounts[msg.sender]"
              Identifier frozenAccounts
                 Type: mapping(address => bool)
                 Source: "frozenAccounts"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
      ExpressionStatement
         Gas costs: 100
         Source: "require(_to != address(0))"
        FunctionCall
           Type: tuple()
           Source: "require(_to != address(0))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "_to != address(0)"
            Identifier _to
               Type: address
               Source: "_to"
            FunctionCall
               Type: address
               Source: "address(0)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      ExpressionStatement
         Gas costs: 100
         Source: "require(_from != address(0))"
        FunctionCall
           Type: tuple()
           Source: "require(_from != address(0))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "_from != address(0)"
            Identifier _from
               Type: address
               Source: "_from"
            FunctionCall
               Type: address
               Source: "address(0)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      Return
         Gas costs: 47
         Source: "return super.transferFrom(_from, _to, _value)"
        FunctionCall
           Type: bool
           Source: "super.transferFrom(_from, _to, _value)"
          MemberAccess to member transferFrom
             Type: function (address,address,uint256) returns (bool)
             Source: "super.transferFrom"
            Identifier super
               Type: contract super TrakToken
               Source: "super"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
  FunctionDefinition "freezeAccount" - public
     Source: "function freezeAccount (address target ,bool freeze) public onlyOwner {\r\n      frozenAccounts[target] = freeze;\r\n      FrozenFund(target,freeze);  \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address target ,bool freeze)"
      VariableDeclaration "target"
         Type: address
         Source: "address target"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "freeze"
         Type: bool
         Source: "bool freeze"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n      frozenAccounts[target] = freeze;\r\n      FrozenFund(target,freeze);  \r\n    }"
      ExpressionStatement
         Gas costs: 20363
         Source: "frozenAccounts[target] = freeze"
        Assignment using operator =
           Type: bool
           Source: "frozenAccounts[target] = freeze"
          IndexAccess
             Type: bool
             Source: "frozenAccounts[target]"
            Identifier frozenAccounts
               Type: mapping(address => bool)
               Source: "frozenAccounts"
            Identifier target
               Type: address
               Source: "target"
          Identifier freeze
             Type: bool
             Source: "freeze"
      ExpressionStatement
         Gas costs: 1373
         Source: "FrozenFund(target,freeze)"
        FunctionCall
           Type: tuple()
           Source: "FrozenFund(target,freeze)"
          Identifier FrozenFund
             Type: function (address,bool)
             Source: "FrozenFund"
          Identifier target
             Type: address
             Source: "target"
          Identifier freeze
             Type: bool
             Source: "freeze"
  FunctionDefinition "burn" - public
     Source: "function burn(uint256 _value) public onlyOwner returns (bool burnSuccess) {\r\n        require(fundraising == false);\r\n        return super.burn(_value);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _value)"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool burnSuccess)"
      VariableDeclaration "burnSuccess"
         Type: bool
         Source: "bool burnSuccess"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        require(fundraising == false);\r\n        return super.burn(_value);\r\n    }"
      ExpressionStatement
         Gas costs: 283
         Source: "require(fundraising == false)"
        FunctionCall
           Type: tuple()
           Source: "require(fundraising == false)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "fundraising == false"
            Identifier fundraising
               Type: bool
               Source: "fundraising"
            Literal, token: false value: false
               Type: bool
               Source: "false"
      Return
         Gas costs: 12
         Source: "return super.burn(_value)"
        FunctionCall
           Type: bool
           Source: "super.burn(_value)"
          MemberAccess to member burn
             Type: function (uint256) returns (bool)
             Source: "super.burn"
            Identifier super
               Type: contract super TrakToken
               Source: "super"
          Identifier _value
             Type: uint256
             Source: "_value"
  FunctionDefinition "changeTokensWallet" - public
     Source: "function changeTokensWallet(address newAddress) public onlyOwner returns (bool)\r\n    {\r\n        require(newAddress != address(0));\r\n        tokensOwner = newAddress;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address newAddress)"
      VariableDeclaration "newAddress"
         Type: address
         Source: "address newAddress"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        require(newAddress != address(0));\r\n        tokensOwner = newAddress;\r\n    }"
      ExpressionStatement
         Gas costs: 50
         Source: "require(newAddress != address(0))"
        FunctionCall
           Type: tuple()
           Source: "require(newAddress != address(0))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "newAddress != address(0)"
            Identifier newAddress
               Type: address
               Source: "newAddress"
            FunctionCall
               Type: address
               Source: "address(0)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      ExpressionStatement
         Gas costs: 20267
         Source: "tokensOwner = newAddress"
        Assignment using operator =
           Type: address
           Source: "tokensOwner = newAddress"
          Identifier tokensOwner
             Type: address
             Source: "tokensOwner"
          Identifier newAddress
             Type: address
             Source: "newAddress"
  FunctionDefinition "finalize" - public
     Source: "function finalize() public  onlyOwner {\r\n        require(fundraising != false);\r\n        // Switch to Operational state. This is the only place this can happen.\r\n        fundraising = false;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        require(fundraising != false);\r\n        // Switch to Operational state. This is the only place this can happen.\r\n        fundraising = false;\r\n    }"
      ExpressionStatement
         Gas costs: 286
         Source: "require(fundraising != false)"
        FunctionCall
           Type: tuple()
           Source: "require(fundraising != false)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "fundraising != false"
            Identifier fundraising
               Type: bool
               Source: "fundraising"
            Literal, token: false value: false
               Type: bool
               Source: "false"
      ExpressionStatement
         Gas costs: 20267
         Source: "fundraising = false"
        Assignment using operator =
           Type: bool
           Source: "fundraising = false"
          Identifier fundraising
             Type: bool
             Source: "fundraising"
          Literal, token: false value: false
             Type: bool
             Source: "false"
  FunctionDefinition "" - public
     Source: "function() public {\r\n        revert();\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        revert();\r\n    }"
      ExpressionStatement
         Gas costs: 6
         Source: "revert()"
        FunctionCall
           Type: tuple()
           Source: "revert()"
          Identifier revert
             Type: function () pure
             Source: "revert"
