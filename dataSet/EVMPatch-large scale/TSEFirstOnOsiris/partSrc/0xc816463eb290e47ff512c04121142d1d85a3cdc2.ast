Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0xc816463eb290e47ff512c04121142d1d85a3cdc2.sol =======
ContractDefinition "NigerTokenICO"
   Source: "contract NigerTokenICO {\r\n    \r\n    function name() constant returns (string) { return \"NiggerCoin\"; }\r\n    function symbol() constant returns (string) { return \"NGR\"; }\r\n    function decimals() constant returns (uint8) { return 4; }\r\n\t\r\n\r\n    uint256 public INITIAL_SUPPLY;\r\n\tuint256 public totalSupply;\r\n\t\r\n\tuint256 public totalContrib;\r\n    \r\n    uint256 public rate;\r\n  \r\n    address public owner;\t\t\t\t\t\t    //init owner address\r\n\t\r\n\tuint256 public amount;\r\n\t\r\n\t\r\n\tfunction NigerTokenICO() {\r\n        INITIAL_SUPPLY = 60000000000;                  //Starting coin supply\r\n\t\ttotalSupply = 0;\r\n\t\t\r\n\t\ttotalContrib = 0;\r\n        \r\n        rate = 148800000;                            //How many tokens per ETH given\r\n\t\t\r\n\t\towner = msg.sender;\t\t\t                //Make owner of contract the creator\r\n\t\t\r\n\t\tbalances[msg.sender] = INITIAL_SUPPLY;\t\t//Send owner of contract all starting tokens\r\n\t}\r\n\t\r\n\t\r\n\t//This function is called when Ether is sent to the contract address\r\n\t//Even if 0 ether is sent.\r\n\tfunction () payable {\r\n\t    \r\n\t    uint256 tryAmount = div((mul(msg.value, rate)), 1 ether);                   //Don't let people buy more tokens than there are.\r\n\t    \r\n\t\tif (msg.value == 0 || msg.value < 0 || balanceOf(owner) < tryAmount) {\t\t//If zero ether is sent, kill. Do nothing. \r\n\t\t\trevert();\r\n\t\t}\r\n\t\t\r\n\t    amount = 0;\t\t\t\t\t\t\t\t\t                //set the 'amount' var back to zero\r\n\t\tamount = div((mul(msg.value, rate)), 1 ether);\t\t\t\t//take sent ether, multiply it by the rate then divide by 1 ether.\r\n\t\ttransferFrom(owner, msg.sender, amount);                    //Send tokens to buyer\r\n\t\ttotalSupply += amount;\t\t\t\t\t\t\t\t\t\t//Keep track of how many have been sold.\r\n\t\ttotalContrib = (totalContrib + msg.value);\r\n\t\tamount = 0;\t\t\t\t\t\t\t\t\t                //set the 'amount' var back to zero\r\n\t\t\r\n\t\t\r\n\t\towner.transfer(msg.value);\t\t\t\t\t                //Send the ETH to contract owner.\r\n\r\n\t}\t\r\n\t\r\n\t\r\n\t\r\n  \r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  \r\n  mapping(address => uint256) balances;\r\n\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n\r\n        if (_value == 0) { return false; }\r\n\r\n        uint256 fromBalance = balances[msg.sender];\r\n\r\n        bool sufficientFunds = fromBalance >= _value;\r\n        bool overflowed = balances[_to] + _value < balances[_to];\r\n        \r\n        if (sufficientFunds && !overflowed) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            \r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n\r\n\r\n    function balanceOf(address _owner) constant returns (uint256) { return balances[_owner]; }\r\n\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n\r\n        if (_value == 0) { return false; }\r\n        \r\n        uint256 fromBalance = balances[owner];\r\n\r\n        bool sufficientFunds = fromBalance >= _value;\r\n\r\n        if (sufficientFunds) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            \r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n\t\r\n    function getStats() constant returns (uint256, uint256) {\r\n        return (totalSupply, totalContrib);\r\n    }\r\n\r\n\t\r\n\t\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\t\r\n\t\r\n\t\r\n}"
  FunctionDefinition "name" - public - const
     Source: "function name() constant returns (string) { return \"NiggerCoin\"; }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(string)"
      VariableDeclaration ""
         Type: string memory
         Source: "string"
        ElementaryTypeName string
           Source: "string"
    Block
       Source: "{ return \"NiggerCoin\"; }"
      Return
         Gas costs: [???]
         Source: "return \"NiggerCoin\""
        Literal, token: [no token] value: NiggerCoin
           Type: literal_string "NiggerCoin"
           Source: "\"NiggerCoin\""
  FunctionDefinition "symbol" - public - const
     Source: "function symbol() constant returns (string) { return \"NGR\"; }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(string)"
      VariableDeclaration ""
         Type: string memory
         Source: "string"
        ElementaryTypeName string
           Source: "string"
    Block
       Source: "{ return \"NGR\"; }"
      Return
         Gas costs: [???]
         Source: "return \"NGR\""
        Literal, token: [no token] value: NGR
           Type: literal_string "NGR"
           Source: "\"NGR\""
  FunctionDefinition "decimals" - public - const
     Source: "function decimals() constant returns (uint8) { return 4; }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint8)"
      VariableDeclaration ""
         Type: uint8
         Source: "uint8"
        ElementaryTypeName uint8
           Source: "uint8"
    Block
       Source: "{ return 4; }"
      Return
         Gas costs: 8
         Source: "return 4"
        Literal, token: [no token] value: 4
           Type: int_const 4
           Source: "4"
  VariableDeclaration "INITIAL_SUPPLY"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public INITIAL_SUPPLY"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "totalSupply"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public totalSupply"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "totalContrib"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public totalContrib"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "rate"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public rate"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "owner"
     Type: address
     Gas costs: [???]
     Source: "address public owner"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "amount"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public amount"
    ElementaryTypeName uint256
       Source: "uint256"
  FunctionDefinition "NigerTokenICO" - public
     Source: "function NigerTokenICO() {\r\n        INITIAL_SUPPLY = 60000000000;                  //Starting coin supply\r\n\t\ttotalSupply = 0;\r\n\t\t\r\n\t\ttotalContrib = 0;\r\n        \r\n        rate = 148800000;                            //How many tokens per ETH given\r\n\t\t\r\n\t\towner = msg.sender;\t\t\t                //Make owner of contract the creator\r\n\t\t\r\n\t\tbalances[msg.sender] = INITIAL_SUPPLY;\t\t//Send owner of contract all starting tokens\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        INITIAL_SUPPLY = 60000000000;                  //Starting coin supply\r\n\t\ttotalSupply = 0;\r\n\t\t\r\n\t\ttotalContrib = 0;\r\n        \r\n        rate = 148800000;                            //How many tokens per ETH given\r\n\t\t\r\n\t\towner = msg.sender;\t\t\t                //Make owner of contract the creator\r\n\t\t\r\n\t\tbalances[msg.sender] = INITIAL_SUPPLY;\t\t//Send owner of contract all starting tokens\r\n\t}"
      ExpressionStatement
         Gas costs: 0
         Source: "INITIAL_SUPPLY = 60000000000"
        Assignment using operator =
           Type: uint256
           Source: "INITIAL_SUPPLY = 60000000000"
          Identifier INITIAL_SUPPLY
             Type: uint256
             Source: "INITIAL_SUPPLY"
          Literal, token: [no token] value: 60000000000
             Type: int_const 60000000000
             Source: "60000000000"
      ExpressionStatement
         Gas costs: 0
         Source: "totalSupply = 0"
        Assignment using operator =
           Type: uint256
           Source: "totalSupply = 0"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "totalContrib = 0"
        Assignment using operator =
           Type: uint256
           Source: "totalContrib = 0"
          Identifier totalContrib
             Type: uint256
             Source: "totalContrib"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "rate = 148800000"
        Assignment using operator =
           Type: uint256
           Source: "rate = 148800000"
          Identifier rate
             Type: uint256
             Source: "rate"
          Literal, token: [no token] value: 148800000
             Type: int_const 148800000
             Source: "148800000"
      ExpressionStatement
         Gas costs: 0
         Source: "owner = msg.sender"
        Assignment using operator =
           Type: address
           Source: "owner = msg.sender"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 0
         Source: "balances[msg.sender] = INITIAL_SUPPLY"
        Assignment using operator =
           Type: uint256
           Source: "balances[msg.sender] = INITIAL_SUPPLY"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier INITIAL_SUPPLY
             Type: uint256
             Source: "INITIAL_SUPPLY"
  FunctionDefinition "" - public
     Source: "function () payable {\r\n\t    \r\n\t    uint256 tryAmount = div((mul(msg.value, rate)), 1 ether);                   //Don't let people buy more tokens than there are.\r\n\t    \r\n\t\tif (msg.value == 0 || msg.value < 0 || balanceOf(owner) < tryAmount) {\t\t//If zero ether is sent, kill. Do nothing. \r\n\t\t\trevert();\r\n\t\t}\r\n\t\t\r\n\t    amount = 0;\t\t\t\t\t\t\t\t\t                //set the 'amount' var back to zero\r\n\t\tamount = div((mul(msg.value, rate)), 1 ether);\t\t\t\t//take sent ether, multiply it by the rate then divide by 1 ether.\r\n\t\ttransferFrom(owner, msg.sender, amount);                    //Send tokens to buyer\r\n\t\ttotalSupply += amount;\t\t\t\t\t\t\t\t\t\t//Keep track of how many have been sold.\r\n\t\ttotalContrib = (totalContrib + msg.value);\r\n\t\tamount = 0;\t\t\t\t\t\t\t\t\t                //set the 'amount' var back to zero\r\n\t\t\r\n\t\t\r\n\t\towner.transfer(msg.value);\t\t\t\t\t                //Send the ETH to contract owner.\r\n\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n\t    \r\n\t    uint256 tryAmount = div((mul(msg.value, rate)), 1 ether);                   //Don't let people buy more tokens than there are.\r\n\t    \r\n\t\tif (msg.value == 0 || msg.value < 0 || balanceOf(owner) < tryAmount) {\t\t//If zero ether is sent, kill. Do nothing. \r\n\t\t\trevert();\r\n\t\t}\r\n\t\t\r\n\t    amount = 0;\t\t\t\t\t\t\t\t\t                //set the 'amount' var back to zero\r\n\t\tamount = div((mul(msg.value, rate)), 1 ether);\t\t\t\t//take sent ether, multiply it by the rate then divide by 1 ether.\r\n\t\ttransferFrom(owner, msg.sender, amount);                    //Send tokens to buyer\r\n\t\ttotalSupply += amount;\t\t\t\t\t\t\t\t\t\t//Keep track of how many have been sold.\r\n\t\ttotalContrib = (totalContrib + msg.value);\r\n\t\tamount = 0;\t\t\t\t\t\t\t\t\t                //set the 'amount' var back to zero\r\n\t\t\r\n\t\t\r\n\t\towner.transfer(msg.value);\t\t\t\t\t                //Send the ETH to contract owner.\r\n\r\n\t}"
      VariableDeclarationStatement
         Gas costs: 224
         Source: "uint256 tryAmount = div((mul(msg.value, rate)), 1 ether)"
        VariableDeclaration "tryAmount"
           Type: uint256
           Source: "uint256 tryAmount"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "div((mul(msg.value, rate)), 1 ether)"
          Identifier div
             Type: function (uint256,uint256) view returns (uint256)
             Source: "div"
          TupleExpression
             Type: uint256
             Source: "(mul(msg.value, rate))"
            FunctionCall
               Type: uint256
               Source: "mul(msg.value, rate)"
              Identifier mul
                 Type: function (uint256,uint256) view returns (uint256)
                 Source: "mul"
              MemberAccess to member value
                 Type: uint256
                 Source: "msg.value"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier rate
                 Type: uint256
                 Source: "rate"
          Literal, token: [no token] value: 1
             Type: int_const 1000000000000000000
             Source: "1 ether"
      IfStatement
         Source: "if (msg.value == 0 || msg.value < 0 || balanceOf(owner) < tryAmount) {\t\t//If zero ether is sent, kill. Do nothing. \r\n\t\t\trevert();\r\n\t\t}"
        BinaryOperation using operator ||
           Type: bool
           Gas costs: 314
           Source: "msg.value == 0 || msg.value < 0 || balanceOf(owner) < tryAmount"
          BinaryOperation using operator ||
             Type: bool
             Source: "msg.value == 0 || msg.value < 0"
            BinaryOperation using operator ==
               Type: bool
               Source: "msg.value == 0"
              MemberAccess to member value
                 Type: uint256
                 Source: "msg.value"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
            BinaryOperation using operator <
               Type: bool
               Source: "msg.value < 0"
              MemberAccess to member value
                 Type: uint256
                 Source: "msg.value"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
          BinaryOperation using operator <
             Type: bool
             Source: "balanceOf(owner) < tryAmount"
            FunctionCall
               Type: uint256
               Source: "balanceOf(owner)"
              Identifier balanceOf
                 Type: function (address) view returns (uint256)
                 Source: "balanceOf"
              Identifier owner
                 Type: address
                 Source: "owner"
            Identifier tryAmount
               Type: uint256
               Source: "tryAmount"
        Block
           Source: "{\t\t//If zero ether is sent, kill. Do nothing. \r\n\t\t\trevert();\r\n\t\t}"
          ExpressionStatement
             Gas costs: 6
             Source: "revert()"
            FunctionCall
               Type: tuple()
               Source: "revert()"
              Identifier revert
                 Type: function () pure
                 Source: "revert"
      ExpressionStatement
         Gas costs: 5014
         Source: "amount = 0"
        Assignment using operator =
           Type: uint256
           Source: "amount = 0"
          Identifier amount
             Type: uint256
             Source: "amount"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 20249
         Source: "amount = div((mul(msg.value, rate)), 1 ether)"
        Assignment using operator =
           Type: uint256
           Source: "amount = div((mul(msg.value, rate)), 1 ether)"
          Identifier amount
             Type: uint256
             Source: "amount"
          FunctionCall
             Type: uint256
             Source: "div((mul(msg.value, rate)), 1 ether)"
            Identifier div
               Type: function (uint256,uint256) view returns (uint256)
               Source: "div"
            TupleExpression
               Type: uint256
               Source: "(mul(msg.value, rate))"
              FunctionCall
                 Type: uint256
                 Source: "mul(msg.value, rate)"
                Identifier mul
                   Type: function (uint256,uint256) view returns (uint256)
                   Source: "mul"
                MemberAccess to member value
                   Type: uint256
                   Source: "msg.value"
                  Identifier msg
                     Type: msg
                     Source: "msg"
                Identifier rate
                   Type: uint256
                   Source: "rate"
            Literal, token: [no token] value: 1
               Type: int_const 1000000000000000000
               Source: "1 ether"
      ExpressionStatement
         Gas costs: 450
         Source: "transferFrom(owner, msg.sender, amount)"
        FunctionCall
           Type: bool
           Source: "transferFrom(owner, msg.sender, amount)"
          Identifier transferFrom
             Type: function (address,address,uint256) returns (bool)
             Source: "transferFrom"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier amount
             Type: uint256
             Source: "amount"
      ExpressionStatement
         Gas costs: 20433
         Source: "totalSupply += amount"
        Assignment using operator +=
           Type: uint256
           Source: "totalSupply += amount"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          Identifier amount
             Type: uint256
             Source: "amount"
      ExpressionStatement
         Gas costs: 20219
         Source: "totalContrib = (totalContrib + msg.value)"
        Assignment using operator =
           Type: uint256
           Source: "totalContrib = (totalContrib + msg.value)"
          Identifier totalContrib
             Type: uint256
             Source: "totalContrib"
          TupleExpression
             Type: uint256
             Source: "(totalContrib + msg.value)"
            BinaryOperation using operator +
               Type: uint256
               Source: "totalContrib + msg.value"
              Identifier totalContrib
                 Type: uint256
                 Source: "totalContrib"
              MemberAccess to member value
                 Type: uint256
                 Source: "msg.value"
                Identifier msg
                   Type: msg
                   Source: "msg"
      ExpressionStatement
         Gas costs: 5014
         Source: "amount = 0"
        Assignment using operator =
           Type: uint256
           Source: "amount = 0"
          Identifier amount
             Type: uint256
             Source: "amount"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: [???]
         Source: "owner.transfer(msg.value)"
        FunctionCall
           Type: tuple()
           Source: "owner.transfer(msg.value)"
          MemberAccess to member transfer
             Type: function (uint256)
             Source: "owner.transfer"
            Identifier owner
               Type: address
               Source: "owner"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
  EventDefinition "Transfer"
     Gas costs: 0
     Source: "event Transfer(address indexed _from, address indexed _to, uint256 _value);"
    ParameterList
       Source: "(address indexed _from, address indexed _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address indexed _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address indexed _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping(address => uint256) balances"
    Mapping
       Source: "mapping(address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) returns (bool success) {\r\n\r\n        if (_value == 0) { return false; }\r\n\r\n        uint256 fromBalance = balances[msg.sender];\r\n\r\n        bool sufficientFunds = fromBalance >= _value;\r\n        bool overflowed = balances[_to] + _value < balances[_to];\r\n        \r\n        if (sufficientFunds && !overflowed) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            \r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n\r\n        if (_value == 0) { return false; }\r\n\r\n        uint256 fromBalance = balances[msg.sender];\r\n\r\n        bool sufficientFunds = fromBalance >= _value;\r\n        bool overflowed = balances[_to] + _value < balances[_to];\r\n        \r\n        if (sufficientFunds && !overflowed) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            \r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }"
      IfStatement
         Source: "if (_value == 0) { return false; }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "_value == 0"
          Identifier _value
             Type: uint256
             Source: "_value"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{ return false; }"
          Return
             Gas costs: 19
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
      VariableDeclarationStatement
         Gas costs: 306
         Source: "uint256 fromBalance = balances[msg.sender]"
        VariableDeclaration "fromBalance"
           Type: uint256
           Source: "uint256 fromBalance"
          ElementaryTypeName uint256
             Source: "uint256"
        IndexAccess
           Type: uint256
           Source: "balances[msg.sender]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      VariableDeclarationStatement
         Gas costs: 20
         Source: "bool sufficientFunds = fromBalance >= _value"
        VariableDeclaration "sufficientFunds"
           Type: bool
           Source: "bool sufficientFunds"
          ElementaryTypeName bool
             Source: "bool"
        BinaryOperation using operator >=
           Type: bool
           Source: "fromBalance >= _value"
          Identifier fromBalance
             Type: uint256
             Source: "fromBalance"
          Identifier _value
             Type: uint256
             Source: "_value"
      VariableDeclarationStatement
         Gas costs: 603
         Source: "bool overflowed = balances[_to] + _value < balances[_to]"
        VariableDeclaration "overflowed"
           Type: bool
           Source: "bool overflowed"
          ElementaryTypeName bool
             Source: "bool"
        BinaryOperation using operator <
           Type: bool
           Source: "balances[_to] + _value < balances[_to]"
          BinaryOperation using operator +
             Type: uint256
             Source: "balances[_to] + _value"
            IndexAccess
               Type: uint256
               Source: "balances[_to]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _to
                 Type: address
                 Source: "_to"
            Identifier _value
               Type: uint256
               Source: "_value"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
      IfStatement
         Source: "if (sufficientFunds && !overflowed) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            \r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 31
           Source: "sufficientFunds && !overflowed"
          Identifier sufficientFunds
             Type: bool
             Source: "sufficientFunds"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!overflowed"
            Identifier overflowed
               Type: bool
               Source: "overflowed"
        Block
           Source: "{\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            \r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }"
          ExpressionStatement
             Gas costs: 20328
             Source: "balances[msg.sender] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "balances[msg.sender] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20323
             Source: "balances[_to] += _value"
            Assignment using operator +=
               Type: uint256
               Source: "balances[_to] += _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: [???]
             Source: "Transfer(msg.sender, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(msg.sender, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{ return false; }"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) constant returns (uint256) { return balances[_owner]; }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{ return balances[_owner]; }"
      Return
         Gas costs: 304
         Source: "return balances[_owner]"
        IndexAccess
           Type: uint256
           Source: "balances[_owner]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          Identifier _owner
             Type: address
             Source: "_owner"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n\r\n        if (_value == 0) { return false; }\r\n        \r\n        uint256 fromBalance = balances[owner];\r\n\r\n        bool sufficientFunds = fromBalance >= _value;\r\n\r\n        if (sufficientFunds) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            \r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n\r\n        if (_value == 0) { return false; }\r\n        \r\n        uint256 fromBalance = balances[owner];\r\n\r\n        bool sufficientFunds = fromBalance >= _value;\r\n\r\n        if (sufficientFunds) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            \r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }"
      IfStatement
         Source: "if (_value == 0) { return false; }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "_value == 0"
          Identifier _value
             Type: uint256
             Source: "_value"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{ return false; }"
          Return
             Gas costs: 19
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
      VariableDeclarationStatement
         Gas costs: 543
         Source: "uint256 fromBalance = balances[owner]"
        VariableDeclaration "fromBalance"
           Type: uint256
           Source: "uint256 fromBalance"
          ElementaryTypeName uint256
             Source: "uint256"
        IndexAccess
           Type: uint256
           Source: "balances[owner]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          Identifier owner
             Type: address
             Source: "owner"
      VariableDeclarationStatement
         Gas costs: 20
         Source: "bool sufficientFunds = fromBalance >= _value"
        VariableDeclaration "sufficientFunds"
           Type: bool
           Source: "bool sufficientFunds"
          ElementaryTypeName bool
             Source: "bool"
        BinaryOperation using operator >=
           Type: bool
           Source: "fromBalance >= _value"
          Identifier fromBalance
             Type: uint256
             Source: "fromBalance"
          Identifier _value
             Type: uint256
             Source: "_value"
      IfStatement
         Source: "if (sufficientFunds) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            \r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }"
        Identifier sufficientFunds
           Type: bool
           Gas costs: 3
           Source: "sufficientFunds"
        Block
           Source: "{\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            \r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }"
          ExpressionStatement
             Gas costs: 20329
             Source: "balances[_to] += _value"
            Assignment using operator +=
               Type: uint256
               Source: "balances[_to] += _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20323
             Source: "balances[_from] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "balances[_from] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_from]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _from
                   Type: address
                   Source: "_from"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: [???]
             Source: "Transfer(_from, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(_from, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              Identifier _from
                 Type: address
                 Source: "_from"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{ return false; }"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "getStats" - public - const
     Source: "function getStats() constant returns (uint256, uint256) {\r\n        return (totalSupply, totalContrib);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 6
       Source: "(uint256, uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return (totalSupply, totalContrib);\r\n    }"
      Return
         Gas costs: 416
         Source: "return (totalSupply, totalContrib)"
        TupleExpression
           Type: tuple(uint256,uint256)
           Source: "(totalSupply, totalContrib)"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          Identifier totalContrib
             Type: uint256
             Source: "totalContrib"
  FunctionDefinition "mul" - const
     Source: "function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }"
      VariableDeclarationStatement
         Gas costs: 19
         Source: "uint256 c = a * b"
        VariableDeclaration "c"
           Type: uint256
           Source: "uint256 c"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator *
           Type: uint256
           Source: "a * b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
      ExpressionStatement
         Gas costs: 88
         Source: "assert(a == 0 || c / a == b)"
        FunctionCall
           Type: tuple()
           Source: "assert(a == 0 || c / a == b)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator ||
             Type: bool
             Source: "a == 0 || c / a == b"
            BinaryOperation using operator ==
               Type: bool
               Source: "a == 0"
              Identifier a
                 Type: uint256
                 Source: "a"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
            BinaryOperation using operator ==
               Type: bool
               Source: "c / a == b"
              BinaryOperation using operator /
                 Type: uint256
                 Source: "c / a"
                Identifier c
                   Type: uint256
                   Source: "c"
                Identifier a
                   Type: uint256
                   Source: "a"
              Identifier b
                 Type: uint256
                 Source: "b"
      Return
         Gas costs: 8
         Source: "return c"
        Identifier c
           Type: uint256
           Source: "c"
  FunctionDefinition "div" - const
     Source: "function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }"
      VariableDeclarationStatement
         Gas costs: 42
         Source: "uint256 c = a / b"
        VariableDeclaration "c"
           Type: uint256
           Source: "uint256 c"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator /
           Type: uint256
           Source: "a / b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
      Return
         Gas costs: 8
         Source: "return c"
        Identifier c
           Type: uint256
           Source: "c"
  FunctionDefinition "sub" - const
     Source: "function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    assert(b <= a);\r\n    return a - b;\r\n  }"
      ExpressionStatement
         Gas costs: 0
         Source: "assert(b <= a)"
        FunctionCall
           Type: tuple()
           Source: "assert(b <= a)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator <=
             Type: bool
             Source: "b <= a"
            Identifier b
               Type: uint256
               Source: "b"
            Identifier a
               Type: uint256
               Source: "a"
      Return
         Gas costs: 0
         Source: "return a - b"
        BinaryOperation using operator -
           Type: uint256
           Source: "a - b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
  FunctionDefinition "add" - const
     Source: "function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 c = a + b"
        VariableDeclaration "c"
           Type: uint256
           Source: "uint256 c"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator +
           Type: uint256
           Source: "a + b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
      ExpressionStatement
         Gas costs: 0
         Source: "assert(c >= a)"
        FunctionCall
           Type: tuple()
           Source: "assert(c >= a)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator >=
             Type: bool
             Source: "c >= a"
            Identifier c
               Type: uint256
               Source: "c"
            Identifier a
               Type: uint256
               Source: "a"
      Return
         Gas costs: 0
         Source: "return c"
        Identifier c
           Type: uint256
           Source: "c"
