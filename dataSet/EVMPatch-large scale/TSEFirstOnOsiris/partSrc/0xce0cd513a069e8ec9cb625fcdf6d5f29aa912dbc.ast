Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0xce0cd513a069e8ec9cb625fcdf6d5f29aa912dbc.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4;"
ContractDefinition "ERC20"
   Gas costs: 0
   Source: "contract ERC20 {\r\n   uint public totalSupply;\r\n   function balanceOf(address _account) public constant returns (uint balance);\r\n   function transfer(address _to, uint _value) public returns (bool success);\r\n   function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n   function approve(address _spender, uint _value) public returns (bool success);\r\n   function allowance(address _owner, address _spender) public constant returns (uint remaining);\r\n   event Transfer(address indexed _from, address indexed _to, uint _value);\r\n   event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}"
  VariableDeclaration "totalSupply"
     Type: uint256
     Source: "uint public totalSupply"
    ElementaryTypeName uint
       Source: "uint"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _account) public constant returns (uint balance);"
    ParameterList
       Source: "(address _account)"
      VariableDeclaration "_account"
         Type: address
         Source: "address _account"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint balance"
        ElementaryTypeName uint
           Source: "uint"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint _value) public returns (bool success);"
    ParameterList
       Source: "(address _to, uint _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint _value) public returns (bool success);"
    ParameterList
       Source: "(address _from, address _to, uint _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint _value) public returns (bool success);"
    ParameterList
       Source: "(address _spender, uint _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) public constant returns (uint remaining);"
    ParameterList
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint remaining"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "Transfer"
     Source: "event Transfer(address indexed _from, address indexed _to, uint _value);"
    ParameterList
       Source: "(address indexed _from, address indexed _to, uint _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address indexed _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address indexed _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "Approval"
     Source: "event Approval(address indexed _owner, address indexed _spender, uint _value);"
    ParameterList
       Source: "(address indexed _owner, address indexed _spender, uint _value)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address indexed _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address indexed _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
ContractDefinition "Token"
   Source: "contract Token is ERC20 {\r\n\r\n    mapping(address => uint256) public balances;\r\n\r\n    \r\n    mapping(address => uint256) public investBalances;\r\n\r\n    mapping(address => mapping (address => uint)) allowed;\r\n\r\n    // Total amount of supplied tokens\r\n    uint256 public totalSupply;\r\n\r\n    // Information about token\r\n    string public constant name = \"MMS\";\r\n    string public constant symbol = \"MMS\";\r\n    address public owner;\r\n    address public owner2;\r\n    address public owner3;\r\n    uint public decimals = 18;\r\n\r\n    // If function has this modifier, only owner can execute this function\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner || msg.sender == owner2 || msg.sender == owner3);\r\n        _;\r\n    }\r\n\r\n\r\n\r\n\r\n    function Token() public {\r\n        totalSupply = 10000000000000000000000000;\r\n        owner = 0x1FC11ac635e89c228765f3e6aEe0970D9aFf2BF5;\r\n        owner2 = 0x4AB9AA258369438bC146b26af02F6E3568009D92;\r\n        balances[owner] = totalSupply;\r\n    }\r\n\r\n    // Change main owner address and transer tokens to new owner\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != owner);\r\n        balances[newOwner] = balances[owner];\r\n        balances[owner] = 0;\r\n        owner = newOwner;\r\n    }\r\n\r\n    // Chech trade balance of account\r\n    function balanceOf(address _account) public constant returns (uint256 balance) {\r\n    return balances[_account];\r\n    }\r\n\r\n // Transfer tokens from your account to other account\r\n    function transfer(address _to, uint _value) public  returns (bool success) {\r\n        require(_to != 0x0);                               // Prevent transfer to 0x0 address.\r\n        require(balances[msg.sender] >= _value);           // Check if the sender has enough\r\n        balances[msg.sender] -= _value;                    // Subtract from the sender\r\n        balances[_to] += _value;                           // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value);\r\n    return true;\r\n    }\r\n\r\n   // Transfer tokens from account (_from) to another account (_to)\r\n    function transferFrom(address _from, address _to, uint256 _amount) public  returns(bool) {\r\n        require(_amount <= allowed[_from][msg.sender]);\r\n        if (balances[_from] >= _amount && _amount > 0) {\r\n            balances[_from] -= _amount;\r\n            balances[_to] += _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n            }\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public  returns (bool success){\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n    return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n    }\r\n\r\n    function add_tokens(address _to, uint256 _amount) public onlyOwner {\r\n        balances[owner] -= _amount;\r\n        investBalances[_to] += _amount;\r\n    }\r\n\r\n    // Transfer tokens from investBalance to Balncec for trading\r\n    function transferToken_toBalance(address _user, uint256 _amount) public onlyOwner {\r\n        investBalances[_user] -= _amount;\r\n        balances[_user] += _amount;\r\n    } \r\n\r\n    // Transfer toknes from Balncec to investBalance\r\n    function transferToken_toInvestBalance(address _user, uint256 _amount) public onlyOwner {\r\n        balances[_user] -= _amount;\r\n        investBalances[_user] += _amount;\r\n    }  \r\n\r\n\r\n    function changeOwner3(address _owner3) public onlyOwner {\r\n        owner3 = _owner3;\r\n    }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "ERC20"
    UserDefinedTypeName "ERC20"
       Source: "ERC20"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: 431
     Source: "mapping(address => uint256) public balances"
    Mapping
       Source: "mapping(address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "investBalances"
     Type: mapping(address => uint256)
     Gas costs: 431
     Source: "mapping(address => uint256) public investBalances"
    Mapping
       Source: "mapping(address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "allowed"
     Type: mapping(address => mapping(address => uint256))
     Gas costs: 0
     Source: "mapping(address => mapping (address => uint)) allowed"
    Mapping
       Source: "mapping(address => mapping (address => uint))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping (address => uint)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint
           Source: "uint"
  VariableDeclaration "totalSupply"
     Type: uint256
     Gas costs: 287
     Source: "uint256 public totalSupply"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "name"
     Type: string memory
     Gas costs: [???]
     Source: "string public constant name = \"MMS\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: MMS
       Type: literal_string "MMS"
       Source: "\"MMS\""
  VariableDeclaration "symbol"
     Type: string memory
     Gas costs: [???]
     Source: "string public constant symbol = \"MMS\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: MMS
       Type: literal_string "MMS"
       Source: "\"MMS\""
  VariableDeclaration "owner"
     Type: address
     Gas costs: 335
     Source: "address public owner"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "owner2"
     Type: address
     Gas costs: 335
     Source: "address public owner2"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "owner3"
     Type: address
     Gas costs: 335
     Source: "address public owner3"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "decimals"
     Type: uint256
     Gas costs: 287
     Source: "uint public decimals = 18"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 18
       Type: int_const 18
       Source: "18"
  ModifierDefinition "onlyOwner"
     Source: "modifier onlyOwner() {\r\n        require(msg.sender == owner || msg.sender == owner2 || msg.sender == owner3);\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n        require(msg.sender == owner || msg.sender == owner2 || msg.sender == owner3);\r\n        _;\r\n    }"
      ExpressionStatement
         Gas costs: 4160
         Source: "require(msg.sender == owner || msg.sender == owner2 || msg.sender == owner3)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == owner || msg.sender == owner2 || msg.sender == owner3)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ||
             Type: bool
             Source: "msg.sender == owner || msg.sender == owner2 || msg.sender == owner3"
            BinaryOperation using operator ||
               Type: bool
               Source: "msg.sender == owner || msg.sender == owner2"
              BinaryOperation using operator ==
                 Type: bool
                 Source: "msg.sender == owner"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
                Identifier owner
                   Type: address
                   Source: "owner"
              BinaryOperation using operator ==
                 Type: bool
                 Source: "msg.sender == owner2"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
                Identifier owner2
                   Type: address
                   Source: "owner2"
            BinaryOperation using operator ==
               Type: bool
               Source: "msg.sender == owner3"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier owner3
                 Type: address
                 Source: "owner3"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "Token" - public
     Source: "function Token() public {\r\n        totalSupply = 10000000000000000000000000;\r\n        owner = 0x1FC11ac635e89c228765f3e6aEe0970D9aFf2BF5;\r\n        owner2 = 0x4AB9AA258369438bC146b26af02F6E3568009D92;\r\n        balances[owner] = totalSupply;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        totalSupply = 10000000000000000000000000;\r\n        owner = 0x1FC11ac635e89c228765f3e6aEe0970D9aFf2BF5;\r\n        owner2 = 0x4AB9AA258369438bC146b26af02F6E3568009D92;\r\n        balances[owner] = totalSupply;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "totalSupply = 10000000000000000000000000"
        Assignment using operator =
           Type: uint256
           Source: "totalSupply = 10000000000000000000000000"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          Literal, token: [no token] value: 10000000000000000000000000
             Type: int_const 10000000000000000000000000
             Source: "10000000000000000000000000"
      ExpressionStatement
         Gas costs: 0
         Source: "owner = 0x1FC11ac635e89c228765f3e6aEe0970D9aFf2BF5"
        Assignment using operator =
           Type: address
           Source: "owner = 0x1FC11ac635e89c228765f3e6aEe0970D9aFf2BF5"
          Identifier owner
             Type: address
             Source: "owner"
          Literal, token: [no token] value: 0x1FC11ac635e89c228765f3e6aEe0970D9aFf2BF5
             Type: address
             Source: "0x1FC11ac635e89c228765f3e6aEe0970D9aFf2BF5"
      ExpressionStatement
         Gas costs: 0
         Source: "owner2 = 0x4AB9AA258369438bC146b26af02F6E3568009D92"
        Assignment using operator =
           Type: address
           Source: "owner2 = 0x4AB9AA258369438bC146b26af02F6E3568009D92"
          Identifier owner2
             Type: address
             Source: "owner2"
          Literal, token: [no token] value: 0x4AB9AA258369438bC146b26af02F6E3568009D92
             Type: address
             Source: "0x4AB9AA258369438bC146b26af02F6E3568009D92"
      ExpressionStatement
         Gas costs: 0
         Source: "balances[owner] = totalSupply"
        Assignment using operator =
           Type: uint256
           Source: "balances[owner] = totalSupply"
          IndexAccess
             Type: uint256
             Source: "balances[owner]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier owner
               Type: address
               Source: "owner"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
  FunctionDefinition "transferOwnership" - public
     Source: "function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != owner);\r\n        balances[newOwner] = balances[owner];\r\n        balances[owner] = 0;\r\n        owner = newOwner;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address newOwner)"
      VariableDeclaration "newOwner"
         Type: address
         Source: "address newOwner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        require(newOwner != owner);\r\n        balances[newOwner] = balances[owner];\r\n        balances[owner] = 0;\r\n        owner = newOwner;\r\n    }"
      ExpressionStatement
         Gas costs: 286
         Source: "require(newOwner != owner)"
        FunctionCall
           Type: tuple()
           Source: "require(newOwner != owner)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "newOwner != owner"
            Identifier newOwner
               Type: address
               Source: "newOwner"
            Identifier owner
               Type: address
               Source: "owner"
      ExpressionStatement
         Gas costs: 20636
         Source: "balances[newOwner] = balances[owner]"
        Assignment using operator =
           Type: uint256
           Source: "balances[newOwner] = balances[owner]"
          IndexAccess
             Type: uint256
             Source: "balances[newOwner]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier newOwner
               Type: address
               Source: "newOwner"
          IndexAccess
             Type: uint256
             Source: "balances[owner]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier owner
               Type: address
               Source: "owner"
      ExpressionStatement
         Gas costs: 5340
         Source: "balances[owner] = 0"
        Assignment using operator =
           Type: uint256
           Source: "balances[owner] = 0"
          IndexAccess
             Type: uint256
             Source: "balances[owner]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier owner
               Type: address
               Source: "owner"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 20267
         Source: "owner = newOwner"
        Assignment using operator =
           Type: address
           Source: "owner = newOwner"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier newOwner
             Type: address
             Source: "newOwner"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _account) public constant returns (uint256 balance) {\r\n    return balances[_account];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _account)"
      VariableDeclaration "_account"
         Type: address
         Source: "address _account"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    return balances[_account];\r\n    }"
      Return
         Gas costs: 304
         Source: "return balances[_account]"
        IndexAccess
           Type: uint256
           Source: "balances[_account]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          Identifier _account
             Type: address
             Source: "_account"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint _value) public  returns (bool success) {\r\n        require(_to != 0x0);                               // Prevent transfer to 0x0 address.\r\n        require(balances[msg.sender] >= _value);           // Check if the sender has enough\r\n        balances[msg.sender] -= _value;                    // Subtract from the sender\r\n        balances[_to] += _value;                           // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value);\r\n    return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        require(_to != 0x0);                               // Prevent transfer to 0x0 address.\r\n        require(balances[msg.sender] >= _value);           // Check if the sender has enough\r\n        balances[msg.sender] -= _value;                    // Subtract from the sender\r\n        balances[_to] += _value;                           // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value);\r\n    return true;\r\n    }"
      ExpressionStatement
         Gas costs: 44
         Source: "require(_to != 0x0)"
        FunctionCall
           Type: tuple()
           Source: "require(_to != 0x0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "_to != 0x0"
            Identifier _to
               Type: address
               Source: "_to"
            Literal, token: [no token] value: 0x0
               Type: int_const 0
               Source: "0x0"
      ExpressionStatement
         Gas costs: 333
         Source: "require(balances[msg.sender] >= _value)"
        FunctionCall
           Type: tuple()
           Source: "require(balances[msg.sender] >= _value)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "balances[msg.sender] >= _value"
            IndexAccess
               Type: uint256
               Source: "balances[msg.sender]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 20328
         Source: "balances[msg.sender] -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "balances[msg.sender] -= _value"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 20323
         Source: "balances[_to] += _value"
        Assignment using operator +=
           Type: uint256
           Source: "balances[_to] += _value"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 1837
         Source: "Transfer(msg.sender, _to, _value)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(msg.sender, _to, _value)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _amount) public  returns(bool) {\r\n        require(_amount <= allowed[_from][msg.sender]);\r\n        if (balances[_from] >= _amount && _amount > 0) {\r\n            balances[_from] -= _amount;\r\n            balances[_to] += _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n            }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _amount)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        require(_amount <= allowed[_from][msg.sender]);\r\n        if (balances[_from] >= _amount && _amount > 0) {\r\n            balances[_from] -= _amount;\r\n            balances[_to] += _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n            }\r\n    }"
      ExpressionStatement
         Gas costs: 423
         Source: "require(_amount <= allowed[_from][msg.sender])"
        FunctionCall
           Type: tuple()
           Source: "require(_amount <= allowed[_from][msg.sender])"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator <=
             Type: bool
             Source: "_amount <= allowed[_from][msg.sender]"
            Identifier _amount
               Type: uint256
               Source: "_amount"
            IndexAccess
               Type: uint256
               Source: "allowed[_from][msg.sender]"
              IndexAccess
                 Type: mapping(address => uint256)
                 Source: "allowed[_from]"
                Identifier allowed
                   Type: mapping(address => mapping(address => uint256))
                   Source: "allowed"
                Identifier _from
                   Type: address
                   Source: "_from"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
      IfStatement
         Source: "if (balances[_from] >= _amount && _amount > 0) {\r\n            balances[_from] -= _amount;\r\n            balances[_to] += _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n            }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 339
           Source: "balances[_from] >= _amount && _amount > 0"
          BinaryOperation using operator >=
             Type: bool
             Source: "balances[_from] >= _amount"
            IndexAccess
               Type: uint256
               Source: "balances[_from]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _from
                 Type: address
                 Source: "_from"
            Identifier _amount
               Type: uint256
               Source: "_amount"
          BinaryOperation using operator >
             Type: bool
             Source: "_amount > 0"
            Identifier _amount
               Type: uint256
               Source: "_amount"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
        Block
           Source: "{\r\n            balances[_from] -= _amount;\r\n            balances[_to] += _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        }"
          ExpressionStatement
             Gas costs: 20329
             Source: "balances[_from] -= _amount"
            Assignment using operator -=
               Type: uint256
               Source: "balances[_from] -= _amount"
              IndexAccess
                 Type: uint256
                 Source: "balances[_from]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _from
                   Type: address
                   Source: "_from"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
          ExpressionStatement
             Gas costs: 20323
             Source: "balances[_to] += _amount"
            Assignment using operator +=
               Type: uint256
               Source: "balances[_to] += _amount"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
          ExpressionStatement
             Gas costs: 20412
             Source: "allowed[_from][msg.sender] -= _amount"
            Assignment using operator -=
               Type: uint256
               Source: "allowed[_from][msg.sender] -= _amount"
              IndexAccess
                 Type: uint256
                 Source: "allowed[_from][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[_from]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  Identifier _from
                     Type: address
                     Source: "_from"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
          ExpressionStatement
             Gas costs: 1838
             Source: "Transfer(_from, _to, _amount)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(_from, _to, _amount)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              Identifier _from
                 Type: address
                 Source: "_from"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{\r\n            return false;\r\n            }"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint _value) public  returns (bool success){\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n    return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n    return true;\r\n    }"
      ExpressionStatement
         Gas costs: 20199
         Source: "allowed[msg.sender][_spender] = _value"
        Assignment using operator =
           Type: uint256
           Source: "allowed[msg.sender][_spender] = _value"
          IndexAccess
             Type: uint256
             Source: "allowed[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[msg.sender]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 1837
         Source: "Approval(msg.sender, _spender, _value)"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender, _spender, _value)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint remaining"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n    return allowed[_owner][_spender];\r\n    }"
      Return
         Gas costs: 394
         Source: "return allowed[_owner][_spender]"
        IndexAccess
           Type: uint256
           Source: "allowed[_owner][_spender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowed[_owner]"
            Identifier allowed
               Type: mapping(address => mapping(address => uint256))
               Source: "allowed"
            Identifier _owner
               Type: address
               Source: "_owner"
          Identifier _spender
             Type: address
             Source: "_spender"
  FunctionDefinition "add_tokens" - public
     Source: "function add_tokens(address _to, uint256 _amount) public onlyOwner {\r\n        balances[owner] -= _amount;\r\n        investBalances[_to] += _amount;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _amount)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        balances[owner] -= _amount;\r\n        investBalances[_to] += _amount;\r\n    }"
      ExpressionStatement
         Gas costs: 20565
         Source: "balances[owner] -= _amount"
        Assignment using operator -=
           Type: uint256
           Source: "balances[owner] -= _amount"
          IndexAccess
             Type: uint256
             Source: "balances[owner]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier owner
               Type: address
               Source: "owner"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      ExpressionStatement
         Gas costs: 20323
         Source: "investBalances[_to] += _amount"
        Assignment using operator +=
           Type: uint256
           Source: "investBalances[_to] += _amount"
          IndexAccess
             Type: uint256
             Source: "investBalances[_to]"
            Identifier investBalances
               Type: mapping(address => uint256)
               Source: "investBalances"
            Identifier _to
               Type: address
               Source: "_to"
          Identifier _amount
             Type: uint256
             Source: "_amount"
  FunctionDefinition "transferToken_toBalance" - public
     Source: "function transferToken_toBalance(address _user, uint256 _amount) public onlyOwner {\r\n        investBalances[_user] -= _amount;\r\n        balances[_user] += _amount;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _user, uint256 _amount)"
      VariableDeclaration "_user"
         Type: address
         Source: "address _user"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        investBalances[_user] -= _amount;\r\n        balances[_user] += _amount;\r\n    }"
      ExpressionStatement
         Gas costs: 20329
         Source: "investBalances[_user] -= _amount"
        Assignment using operator -=
           Type: uint256
           Source: "investBalances[_user] -= _amount"
          IndexAccess
             Type: uint256
             Source: "investBalances[_user]"
            Identifier investBalances
               Type: mapping(address => uint256)
               Source: "investBalances"
            Identifier _user
               Type: address
               Source: "_user"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      ExpressionStatement
         Gas costs: 20323
         Source: "balances[_user] += _amount"
        Assignment using operator +=
           Type: uint256
           Source: "balances[_user] += _amount"
          IndexAccess
             Type: uint256
             Source: "balances[_user]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _user
               Type: address
               Source: "_user"
          Identifier _amount
             Type: uint256
             Source: "_amount"
  FunctionDefinition "transferToken_toInvestBalance" - public
     Source: "function transferToken_toInvestBalance(address _user, uint256 _amount) public onlyOwner {\r\n        balances[_user] -= _amount;\r\n        investBalances[_user] += _amount;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _user, uint256 _amount)"
      VariableDeclaration "_user"
         Type: address
         Source: "address _user"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        balances[_user] -= _amount;\r\n        investBalances[_user] += _amount;\r\n    }"
      ExpressionStatement
         Gas costs: 20329
         Source: "balances[_user] -= _amount"
        Assignment using operator -=
           Type: uint256
           Source: "balances[_user] -= _amount"
          IndexAccess
             Type: uint256
             Source: "balances[_user]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _user
               Type: address
               Source: "_user"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      ExpressionStatement
         Gas costs: 20323
         Source: "investBalances[_user] += _amount"
        Assignment using operator +=
           Type: uint256
           Source: "investBalances[_user] += _amount"
          IndexAccess
             Type: uint256
             Source: "investBalances[_user]"
            Identifier investBalances
               Type: mapping(address => uint256)
               Source: "investBalances"
            Identifier _user
               Type: address
               Source: "_user"
          Identifier _amount
             Type: uint256
             Source: "_amount"
  FunctionDefinition "changeOwner3" - public
     Source: "function changeOwner3(address _owner3) public onlyOwner {\r\n        owner3 = _owner3;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner3)"
      VariableDeclaration "_owner3"
         Type: address
         Source: "address _owner3"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        owner3 = _owner3;\r\n    }"
      ExpressionStatement
         Gas costs: 20267
         Source: "owner3 = _owner3"
        Assignment using operator =
           Type: address
           Source: "owner3 = _owner3"
          Identifier owner3
             Type: address
             Source: "owner3"
          Identifier _owner3
             Type: address
             Source: "_owner3"
