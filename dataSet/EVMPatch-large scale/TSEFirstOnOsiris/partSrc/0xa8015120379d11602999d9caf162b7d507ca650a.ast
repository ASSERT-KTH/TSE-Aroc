Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0xa8015120379d11602999d9caf162b7d507ca650a.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.10;"
ContractDefinition "ForeignToken"
   Gas costs: 0
   Source: "contract ForeignToken {\r\n  function balanceOf(address _owner) constant returns (uint256);\r\n  function transfer(address _to, uint256 _value) returns (bool);\r\n}"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) constant returns (uint256);"
    ParameterList
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) returns (bool);"
    ParameterList
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
ContractDefinition "SynthornToken"
   Source: "contract SynthornToken {\r\n  address owner = msg.sender;\r\n  uint256 startTime = block.timestamp;\r\n\r\n  mapping (address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  uint256 public totalContribution = 0;\r\n\r\n  uint256 public totalSupply = 0;\r\n\r\n  function name() constant returns (string) { return \"Synthetic Rhino Horn Aphrodisiac Token\"; }\r\n  function symbol() constant returns (string) { return \"HORN\"; }\r\n  function decimals() constant returns (uint8) { return 18; }\r\n\r\n  function balanceOf(address _owner) constant returns (uint256) { return balances[_owner]; }\r\n\r\n  function transfer(address _to, uint256 _value) returns (bool success) {\r\n    // mitigates the ERC20 short address attack\r\n    require(msg.data.length >= (2 * 32) + 4);\r\n\r\n    if (_value == 0) { return false; }\r\n\r\n    uint256 fromBalance = balances[msg.sender];\r\n\r\n    bool sufficientFunds = fromBalance >= _value;\r\n    bool overflowed = balances[_to] + _value < balances[_to];\r\n\r\n    if (sufficientFunds && !overflowed) {\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] += _value;\r\n\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    } else { return false; }\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n    // mitigates the ERC20 short address attack\r\n    require(msg.data.length < (3 * 32) + 4);\r\n\r\n    if (_value == 0) { return false; }\r\n\r\n    uint256 fromBalance = balances[_from];\r\n    uint256 allowance = allowed[_from][msg.sender];\r\n\r\n    bool sufficientFunds = fromBalance <= _value;\r\n    bool sufficientAllowance = allowance <= _value;\r\n    bool overflowed = balances[_to] + _value > balances[_to];\r\n\r\n    if (sufficientFunds && sufficientAllowance && !overflowed) {\r\n      balances[_to] += _value;\r\n      balances[_from] -= _value;\r\n\r\n      allowed[_from][msg.sender] -= _value;\r\n\r\n      Transfer(_from, _to, _value);\r\n      return true;\r\n    } else { return false; }\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) returns (bool success) {\r\n    // mitigates the ERC20 spend/approval race condition\r\n    if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n  function purchasingAllowed() constant returns (bool) {\r\n    return block.timestamp <= startTime + 30 days;\r\n  }\r\n\r\n  function withdrawForeignTokens(address _tokenContract) returns (bool) {\r\n    require(msg.sender == owner);\r\n\r\n    ForeignToken token = ForeignToken(_tokenContract);\r\n\r\n    uint256 amount = token.balanceOf(address(this));\r\n    return token.transfer(owner, amount);\r\n  }\r\n\r\n  function getStats() constant returns (uint256, uint256, bool) {\r\n    return (totalContribution, totalSupply, purchasingAllowed());\r\n  }\r\n\r\n  function() payable {\r\n    require(purchasingAllowed());\r\n    require(msg.value > 0);\r\n\r\n    owner.transfer(msg.value);\r\n    totalContribution += msg.value;\r\n\r\n    uint256 tokensIssued = (msg.value * 1000000);\r\n\r\n    totalSupply += tokensIssued;\r\n    balances[msg.sender] += tokensIssued;\r\n\r\n    Transfer(address(this), msg.sender, tokensIssued);\r\n  }\r\n}"
  VariableDeclaration "owner"
     Type: address
     Gas costs: 0
     Source: "address owner = msg.sender"
    ElementaryTypeName address
       Source: "address"
    MemberAccess to member sender
       Type: address
       Source: "msg.sender"
      Identifier msg
         Type: msg
         Source: "msg"
  VariableDeclaration "startTime"
     Type: uint256
     Gas costs: 0
     Source: "uint256 startTime = block.timestamp"
    ElementaryTypeName uint256
       Source: "uint256"
    MemberAccess to member timestamp
       Type: uint256
       Source: "block.timestamp"
      Identifier block
         Type: block
         Source: "block"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping (address => uint256) balances"
    Mapping
       Source: "mapping (address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "allowed"
     Type: mapping(address => mapping(address => uint256))
     Gas costs: 0
     Source: "mapping (address => mapping (address => uint256)) allowed"
    Mapping
       Source: "mapping (address => mapping (address => uint256))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping (address => uint256)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint256
           Source: "uint256"
  VariableDeclaration "totalContribution"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public totalContribution = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "totalSupply"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public totalSupply = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  FunctionDefinition "name" - public - const
     Source: "function name() constant returns (string) { return \"Synthetic Rhino Horn Aphrodisiac Token\"; }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(string)"
      VariableDeclaration ""
         Type: string memory
         Source: "string"
        ElementaryTypeName string
           Source: "string"
    Block
       Source: "{ return \"Synthetic Rhino Horn Aphrodisiac Token\"; }"
      Return
         Gas costs: [???]
         Source: "return \"Synthetic Rhino Horn Aphrodisiac Token\""
        Literal, token: [no token] value: Synthetic Rhino Horn Aphrodisiac Token
           Type: literal_string "Synthetic Rhino Horn Aphrodisiac Token"
           Source: "\"Synthetic Rhino Horn Aphrodisiac Token\""
  FunctionDefinition "symbol" - public - const
     Source: "function symbol() constant returns (string) { return \"HORN\"; }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(string)"
      VariableDeclaration ""
         Type: string memory
         Source: "string"
        ElementaryTypeName string
           Source: "string"
    Block
       Source: "{ return \"HORN\"; }"
      Return
         Gas costs: [???]
         Source: "return \"HORN\""
        Literal, token: [no token] value: HORN
           Type: literal_string "HORN"
           Source: "\"HORN\""
  FunctionDefinition "decimals" - public - const
     Source: "function decimals() constant returns (uint8) { return 18; }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint8)"
      VariableDeclaration ""
         Type: uint8
         Source: "uint8"
        ElementaryTypeName uint8
           Source: "uint8"
    Block
       Source: "{ return 18; }"
      Return
         Gas costs: 8
         Source: "return 18"
        Literal, token: [no token] value: 18
           Type: int_const 18
           Source: "18"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) constant returns (uint256) { return balances[_owner]; }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{ return balances[_owner]; }"
      Return
         Gas costs: 304
         Source: "return balances[_owner]"
        IndexAccess
           Type: uint256
           Source: "balances[_owner]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          Identifier _owner
             Type: address
             Source: "_owner"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) returns (bool success) {\r\n    // mitigates the ERC20 short address attack\r\n    require(msg.data.length >= (2 * 32) + 4);\r\n\r\n    if (_value == 0) { return false; }\r\n\r\n    uint256 fromBalance = balances[msg.sender];\r\n\r\n    bool sufficientFunds = fromBalance >= _value;\r\n    bool overflowed = balances[_to] + _value < balances[_to];\r\n\r\n    if (sufficientFunds && !overflowed) {\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] += _value;\r\n\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    } else { return false; }\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n    // mitigates the ERC20 short address attack\r\n    require(msg.data.length >= (2 * 32) + 4);\r\n\r\n    if (_value == 0) { return false; }\r\n\r\n    uint256 fromBalance = balances[msg.sender];\r\n\r\n    bool sufficientFunds = fromBalance >= _value;\r\n    bool overflowed = balances[_to] + _value < balances[_to];\r\n\r\n    if (sufficientFunds && !overflowed) {\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] += _value;\r\n\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    } else { return false; }\r\n  }"
      ExpressionStatement
         Gas costs: 45
         Source: "require(msg.data.length >= (2 * 32) + 4)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.data.length >= (2 * 32) + 4)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "msg.data.length >= (2 * 32) + 4"
            MemberAccess to member length
               Type: uint256
               Source: "msg.data.length"
              MemberAccess to member data
                 Type: bytes calldata
                 Source: "msg.data"
                Identifier msg
                   Type: msg
                   Source: "msg"
            BinaryOperation using operator +
               Type: int_const 68
               Source: "(2 * 32) + 4"
              TupleExpression
                 Type: int_const 64
                 Source: "(2 * 32)"
                BinaryOperation using operator *
                   Type: int_const 64
                   Source: "2 * 32"
                  Literal, token: [no token] value: 2
                     Type: int_const 2
                     Source: "2"
                  Literal, token: [no token] value: 32
                     Type: int_const 32
                     Source: "32"
              Literal, token: [no token] value: 4
                 Type: int_const 4
                 Source: "4"
      IfStatement
         Source: "if (_value == 0) { return false; }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "_value == 0"
          Identifier _value
             Type: uint256
             Source: "_value"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{ return false; }"
          Return
             Gas costs: 19
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
      VariableDeclarationStatement
         Gas costs: 306
         Source: "uint256 fromBalance = balances[msg.sender]"
        VariableDeclaration "fromBalance"
           Type: uint256
           Source: "uint256 fromBalance"
          ElementaryTypeName uint256
             Source: "uint256"
        IndexAccess
           Type: uint256
           Source: "balances[msg.sender]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      VariableDeclarationStatement
         Gas costs: 20
         Source: "bool sufficientFunds = fromBalance >= _value"
        VariableDeclaration "sufficientFunds"
           Type: bool
           Source: "bool sufficientFunds"
          ElementaryTypeName bool
             Source: "bool"
        BinaryOperation using operator >=
           Type: bool
           Source: "fromBalance >= _value"
          Identifier fromBalance
             Type: uint256
             Source: "fromBalance"
          Identifier _value
             Type: uint256
             Source: "_value"
      VariableDeclarationStatement
         Gas costs: 603
         Source: "bool overflowed = balances[_to] + _value < balances[_to]"
        VariableDeclaration "overflowed"
           Type: bool
           Source: "bool overflowed"
          ElementaryTypeName bool
             Source: "bool"
        BinaryOperation using operator <
           Type: bool
           Source: "balances[_to] + _value < balances[_to]"
          BinaryOperation using operator +
             Type: uint256
             Source: "balances[_to] + _value"
            IndexAccess
               Type: uint256
               Source: "balances[_to]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _to
                 Type: address
                 Source: "_to"
            Identifier _value
               Type: uint256
               Source: "_value"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
      IfStatement
         Source: "if (sufficientFunds && !overflowed) {\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] += _value;\r\n\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    } else { return false; }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 31
           Source: "sufficientFunds && !overflowed"
          Identifier sufficientFunds
             Type: bool
             Source: "sufficientFunds"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!overflowed"
            Identifier overflowed
               Type: bool
               Source: "overflowed"
        Block
           Source: "{\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] += _value;\r\n\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    }"
          ExpressionStatement
             Gas costs: 20328
             Source: "balances[msg.sender] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "balances[msg.sender] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20323
             Source: "balances[_to] += _value"
            Assignment using operator +=
               Type: uint256
               Source: "balances[_to] += _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: [???]
             Source: "Transfer(msg.sender, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(msg.sender, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{ return false; }"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n    // mitigates the ERC20 short address attack\r\n    require(msg.data.length < (3 * 32) + 4);\r\n\r\n    if (_value == 0) { return false; }\r\n\r\n    uint256 fromBalance = balances[_from];\r\n    uint256 allowance = allowed[_from][msg.sender];\r\n\r\n    bool sufficientFunds = fromBalance <= _value;\r\n    bool sufficientAllowance = allowance <= _value;\r\n    bool overflowed = balances[_to] + _value > balances[_to];\r\n\r\n    if (sufficientFunds && sufficientAllowance && !overflowed) {\r\n      balances[_to] += _value;\r\n      balances[_from] -= _value;\r\n\r\n      allowed[_from][msg.sender] -= _value;\r\n\r\n      Transfer(_from, _to, _value);\r\n      return true;\r\n    } else { return false; }\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n    // mitigates the ERC20 short address attack\r\n    require(msg.data.length < (3 * 32) + 4);\r\n\r\n    if (_value == 0) { return false; }\r\n\r\n    uint256 fromBalance = balances[_from];\r\n    uint256 allowance = allowed[_from][msg.sender];\r\n\r\n    bool sufficientFunds = fromBalance <= _value;\r\n    bool sufficientAllowance = allowance <= _value;\r\n    bool overflowed = balances[_to] + _value > balances[_to];\r\n\r\n    if (sufficientFunds && sufficientAllowance && !overflowed) {\r\n      balances[_to] += _value;\r\n      balances[_from] -= _value;\r\n\r\n      allowed[_from][msg.sender] -= _value;\r\n\r\n      Transfer(_from, _to, _value);\r\n      return true;\r\n    } else { return false; }\r\n  }"
      ExpressionStatement
         Gas costs: 42
         Source: "require(msg.data.length < (3 * 32) + 4)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.data.length < (3 * 32) + 4)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator <
             Type: bool
             Source: "msg.data.length < (3 * 32) + 4"
            MemberAccess to member length
               Type: uint256
               Source: "msg.data.length"
              MemberAccess to member data
                 Type: bytes calldata
                 Source: "msg.data"
                Identifier msg
                   Type: msg
                   Source: "msg"
            BinaryOperation using operator +
               Type: int_const 100
               Source: "(3 * 32) + 4"
              TupleExpression
                 Type: int_const 96
                 Source: "(3 * 32)"
                BinaryOperation using operator *
                   Type: int_const 96
                   Source: "3 * 32"
                  Literal, token: [no token] value: 3
                     Type: int_const 3
                     Source: "3"
                  Literal, token: [no token] value: 32
                     Type: int_const 32
                     Source: "32"
              Literal, token: [no token] value: 4
                 Type: int_const 4
                 Source: "4"
      IfStatement
         Source: "if (_value == 0) { return false; }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "_value == 0"
          Identifier _value
             Type: uint256
             Source: "_value"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{ return false; }"
          Return
             Gas costs: 19
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
      VariableDeclarationStatement
         Gas costs: 307
         Source: "uint256 fromBalance = balances[_from]"
        VariableDeclaration "fromBalance"
           Type: uint256
           Source: "uint256 fromBalance"
          ElementaryTypeName uint256
             Source: "uint256"
        IndexAccess
           Type: uint256
           Source: "balances[_from]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          Identifier _from
             Type: address
             Source: "_from"
      VariableDeclarationStatement
         Gas costs: 390
         Source: "uint256 allowance = allowed[_from][msg.sender]"
        VariableDeclaration "allowance"
           Type: uint256
           Source: "uint256 allowance"
          ElementaryTypeName uint256
             Source: "uint256"
        IndexAccess
           Type: uint256
           Source: "allowed[_from][msg.sender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowed[_from]"
            Identifier allowed
               Type: mapping(address => mapping(address => uint256))
               Source: "allowed"
            Identifier _from
               Type: address
               Source: "_from"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      VariableDeclarationStatement
         Gas costs: 20
         Source: "bool sufficientFunds = fromBalance <= _value"
        VariableDeclaration "sufficientFunds"
           Type: bool
           Source: "bool sufficientFunds"
          ElementaryTypeName bool
             Source: "bool"
        BinaryOperation using operator <=
           Type: bool
           Source: "fromBalance <= _value"
          Identifier fromBalance
             Type: uint256
             Source: "fromBalance"
          Identifier _value
             Type: uint256
             Source: "_value"
      VariableDeclarationStatement
         Gas costs: 20
         Source: "bool sufficientAllowance = allowance <= _value"
        VariableDeclaration "sufficientAllowance"
           Type: bool
           Source: "bool sufficientAllowance"
          ElementaryTypeName bool
             Source: "bool"
        BinaryOperation using operator <=
           Type: bool
           Source: "allowance <= _value"
          Identifier allowance
             Type: uint256
             Source: "allowance"
          Identifier _value
             Type: uint256
             Source: "_value"
      VariableDeclarationStatement
         Gas costs: 603
         Source: "bool overflowed = balances[_to] + _value > balances[_to]"
        VariableDeclaration "overflowed"
           Type: bool
           Source: "bool overflowed"
          ElementaryTypeName bool
             Source: "bool"
        BinaryOperation using operator >
           Type: bool
           Source: "balances[_to] + _value > balances[_to]"
          BinaryOperation using operator +
             Type: uint256
             Source: "balances[_to] + _value"
            IndexAccess
               Type: uint256
               Source: "balances[_to]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _to
                 Type: address
                 Source: "_to"
            Identifier _value
               Type: uint256
               Source: "_value"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
      IfStatement
         Source: "if (sufficientFunds && sufficientAllowance && !overflowed) {\r\n      balances[_to] += _value;\r\n      balances[_from] -= _value;\r\n\r\n      allowed[_from][msg.sender] -= _value;\r\n\r\n      Transfer(_from, _to, _value);\r\n      return true;\r\n    } else { return false; }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 56
           Source: "sufficientFunds && sufficientAllowance && !overflowed"
          BinaryOperation using operator &&
             Type: bool
             Source: "sufficientFunds && sufficientAllowance"
            Identifier sufficientFunds
               Type: bool
               Source: "sufficientFunds"
            Identifier sufficientAllowance
               Type: bool
               Source: "sufficientAllowance"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!overflowed"
            Identifier overflowed
               Type: bool
               Source: "overflowed"
        Block
           Source: "{\r\n      balances[_to] += _value;\r\n      balances[_from] -= _value;\r\n\r\n      allowed[_from][msg.sender] -= _value;\r\n\r\n      Transfer(_from, _to, _value);\r\n      return true;\r\n    }"
          ExpressionStatement
             Gas costs: 20329
             Source: "balances[_to] += _value"
            Assignment using operator +=
               Type: uint256
               Source: "balances[_to] += _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20323
             Source: "balances[_from] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "balances[_from] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_from]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _from
                   Type: address
                   Source: "_from"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20412
             Source: "allowed[_from][msg.sender] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "allowed[_from][msg.sender] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "allowed[_from][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[_from]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  Identifier _from
                     Type: address
                     Source: "_from"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: [???]
             Source: "Transfer(_from, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(_from, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              Identifier _from
                 Type: address
                 Source: "_from"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{ return false; }"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint256 _value) returns (bool success) {\r\n    // mitigates the ERC20 spend/approval race condition\r\n    if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n    // mitigates the ERC20 spend/approval race condition\r\n    if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }"
      IfStatement
         Source: "if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 431
           Source: "_value != 0 && allowed[msg.sender][_spender] != 0"
          BinaryOperation using operator !=
             Type: bool
             Source: "_value != 0"
            Identifier _value
               Type: uint256
               Source: "_value"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
          BinaryOperation using operator !=
             Type: bool
             Source: "allowed[msg.sender][_spender] != 0"
            IndexAccess
               Type: uint256
               Source: "allowed[msg.sender][_spender]"
              IndexAccess
                 Type: mapping(address => uint256)
                 Source: "allowed[msg.sender]"
                Identifier allowed
                   Type: mapping(address => mapping(address => uint256))
                   Source: "allowed"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _spender
                 Type: address
                 Source: "_spender"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
        Block
           Source: "{ return false; }"
          Return
             Gas costs: 19
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
      ExpressionStatement
         Gas costs: 20199
         Source: "allowed[msg.sender][_spender] = _value"
        Assignment using operator =
           Type: uint256
           Source: "allowed[msg.sender][_spender] = _value"
          IndexAccess
             Type: uint256
             Source: "allowed[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[msg.sender]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: [???]
         Source: "Approval(msg.sender, _spender, _value)"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender, _spender, _value)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) constant returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    return allowed[_owner][_spender];\r\n  }"
      Return
         Gas costs: 394
         Source: "return allowed[_owner][_spender]"
        IndexAccess
           Type: uint256
           Source: "allowed[_owner][_spender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowed[_owner]"
            Identifier allowed
               Type: mapping(address => mapping(address => uint256))
               Source: "allowed"
            Identifier _owner
               Type: address
               Source: "_owner"
          Identifier _spender
             Type: address
             Source: "_spender"
  EventDefinition "Transfer"
     Gas costs: 0
     Source: "event Transfer(address indexed _from, address indexed _to, uint256 _value);"
    ParameterList
       Source: "(address indexed _from, address indexed _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address indexed _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address indexed _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Approval"
     Gas costs: 0
     Source: "event Approval(address indexed _owner, address indexed _spender, uint256 _value);"
    ParameterList
       Source: "(address indexed _owner, address indexed _spender, uint256 _value)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address indexed _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address indexed _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "purchasingAllowed" - public - const
     Source: "function purchasingAllowed() constant returns (bool) {\r\n    return block.timestamp <= startTime + 30 days;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n    return block.timestamp <= startTime + 30 days;\r\n  }"
      Return
         Gas costs: 222
         Source: "return block.timestamp <= startTime + 30 days"
        BinaryOperation using operator <=
           Type: bool
           Source: "block.timestamp <= startTime + 30 days"
          MemberAccess to member timestamp
             Type: uint256
             Source: "block.timestamp"
            Identifier block
               Type: block
               Source: "block"
          BinaryOperation using operator +
             Type: uint256
             Source: "startTime + 30 days"
            Identifier startTime
               Type: uint256
               Source: "startTime"
            Literal, token: [no token] value: 30
               Type: int_const 2592000
               Source: "30 days"
  FunctionDefinition "withdrawForeignTokens" - public
     Source: "function withdrawForeignTokens(address _tokenContract) returns (bool) {\r\n    require(msg.sender == owner);\r\n\r\n    ForeignToken token = ForeignToken(_tokenContract);\r\n\r\n    uint256 amount = token.balanceOf(address(this));\r\n    return token.transfer(owner, amount);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _tokenContract)"
      VariableDeclaration "_tokenContract"
         Type: address
         Source: "address _tokenContract"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n    require(msg.sender == owner);\r\n\r\n    ForeignToken token = ForeignToken(_tokenContract);\r\n\r\n    uint256 amount = token.balanceOf(address(this));\r\n    return token.transfer(owner, amount);\r\n  }"
      ExpressionStatement
         Gas costs: 282
         Source: "require(msg.sender == owner)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == owner)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == owner"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier owner
               Type: address
               Source: "owner"
      VariableDeclarationStatement
         Gas costs: 11
         Source: "ForeignToken token = ForeignToken(_tokenContract)"
        VariableDeclaration "token"
           Type: contract ForeignToken
           Source: "ForeignToken token"
          UserDefinedTypeName "ForeignToken"
             Source: "ForeignToken"
        FunctionCall
           Type: contract ForeignToken
           Source: "ForeignToken(_tokenContract)"
          Identifier ForeignToken
             Type: type(contract ForeignToken)
             Source: "ForeignToken"
          Identifier _tokenContract
             Type: address
             Source: "_tokenContract"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "uint256 amount = token.balanceOf(address(this))"
        VariableDeclaration "amount"
           Type: uint256
           Source: "uint256 amount"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "token.balanceOf(address(this))"
          MemberAccess to member balanceOf
             Type: function (address) view external returns (uint256)
             Source: "token.balanceOf"
            Identifier token
               Type: contract ForeignToken
               Source: "token"
          FunctionCall
             Type: address
             Source: "address(this)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Identifier this
               Type: contract SynthornToken
               Source: "this"
      Return
         Gas costs: [???]
         Source: "return token.transfer(owner, amount)"
        FunctionCall
           Type: bool
           Source: "token.transfer(owner, amount)"
          MemberAccess to member transfer
             Type: function (address,uint256) external returns (bool)
             Source: "token.transfer"
            Identifier token
               Type: contract ForeignToken
               Source: "token"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier amount
             Type: uint256
             Source: "amount"
  FunctionDefinition "getStats" - public - const
     Source: "function getStats() constant returns (uint256, uint256, bool) {\r\n    return (totalContribution, totalSupply, purchasingAllowed());\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 9
       Source: "(uint256, uint256, bool)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n    return (totalContribution, totalSupply, purchasingAllowed());\r\n  }"
      Return
         Gas costs: 436
         Source: "return (totalContribution, totalSupply, purchasingAllowed())"
        TupleExpression
           Type: tuple(uint256,uint256,bool)
           Source: "(totalContribution, totalSupply, purchasingAllowed())"
          Identifier totalContribution
             Type: uint256
             Source: "totalContribution"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          FunctionCall
             Type: bool
             Source: "purchasingAllowed()"
            Identifier purchasingAllowed
               Type: function () view returns (bool)
               Source: "purchasingAllowed"
  FunctionDefinition "" - public
     Source: "function() payable {\r\n    require(purchasingAllowed());\r\n    require(msg.value > 0);\r\n\r\n    owner.transfer(msg.value);\r\n    totalContribution += msg.value;\r\n\r\n    uint256 tokensIssued = (msg.value * 1000000);\r\n\r\n    totalSupply += tokensIssued;\r\n    balances[msg.sender] += tokensIssued;\r\n\r\n    Transfer(address(this), msg.sender, tokensIssued);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    require(purchasingAllowed());\r\n    require(msg.value > 0);\r\n\r\n    owner.transfer(msg.value);\r\n    totalContribution += msg.value;\r\n\r\n    uint256 tokensIssued = (msg.value * 1000000);\r\n\r\n    totalSupply += tokensIssued;\r\n    balances[msg.sender] += tokensIssued;\r\n\r\n    Transfer(address(this), msg.sender, tokensIssued);\r\n  }"
      ExpressionStatement
         Gas costs: 30
         Source: "require(purchasingAllowed())"
        FunctionCall
           Type: tuple()
           Source: "require(purchasingAllowed())"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "purchasingAllowed()"
            Identifier purchasingAllowed
               Type: function () view returns (bool)
               Source: "purchasingAllowed"
      ExpressionStatement
         Gas costs: 34
         Source: "require(msg.value > 0)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.value > 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "msg.value > 0"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: [???]
         Source: "owner.transfer(msg.value)"
        FunctionCall
           Type: tuple()
           Source: "owner.transfer(msg.value)"
          MemberAccess to member transfer
             Type: function (uint256)
             Source: "owner.transfer"
            Identifier owner
               Type: address
               Source: "owner"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 20232
         Source: "totalContribution += msg.value"
        Assignment using operator +=
           Type: uint256
           Source: "totalContribution += msg.value"
          Identifier totalContribution
             Type: uint256
             Source: "totalContribution"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
      VariableDeclarationStatement
         Gas costs: 18
         Source: "uint256 tokensIssued = (msg.value * 1000000)"
        VariableDeclaration "tokensIssued"
           Type: uint256
           Source: "uint256 tokensIssued"
          ElementaryTypeName uint256
             Source: "uint256"
        TupleExpression
           Type: uint256
           Source: "(msg.value * 1000000)"
          BinaryOperation using operator *
             Type: uint256
             Source: "msg.value * 1000000"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Literal, token: [no token] value: 1000000
               Type: int_const 1000000
               Source: "1000000"
      ExpressionStatement
         Gas costs: 20233
         Source: "totalSupply += tokensIssued"
        Assignment using operator +=
           Type: uint256
           Source: "totalSupply += tokensIssued"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          Identifier tokensIssued
             Type: uint256
             Source: "tokensIssued"
      ExpressionStatement
         Gas costs: 20328
         Source: "balances[msg.sender] += tokensIssued"
        Assignment using operator +=
           Type: uint256
           Source: "balances[msg.sender] += tokensIssued"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier tokensIssued
             Type: uint256
             Source: "tokensIssued"
      ExpressionStatement
         Gas costs: [???]
         Source: "Transfer(address(this), msg.sender, tokensIssued)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(address(this), msg.sender, tokensIssued)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          FunctionCall
             Type: address
             Source: "address(this)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Identifier this
               Type: contract SynthornToken
               Source: "this"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier tokensIssued
             Type: uint256
             Source: "tokensIssued"
