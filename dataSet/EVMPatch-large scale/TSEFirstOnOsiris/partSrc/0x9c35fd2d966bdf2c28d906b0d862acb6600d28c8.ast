Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0x9c35fd2d966bdf2c28d906b0d862acb6600d28c8.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.19;"
ContractDefinition "Storage"
   Source: "contract Storage{\r\n    address public founder;\r\n    bool public changeable;\r\n    mapping( address => bool) public adminStatus;\r\n    mapping( address => uint256) public slot;\r\n    \r\n    event Update(address whichAdmin, address whichUser, uint256 data);\r\n    event Set(address whichAdmin, address whichUser, uint256 data);\r\n    event Admin(address addr, bool yesno);\r\n\r\n    modifier onlyFounder() {\r\n        require(msg.sender==founder);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyAdmin() {\r\n        assert (adminStatus[msg.sender]==true);\r\n        _;\r\n    }\r\n    \r\n    function Storage() public {\r\n        founder=msg.sender;\r\n        adminStatus[founder]=true;\r\n        changeable=true;\r\n    }\r\n    \r\n    function update(address userAddress,uint256 data) public onlyAdmin(){\r\n        assert(changeable==true);\r\n        assert(slot[userAddress]+data>slot[userAddress]);\r\n        slot[userAddress]+=data;\r\n        Update(msg.sender,userAddress,data);\r\n    }\r\n    \r\n    function set(address userAddress, uint256 data) public onlyAdmin() {\r\n        require(changeable==true || msg.sender==founder);\r\n        slot[userAddress]=data;\r\n        Set(msg.sender,userAddress,data);\r\n    }\r\n    \r\n    function admin(address addr) public onlyFounder(){\r\n        adminStatus[addr] = !adminStatus[addr];\r\n        Admin(addr, adminStatus[addr]);\r\n    }\r\n    \r\n    function halt() public onlyFounder(){\r\n        changeable=!changeable;\r\n    }\r\n    \r\n    function() public{\r\n        revert();\r\n    }\r\n    \r\n}"
  VariableDeclaration "founder"
     Type: address
     Gas costs: 0
     Source: "address public founder"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "changeable"
     Type: bool
     Gas costs: 0
     Source: "bool public changeable"
    ElementaryTypeName bool
       Source: "bool"
  VariableDeclaration "adminStatus"
     Type: mapping(address => bool)
     Gas costs: 0
     Source: "mapping( address => bool) public adminStatus"
    Mapping
       Source: "mapping( address => bool)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName bool
         Source: "bool"
  VariableDeclaration "slot"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping( address => uint256) public slot"
    Mapping
       Source: "mapping( address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  EventDefinition "Update"
     Gas costs: 0
     Source: "event Update(address whichAdmin, address whichUser, uint256 data);"
    ParameterList
       Source: "(address whichAdmin, address whichUser, uint256 data)"
      VariableDeclaration "whichAdmin"
         Type: address
         Source: "address whichAdmin"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "whichUser"
         Type: address
         Source: "address whichUser"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "data"
         Type: uint256
         Source: "uint256 data"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Set"
     Gas costs: 0
     Source: "event Set(address whichAdmin, address whichUser, uint256 data);"
    ParameterList
       Source: "(address whichAdmin, address whichUser, uint256 data)"
      VariableDeclaration "whichAdmin"
         Type: address
         Source: "address whichAdmin"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "whichUser"
         Type: address
         Source: "address whichUser"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "data"
         Type: uint256
         Source: "uint256 data"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Admin"
     Gas costs: 0
     Source: "event Admin(address addr, bool yesno);"
    ParameterList
       Source: "(address addr, bool yesno)"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "yesno"
         Type: bool
         Source: "bool yesno"
        ElementaryTypeName bool
           Source: "bool"
  ModifierDefinition "onlyFounder"
     Source: "modifier onlyFounder() {\r\n        require(msg.sender==founder);\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n        require(msg.sender==founder);\r\n        _;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "require(msg.sender==founder)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender==founder)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender==founder"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier founder
               Type: address
               Source: "founder"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "onlyAdmin"
     Source: "modifier onlyAdmin() {\r\n        assert (adminStatus[msg.sender]==true);\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n        assert (adminStatus[msg.sender]==true);\r\n        _;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "assert (adminStatus[msg.sender]==true)"
        FunctionCall
           Type: tuple()
           Source: "assert (adminStatus[msg.sender]==true)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator ==
             Type: bool
             Source: "adminStatus[msg.sender]==true"
            IndexAccess
               Type: bool
               Source: "adminStatus[msg.sender]"
              Identifier adminStatus
                 Type: mapping(address => bool)
                 Source: "adminStatus"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Literal, token: true value: true
               Type: bool
               Source: "true"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "Storage" - public
     Source: "function Storage() public {\r\n        founder=msg.sender;\r\n        adminStatus[founder]=true;\r\n        changeable=true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        founder=msg.sender;\r\n        adminStatus[founder]=true;\r\n        changeable=true;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "founder=msg.sender"
        Assignment using operator =
           Type: address
           Source: "founder=msg.sender"
          Identifier founder
             Type: address
             Source: "founder"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 0
         Source: "adminStatus[founder]=true"
        Assignment using operator =
           Type: bool
           Source: "adminStatus[founder]=true"
          IndexAccess
             Type: bool
             Source: "adminStatus[founder]"
            Identifier adminStatus
               Type: mapping(address => bool)
               Source: "adminStatus"
            Identifier founder
               Type: address
               Source: "founder"
          Literal, token: true value: true
             Type: bool
             Source: "true"
      ExpressionStatement
         Gas costs: 0
         Source: "changeable=true"
        Assignment using operator =
           Type: bool
           Source: "changeable=true"
          Identifier changeable
             Type: bool
             Source: "changeable"
          Literal, token: true value: true
             Type: bool
             Source: "true"
  FunctionDefinition "update" - public
     Source: "function update(address userAddress,uint256 data) public onlyAdmin(){\r\n        assert(changeable==true);\r\n        assert(slot[userAddress]+data>slot[userAddress]);\r\n        slot[userAddress]+=data;\r\n        Update(msg.sender,userAddress,data);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address userAddress,uint256 data)"
      VariableDeclaration "userAddress"
         Type: address
         Source: "address userAddress"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "data"
         Type: uint256
         Source: "uint256 data"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyAdmin"
       Gas costs: 0
       Source: "onlyAdmin()"
      Identifier onlyAdmin
         Type: modifier ()
         Source: "onlyAdmin"
    Block
       Source: "{\r\n        assert(changeable==true);\r\n        assert(slot[userAddress]+data>slot[userAddress]);\r\n        slot[userAddress]+=data;\r\n        Update(msg.sender,userAddress,data);\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "assert(changeable==true)"
        FunctionCall
           Type: tuple()
           Source: "assert(changeable==true)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator ==
             Type: bool
             Source: "changeable==true"
            Identifier changeable
               Type: bool
               Source: "changeable"
            Literal, token: true value: true
               Type: bool
               Source: "true"
      ExpressionStatement
         Gas costs: 0
         Source: "assert(slot[userAddress]+data>slot[userAddress])"
        FunctionCall
           Type: tuple()
           Source: "assert(slot[userAddress]+data>slot[userAddress])"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator >
             Type: bool
             Source: "slot[userAddress]+data>slot[userAddress]"
            BinaryOperation using operator +
               Type: uint256
               Source: "slot[userAddress]+data"
              IndexAccess
                 Type: uint256
                 Source: "slot[userAddress]"
                Identifier slot
                   Type: mapping(address => uint256)
                   Source: "slot"
                Identifier userAddress
                   Type: address
                   Source: "userAddress"
              Identifier data
                 Type: uint256
                 Source: "data"
            IndexAccess
               Type: uint256
               Source: "slot[userAddress]"
              Identifier slot
                 Type: mapping(address => uint256)
                 Source: "slot"
              Identifier userAddress
                 Type: address
                 Source: "userAddress"
      ExpressionStatement
         Gas costs: 0
         Source: "slot[userAddress]+=data"
        Assignment using operator +=
           Type: uint256
           Source: "slot[userAddress]+=data"
          IndexAccess
             Type: uint256
             Source: "slot[userAddress]"
            Identifier slot
               Type: mapping(address => uint256)
               Source: "slot"
            Identifier userAddress
               Type: address
               Source: "userAddress"
          Identifier data
             Type: uint256
             Source: "data"
      ExpressionStatement
         Gas costs: 0
         Source: "Update(msg.sender,userAddress,data)"
        FunctionCall
           Type: tuple()
           Source: "Update(msg.sender,userAddress,data)"
          Identifier Update
             Type: function (address,address,uint256)
             Source: "Update"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier userAddress
             Type: address
             Source: "userAddress"
          Identifier data
             Type: uint256
             Source: "data"
  FunctionDefinition "set" - public
     Source: "function set(address userAddress, uint256 data) public onlyAdmin() {\r\n        require(changeable==true || msg.sender==founder);\r\n        slot[userAddress]=data;\r\n        Set(msg.sender,userAddress,data);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address userAddress, uint256 data)"
      VariableDeclaration "userAddress"
         Type: address
         Source: "address userAddress"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "data"
         Type: uint256
         Source: "uint256 data"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyAdmin"
       Gas costs: 0
       Source: "onlyAdmin()"
      Identifier onlyAdmin
         Type: modifier ()
         Source: "onlyAdmin"
    Block
       Source: "{\r\n        require(changeable==true || msg.sender==founder);\r\n        slot[userAddress]=data;\r\n        Set(msg.sender,userAddress,data);\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "require(changeable==true || msg.sender==founder)"
        FunctionCall
           Type: tuple()
           Source: "require(changeable==true || msg.sender==founder)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ||
             Type: bool
             Source: "changeable==true || msg.sender==founder"
            BinaryOperation using operator ==
               Type: bool
               Source: "changeable==true"
              Identifier changeable
                 Type: bool
                 Source: "changeable"
              Literal, token: true value: true
                 Type: bool
                 Source: "true"
            BinaryOperation using operator ==
               Type: bool
               Source: "msg.sender==founder"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier founder
                 Type: address
                 Source: "founder"
      ExpressionStatement
         Gas costs: 0
         Source: "slot[userAddress]=data"
        Assignment using operator =
           Type: uint256
           Source: "slot[userAddress]=data"
          IndexAccess
             Type: uint256
             Source: "slot[userAddress]"
            Identifier slot
               Type: mapping(address => uint256)
               Source: "slot"
            Identifier userAddress
               Type: address
               Source: "userAddress"
          Identifier data
             Type: uint256
             Source: "data"
      ExpressionStatement
         Gas costs: 0
         Source: "Set(msg.sender,userAddress,data)"
        FunctionCall
           Type: tuple()
           Source: "Set(msg.sender,userAddress,data)"
          Identifier Set
             Type: function (address,address,uint256)
             Source: "Set"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier userAddress
             Type: address
             Source: "userAddress"
          Identifier data
             Type: uint256
             Source: "data"
  FunctionDefinition "admin" - public
     Source: "function admin(address addr) public onlyFounder(){\r\n        adminStatus[addr] = !adminStatus[addr];\r\n        Admin(addr, adminStatus[addr]);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address addr)"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyFounder"
       Gas costs: 0
       Source: "onlyFounder()"
      Identifier onlyFounder
         Type: modifier ()
         Source: "onlyFounder"
    Block
       Source: "{\r\n        adminStatus[addr] = !adminStatus[addr];\r\n        Admin(addr, adminStatus[addr]);\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "adminStatus[addr] = !adminStatus[addr]"
        Assignment using operator =
           Type: bool
           Source: "adminStatus[addr] = !adminStatus[addr]"
          IndexAccess
             Type: bool
             Source: "adminStatus[addr]"
            Identifier adminStatus
               Type: mapping(address => bool)
               Source: "adminStatus"
            Identifier addr
               Type: address
               Source: "addr"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!adminStatus[addr]"
            IndexAccess
               Type: bool
               Source: "adminStatus[addr]"
              Identifier adminStatus
                 Type: mapping(address => bool)
                 Source: "adminStatus"
              Identifier addr
                 Type: address
                 Source: "addr"
      ExpressionStatement
         Gas costs: 0
         Source: "Admin(addr, adminStatus[addr])"
        FunctionCall
           Type: tuple()
           Source: "Admin(addr, adminStatus[addr])"
          Identifier Admin
             Type: function (address,bool)
             Source: "Admin"
          Identifier addr
             Type: address
             Source: "addr"
          IndexAccess
             Type: bool
             Source: "adminStatus[addr]"
            Identifier adminStatus
               Type: mapping(address => bool)
               Source: "adminStatus"
            Identifier addr
               Type: address
               Source: "addr"
  FunctionDefinition "halt" - public
     Source: "function halt() public onlyFounder(){\r\n        changeable=!changeable;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyFounder"
       Gas costs: 0
       Source: "onlyFounder()"
      Identifier onlyFounder
         Type: modifier ()
         Source: "onlyFounder"
    Block
       Source: "{\r\n        changeable=!changeable;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "changeable=!changeable"
        Assignment using operator =
           Type: bool
           Source: "changeable=!changeable"
          Identifier changeable
             Type: bool
             Source: "changeable"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!changeable"
            Identifier changeable
               Type: bool
               Source: "changeable"
  FunctionDefinition "" - public
     Source: "function() public{\r\n        revert();\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        revert();\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "revert()"
        FunctionCall
           Type: tuple()
           Source: "revert()"
          Identifier revert
             Type: function () pure
             Source: "revert"
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.19;"
ContractDefinition "Payee"
   Source: "contract Payee{\r\n    \r\n    uint256 public price;\r\n    address public storageAddress;\r\n    address public founder;\r\n    bool public changeable;\r\n    mapping( address => bool) public adminStatus;\r\n\r\n    \r\n    \r\n    Storage s;\r\n    event Buy(address addr, uint256 count);\r\n    event SetPrice(address addr, uint256 price);\r\n    event Admin(address addr, bool yesno);\r\n\r\n    \r\n    modifier onlyAdmin() {\r\n        assert (adminStatus[msg.sender]==true);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyFounder() {\r\n        require(msg.sender==founder);\r\n        _;\r\n    }\r\n    \r\n    function admin(address addr) public onlyFounder(){\r\n        adminStatus[addr] = !adminStatus[addr];\r\n        Admin(addr, adminStatus[addr]);\r\n    }\r\n    \r\n    function Payee(address addr) public {\r\n        founder=msg.sender;\r\n        price=3000000000000000; //default price will be 0.003 ether($2);\r\n        adminStatus[founder]=true;\r\n        storageAddress=addr;\r\n        s=Storage(storageAddress);\r\n        changeable=true;\r\n        \r\n    }\r\n    \r\n    function setPrice(uint256 _price) public onlyAdmin(){\r\n        price=_price;\r\n        SetPrice(msg.sender, price);\r\n    }\r\n    \r\n    function setStorageAddress(address _addr) public onlyAdmin(){\r\n        storageAddress=_addr;\r\n        s=Storage(storageAddress);\r\n\r\n    }\r\n    \r\n    function halt() public onlyFounder(){\r\n        changeable=!changeable;\r\n    }\r\n    \r\n    function pay(address _addr, uint256 count) public payable {\r\n        assert(changeable==true);\r\n        assert(msg.value >= price*count);\r\n        if(!founder.call.value(price*count)() || !msg.sender.call.value(msg.value-price*count)()){\r\n            revert();\r\n        }\r\n        s.update(_addr,count);\r\n        Buy(msg.sender,count);\r\n    }\r\n    \r\n    function () public payable {\r\n        pay(msg.sender,1);\r\n    }\r\n}"
  VariableDeclaration "price"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public price"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "storageAddress"
     Type: address
     Gas costs: [???]
     Source: "address public storageAddress"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "founder"
     Type: address
     Gas costs: [???]
     Source: "address public founder"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "changeable"
     Type: bool
     Gas costs: [???]
     Source: "bool public changeable"
    ElementaryTypeName bool
       Source: "bool"
  VariableDeclaration "adminStatus"
     Type: mapping(address => bool)
     Gas costs: [???]
     Source: "mapping( address => bool) public adminStatus"
    Mapping
       Source: "mapping( address => bool)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName bool
         Source: "bool"
  VariableDeclaration "s"
     Type: contract Storage
     Gas costs: 0
     Source: "Storage s"
    UserDefinedTypeName "Storage"
       Source: "Storage"
  EventDefinition "Buy"
     Gas costs: 0
     Source: "event Buy(address addr, uint256 count);"
    ParameterList
       Source: "(address addr, uint256 count)"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "count"
         Type: uint256
         Source: "uint256 count"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "SetPrice"
     Gas costs: 0
     Source: "event SetPrice(address addr, uint256 price);"
    ParameterList
       Source: "(address addr, uint256 price)"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "price"
         Type: uint256
         Source: "uint256 price"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Admin"
     Gas costs: 0
     Source: "event Admin(address addr, bool yesno);"
    ParameterList
       Source: "(address addr, bool yesno)"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "yesno"
         Type: bool
         Source: "bool yesno"
        ElementaryTypeName bool
           Source: "bool"
  ModifierDefinition "onlyAdmin"
     Source: "modifier onlyAdmin() {\r\n        assert (adminStatus[msg.sender]==true);\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n        assert (adminStatus[msg.sender]==true);\r\n        _;\r\n    }"
      ExpressionStatement
         Gas costs: 744
         Source: "assert (adminStatus[msg.sender]==true)"
        FunctionCall
           Type: tuple()
           Source: "assert (adminStatus[msg.sender]==true)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator ==
             Type: bool
             Source: "adminStatus[msg.sender]==true"
            IndexAccess
               Type: bool
               Source: "adminStatus[msg.sender]"
              Identifier adminStatus
                 Type: mapping(address => bool)
                 Source: "adminStatus"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Literal, token: true value: true
               Type: bool
               Source: "true"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "onlyFounder"
     Source: "modifier onlyFounder() {\r\n        require(msg.sender==founder);\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n        require(msg.sender==founder);\r\n        _;\r\n    }"
      ExpressionStatement
         Gas costs: 564
         Source: "require(msg.sender==founder)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender==founder)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender==founder"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier founder
               Type: address
               Source: "founder"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "admin" - public
     Source: "function admin(address addr) public onlyFounder(){\r\n        adminStatus[addr] = !adminStatus[addr];\r\n        Admin(addr, adminStatus[addr]);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address addr)"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyFounder"
       Gas costs: 0
       Source: "onlyFounder()"
      Identifier onlyFounder
         Type: modifier ()
         Source: "onlyFounder"
    Block
       Source: "{\r\n        adminStatus[addr] = !adminStatus[addr];\r\n        Admin(addr, adminStatus[addr]);\r\n    }"
      ExpressionStatement
         Gas costs: 20692
         Source: "adminStatus[addr] = !adminStatus[addr]"
        Assignment using operator =
           Type: bool
           Source: "adminStatus[addr] = !adminStatus[addr]"
          IndexAccess
             Type: bool
             Source: "adminStatus[addr]"
            Identifier adminStatus
               Type: mapping(address => bool)
               Source: "adminStatus"
            Identifier addr
               Type: address
               Source: "addr"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!adminStatus[addr]"
            IndexAccess
               Type: bool
               Source: "adminStatus[addr]"
              Identifier adminStatus
                 Type: mapping(address => bool)
                 Source: "adminStatus"
              Identifier addr
                 Type: address
                 Source: "addr"
      ExpressionStatement
         Gas costs: [???]
         Source: "Admin(addr, adminStatus[addr])"
        FunctionCall
           Type: tuple()
           Source: "Admin(addr, adminStatus[addr])"
          Identifier Admin
             Type: function (address,bool)
             Source: "Admin"
          Identifier addr
             Type: address
             Source: "addr"
          IndexAccess
             Type: bool
             Source: "adminStatus[addr]"
            Identifier adminStatus
               Type: mapping(address => bool)
               Source: "adminStatus"
            Identifier addr
               Type: address
               Source: "addr"
  FunctionDefinition "Payee" - public
     Source: "function Payee(address addr) public {\r\n        founder=msg.sender;\r\n        price=3000000000000000; //default price will be 0.003 ether($2);\r\n        adminStatus[founder]=true;\r\n        storageAddress=addr;\r\n        s=Storage(storageAddress);\r\n        changeable=true;\r\n        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address addr)"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        founder=msg.sender;\r\n        price=3000000000000000; //default price will be 0.003 ether($2);\r\n        adminStatus[founder]=true;\r\n        storageAddress=addr;\r\n        s=Storage(storageAddress);\r\n        changeable=true;\r\n        \r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "founder=msg.sender"
        Assignment using operator =
           Type: address
           Source: "founder=msg.sender"
          Identifier founder
             Type: address
             Source: "founder"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 0
         Source: "price=3000000000000000"
        Assignment using operator =
           Type: uint256
           Source: "price=3000000000000000"
          Identifier price
             Type: uint256
             Source: "price"
          Literal, token: [no token] value: 3000000000000000
             Type: int_const 3000000000000000
             Source: "3000000000000000"
      ExpressionStatement
         Gas costs: 0
         Source: "adminStatus[founder]=true"
        Assignment using operator =
           Type: bool
           Source: "adminStatus[founder]=true"
          IndexAccess
             Type: bool
             Source: "adminStatus[founder]"
            Identifier adminStatus
               Type: mapping(address => bool)
               Source: "adminStatus"
            Identifier founder
               Type: address
               Source: "founder"
          Literal, token: true value: true
             Type: bool
             Source: "true"
      ExpressionStatement
         Gas costs: 0
         Source: "storageAddress=addr"
        Assignment using operator =
           Type: address
           Source: "storageAddress=addr"
          Identifier storageAddress
             Type: address
             Source: "storageAddress"
          Identifier addr
             Type: address
             Source: "addr"
      ExpressionStatement
         Gas costs: 0
         Source: "s=Storage(storageAddress)"
        Assignment using operator =
           Type: contract Storage
           Source: "s=Storage(storageAddress)"
          Identifier s
             Type: contract Storage
             Source: "s"
          FunctionCall
             Type: contract Storage
             Source: "Storage(storageAddress)"
            Identifier Storage
               Type: type(contract Storage)
               Source: "Storage"
            Identifier storageAddress
               Type: address
               Source: "storageAddress"
      ExpressionStatement
         Gas costs: 0
         Source: "changeable=true"
        Assignment using operator =
           Type: bool
           Source: "changeable=true"
          Identifier changeable
             Type: bool
             Source: "changeable"
          Literal, token: true value: true
             Type: bool
             Source: "true"
  FunctionDefinition "setPrice" - public
     Source: "function setPrice(uint256 _price) public onlyAdmin(){\r\n        price=_price;\r\n        SetPrice(msg.sender, price);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _price)"
      VariableDeclaration "_price"
         Type: uint256
         Source: "uint256 _price"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyAdmin"
       Gas costs: 0
       Source: "onlyAdmin()"
      Identifier onlyAdmin
         Type: modifier ()
         Source: "onlyAdmin"
    Block
       Source: "{\r\n        price=_price;\r\n        SetPrice(msg.sender, price);\r\n    }"
      ExpressionStatement
         Gas costs: 20014
         Source: "price=_price"
        Assignment using operator =
           Type: uint256
           Source: "price=_price"
          Identifier price
             Type: uint256
             Source: "price"
          Identifier _price
             Type: uint256
             Source: "_price"
      ExpressionStatement
         Gas costs: [???]
         Source: "SetPrice(msg.sender, price)"
        FunctionCall
           Type: tuple()
           Source: "SetPrice(msg.sender, price)"
          Identifier SetPrice
             Type: function (address,uint256)
             Source: "SetPrice"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier price
             Type: uint256
             Source: "price"
  FunctionDefinition "setStorageAddress" - public
     Source: "function setStorageAddress(address _addr) public onlyAdmin(){\r\n        storageAddress=_addr;\r\n        s=Storage(storageAddress);\r\n\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _addr)"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyAdmin"
       Gas costs: 0
       Source: "onlyAdmin()"
      Identifier onlyAdmin
         Type: modifier ()
         Source: "onlyAdmin"
    Block
       Source: "{\r\n        storageAddress=_addr;\r\n        s=Storage(storageAddress);\r\n\r\n    }"
      ExpressionStatement
         Gas costs: 20267
         Source: "storageAddress=_addr"
        Assignment using operator =
           Type: address
           Source: "storageAddress=_addr"
          Identifier storageAddress
             Type: address
             Source: "storageAddress"
          Identifier _addr
             Type: address
             Source: "_addr"
      ExpressionStatement
         Gas costs: 20503
         Source: "s=Storage(storageAddress)"
        Assignment using operator =
           Type: contract Storage
           Source: "s=Storage(storageAddress)"
          Identifier s
             Type: contract Storage
             Source: "s"
          FunctionCall
             Type: contract Storage
             Source: "Storage(storageAddress)"
            Identifier Storage
               Type: type(contract Storage)
               Source: "Storage"
            Identifier storageAddress
               Type: address
               Source: "storageAddress"
  FunctionDefinition "halt" - public
     Source: "function halt() public onlyFounder(){\r\n        changeable=!changeable;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyFounder"
       Gas costs: 0
       Source: "onlyFounder()"
      Identifier onlyFounder
         Type: modifier ()
         Source: "onlyFounder"
    Block
       Source: "{\r\n        changeable=!changeable;\r\n    }"
      ExpressionStatement
         Gas costs: 20606
         Source: "changeable=!changeable"
        Assignment using operator =
           Type: bool
           Source: "changeable=!changeable"
          Identifier changeable
             Type: bool
             Source: "changeable"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!changeable"
            Identifier changeable
               Type: bool
               Source: "changeable"
  FunctionDefinition "pay" - public
     Source: "function pay(address _addr, uint256 count) public payable {\r\n        assert(changeable==true);\r\n        assert(msg.value >= price*count);\r\n        if(!founder.call.value(price*count)() || !msg.sender.call.value(msg.value-price*count)()){\r\n            revert();\r\n        }\r\n        s.update(_addr,count);\r\n        Buy(msg.sender,count);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _addr, uint256 count)"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "count"
         Type: uint256
         Source: "uint256 count"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        assert(changeable==true);\r\n        assert(msg.value >= price*count);\r\n        if(!founder.call.value(price*count)() || !msg.sender.call.value(msg.value-price*count)()){\r\n            revert();\r\n        }\r\n        s.update(_addr,count);\r\n        Buy(msg.sender,count);\r\n    }"
      ExpressionStatement
         Gas costs: 327
         Source: "assert(changeable==true)"
        FunctionCall
           Type: tuple()
           Source: "assert(changeable==true)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator ==
             Type: bool
             Source: "changeable==true"
            Identifier changeable
               Type: bool
               Source: "changeable"
            Literal, token: true value: true
               Type: bool
               Source: "true"
      ExpressionStatement
         Gas costs: 239
         Source: "assert(msg.value >= price*count)"
        FunctionCall
           Type: tuple()
           Source: "assert(msg.value >= price*count)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator >=
             Type: bool
             Source: "msg.value >= price*count"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            BinaryOperation using operator *
               Type: uint256
               Source: "price*count"
              Identifier price
                 Type: uint256
                 Source: "price"
              Identifier count
                 Type: uint256
                 Source: "count"
      IfStatement
         Source: "if(!founder.call.value(price*count)() || !msg.sender.call.value(msg.value-price*count)()){\r\n            revert();\r\n        }"
        BinaryOperation using operator ||
           Type: bool
           Gas costs: [???]
           Source: "!founder.call.value(price*count)() || !msg.sender.call.value(msg.value-price*count)()"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!founder.call.value(price*count)()"
            FunctionCall
               Type: bool
               Source: "founder.call.value(price*count)()"
              FunctionCall
                 Type: function () payable returns (bool)
                 Source: "founder.call.value(price*count)"
                MemberAccess to member value
                   Type: function (uint256) returns (function () payable returns (bool))
                   Source: "founder.call.value"
                  MemberAccess to member call
                     Type: function () payable returns (bool)
                     Source: "founder.call"
                    Identifier founder
                       Type: address
                       Source: "founder"
                BinaryOperation using operator *
                   Type: uint256
                   Source: "price*count"
                  Identifier price
                     Type: uint256
                     Source: "price"
                  Identifier count
                     Type: uint256
                     Source: "count"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!msg.sender.call.value(msg.value-price*count)()"
            FunctionCall
               Type: bool
               Source: "msg.sender.call.value(msg.value-price*count)()"
              FunctionCall
                 Type: function () payable returns (bool)
                 Source: "msg.sender.call.value(msg.value-price*count)"
                MemberAccess to member value
                   Type: function (uint256) returns (function () payable returns (bool))
                   Source: "msg.sender.call.value"
                  MemberAccess to member call
                     Type: function () payable returns (bool)
                     Source: "msg.sender.call"
                    MemberAccess to member sender
                       Type: address
                       Source: "msg.sender"
                      Identifier msg
                         Type: msg
                         Source: "msg"
                BinaryOperation using operator -
                   Type: uint256
                   Source: "msg.value-price*count"
                  MemberAccess to member value
                     Type: uint256
                     Source: "msg.value"
                    Identifier msg
                       Type: msg
                       Source: "msg"
                  BinaryOperation using operator *
                     Type: uint256
                     Source: "price*count"
                    Identifier price
                       Type: uint256
                       Source: "price"
                    Identifier count
                       Type: uint256
                       Source: "count"
        Block
           Source: "{\r\n            revert();\r\n        }"
          ExpressionStatement
             Gas costs: 6
             Source: "revert()"
            FunctionCall
               Type: tuple()
               Source: "revert()"
              Identifier revert
                 Type: function () pure
                 Source: "revert"
      ExpressionStatement
         Gas costs: [???]
         Source: "s.update(_addr,count)"
        FunctionCall
           Type: tuple()
           Source: "s.update(_addr,count)"
          MemberAccess to member update
             Type: function (address,uint256) external
             Source: "s.update"
            Identifier s
               Type: contract Storage
               Source: "s"
          Identifier _addr
             Type: address
             Source: "_addr"
          Identifier count
             Type: uint256
             Source: "count"
      ExpressionStatement
         Gas costs: [???]
         Source: "Buy(msg.sender,count)"
        FunctionCall
           Type: tuple()
           Source: "Buy(msg.sender,count)"
          Identifier Buy
             Type: function (address,uint256)
             Source: "Buy"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier count
             Type: uint256
             Source: "count"
  FunctionDefinition "" - public
     Source: "function () public payable {\r\n        pay(msg.sender,1);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        pay(msg.sender,1);\r\n    }"
      ExpressionStatement
         Gas costs: 9
         Source: "pay(msg.sender,1)"
        FunctionCall
           Type: tuple()
           Source: "pay(msg.sender,1)"
          Identifier pay
             Type: function (address,uint256)
             Source: "pay"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
