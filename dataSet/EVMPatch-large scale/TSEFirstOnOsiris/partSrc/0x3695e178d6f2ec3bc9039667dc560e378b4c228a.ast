Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0x3695e178d6f2ec3bc9039667dc560e378b4c228a.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.9;"
ContractDefinition "ERC20"
   Gas costs: 0
   Source: "contract ERC20 {\r\n    function totalSupply() constant returns (uint256 totalSupply);\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}"
  FunctionDefinition "totalSupply" - public - const
     Source: "function totalSupply() constant returns (uint256 totalSupply);"
    ParameterList
       Source: "()"
    ParameterList
       Source: "(uint256 totalSupply)"
      VariableDeclaration "totalSupply"
         Type: uint256
         Source: "uint256 totalSupply"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) constant returns (uint256 balance);"
    ParameterList
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256 balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) returns (bool success);"
    ParameterList
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _value) returns (bool success);"
    ParameterList
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint256 _value) returns (bool success);"
    ParameterList
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) constant returns (uint256 remaining);"
    ParameterList
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256 remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint256 remaining"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Transfer"
     Source: "event Transfer(address indexed _from, address indexed _to, uint256 _value);"
    ParameterList
       Source: "(address indexed _from, address indexed _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address indexed _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address indexed _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Approval"
     Source: "event Approval(address indexed _owner, address indexed _spender, uint256 _value);"
    ParameterList
       Source: "(address indexed _owner, address indexed _spender, uint256 _value)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address indexed _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address indexed _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
ContractDefinition "LegendsCrowdfund"
   Source: "contract LegendsCrowdfund {\r\n\r\n    address public creator;\r\n    address public exitAddress;\r\n\r\n    uint public start;\r\n    uint public limitVIP;\r\n\r\n    LegendsToken public legendsToken;\r\n\r\n    mapping (address => uint) public recipientETH;\r\n    mapping (address => uint) public recipientVIP;\r\n\r\n    uint public totalETH;\r\n    uint public totalVIP;\r\n\r\n    event VIPPurchase(address indexed sender, address indexed recipient, uint ETH, uint VIP);\r\n\r\n    modifier saleActive() {\r\n        if (address(legendsToken) == 0) {\r\n            throw;\r\n        }\r\n        if (block.timestamp < start) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier hasValue() {\r\n        if (msg.value == 0) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier recipientIsValid(address recipient) {\r\n        if (recipient == 0 || recipient == address(this)) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier isCreator() {\r\n        if (msg.sender != creator) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier tokenContractNotSet() {\r\n        if (address(legendsToken) != 0) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Constructor.\r\n     * @param _exitAddress Address that all ETH should be forwarded to.\r\n     * @param _start Timestamp of when the crowdsale will start.\r\n     * @param _limitVIP Maximum amount of VIP that can be allocated in total. Denominated in wei.\r\n     */\r\n    function LegendsCrowdfund(address _exitAddress, uint _start, uint _limitVIP) {\r\n        creator = msg.sender;\r\n        exitAddress = _exitAddress;\r\n        start = _start;\r\n        limitVIP = _limitVIP;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the address of the token contract. Must be called by creator of this. Can only be set once.\r\n     * @param _legendsToken Address of the token contract.\r\n     */\r\n    function setTokenContract(LegendsToken _legendsToken) external isCreator tokenContractNotSet {\r\n        legendsToken = _legendsToken;\r\n    }\r\n\r\n    /**\r\n     * @dev Forward Ether to the exit address. Store all ETH and VIP information in public state and logs.\r\n     * @param recipient Address that tokens should be attributed to.\r\n     */\r\n    function purchaseMembership(address sender, address recipient) external payable saleActive hasValue recipientIsValid(recipient) {\r\n\r\n        if (msg.sender != address(legendsToken)) {\r\n            throw;\r\n        }\r\n        // Attempt to send the ETH to the exit address.\r\n        if (!exitAddress.send(msg.value)) {\r\n            throw;\r\n        }\r\n\r\n        // Update ETH amounts.\r\n        recipientETH[recipient] += msg.value;\r\n        totalETH += msg.value;\r\n\r\n        // Calculate VIP amount.\r\n        uint VIP = msg.value * 10;  // $1 / VIP based on $10 / ETH value.\r\n\r\n        // Are we in the pre-sale?\r\n        if (block.timestamp - start < 2 weeks) {\r\n            VIP = (VIP * 10) / 9;   // 10% discount.\r\n        }\r\n\r\n        // Update VIP amounts.\r\n        recipientVIP[recipient] += VIP;\r\n        totalVIP += VIP;\r\n\r\n        // Check we have not exceeded the maximum VIP.\r\n        if (totalVIP > limitVIP) {\r\n            throw;\r\n        }\r\n\r\n        // Tell the token contract about the increase.\r\n        legendsToken.addTokens(recipient, VIP);\r\n\r\n        // Log this purchase.\r\n        VIPPurchase(sender, recipient, msg.value, VIP);\r\n    }\r\n\r\n}"
  VariableDeclaration "creator"
     Type: address
     Gas costs: 0
     Source: "address public creator"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "exitAddress"
     Type: address
     Gas costs: 0
     Source: "address public exitAddress"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "start"
     Type: uint256
     Gas costs: 0
     Source: "uint public start"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "limitVIP"
     Type: uint256
     Gas costs: 0
     Source: "uint public limitVIP"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "legendsToken"
     Type: contract LegendsToken
     Gas costs: 0
     Source: "LegendsToken public legendsToken"
    UserDefinedTypeName "LegendsToken"
       Source: "LegendsToken"
  VariableDeclaration "recipientETH"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping (address => uint) public recipientETH"
    Mapping
       Source: "mapping (address => uint)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint
         Source: "uint"
  VariableDeclaration "recipientVIP"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping (address => uint) public recipientVIP"
    Mapping
       Source: "mapping (address => uint)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint
         Source: "uint"
  VariableDeclaration "totalETH"
     Type: uint256
     Gas costs: 0
     Source: "uint public totalETH"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "totalVIP"
     Type: uint256
     Gas costs: 0
     Source: "uint public totalVIP"
    ElementaryTypeName uint
       Source: "uint"
  EventDefinition "VIPPurchase"
     Gas costs: 0
     Source: "event VIPPurchase(address indexed sender, address indexed recipient, uint ETH, uint VIP);"
    ParameterList
       Source: "(address indexed sender, address indexed recipient, uint ETH, uint VIP)"
      VariableDeclaration "sender"
         Type: address
         Source: "address indexed sender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "recipient"
         Type: address
         Source: "address indexed recipient"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "ETH"
         Type: uint256
         Source: "uint ETH"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "VIP"
         Type: uint256
         Source: "uint VIP"
        ElementaryTypeName uint
           Source: "uint"
  ModifierDefinition "saleActive"
     Source: "modifier saleActive() {\r\n        if (address(legendsToken) == 0) {\r\n            throw;\r\n        }\r\n        if (block.timestamp < start) {\r\n            throw;\r\n        }\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n        if (address(legendsToken) == 0) {\r\n            throw;\r\n        }\r\n        if (block.timestamp < start) {\r\n            throw;\r\n        }\r\n        _;\r\n    }"
      IfStatement
         Source: "if (address(legendsToken) == 0) {\r\n            throw;\r\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 0
           Source: "address(legendsToken) == 0"
          FunctionCall
             Type: address
             Source: "address(legendsToken)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Identifier legendsToken
               Type: contract LegendsToken
               Source: "legendsToken"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n            throw;\r\n        }"
          Throw
             Gas costs: 0
             Source: "throw"
      IfStatement
         Source: "if (block.timestamp < start) {\r\n            throw;\r\n        }"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 0
           Source: "block.timestamp < start"
          MemberAccess to member timestamp
             Type: uint256
             Source: "block.timestamp"
            Identifier block
               Type: block
               Source: "block"
          Identifier start
             Type: uint256
             Source: "start"
        Block
           Source: "{\r\n            throw;\r\n        }"
          Throw
             Gas costs: 0
             Source: "throw"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "hasValue"
     Source: "modifier hasValue() {\r\n        if (msg.value == 0) {\r\n            throw;\r\n        }\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n        if (msg.value == 0) {\r\n            throw;\r\n        }\r\n        _;\r\n    }"
      IfStatement
         Source: "if (msg.value == 0) {\r\n            throw;\r\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 0
           Source: "msg.value == 0"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n            throw;\r\n        }"
          Throw
             Gas costs: 0
             Source: "throw"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "recipientIsValid"
     Source: "modifier recipientIsValid(address recipient) {\r\n        if (recipient == 0 || recipient == address(this)) {\r\n            throw;\r\n        }\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address recipient)"
      VariableDeclaration "recipient"
         Type: address
         Source: "address recipient"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\r\n        if (recipient == 0 || recipient == address(this)) {\r\n            throw;\r\n        }\r\n        _;\r\n    }"
      IfStatement
         Source: "if (recipient == 0 || recipient == address(this)) {\r\n            throw;\r\n        }"
        BinaryOperation using operator ||
           Type: bool
           Gas costs: 0
           Source: "recipient == 0 || recipient == address(this)"
          BinaryOperation using operator ==
             Type: bool
             Source: "recipient == 0"
            Identifier recipient
               Type: address
               Source: "recipient"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
          BinaryOperation using operator ==
             Type: bool
             Source: "recipient == address(this)"
            Identifier recipient
               Type: address
               Source: "recipient"
            FunctionCall
               Type: address
               Source: "address(this)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Identifier this
                 Type: contract LegendsCrowdfund
                 Source: "this"
        Block
           Source: "{\r\n            throw;\r\n        }"
          Throw
             Gas costs: 0
             Source: "throw"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "isCreator"
     Source: "modifier isCreator() {\r\n        if (msg.sender != creator) {\r\n            throw;\r\n        }\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n        if (msg.sender != creator) {\r\n            throw;\r\n        }\r\n        _;\r\n    }"
      IfStatement
         Source: "if (msg.sender != creator) {\r\n            throw;\r\n        }"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 0
           Source: "msg.sender != creator"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier creator
             Type: address
             Source: "creator"
        Block
           Source: "{\r\n            throw;\r\n        }"
          Throw
             Gas costs: 0
             Source: "throw"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "tokenContractNotSet"
     Source: "modifier tokenContractNotSet() {\r\n        if (address(legendsToken) != 0) {\r\n            throw;\r\n        }\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n        if (address(legendsToken) != 0) {\r\n            throw;\r\n        }\r\n        _;\r\n    }"
      IfStatement
         Source: "if (address(legendsToken) != 0) {\r\n            throw;\r\n        }"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 0
           Source: "address(legendsToken) != 0"
          FunctionCall
             Type: address
             Source: "address(legendsToken)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Identifier legendsToken
               Type: contract LegendsToken
               Source: "legendsToken"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n            throw;\r\n        }"
          Throw
             Gas costs: 0
             Source: "throw"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "LegendsCrowdfund" - public
     Source: "function LegendsCrowdfund(address _exitAddress, uint _start, uint _limitVIP) {\r\n        creator = msg.sender;\r\n        exitAddress = _exitAddress;\r\n        start = _start;\r\n        limitVIP = _limitVIP;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _exitAddress, uint _start, uint _limitVIP)"
      VariableDeclaration "_exitAddress"
         Type: address
         Source: "address _exitAddress"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_start"
         Type: uint256
         Source: "uint _start"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_limitVIP"
         Type: uint256
         Source: "uint _limitVIP"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        creator = msg.sender;\r\n        exitAddress = _exitAddress;\r\n        start = _start;\r\n        limitVIP = _limitVIP;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "creator = msg.sender"
        Assignment using operator =
           Type: address
           Source: "creator = msg.sender"
          Identifier creator
             Type: address
             Source: "creator"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 0
         Source: "exitAddress = _exitAddress"
        Assignment using operator =
           Type: address
           Source: "exitAddress = _exitAddress"
          Identifier exitAddress
             Type: address
             Source: "exitAddress"
          Identifier _exitAddress
             Type: address
             Source: "_exitAddress"
      ExpressionStatement
         Gas costs: 0
         Source: "start = _start"
        Assignment using operator =
           Type: uint256
           Source: "start = _start"
          Identifier start
             Type: uint256
             Source: "start"
          Identifier _start
             Type: uint256
             Source: "_start"
      ExpressionStatement
         Gas costs: 0
         Source: "limitVIP = _limitVIP"
        Assignment using operator =
           Type: uint256
           Source: "limitVIP = _limitVIP"
          Identifier limitVIP
             Type: uint256
             Source: "limitVIP"
          Identifier _limitVIP
             Type: uint256
             Source: "_limitVIP"
  FunctionDefinition "setTokenContract" - public
     Source: "function setTokenContract(LegendsToken _legendsToken) external isCreator tokenContractNotSet {\r\n        legendsToken = _legendsToken;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(LegendsToken _legendsToken)"
      VariableDeclaration "_legendsToken"
         Type: contract LegendsToken
         Source: "LegendsToken _legendsToken"
        UserDefinedTypeName "LegendsToken"
           Source: "LegendsToken"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "isCreator"
       Gas costs: 0
       Source: "isCreator"
      Identifier isCreator
         Type: modifier ()
         Source: "isCreator"
    ModifierInvocation "tokenContractNotSet"
       Gas costs: 0
       Source: "tokenContractNotSet"
      Identifier tokenContractNotSet
         Type: modifier ()
         Source: "tokenContractNotSet"
    Block
       Source: "{\r\n        legendsToken = _legendsToken;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "legendsToken = _legendsToken"
        Assignment using operator =
           Type: contract LegendsToken
           Source: "legendsToken = _legendsToken"
          Identifier legendsToken
             Type: contract LegendsToken
             Source: "legendsToken"
          Identifier _legendsToken
             Type: contract LegendsToken
             Source: "_legendsToken"
  FunctionDefinition "purchaseMembership" - public
     Source: "function purchaseMembership(address sender, address recipient) external payable saleActive hasValue recipientIsValid(recipient) {\r\n\r\n        if (msg.sender != address(legendsToken)) {\r\n            throw;\r\n        }\r\n        // Attempt to send the ETH to the exit address.\r\n        if (!exitAddress.send(msg.value)) {\r\n            throw;\r\n        }\r\n\r\n        // Update ETH amounts.\r\n        recipientETH[recipient] += msg.value;\r\n        totalETH += msg.value;\r\n\r\n        // Calculate VIP amount.\r\n        uint VIP = msg.value * 10;  // $1 / VIP based on $10 / ETH value.\r\n\r\n        // Are we in the pre-sale?\r\n        if (block.timestamp - start < 2 weeks) {\r\n            VIP = (VIP * 10) / 9;   // 10% discount.\r\n        }\r\n\r\n        // Update VIP amounts.\r\n        recipientVIP[recipient] += VIP;\r\n        totalVIP += VIP;\r\n\r\n        // Check we have not exceeded the maximum VIP.\r\n        if (totalVIP > limitVIP) {\r\n            throw;\r\n        }\r\n\r\n        // Tell the token contract about the increase.\r\n        legendsToken.addTokens(recipient, VIP);\r\n\r\n        // Log this purchase.\r\n        VIPPurchase(sender, recipient, msg.value, VIP);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address sender, address recipient)"
      VariableDeclaration "sender"
         Type: address
         Source: "address sender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "recipient"
         Type: address
         Source: "address recipient"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "saleActive"
       Gas costs: 0
       Source: "saleActive"
      Identifier saleActive
         Type: modifier ()
         Source: "saleActive"
    ModifierInvocation "hasValue"
       Gas costs: 0
       Source: "hasValue"
      Identifier hasValue
         Type: modifier ()
         Source: "hasValue"
    ModifierInvocation "recipientIsValid"
       Gas costs: 0
       Source: "recipientIsValid(recipient)"
      Identifier recipientIsValid
         Type: modifier (address)
         Source: "recipientIsValid"
      Identifier recipient
         Type: address
         Source: "recipient"
    Block
       Source: "{\r\n\r\n        if (msg.sender != address(legendsToken)) {\r\n            throw;\r\n        }\r\n        // Attempt to send the ETH to the exit address.\r\n        if (!exitAddress.send(msg.value)) {\r\n            throw;\r\n        }\r\n\r\n        // Update ETH amounts.\r\n        recipientETH[recipient] += msg.value;\r\n        totalETH += msg.value;\r\n\r\n        // Calculate VIP amount.\r\n        uint VIP = msg.value * 10;  // $1 / VIP based on $10 / ETH value.\r\n\r\n        // Are we in the pre-sale?\r\n        if (block.timestamp - start < 2 weeks) {\r\n            VIP = (VIP * 10) / 9;   // 10% discount.\r\n        }\r\n\r\n        // Update VIP amounts.\r\n        recipientVIP[recipient] += VIP;\r\n        totalVIP += VIP;\r\n\r\n        // Check we have not exceeded the maximum VIP.\r\n        if (totalVIP > limitVIP) {\r\n            throw;\r\n        }\r\n\r\n        // Tell the token contract about the increase.\r\n        legendsToken.addTokens(recipient, VIP);\r\n\r\n        // Log this purchase.\r\n        VIPPurchase(sender, recipient, msg.value, VIP);\r\n    }"
      IfStatement
         Source: "if (msg.sender != address(legendsToken)) {\r\n            throw;\r\n        }"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 0
           Source: "msg.sender != address(legendsToken)"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          FunctionCall
             Type: address
             Source: "address(legendsToken)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Identifier legendsToken
               Type: contract LegendsToken
               Source: "legendsToken"
        Block
           Source: "{\r\n            throw;\r\n        }"
          Throw
             Gas costs: 0
             Source: "throw"
      IfStatement
         Source: "if (!exitAddress.send(msg.value)) {\r\n            throw;\r\n        }"
        UnaryOperation (prefix) !
           Type: bool
           Gas costs: 0
           Source: "!exitAddress.send(msg.value)"
          FunctionCall
             Type: bool
             Source: "exitAddress.send(msg.value)"
            MemberAccess to member send
               Type: function (uint256) returns (bool)
               Source: "exitAddress.send"
              Identifier exitAddress
                 Type: address
                 Source: "exitAddress"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
        Block
           Source: "{\r\n            throw;\r\n        }"
          Throw
             Gas costs: 0
             Source: "throw"
      ExpressionStatement
         Gas costs: 0
         Source: "recipientETH[recipient] += msg.value"
        Assignment using operator +=
           Type: uint256
           Source: "recipientETH[recipient] += msg.value"
          IndexAccess
             Type: uint256
             Source: "recipientETH[recipient]"
            Identifier recipientETH
               Type: mapping(address => uint256)
               Source: "recipientETH"
            Identifier recipient
               Type: address
               Source: "recipient"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 0
         Source: "totalETH += msg.value"
        Assignment using operator +=
           Type: uint256
           Source: "totalETH += msg.value"
          Identifier totalETH
             Type: uint256
             Source: "totalETH"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint VIP = msg.value * 10"
        VariableDeclaration "VIP"
           Type: uint256
           Source: "uint VIP"
          ElementaryTypeName uint
             Source: "uint"
        BinaryOperation using operator *
           Type: uint256
           Source: "msg.value * 10"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
          Literal, token: [no token] value: 10
             Type: int_const 10
             Source: "10"
      IfStatement
         Source: "if (block.timestamp - start < 2 weeks) {\r\n            VIP = (VIP * 10) / 9;   // 10% discount.\r\n        }"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 0
           Source: "block.timestamp - start < 2 weeks"
          BinaryOperation using operator -
             Type: uint256
             Source: "block.timestamp - start"
            MemberAccess to member timestamp
               Type: uint256
               Source: "block.timestamp"
              Identifier block
                 Type: block
                 Source: "block"
            Identifier start
               Type: uint256
               Source: "start"
          Literal, token: [no token] value: 2
             Type: int_const 1209600
             Source: "2 weeks"
        Block
           Source: "{\r\n            VIP = (VIP * 10) / 9;   // 10% discount.\r\n        }"
          ExpressionStatement
             Gas costs: 0
             Source: "VIP = (VIP * 10) / 9"
            Assignment using operator =
               Type: uint256
               Source: "VIP = (VIP * 10) / 9"
              Identifier VIP
                 Type: uint256
                 Source: "VIP"
              BinaryOperation using operator /
                 Type: uint256
                 Source: "(VIP * 10) / 9"
                TupleExpression
                   Type: uint256
                   Source: "(VIP * 10)"
                  BinaryOperation using operator *
                     Type: uint256
                     Source: "VIP * 10"
                    Identifier VIP
                       Type: uint256
                       Source: "VIP"
                    Literal, token: [no token] value: 10
                       Type: int_const 10
                       Source: "10"
                Literal, token: [no token] value: 9
                   Type: int_const 9
                   Source: "9"
      ExpressionStatement
         Gas costs: 0
         Source: "recipientVIP[recipient] += VIP"
        Assignment using operator +=
           Type: uint256
           Source: "recipientVIP[recipient] += VIP"
          IndexAccess
             Type: uint256
             Source: "recipientVIP[recipient]"
            Identifier recipientVIP
               Type: mapping(address => uint256)
               Source: "recipientVIP"
            Identifier recipient
               Type: address
               Source: "recipient"
          Identifier VIP
             Type: uint256
             Source: "VIP"
      ExpressionStatement
         Gas costs: 0
         Source: "totalVIP += VIP"
        Assignment using operator +=
           Type: uint256
           Source: "totalVIP += VIP"
          Identifier totalVIP
             Type: uint256
             Source: "totalVIP"
          Identifier VIP
             Type: uint256
             Source: "VIP"
      IfStatement
         Source: "if (totalVIP > limitVIP) {\r\n            throw;\r\n        }"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 0
           Source: "totalVIP > limitVIP"
          Identifier totalVIP
             Type: uint256
             Source: "totalVIP"
          Identifier limitVIP
             Type: uint256
             Source: "limitVIP"
        Block
           Source: "{\r\n            throw;\r\n        }"
          Throw
             Gas costs: 0
             Source: "throw"
      ExpressionStatement
         Gas costs: 0
         Source: "legendsToken.addTokens(recipient, VIP)"
        FunctionCall
           Type: tuple()
           Source: "legendsToken.addTokens(recipient, VIP)"
          MemberAccess to member addTokens
             Type: function (address,uint256) external
             Source: "legendsToken.addTokens"
            Identifier legendsToken
               Type: contract LegendsToken
               Source: "legendsToken"
          Identifier recipient
             Type: address
             Source: "recipient"
          Identifier VIP
             Type: uint256
             Source: "VIP"
      ExpressionStatement
         Gas costs: 0
         Source: "VIPPurchase(sender, recipient, msg.value, VIP)"
        FunctionCall
           Type: tuple()
           Source: "VIPPurchase(sender, recipient, msg.value, VIP)"
          Identifier VIPPurchase
             Type: function (address,address,uint256,uint256)
             Source: "VIPPurchase"
          Identifier sender
             Type: address
             Source: "sender"
          Identifier recipient
             Type: address
             Source: "recipient"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier VIP
             Type: uint256
             Source: "VIP"
ContractDefinition "LegendsToken"
   Source: "contract LegendsToken is ERC20 {\r\n    string public name = 'VIP';             //The Token's name: e.g. DigixDAO Tokens\r\n    uint8 public decimals = 18;             // 1Token \u00a8= 1$ (1ETH \u00a8= 10$)\r\n    string public symbol = 'VIP';           //An identifier: e.g. REP\r\n    string public version = 'VIP_0.1';\r\n\r\n    mapping (address => uint) ownerVIP;\r\n    mapping (address => mapping (address => uint)) allowed;\r\n    uint public totalVIP;\r\n    uint public start;\r\n\r\n    address public legendsCrowdfund;\r\n\r\n    bool public testing;\r\n\r\n    modifier fromCrowdfund() {\r\n        if (msg.sender != legendsCrowdfund) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier isActive() {\r\n        if (block.timestamp < start) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier isNotActive() {\r\n        if (!testing && block.timestamp >= start) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier recipientIsValid(address recipient) {\r\n        if (recipient == 0 || recipient == address(this)) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier allowanceIsZero(address spender, uint value) {\r\n        // To change the approve amount you first have to reduce the addresses\u00b4\r\n        // allowance to zero by calling `approve(_spender,0)` if it is not\r\n        // already 0 to mitigate the race condition described here:\r\n        // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        if ((value != 0) && (allowed[msg.sender][spender] != 0)) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Constructor.\r\n     * @param _legendsCrowdfund Address of crowdfund contract.\r\n     * @param _preallocation Address to receive the pre-allocation.\r\n     * @param _start Timestamp when the token becomes active.\r\n     */\r\n    function LegendsToken(address _legendsCrowdfund, address _preallocation, uint _start, bool _testing) {\r\n        legendsCrowdfund = _legendsCrowdfund;\r\n        start = _start;\r\n        testing = _testing;\r\n        totalVIP = ownerVIP[_preallocation] = 25000 ether;\r\n    }\r\n\r\n    /**\r\n     * @dev Add to token balance on address. Must be from crowdfund.\r\n     * @param recipient Address to add tokens to.\r\n     * @return VIP Amount of VIP to add.\r\n     */\r\n    function addTokens(address recipient, uint VIP) external isNotActive fromCrowdfund {\r\n        ownerVIP[recipient] += VIP;\r\n        totalVIP += VIP;\r\n        Transfer(0x0, recipient, VIP);\r\n    }\r\n\r\n    /**\r\n     * @dev Implements ERC20 totalSupply()\r\n     */\r\n    function totalSupply() constant returns (uint256 totalSupply) {\r\n        totalSupply = totalVIP;\r\n    }\r\n\r\n    /**\r\n     * @dev Implements ERC20 balanceOf()\r\n     */\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        balance = ownerVIP[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Implements ERC20 transfer()\r\n     */\r\n    function transfer(address _to, uint256 _value) isActive recipientIsValid(_to) returns (bool success) {\r\n        if (ownerVIP[msg.sender] >= _value) {\r\n            ownerVIP[msg.sender] -= _value;\r\n            ownerVIP[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Implements ERC20 transferFrom()\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) isActive recipientIsValid(_to) returns (bool success) {\r\n        if (allowed[_from][msg.sender] >= _value && ownerVIP[_from] >= _value) {\r\n            ownerVIP[_to] += _value;\r\n            ownerVIP[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Implements ERC20 approve()\r\n     */\r\n    function approve(address _spender, uint256 _value) isActive allowanceIsZero(_spender, _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Implements ERC20 allowance()\r\n     */\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        remaining = allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Direct Buy\r\n     */\r\n    function () payable {\r\n        LegendsCrowdfund(legendsCrowdfund).purchaseMembership.value(msg.value)(msg.sender, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Proxy Buy\r\n     */\r\n    function purchaseMembership(address recipient) payable {\r\n        LegendsCrowdfund(legendsCrowdfund).purchaseMembership.value(msg.value)(msg.sender, recipient);\r\n    }\r\n\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "ERC20"
    UserDefinedTypeName "ERC20"
       Source: "ERC20"
  VariableDeclaration "name"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public name = 'VIP'"
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: VIP
       Type: literal_string "VIP"
       Source: "'VIP'"
  VariableDeclaration "decimals"
     Type: uint8
     Gas costs: 335
     Source: "uint8 public decimals = 18"
    ElementaryTypeName uint8
       Source: "uint8"
    Literal, token: [no token] value: 18
       Type: int_const 18
       Source: "18"
  VariableDeclaration "symbol"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public symbol = 'VIP'"
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: VIP
       Type: literal_string "VIP"
       Source: "'VIP'"
  VariableDeclaration "version"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public version = 'VIP_0.1'"
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: VIP_0.1
       Type: literal_string "VIP_0.1"
       Source: "'VIP_0.1'"
  VariableDeclaration "ownerVIP"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping (address => uint) ownerVIP"
    Mapping
       Source: "mapping (address => uint)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint
         Source: "uint"
  VariableDeclaration "allowed"
     Type: mapping(address => mapping(address => uint256))
     Gas costs: 0
     Source: "mapping (address => mapping (address => uint)) allowed"
    Mapping
       Source: "mapping (address => mapping (address => uint))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping (address => uint)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint
           Source: "uint"
  VariableDeclaration "totalVIP"
     Type: uint256
     Gas costs: 287
     Source: "uint public totalVIP"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "start"
     Type: uint256
     Gas costs: 287
     Source: "uint public start"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "legendsCrowdfund"
     Type: address
     Gas costs: 335
     Source: "address public legendsCrowdfund"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "testing"
     Type: bool
     Gas costs: 385
     Source: "bool public testing"
    ElementaryTypeName bool
       Source: "bool"
  ModifierDefinition "fromCrowdfund"
     Source: "modifier fromCrowdfund() {\r\n        if (msg.sender != legendsCrowdfund) {\r\n            throw;\r\n        }\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n        if (msg.sender != legendsCrowdfund) {\r\n            throw;\r\n        }\r\n        _;\r\n    }"
      IfStatement
         Source: "if (msg.sender != legendsCrowdfund) {\r\n            throw;\r\n        }"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 259
           Source: "msg.sender != legendsCrowdfund"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier legendsCrowdfund
             Type: address
             Source: "legendsCrowdfund"
        Block
           Source: "{\r\n            throw;\r\n        }"
          Throw
             Gas costs: 6
             Source: "throw"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "isActive"
     Source: "modifier isActive() {\r\n        if (block.timestamp < start) {\r\n            throw;\r\n        }\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n        if (block.timestamp < start) {\r\n            throw;\r\n        }\r\n        _;\r\n    }"
      IfStatement
         Source: "if (block.timestamp < start) {\r\n            throw;\r\n        }"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 624
           Source: "block.timestamp < start"
          MemberAccess to member timestamp
             Type: uint256
             Source: "block.timestamp"
            Identifier block
               Type: block
               Source: "block"
          Identifier start
             Type: uint256
             Source: "start"
        Block
           Source: "{\r\n            throw;\r\n        }"
          Throw
             Gas costs: 18
             Source: "throw"
      PlaceholderStatement
         Gas costs: 8
         Source: "_"
  ModifierDefinition "isNotActive"
     Source: "modifier isNotActive() {\r\n        if (!testing && block.timestamp >= start) {\r\n            throw;\r\n        }\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n        if (!testing && block.timestamp >= start) {\r\n            throw;\r\n        }\r\n        _;\r\n    }"
      IfStatement
         Source: "if (!testing && block.timestamp >= start) {\r\n            throw;\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 525
           Source: "!testing && block.timestamp >= start"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!testing"
            Identifier testing
               Type: bool
               Source: "testing"
          BinaryOperation using operator >=
             Type: bool
             Source: "block.timestamp >= start"
            MemberAccess to member timestamp
               Type: uint256
               Source: "block.timestamp"
              Identifier block
                 Type: block
                 Source: "block"
            Identifier start
               Type: uint256
               Source: "start"
        Block
           Source: "{\r\n            throw;\r\n        }"
          Throw
             Gas costs: 6
             Source: "throw"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "recipientIsValid"
     Source: "modifier recipientIsValid(address recipient) {\r\n        if (recipient == 0 || recipient == address(this)) {\r\n            throw;\r\n        }\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address recipient)"
      VariableDeclaration "recipient"
         Type: address
         Source: "address recipient"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\r\n        if (recipient == 0 || recipient == address(this)) {\r\n            throw;\r\n        }\r\n        _;\r\n    }"
      IfStatement
         Source: "if (recipient == 0 || recipient == address(this)) {\r\n            throw;\r\n        }"
        BinaryOperation using operator ||
           Type: bool
           Gas costs: 108
           Source: "recipient == 0 || recipient == address(this)"
          BinaryOperation using operator ==
             Type: bool
             Source: "recipient == 0"
            Identifier recipient
               Type: address
               Source: "recipient"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
          BinaryOperation using operator ==
             Type: bool
             Source: "recipient == address(this)"
            Identifier recipient
               Type: address
               Source: "recipient"
            FunctionCall
               Type: address
               Source: "address(this)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Identifier this
                 Type: contract LegendsToken
                 Source: "this"
        Block
           Source: "{\r\n            throw;\r\n        }"
          Throw
             Gas costs: 12
             Source: "throw"
      PlaceholderStatement
         Gas costs: 2
         Source: "_"
  ModifierDefinition "allowanceIsZero"
     Source: "modifier allowanceIsZero(address spender, uint value) {\r\n        // To change the approve amount you first have to reduce the addresses\u00b4\r\n        // allowance to zero by calling `approve(_spender,0)` if it is not\r\n        // already 0 to mitigate the race condition described here:\r\n        // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        if ((value != 0) && (allowed[msg.sender][spender] != 0)) {\r\n            throw;\r\n        }\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address spender, uint value)"
      VariableDeclaration "spender"
         Type: address
         Source: "address spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        // To change the approve amount you first have to reduce the addresses\u00b4\r\n        // allowance to zero by calling `approve(_spender,0)` if it is not\r\n        // already 0 to mitigate the race condition described here:\r\n        // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        if ((value != 0) && (allowed[msg.sender][spender] != 0)) {\r\n            throw;\r\n        }\r\n        _;\r\n    }"
      IfStatement
         Source: "if ((value != 0) && (allowed[msg.sender][spender] != 0)) {\r\n            throw;\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 431
           Source: "(value != 0) && (allowed[msg.sender][spender] != 0)"
          TupleExpression
             Type: bool
             Source: "(value != 0)"
            BinaryOperation using operator !=
               Type: bool
               Source: "value != 0"
              Identifier value
                 Type: uint256
                 Source: "value"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
          TupleExpression
             Type: bool
             Source: "(allowed[msg.sender][spender] != 0)"
            BinaryOperation using operator !=
               Type: bool
               Source: "allowed[msg.sender][spender] != 0"
              IndexAccess
                 Type: uint256
                 Source: "allowed[msg.sender][spender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[msg.sender]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
                Identifier spender
                   Type: address
                   Source: "spender"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
        Block
           Source: "{\r\n            throw;\r\n        }"
          Throw
             Gas costs: 6
             Source: "throw"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "LegendsToken" - public
     Source: "function LegendsToken(address _legendsCrowdfund, address _preallocation, uint _start, bool _testing) {\r\n        legendsCrowdfund = _legendsCrowdfund;\r\n        start = _start;\r\n        testing = _testing;\r\n        totalVIP = ownerVIP[_preallocation] = 25000 ether;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _legendsCrowdfund, address _preallocation, uint _start, bool _testing)"
      VariableDeclaration "_legendsCrowdfund"
         Type: address
         Source: "address _legendsCrowdfund"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_preallocation"
         Type: address
         Source: "address _preallocation"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_start"
         Type: uint256
         Source: "uint _start"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_testing"
         Type: bool
         Source: "bool _testing"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        legendsCrowdfund = _legendsCrowdfund;\r\n        start = _start;\r\n        testing = _testing;\r\n        totalVIP = ownerVIP[_preallocation] = 25000 ether;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "legendsCrowdfund = _legendsCrowdfund"
        Assignment using operator =
           Type: address
           Source: "legendsCrowdfund = _legendsCrowdfund"
          Identifier legendsCrowdfund
             Type: address
             Source: "legendsCrowdfund"
          Identifier _legendsCrowdfund
             Type: address
             Source: "_legendsCrowdfund"
      ExpressionStatement
         Gas costs: 0
         Source: "start = _start"
        Assignment using operator =
           Type: uint256
           Source: "start = _start"
          Identifier start
             Type: uint256
             Source: "start"
          Identifier _start
             Type: uint256
             Source: "_start"
      ExpressionStatement
         Gas costs: 0
         Source: "testing = _testing"
        Assignment using operator =
           Type: bool
           Source: "testing = _testing"
          Identifier testing
             Type: bool
             Source: "testing"
          Identifier _testing
             Type: bool
             Source: "_testing"
      ExpressionStatement
         Gas costs: 0
         Source: "totalVIP = ownerVIP[_preallocation] = 25000 ether"
        Assignment using operator =
           Type: uint256
           Source: "totalVIP = ownerVIP[_preallocation] = 25000 ether"
          Identifier totalVIP
             Type: uint256
             Source: "totalVIP"
          Assignment using operator =
             Type: uint256
             Source: "ownerVIP[_preallocation] = 25000 ether"
            IndexAccess
               Type: uint256
               Source: "ownerVIP[_preallocation]"
              Identifier ownerVIP
                 Type: mapping(address => uint256)
                 Source: "ownerVIP"
              Identifier _preallocation
                 Type: address
                 Source: "_preallocation"
            Literal, token: [no token] value: 25000
               Type: int_const 25000000000000000000000
               Source: "25000 ether"
  FunctionDefinition "addTokens" - public
     Source: "function addTokens(address recipient, uint VIP) external isNotActive fromCrowdfund {\r\n        ownerVIP[recipient] += VIP;\r\n        totalVIP += VIP;\r\n        Transfer(0x0, recipient, VIP);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address recipient, uint VIP)"
      VariableDeclaration "recipient"
         Type: address
         Source: "address recipient"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "VIP"
         Type: uint256
         Source: "uint VIP"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "isNotActive"
       Gas costs: 0
       Source: "isNotActive"
      Identifier isNotActive
         Type: modifier ()
         Source: "isNotActive"
    ModifierInvocation "fromCrowdfund"
       Gas costs: 0
       Source: "fromCrowdfund"
      Identifier fromCrowdfund
         Type: modifier ()
         Source: "fromCrowdfund"
    Block
       Source: "{\r\n        ownerVIP[recipient] += VIP;\r\n        totalVIP += VIP;\r\n        Transfer(0x0, recipient, VIP);\r\n    }"
      ExpressionStatement
         Gas costs: 20329
         Source: "ownerVIP[recipient] += VIP"
        Assignment using operator +=
           Type: uint256
           Source: "ownerVIP[recipient] += VIP"
          IndexAccess
             Type: uint256
             Source: "ownerVIP[recipient]"
            Identifier ownerVIP
               Type: mapping(address => uint256)
               Source: "ownerVIP"
            Identifier recipient
               Type: address
               Source: "recipient"
          Identifier VIP
             Type: uint256
             Source: "VIP"
      ExpressionStatement
         Gas costs: 20233
         Source: "totalVIP += VIP"
        Assignment using operator +=
           Type: uint256
           Source: "totalVIP += VIP"
          Identifier totalVIP
             Type: uint256
             Source: "totalVIP"
          Identifier VIP
             Type: uint256
             Source: "VIP"
      ExpressionStatement
         Gas costs: 1832
         Source: "Transfer(0x0, recipient, VIP)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(0x0, recipient, VIP)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          Literal, token: [no token] value: 0x0
             Type: int_const 0
             Source: "0x0"
          Identifier recipient
             Type: address
             Source: "recipient"
          Identifier VIP
             Type: uint256
             Source: "VIP"
  FunctionDefinition "totalSupply" - public - const
     Source: "function totalSupply() constant returns (uint256 totalSupply) {\r\n        totalSupply = totalVIP;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256 totalSupply)"
      VariableDeclaration "totalSupply"
         Type: uint256
         Source: "uint256 totalSupply"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        totalSupply = totalVIP;\r\n    }"
      ExpressionStatement
         Gas costs: 208
         Source: "totalSupply = totalVIP"
        Assignment using operator =
           Type: uint256
           Source: "totalSupply = totalVIP"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          Identifier totalVIP
             Type: uint256
             Source: "totalVIP"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        balance = ownerVIP[_owner];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        balance = ownerVIP[_owner];\r\n    }"
      ExpressionStatement
         Gas costs: 304
         Source: "balance = ownerVIP[_owner]"
        Assignment using operator =
           Type: uint256
           Source: "balance = ownerVIP[_owner]"
          Identifier balance
             Type: uint256
             Source: "balance"
          IndexAccess
             Type: uint256
             Source: "ownerVIP[_owner]"
            Identifier ownerVIP
               Type: mapping(address => uint256)
               Source: "ownerVIP"
            Identifier _owner
               Type: address
               Source: "_owner"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) isActive recipientIsValid(_to) returns (bool success) {\r\n        if (ownerVIP[msg.sender] >= _value) {\r\n            ownerVIP[msg.sender] -= _value;\r\n            ownerVIP[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "isActive"
       Gas costs: 0
       Source: "isActive"
      Identifier isActive
         Type: modifier ()
         Source: "isActive"
    ModifierInvocation "recipientIsValid"
       Gas costs: 3
       Source: "recipientIsValid(_to)"
      Identifier recipientIsValid
         Type: modifier (address)
         Source: "recipientIsValid"
      Identifier _to
         Type: address
         Source: "_to"
    Block
       Source: "{\r\n        if (ownerVIP[msg.sender] >= _value) {\r\n            ownerVIP[msg.sender] -= _value;\r\n            ownerVIP[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }"
      IfStatement
         Source: "if (ownerVIP[msg.sender] >= _value) {\r\n            ownerVIP[msg.sender] -= _value;\r\n            ownerVIP[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }"
        BinaryOperation using operator >=
           Type: bool
           Gas costs: 307
           Source: "ownerVIP[msg.sender] >= _value"
          IndexAccess
             Type: uint256
             Source: "ownerVIP[msg.sender]"
            Identifier ownerVIP
               Type: mapping(address => uint256)
               Source: "ownerVIP"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
        Block
           Source: "{\r\n            ownerVIP[msg.sender] -= _value;\r\n            ownerVIP[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }"
          ExpressionStatement
             Gas costs: 20328
             Source: "ownerVIP[msg.sender] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "ownerVIP[msg.sender] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "ownerVIP[msg.sender]"
                Identifier ownerVIP
                   Type: mapping(address => uint256)
                   Source: "ownerVIP"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20323
             Source: "ownerVIP[_to] += _value"
            Assignment using operator +=
               Type: uint256
               Source: "ownerVIP[_to] += _value"
              IndexAccess
                 Type: uint256
                 Source: "ownerVIP[_to]"
                Identifier ownerVIP
                   Type: mapping(address => uint256)
                   Source: "ownerVIP"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 1837
             Source: "Transfer(msg.sender, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(msg.sender, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{\r\n            return false;\r\n        }"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _value) isActive recipientIsValid(_to) returns (bool success) {\r\n        if (allowed[_from][msg.sender] >= _value && ownerVIP[_from] >= _value) {\r\n            ownerVIP[_to] += _value;\r\n            ownerVIP[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "isActive"
       Gas costs: 0
       Source: "isActive"
      Identifier isActive
         Type: modifier ()
         Source: "isActive"
    ModifierInvocation "recipientIsValid"
       Gas costs: 3
       Source: "recipientIsValid(_to)"
      Identifier recipientIsValid
         Type: modifier (address)
         Source: "recipientIsValid"
      Identifier _to
         Type: address
         Source: "_to"
    Block
       Source: "{\r\n        if (allowed[_from][msg.sender] >= _value && ownerVIP[_from] >= _value) {\r\n            ownerVIP[_to] += _value;\r\n            ownerVIP[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }"
      IfStatement
         Source: "if (allowed[_from][msg.sender] >= _value && ownerVIP[_from] >= _value) {\r\n            ownerVIP[_to] += _value;\r\n            ownerVIP[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 727
           Source: "allowed[_from][msg.sender] >= _value && ownerVIP[_from] >= _value"
          BinaryOperation using operator >=
             Type: bool
             Source: "allowed[_from][msg.sender] >= _value"
            IndexAccess
               Type: uint256
               Source: "allowed[_from][msg.sender]"
              IndexAccess
                 Type: mapping(address => uint256)
                 Source: "allowed[_from]"
                Identifier allowed
                   Type: mapping(address => mapping(address => uint256))
                   Source: "allowed"
                Identifier _from
                   Type: address
                   Source: "_from"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
          BinaryOperation using operator >=
             Type: bool
             Source: "ownerVIP[_from] >= _value"
            IndexAccess
               Type: uint256
               Source: "ownerVIP[_from]"
              Identifier ownerVIP
                 Type: mapping(address => uint256)
                 Source: "ownerVIP"
              Identifier _from
                 Type: address
                 Source: "_from"
            Identifier _value
               Type: uint256
               Source: "_value"
        Block
           Source: "{\r\n            ownerVIP[_to] += _value;\r\n            ownerVIP[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }"
          ExpressionStatement
             Gas costs: 20329
             Source: "ownerVIP[_to] += _value"
            Assignment using operator +=
               Type: uint256
               Source: "ownerVIP[_to] += _value"
              IndexAccess
                 Type: uint256
                 Source: "ownerVIP[_to]"
                Identifier ownerVIP
                   Type: mapping(address => uint256)
                   Source: "ownerVIP"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20323
             Source: "ownerVIP[_from] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "ownerVIP[_from] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "ownerVIP[_from]"
                Identifier ownerVIP
                   Type: mapping(address => uint256)
                   Source: "ownerVIP"
                Identifier _from
                   Type: address
                   Source: "_from"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20412
             Source: "allowed[_from][msg.sender] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "allowed[_from][msg.sender] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "allowed[_from][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[_from]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  Identifier _from
                     Type: address
                     Source: "_from"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 1838
             Source: "Transfer(_from, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(_from, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              Identifier _from
                 Type: address
                 Source: "_from"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{\r\n            return false;\r\n        }"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint256 _value) isActive allowanceIsZero(_spender, _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "isActive"
       Gas costs: 0
       Source: "isActive"
      Identifier isActive
         Type: modifier ()
         Source: "isActive"
    ModifierInvocation "allowanceIsZero"
       Gas costs: 6
       Source: "allowanceIsZero(_spender, _value)"
      Identifier allowanceIsZero
         Type: modifier (address,uint256)
         Source: "allowanceIsZero"
      Identifier _spender
         Type: address
         Source: "_spender"
      Identifier _value
         Type: uint256
         Source: "_value"
    Block
       Source: "{\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 20199
         Source: "allowed[msg.sender][_spender] = _value"
        Assignment using operator =
           Type: uint256
           Source: "allowed[msg.sender][_spender] = _value"
          IndexAccess
             Type: uint256
             Source: "allowed[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[msg.sender]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 1837
         Source: "Approval(msg.sender, _spender, _value)"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender, _spender, _value)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        remaining = allowed[_owner][_spender];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint256 remaining"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        remaining = allowed[_owner][_spender];\r\n    }"
      ExpressionStatement
         Gas costs: 394
         Source: "remaining = allowed[_owner][_spender]"
        Assignment using operator =
           Type: uint256
           Source: "remaining = allowed[_owner][_spender]"
          Identifier remaining
             Type: uint256
             Source: "remaining"
          IndexAccess
             Type: uint256
             Source: "allowed[_owner][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[_owner]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              Identifier _owner
                 Type: address
                 Source: "_owner"
            Identifier _spender
               Type: address
               Source: "_spender"
  FunctionDefinition "" - public
     Source: "function () payable {\r\n        LegendsCrowdfund(legendsCrowdfund).purchaseMembership.value(msg.value)(msg.sender, msg.sender);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        LegendsCrowdfund(legendsCrowdfund).purchaseMembership.value(msg.value)(msg.sender, msg.sender);\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "LegendsCrowdfund(legendsCrowdfund).purchaseMembership.value(msg.value)(msg.sender, msg.sender)"
        FunctionCall
           Type: tuple()
           Source: "LegendsCrowdfund(legendsCrowdfund).purchaseMembership.value(msg.value)(msg.sender, msg.sender)"
          FunctionCall
             Type: function (address,address) payable external
             Source: "LegendsCrowdfund(legendsCrowdfund).purchaseMembership.value(msg.value)"
            MemberAccess to member value
               Type: function (uint256) returns (function (address,address) payable external)
               Source: "LegendsCrowdfund(legendsCrowdfund).purchaseMembership.value"
              MemberAccess to member purchaseMembership
                 Type: function (address,address) payable external
                 Source: "LegendsCrowdfund(legendsCrowdfund).purchaseMembership"
                FunctionCall
                   Type: contract LegendsCrowdfund
                   Source: "LegendsCrowdfund(legendsCrowdfund)"
                  Identifier LegendsCrowdfund
                     Type: type(contract LegendsCrowdfund)
                     Source: "LegendsCrowdfund"
                  Identifier legendsCrowdfund
                     Type: address
                     Source: "legendsCrowdfund"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "purchaseMembership" - public
     Source: "function purchaseMembership(address recipient) payable {\r\n        LegendsCrowdfund(legendsCrowdfund).purchaseMembership.value(msg.value)(msg.sender, recipient);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address recipient)"
      VariableDeclaration "recipient"
         Type: address
         Source: "address recipient"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        LegendsCrowdfund(legendsCrowdfund).purchaseMembership.value(msg.value)(msg.sender, recipient);\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "LegendsCrowdfund(legendsCrowdfund).purchaseMembership.value(msg.value)(msg.sender, recipient)"
        FunctionCall
           Type: tuple()
           Source: "LegendsCrowdfund(legendsCrowdfund).purchaseMembership.value(msg.value)(msg.sender, recipient)"
          FunctionCall
             Type: function (address,address) payable external
             Source: "LegendsCrowdfund(legendsCrowdfund).purchaseMembership.value(msg.value)"
            MemberAccess to member value
               Type: function (uint256) returns (function (address,address) payable external)
               Source: "LegendsCrowdfund(legendsCrowdfund).purchaseMembership.value"
              MemberAccess to member purchaseMembership
                 Type: function (address,address) payable external
                 Source: "LegendsCrowdfund(legendsCrowdfund).purchaseMembership"
                FunctionCall
                   Type: contract LegendsCrowdfund
                   Source: "LegendsCrowdfund(legendsCrowdfund)"
                  Identifier LegendsCrowdfund
                     Type: type(contract LegendsCrowdfund)
                     Source: "LegendsCrowdfund"
                  Identifier legendsCrowdfund
                     Type: address
                     Source: "legendsCrowdfund"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier recipient
             Type: address
             Source: "recipient"
