Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0x9c794584b2f482653937b529647924606446e7f4.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.8;"
ContractDefinition "testingToken"
   Source: "contract testingToken {\r\n\tmapping (address => uint256) public balanceOf;\r\n\tmapping (address => uint256) public weiWantedOf;\r\n\tmapping (address => uint256) public tokensOfferedOf;\r\n\tmapping (address => bool) public tradeActive;\r\n\taddress public bank;\r\n\tuint256 public ethTaxRate = 10;\r\n\tuint256 public tokenTaxRate = 5;\r\n\tfunction testingToken() {\r\n\t\tbank = msg.sender;\r\n\t\tbalanceOf[msg.sender] = 100000;\r\n\t}\r\n\t\r\n\tfunction send(address _to, uint256 _value) { //give tokens to someone\r\n\t\tif (balanceOf[msg.sender]<_value) throw;\r\n\t\tif (balanceOf[_to]+_value<balanceOf[_to]) throw;\r\n\t\tif (_value<0) throw;\r\n\t\tbalanceOf[msg.sender] -= _value;\r\n\t\tbalanceOf[_to] += (_value*(100-tokenTaxRate))/100;\r\n\t}\r\n\t\r\n\tfunction offerTrade(uint256 _weiWanted, uint256 _tokensOffered) { //offer the amt of ether you want and the amt of tokens youd give\r\n\t    weiWantedOf[msg.sender] = _weiWanted;\r\n\t    tokensOfferedOf[msg.sender] = _tokensOffered;\r\n\t    tradeActive[msg.sender] = true;\r\n\t}\r\n\tfunction agreeToTrade(address _from) payable { //choose a trade to agree to and execute it\r\n\t    if (!tradeActive[_from]) throw;\r\n\t    if (weiWantedOf[_from]!=msg.value) throw;\r\n\t    if (balanceOf[_from]<tokensOfferedOf[_from]) throw;\r\n\t    if (!_from.send((msg.value*(100-ethTaxRate))/100)) throw;\r\n\t    balanceOf[_from] -= tokensOfferedOf[_from];\r\n\t    balanceOf[msg.sender] += (tokensOfferedOf[_from]*(100-tokenTaxRate))/100;\r\n\t\tbalanceOf[bank] += (tokensOfferedOf[_from]*tokenTaxRate)/100;\r\n\t\ttradeActive[_from] = false;\r\n\t}\r\n\t\r\n\tmodifier bankOnly {\r\n\t\tif (msg.sender != bank) throw;\r\n\t\t_;\r\n\t}\r\n\t\r\n\tfunction setTaxes(uint256 _ethTaxRate, uint256 _tokenTaxRate) bankOnly { //the bank can change the tax rates\r\n\t\tethTaxRate = _ethTaxRate;\r\n\t\ttokenTaxRate = _tokenTaxRate;\r\n\t}\r\n\tfunction extractWei(uint256 _wei) bankOnly { //withdraw money from the contract\r\n\t\tif (!msg.sender.send(_wei)) throw;\r\n\t}\r\n\tfunction transferOwnership(address _bank) bankOnly { //change owner\r\n\t\tbank = _bank;\r\n\t}\r\n}"
  VariableDeclaration "balanceOf"
     Type: mapping(address => uint256)
     Gas costs: 431
     Source: "mapping (address => uint256) public balanceOf"
    Mapping
       Source: "mapping (address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "weiWantedOf"
     Type: mapping(address => uint256)
     Gas costs: 431
     Source: "mapping (address => uint256) public weiWantedOf"
    Mapping
       Source: "mapping (address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "tokensOfferedOf"
     Type: mapping(address => uint256)
     Gas costs: 431
     Source: "mapping (address => uint256) public tokensOfferedOf"
    Mapping
       Source: "mapping (address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "tradeActive"
     Type: mapping(address => bool)
     Gas costs: 468
     Source: "mapping (address => bool) public tradeActive"
    Mapping
       Source: "mapping (address => bool)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName bool
         Source: "bool"
  VariableDeclaration "bank"
     Type: address
     Gas costs: 335
     Source: "address public bank"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "ethTaxRate"
     Type: uint256
     Gas costs: 287
     Source: "uint256 public ethTaxRate = 10"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 10
       Type: int_const 10
       Source: "10"
  VariableDeclaration "tokenTaxRate"
     Type: uint256
     Gas costs: 287
     Source: "uint256 public tokenTaxRate = 5"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 5
       Type: int_const 5
       Source: "5"
  FunctionDefinition "testingToken" - public
     Source: "function testingToken() {\r\n\t\tbank = msg.sender;\r\n\t\tbalanceOf[msg.sender] = 100000;\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n\t\tbank = msg.sender;\r\n\t\tbalanceOf[msg.sender] = 100000;\r\n\t}"
      ExpressionStatement
         Gas costs: 0
         Source: "bank = msg.sender"
        Assignment using operator =
           Type: address
           Source: "bank = msg.sender"
          Identifier bank
             Type: address
             Source: "bank"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 0
         Source: "balanceOf[msg.sender] = 100000"
        Assignment using operator =
           Type: uint256
           Source: "balanceOf[msg.sender] = 100000"
          IndexAccess
             Type: uint256
             Source: "balanceOf[msg.sender]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Literal, token: [no token] value: 100000
             Type: int_const 100000
             Source: "100000"
  FunctionDefinition "send" - public
     Source: "function send(address _to, uint256 _value) { //give tokens to someone\r\n\t\tif (balanceOf[msg.sender]<_value) throw;\r\n\t\tif (balanceOf[_to]+_value<balanceOf[_to]) throw;\r\n\t\tif (_value<0) throw;\r\n\t\tbalanceOf[msg.sender] -= _value;\r\n\t\tbalanceOf[_to] += (_value*(100-tokenTaxRate))/100;\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{ //give tokens to someone\r\n\t\tif (balanceOf[msg.sender]<_value) throw;\r\n\t\tif (balanceOf[_to]+_value<balanceOf[_to]) throw;\r\n\t\tif (_value<0) throw;\r\n\t\tbalanceOf[msg.sender] -= _value;\r\n\t\tbalanceOf[_to] += (_value*(100-tokenTaxRate))/100;\r\n\t}"
      IfStatement
         Source: "if (balanceOf[msg.sender]<_value) throw"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 304
           Source: "balanceOf[msg.sender]<_value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[msg.sender]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
        Throw
           Gas costs: 6
           Source: "throw"
      IfStatement
         Source: "if (balanceOf[_to]+_value<balanceOf[_to]) throw"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 601
           Source: "balanceOf[_to]+_value<balanceOf[_to]"
          BinaryOperation using operator +
             Type: uint256
             Source: "balanceOf[_to]+_value"
            IndexAccess
               Type: uint256
               Source: "balanceOf[_to]"
              Identifier balanceOf
                 Type: mapping(address => uint256)
                 Source: "balanceOf"
              Identifier _to
                 Type: address
                 Source: "_to"
            Identifier _value
               Type: uint256
               Source: "_value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[_to]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier _to
               Type: address
               Source: "_to"
        Throw
           Gas costs: 6
           Source: "throw"
      IfStatement
         Source: "if (_value<0) throw"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 9
           Source: "_value<0"
          Identifier _value
             Type: uint256
             Source: "_value"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Throw
           Gas costs: 6
           Source: "throw"
      ExpressionStatement
         Gas costs: 20328
         Source: "balanceOf[msg.sender] -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "balanceOf[msg.sender] -= _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[msg.sender]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 20574
         Source: "balanceOf[_to] += (_value*(100-tokenTaxRate))/100"
        Assignment using operator +=
           Type: uint256
           Source: "balanceOf[_to] += (_value*(100-tokenTaxRate))/100"
          IndexAccess
             Type: uint256
             Source: "balanceOf[_to]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier _to
               Type: address
               Source: "_to"
          BinaryOperation using operator /
             Type: uint256
             Source: "(_value*(100-tokenTaxRate))/100"
            TupleExpression
               Type: uint256
               Source: "(_value*(100-tokenTaxRate))"
              BinaryOperation using operator *
                 Type: uint256
                 Source: "_value*(100-tokenTaxRate)"
                Identifier _value
                   Type: uint256
                   Source: "_value"
                TupleExpression
                   Type: uint256
                   Source: "(100-tokenTaxRate)"
                  BinaryOperation using operator -
                     Type: uint256
                     Source: "100-tokenTaxRate"
                    Literal, token: [no token] value: 100
                       Type: int_const 100
                       Source: "100"
                    Identifier tokenTaxRate
                       Type: uint256
                       Source: "tokenTaxRate"
            Literal, token: [no token] value: 100
               Type: int_const 100
               Source: "100"
  FunctionDefinition "offerTrade" - public
     Source: "function offerTrade(uint256 _weiWanted, uint256 _tokensOffered) { //offer the amt of ether you want and the amt of tokens youd give\r\n\t    weiWantedOf[msg.sender] = _weiWanted;\r\n\t    tokensOfferedOf[msg.sender] = _tokensOffered;\r\n\t    tradeActive[msg.sender] = true;\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _weiWanted, uint256 _tokensOffered)"
      VariableDeclaration "_weiWanted"
         Type: uint256
         Source: "uint256 _weiWanted"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_tokensOffered"
         Type: uint256
         Source: "uint256 _tokensOffered"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{ //offer the amt of ether you want and the amt of tokens youd give\r\n\t    weiWantedOf[msg.sender] = _weiWanted;\r\n\t    tokensOfferedOf[msg.sender] = _tokensOffered;\r\n\t    tradeActive[msg.sender] = true;\r\n\t}"
      ExpressionStatement
         Gas costs: 20109
         Source: "weiWantedOf[msg.sender] = _weiWanted"
        Assignment using operator =
           Type: uint256
           Source: "weiWantedOf[msg.sender] = _weiWanted"
          IndexAccess
             Type: uint256
             Source: "weiWantedOf[msg.sender]"
            Identifier weiWantedOf
               Type: mapping(address => uint256)
               Source: "weiWantedOf"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _weiWanted
             Type: uint256
             Source: "_weiWanted"
      ExpressionStatement
         Gas costs: 20103
         Source: "tokensOfferedOf[msg.sender] = _tokensOffered"
        Assignment using operator =
           Type: uint256
           Source: "tokensOfferedOf[msg.sender] = _tokensOffered"
          IndexAccess
             Type: uint256
             Source: "tokensOfferedOf[msg.sender]"
            Identifier tokensOfferedOf
               Type: mapping(address => uint256)
               Source: "tokensOfferedOf"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _tokensOffered
             Type: uint256
             Source: "_tokensOffered"
      ExpressionStatement
         Gas costs: 20356
         Source: "tradeActive[msg.sender] = true"
        Assignment using operator =
           Type: bool
           Source: "tradeActive[msg.sender] = true"
          IndexAccess
             Type: bool
             Source: "tradeActive[msg.sender]"
            Identifier tradeActive
               Type: mapping(address => bool)
               Source: "tradeActive"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Literal, token: true value: true
             Type: bool
             Source: "true"
  FunctionDefinition "agreeToTrade" - public
     Source: "function agreeToTrade(address _from) payable { //choose a trade to agree to and execute it\r\n\t    if (!tradeActive[_from]) throw;\r\n\t    if (weiWantedOf[_from]!=msg.value) throw;\r\n\t    if (balanceOf[_from]<tokensOfferedOf[_from]) throw;\r\n\t    if (!_from.send((msg.value*(100-ethTaxRate))/100)) throw;\r\n\t    balanceOf[_from] -= tokensOfferedOf[_from];\r\n\t    balanceOf[msg.sender] += (tokensOfferedOf[_from]*(100-tokenTaxRate))/100;\r\n\t\tbalanceOf[bank] += (tokensOfferedOf[_from]*tokenTaxRate)/100;\r\n\t\ttradeActive[_from] = false;\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "(address _from)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{ //choose a trade to agree to and execute it\r\n\t    if (!tradeActive[_from]) throw;\r\n\t    if (weiWantedOf[_from]!=msg.value) throw;\r\n\t    if (balanceOf[_from]<tokensOfferedOf[_from]) throw;\r\n\t    if (!_from.send((msg.value*(100-ethTaxRate))/100)) throw;\r\n\t    balanceOf[_from] -= tokensOfferedOf[_from];\r\n\t    balanceOf[msg.sender] += (tokensOfferedOf[_from]*(100-tokenTaxRate))/100;\r\n\t\tbalanceOf[bank] += (tokensOfferedOf[_from]*tokenTaxRate)/100;\r\n\t\ttradeActive[_from] = false;\r\n\t}"
      IfStatement
         Source: "if (!tradeActive[_from]) throw"
        UnaryOperation (prefix) !
           Type: bool
           Gas costs: 338
           Source: "!tradeActive[_from]"
          IndexAccess
             Type: bool
             Source: "tradeActive[_from]"
            Identifier tradeActive
               Type: mapping(address => bool)
               Source: "tradeActive"
            Identifier _from
               Type: address
               Source: "_from"
        Throw
           Gas costs: 6
           Source: "throw"
      IfStatement
         Source: "if (weiWantedOf[_from]!=msg.value) throw"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 307
           Source: "weiWantedOf[_from]!=msg.value"
          IndexAccess
             Type: uint256
             Source: "weiWantedOf[_from]"
            Identifier weiWantedOf
               Type: mapping(address => uint256)
               Source: "weiWantedOf"
            Identifier _from
               Type: address
               Source: "_from"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
        Throw
           Gas costs: 6
           Source: "throw"
      IfStatement
         Source: "if (balanceOf[_from]<tokensOfferedOf[_from]) throw"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 595
           Source: "balanceOf[_from]<tokensOfferedOf[_from]"
          IndexAccess
             Type: uint256
             Source: "balanceOf[_from]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier _from
               Type: address
               Source: "_from"
          IndexAccess
             Type: uint256
             Source: "tokensOfferedOf[_from]"
            Identifier tokensOfferedOf
               Type: mapping(address => uint256)
               Source: "tokensOfferedOf"
            Identifier _from
               Type: address
               Source: "_from"
        Throw
           Gas costs: 6
           Source: "throw"
      IfStatement
         Source: "if (!_from.send((msg.value*(100-ethTaxRate))/100)) throw"
        UnaryOperation (prefix) !
           Type: bool
           Gas costs: [???]
           Source: "!_from.send((msg.value*(100-ethTaxRate))/100)"
          FunctionCall
             Type: bool
             Source: "_from.send((msg.value*(100-ethTaxRate))/100)"
            MemberAccess to member send
               Type: function (uint256) returns (bool)
               Source: "_from.send"
              Identifier _from
                 Type: address
                 Source: "_from"
            BinaryOperation using operator /
               Type: uint256
               Source: "(msg.value*(100-ethTaxRate))/100"
              TupleExpression
                 Type: uint256
                 Source: "(msg.value*(100-ethTaxRate))"
                BinaryOperation using operator *
                   Type: uint256
                   Source: "msg.value*(100-ethTaxRate)"
                  MemberAccess to member value
                     Type: uint256
                     Source: "msg.value"
                    Identifier msg
                       Type: msg
                       Source: "msg"
                  TupleExpression
                     Type: uint256
                     Source: "(100-ethTaxRate)"
                    BinaryOperation using operator -
                       Type: uint256
                       Source: "100-ethTaxRate"
                      Literal, token: [no token] value: 100
                         Type: int_const 100
                         Source: "100"
                      Identifier ethTaxRate
                         Type: uint256
                         Source: "ethTaxRate"
              Literal, token: [no token] value: 100
                 Type: int_const 100
                 Source: "100"
        Throw
           Gas costs: 6
           Source: "throw"
      ExpressionStatement
         Gas costs: 20619
         Source: "balanceOf[_from] -= tokensOfferedOf[_from]"
        Assignment using operator -=
           Type: uint256
           Source: "balanceOf[_from] -= tokensOfferedOf[_from]"
          IndexAccess
             Type: uint256
             Source: "balanceOf[_from]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier _from
               Type: address
               Source: "_from"
          IndexAccess
             Type: uint256
             Source: "tokensOfferedOf[_from]"
            Identifier tokensOfferedOf
               Type: mapping(address => uint256)
               Source: "tokensOfferedOf"
            Identifier _from
               Type: address
               Source: "_from"
      ExpressionStatement
         Gas costs: 20863
         Source: "balanceOf[msg.sender] += (tokensOfferedOf[_from]*(100-tokenTaxRate))/100"
        Assignment using operator +=
           Type: uint256
           Source: "balanceOf[msg.sender] += (tokensOfferedOf[_from]*(100-tokenTaxRate))/100"
          IndexAccess
             Type: uint256
             Source: "balanceOf[msg.sender]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          BinaryOperation using operator /
             Type: uint256
             Source: "(tokensOfferedOf[_from]*(100-tokenTaxRate))/100"
            TupleExpression
               Type: uint256
               Source: "(tokensOfferedOf[_from]*(100-tokenTaxRate))"
              BinaryOperation using operator *
                 Type: uint256
                 Source: "tokensOfferedOf[_from]*(100-tokenTaxRate)"
                IndexAccess
                   Type: uint256
                   Source: "tokensOfferedOf[_from]"
                  Identifier tokensOfferedOf
                     Type: mapping(address => uint256)
                     Source: "tokensOfferedOf"
                  Identifier _from
                     Type: address
                     Source: "_from"
                TupleExpression
                   Type: uint256
                   Source: "(100-tokenTaxRate)"
                  BinaryOperation using operator -
                     Type: uint256
                     Source: "100-tokenTaxRate"
                    Literal, token: [no token] value: 100
                       Type: int_const 100
                       Source: "100"
                    Identifier tokenTaxRate
                       Type: uint256
                       Source: "tokenTaxRate"
            Literal, token: [no token] value: 100
               Type: int_const 100
               Source: "100"
      ExpressionStatement
         Gas costs: 21094
         Source: "balanceOf[bank] += (tokensOfferedOf[_from]*tokenTaxRate)/100"
        Assignment using operator +=
           Type: uint256
           Source: "balanceOf[bank] += (tokensOfferedOf[_from]*tokenTaxRate)/100"
          IndexAccess
             Type: uint256
             Source: "balanceOf[bank]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier bank
               Type: address
               Source: "bank"
          BinaryOperation using operator /
             Type: uint256
             Source: "(tokensOfferedOf[_from]*tokenTaxRate)/100"
            TupleExpression
               Type: uint256
               Source: "(tokensOfferedOf[_from]*tokenTaxRate)"
              BinaryOperation using operator *
                 Type: uint256
                 Source: "tokensOfferedOf[_from]*tokenTaxRate"
                IndexAccess
                   Type: uint256
                   Source: "tokensOfferedOf[_from]"
                  Identifier tokensOfferedOf
                     Type: mapping(address => uint256)
                     Source: "tokensOfferedOf"
                  Identifier _from
                     Type: address
                     Source: "_from"
                Identifier tokenTaxRate
                   Type: uint256
                   Source: "tokenTaxRate"
            Literal, token: [no token] value: 100
               Type: int_const 100
               Source: "100"
      ExpressionStatement
         Gas costs: 20357
         Source: "tradeActive[_from] = false"
        Assignment using operator =
           Type: bool
           Source: "tradeActive[_from] = false"
          IndexAccess
             Type: bool
             Source: "tradeActive[_from]"
            Identifier tradeActive
               Type: mapping(address => bool)
               Source: "tradeActive"
            Identifier _from
               Type: address
               Source: "_from"
          Literal, token: false value: false
             Type: bool
             Source: "false"
  ModifierDefinition "bankOnly"
     Source: "modifier bankOnly {\r\n\t\tif (msg.sender != bank) throw;\r\n\t\t_;\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n\t\tif (msg.sender != bank) throw;\r\n\t\t_;\r\n\t}"
      IfStatement
         Source: "if (msg.sender != bank) throw"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 777
           Source: "msg.sender != bank"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier bank
             Type: address
             Source: "bank"
        Throw
           Gas costs: 18
           Source: "throw"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "setTaxes" - public
     Source: "function setTaxes(uint256 _ethTaxRate, uint256 _tokenTaxRate) bankOnly { //the bank can change the tax rates\r\n\t\tethTaxRate = _ethTaxRate;\r\n\t\ttokenTaxRate = _tokenTaxRate;\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _ethTaxRate, uint256 _tokenTaxRate)"
      VariableDeclaration "_ethTaxRate"
         Type: uint256
         Source: "uint256 _ethTaxRate"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_tokenTaxRate"
         Type: uint256
         Source: "uint256 _tokenTaxRate"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "bankOnly"
       Gas costs: 0
       Source: "bankOnly"
      Identifier bankOnly
         Type: modifier ()
         Source: "bankOnly"
    Block
       Source: "{ //the bank can change the tax rates\r\n\t\tethTaxRate = _ethTaxRate;\r\n\t\ttokenTaxRate = _tokenTaxRate;\r\n\t}"
      ExpressionStatement
         Gas costs: 20014
         Source: "ethTaxRate = _ethTaxRate"
        Assignment using operator =
           Type: uint256
           Source: "ethTaxRate = _ethTaxRate"
          Identifier ethTaxRate
             Type: uint256
             Source: "ethTaxRate"
          Identifier _ethTaxRate
             Type: uint256
             Source: "_ethTaxRate"
      ExpressionStatement
         Gas costs: 20014
         Source: "tokenTaxRate = _tokenTaxRate"
        Assignment using operator =
           Type: uint256
           Source: "tokenTaxRate = _tokenTaxRate"
          Identifier tokenTaxRate
             Type: uint256
             Source: "tokenTaxRate"
          Identifier _tokenTaxRate
             Type: uint256
             Source: "_tokenTaxRate"
  FunctionDefinition "extractWei" - public
     Source: "function extractWei(uint256 _wei) bankOnly { //withdraw money from the contract\r\n\t\tif (!msg.sender.send(_wei)) throw;\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _wei)"
      VariableDeclaration "_wei"
         Type: uint256
         Source: "uint256 _wei"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "bankOnly"
       Gas costs: 0
       Source: "bankOnly"
      Identifier bankOnly
         Type: modifier ()
         Source: "bankOnly"
    Block
       Source: "{ //withdraw money from the contract\r\n\t\tif (!msg.sender.send(_wei)) throw;\r\n\t}"
      IfStatement
         Source: "if (!msg.sender.send(_wei)) throw"
        UnaryOperation (prefix) !
           Type: bool
           Gas costs: [???]
           Source: "!msg.sender.send(_wei)"
          FunctionCall
             Type: bool
             Source: "msg.sender.send(_wei)"
            MemberAccess to member send
               Type: function (uint256) returns (bool)
               Source: "msg.sender.send"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _wei
               Type: uint256
               Source: "_wei"
        Throw
           Gas costs: 6
           Source: "throw"
  FunctionDefinition "transferOwnership" - public
     Source: "function transferOwnership(address _bank) bankOnly { //change owner\r\n\t\tbank = _bank;\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "(address _bank)"
      VariableDeclaration "_bank"
         Type: address
         Source: "address _bank"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "bankOnly"
       Gas costs: 0
       Source: "bankOnly"
      Identifier bankOnly
         Type: modifier ()
         Source: "bankOnly"
    Block
       Source: "{ //change owner\r\n\t\tbank = _bank;\r\n\t}"
      ExpressionStatement
         Gas costs: 20267
         Source: "bank = _bank"
        Assignment using operator =
           Type: address
           Source: "bank = _bank"
          Identifier bank
             Type: address
             Source: "bank"
          Identifier _bank
             Type: address
             Source: "_bank"
