Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0x190e569be071f40c704e15825f285481cb74b6cc.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.11;"
ContractDefinition "ERC20Standard"
   Source: "contract ERC20Standard {\r\n\tuint public totalSupply;\r\n\t\r\n\tstring public name;\r\n\tuint8 public decimals;\r\n\tstring public symbol;\r\n\tstring public version;\r\n\t\r\n\tmapping (address => uint256) balances;\r\n\tmapping (address => mapping (address => uint)) allowed;\r\n\r\n\t//Fix for short address attack against ERC20\r\n\tmodifier onlyPayloadSize(uint size) {\r\n\t\tassert(msg.data.length == size + 4);\r\n\t\t_;\r\n\t} \r\n\r\n\tfunction balanceOf(address _owner) constant returns (uint balance) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n\r\n\tfunction transfer(address _recipient, uint _value) onlyPayloadSize(2*32) {\r\n\t\trequire(balances[msg.sender] >= _value && _value > 0);\r\n\t    balances[msg.sender] -= _value;\r\n\t    balances[_recipient] += _value;\r\n\t    Transfer(msg.sender, _recipient, _value);        \r\n    }\r\n\r\n\tfunction transferFrom(address _from, address _to, uint _value) {\r\n\t\trequire(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n    }\r\n\r\n\tfunction approve(address _spender, uint _value) {\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\tApproval(msg.sender, _spender, _value);\r\n\t}\r\n\r\n\tfunction allowance(address _spender, address _owner) constant returns (uint balance) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\r\n\t//Event which is triggered to log all transfers to this contract's event log\r\n\tevent Transfer(\r\n\t\taddress indexed _from,\r\n\t\taddress indexed _to,\r\n\t\tuint _value\r\n\t\t);\r\n\t\t\r\n\t//Event which is triggered whenever an owner approves a new allowance for a spender.\r\n\tevent Approval(\r\n\t\taddress indexed _owner,\r\n\t\taddress indexed _spender,\r\n\t\tuint _value\r\n\t\t);\r\n\r\n}"
  VariableDeclaration "totalSupply"
     Type: uint256
     Gas costs: 287
     Source: "uint public totalSupply"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "name"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public name"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "decimals"
     Type: uint8
     Gas costs: 335
     Source: "uint8 public decimals"
    ElementaryTypeName uint8
       Source: "uint8"
  VariableDeclaration "symbol"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public symbol"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "version"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public version"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping (address => uint256) balances"
    Mapping
       Source: "mapping (address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "allowed"
     Type: mapping(address => mapping(address => uint256))
     Gas costs: 0
     Source: "mapping (address => mapping (address => uint)) allowed"
    Mapping
       Source: "mapping (address => mapping (address => uint))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping (address => uint)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint
           Source: "uint"
  ModifierDefinition "onlyPayloadSize"
     Source: "modifier onlyPayloadSize(uint size) {\r\n\t\tassert(msg.data.length == size + 4);\r\n\t\t_;\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "(uint size)"
      VariableDeclaration "size"
         Type: uint256
         Source: "uint size"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n\t\tassert(msg.data.length == size + 4);\r\n\t\t_;\r\n\t}"
      ExpressionStatement
         Gas costs: 42
         Source: "assert(msg.data.length == size + 4)"
        FunctionCall
           Type: tuple()
           Source: "assert(msg.data.length == size + 4)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.data.length == size + 4"
            MemberAccess to member length
               Type: uint256
               Source: "msg.data.length"
              MemberAccess to member data
                 Type: bytes calldata
                 Source: "msg.data"
                Identifier msg
                   Type: msg
                   Source: "msg"
            BinaryOperation using operator +
               Type: uint256
               Source: "size + 4"
              Identifier size
                 Type: uint256
                 Source: "size"
              Literal, token: [no token] value: 4
                 Type: int_const 4
                 Source: "4"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) constant returns (uint balance) {\r\n\t\treturn balances[_owner];\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint balance"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n\t\treturn balances[_owner];\r\n\t}"
      Return
         Gas costs: 304
         Source: "return balances[_owner]"
        IndexAccess
           Type: uint256
           Source: "balances[_owner]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          Identifier _owner
             Type: address
             Source: "_owner"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _recipient, uint _value) onlyPayloadSize(2*32) {\r\n\t\trequire(balances[msg.sender] >= _value && _value > 0);\r\n\t    balances[msg.sender] -= _value;\r\n\t    balances[_recipient] += _value;\r\n\t    Transfer(msg.sender, _recipient, _value);        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _recipient, uint _value)"
      VariableDeclaration "_recipient"
         Type: address
         Source: "address _recipient"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyPayloadSize"
       Gas costs: 3
       Source: "onlyPayloadSize(2*32)"
      Identifier onlyPayloadSize
         Type: modifier (uint256)
         Source: "onlyPayloadSize"
      BinaryOperation using operator *
         Type: int_const 64
         Source: "2*32"
        Literal, token: [no token] value: 2
           Type: int_const 2
           Source: "2"
        Literal, token: [no token] value: 32
           Type: int_const 32
           Source: "32"
    Block
       Source: "{\r\n\t\trequire(balances[msg.sender] >= _value && _value > 0);\r\n\t    balances[msg.sender] -= _value;\r\n\t    balances[_recipient] += _value;\r\n\t    Transfer(msg.sender, _recipient, _value);        \r\n    }"
      ExpressionStatement
         Gas costs: 364
         Source: "require(balances[msg.sender] >= _value && _value > 0)"
        FunctionCall
           Type: tuple()
           Source: "require(balances[msg.sender] >= _value && _value > 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator &&
             Type: bool
             Source: "balances[msg.sender] >= _value && _value > 0"
            BinaryOperation using operator >=
               Type: bool
               Source: "balances[msg.sender] >= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
            BinaryOperation using operator >
               Type: bool
               Source: "_value > 0"
              Identifier _value
                 Type: uint256
                 Source: "_value"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      ExpressionStatement
         Gas costs: 20328
         Source: "balances[msg.sender] -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "balances[msg.sender] -= _value"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 20323
         Source: "balances[_recipient] += _value"
        Assignment using operator +=
           Type: uint256
           Source: "balances[_recipient] += _value"
          IndexAccess
             Type: uint256
             Source: "balances[_recipient]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _recipient
               Type: address
               Source: "_recipient"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 1837
         Source: "Transfer(msg.sender, _recipient, _value)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(msg.sender, _recipient, _value)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _recipient
             Type: address
             Source: "_recipient"
          Identifier _value
             Type: uint256
             Source: "_value"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint _value) {\r\n\t\trequire(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n\t\trequire(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n    }"
      ExpressionStatement
         Gas costs: 784
         Source: "require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0)"
        FunctionCall
           Type: tuple()
           Source: "require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator &&
             Type: bool
             Source: "balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0"
            BinaryOperation using operator &&
               Type: bool
               Source: "balances[_from] >= _value && allowed[_from][msg.sender] >= _value"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "balances[_from] >= _value"
                IndexAccess
                   Type: uint256
                   Source: "balances[_from]"
                  Identifier balances
                     Type: mapping(address => uint256)
                     Source: "balances"
                  Identifier _from
                     Type: address
                     Source: "_from"
                Identifier _value
                   Type: uint256
                   Source: "_value"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "allowed[_from][msg.sender] >= _value"
                IndexAccess
                   Type: uint256
                   Source: "allowed[_from][msg.sender]"
                  IndexAccess
                     Type: mapping(address => uint256)
                     Source: "allowed[_from]"
                    Identifier allowed
                       Type: mapping(address => mapping(address => uint256))
                       Source: "allowed"
                    Identifier _from
                       Type: address
                       Source: "_from"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
                Identifier _value
                   Type: uint256
                   Source: "_value"
            BinaryOperation using operator >
               Type: bool
               Source: "_value > 0"
              Identifier _value
                 Type: uint256
                 Source: "_value"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      ExpressionStatement
         Gas costs: 20329
         Source: "balances[_to] += _value"
        Assignment using operator +=
           Type: uint256
           Source: "balances[_to] += _value"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 20323
         Source: "balances[_from] -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "balances[_from] -= _value"
          IndexAccess
             Type: uint256
             Source: "balances[_from]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _from
               Type: address
               Source: "_from"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 20412
         Source: "allowed[_from][msg.sender] -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "allowed[_from][msg.sender] -= _value"
          IndexAccess
             Type: uint256
             Source: "allowed[_from][msg.sender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[_from]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              Identifier _from
                 Type: address
                 Source: "_from"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 1838
         Source: "Transfer(_from, _to, _value)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(_from, _to, _value)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint _value) {\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\tApproval(msg.sender, _spender, _value);\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\tApproval(msg.sender, _spender, _value);\r\n\t}"
      ExpressionStatement
         Gas costs: 20199
         Source: "allowed[msg.sender][_spender] = _value"
        Assignment using operator =
           Type: uint256
           Source: "allowed[msg.sender][_spender] = _value"
          IndexAccess
             Type: uint256
             Source: "allowed[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[msg.sender]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 1837
         Source: "Approval(msg.sender, _spender, _value)"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender, _spender, _value)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _spender, address _owner) constant returns (uint balance) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, address _owner)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint balance"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n\t\treturn allowed[_owner][_spender];\r\n\t}"
      Return
         Gas costs: 394
         Source: "return allowed[_owner][_spender]"
        IndexAccess
           Type: uint256
           Source: "allowed[_owner][_spender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowed[_owner]"
            Identifier allowed
               Type: mapping(address => mapping(address => uint256))
               Source: "allowed"
            Identifier _owner
               Type: address
               Source: "_owner"
          Identifier _spender
             Type: address
             Source: "_spender"
  EventDefinition "Transfer"
     Gas costs: 0
     Source: "event Transfer(\r\n\t\taddress indexed _from,\r\n\t\taddress indexed _to,\r\n\t\tuint _value\r\n\t\t);"
    ParameterList
       Source: "(\r\n\t\taddress indexed _from,\r\n\t\taddress indexed _to,\r\n\t\tuint _value\r\n\t\t)"
      VariableDeclaration "_from"
         Type: address
         Source: "address indexed _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address indexed _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "Approval"
     Gas costs: 0
     Source: "event Approval(\r\n\t\taddress indexed _owner,\r\n\t\taddress indexed _spender,\r\n\t\tuint _value\r\n\t\t);"
    ParameterList
       Source: "(\r\n\t\taddress indexed _owner,\r\n\t\taddress indexed _spender,\r\n\t\tuint _value\r\n\t\t)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address indexed _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address indexed _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
ContractDefinition "FAMEToken"
   Source: "contract FAMEToken is ERC20Standard {\r\n\r\n\tfunction FAMEToken() {\r\n\t\ttotalSupply = 2100000 szabo;\t\t\t//Total Supply (including all decimal places!)\r\n\t\tname = \"Fame\";\t\t\t\t\t\t\t//Pretty Name\r\n\t\tdecimals = 12;\t\t\t\t\t\t\t//Decimal places (with 12 decimal places 1 szabo = 1 token in uint256)\r\n\t\tsymbol = \"FAM\";\t\t\t\t\t\t\t//Ticker Symbol (3 characters, upper case)\r\n\t\tversion = \"FAME1.0\";\t\t\t\t\t//Version Code\r\n\t\tbalances[msg.sender] = totalSupply;\t\t//Assign all balance to creator initially for distribution from there.\r\n\t}\r\n\r\n\t//Burn _value of tokens from your balance.\r\n\t//Will destroy the tokens, removing them from your balance, and reduce totalSupply accordingly.\r\n\tfunction burn(uint _value) {\r\n\t\trequire(balances[msg.sender] >= _value && _value > 0);\r\n        balances[msg.sender] -= _value;\r\n        totalSupply -= _value;\r\n        Burn(msg.sender, _value);\r\n\t}\r\n\r\n\t//Event to log any time someone burns tokens to the contract's event log:\r\n\tevent Burn(\r\n\t\taddress indexed _owner,\r\n\t\tuint _value\r\n\t\t);\r\n\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "ERC20Standard"
    UserDefinedTypeName "ERC20Standard"
       Source: "ERC20Standard"
  FunctionDefinition "FAMEToken" - public
     Source: "function FAMEToken() {\r\n\t\ttotalSupply = 2100000 szabo;\t\t\t//Total Supply (including all decimal places!)\r\n\t\tname = \"Fame\";\t\t\t\t\t\t\t//Pretty Name\r\n\t\tdecimals = 12;\t\t\t\t\t\t\t//Decimal places (with 12 decimal places 1 szabo = 1 token in uint256)\r\n\t\tsymbol = \"FAM\";\t\t\t\t\t\t\t//Ticker Symbol (3 characters, upper case)\r\n\t\tversion = \"FAME1.0\";\t\t\t\t\t//Version Code\r\n\t\tbalances[msg.sender] = totalSupply;\t\t//Assign all balance to creator initially for distribution from there.\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n\t\ttotalSupply = 2100000 szabo;\t\t\t//Total Supply (including all decimal places!)\r\n\t\tname = \"Fame\";\t\t\t\t\t\t\t//Pretty Name\r\n\t\tdecimals = 12;\t\t\t\t\t\t\t//Decimal places (with 12 decimal places 1 szabo = 1 token in uint256)\r\n\t\tsymbol = \"FAM\";\t\t\t\t\t\t\t//Ticker Symbol (3 characters, upper case)\r\n\t\tversion = \"FAME1.0\";\t\t\t\t\t//Version Code\r\n\t\tbalances[msg.sender] = totalSupply;\t\t//Assign all balance to creator initially for distribution from there.\r\n\t}"
      ExpressionStatement
         Gas costs: 0
         Source: "totalSupply = 2100000 szabo"
        Assignment using operator =
           Type: uint256
           Source: "totalSupply = 2100000 szabo"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          Literal, token: [no token] value: 2100000
             Type: int_const 2100000000000000000
             Source: "2100000 szabo"
      ExpressionStatement
         Gas costs: 0
         Source: "name = \"Fame\""
        Assignment using operator =
           Type: string storage ref
           Source: "name = \"Fame\""
          Identifier name
             Type: string storage ref
             Source: "name"
          Literal, token: [no token] value: Fame
             Type: literal_string "Fame"
             Source: "\"Fame\""
      ExpressionStatement
         Gas costs: 0
         Source: "decimals = 12"
        Assignment using operator =
           Type: uint8
           Source: "decimals = 12"
          Identifier decimals
             Type: uint8
             Source: "decimals"
          Literal, token: [no token] value: 12
             Type: int_const 12
             Source: "12"
      ExpressionStatement
         Gas costs: 0
         Source: "symbol = \"FAM\""
        Assignment using operator =
           Type: string storage ref
           Source: "symbol = \"FAM\""
          Identifier symbol
             Type: string storage ref
             Source: "symbol"
          Literal, token: [no token] value: FAM
             Type: literal_string "FAM"
             Source: "\"FAM\""
      ExpressionStatement
         Gas costs: 0
         Source: "version = \"FAME1.0\""
        Assignment using operator =
           Type: string storage ref
           Source: "version = \"FAME1.0\""
          Identifier version
             Type: string storage ref
             Source: "version"
          Literal, token: [no token] value: FAME1.0
             Type: literal_string "FAME1.0"
             Source: "\"FAME1.0\""
      ExpressionStatement
         Gas costs: 0
         Source: "balances[msg.sender] = totalSupply"
        Assignment using operator =
           Type: uint256
           Source: "balances[msg.sender] = totalSupply"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
  FunctionDefinition "burn" - public
     Source: "function burn(uint _value) {\r\n\t\trequire(balances[msg.sender] >= _value && _value > 0);\r\n        balances[msg.sender] -= _value;\r\n        totalSupply -= _value;\r\n        Burn(msg.sender, _value);\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "(uint _value)"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n\t\trequire(balances[msg.sender] >= _value && _value > 0);\r\n        balances[msg.sender] -= _value;\r\n        totalSupply -= _value;\r\n        Burn(msg.sender, _value);\r\n\t}"
      ExpressionStatement
         Gas costs: 364
         Source: "require(balances[msg.sender] >= _value && _value > 0)"
        FunctionCall
           Type: tuple()
           Source: "require(balances[msg.sender] >= _value && _value > 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator &&
             Type: bool
             Source: "balances[msg.sender] >= _value && _value > 0"
            BinaryOperation using operator >=
               Type: bool
               Source: "balances[msg.sender] >= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
            BinaryOperation using operator >
               Type: bool
               Source: "_value > 0"
              Identifier _value
                 Type: uint256
                 Source: "_value"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      ExpressionStatement
         Gas costs: 20328
         Source: "balances[msg.sender] -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "balances[msg.sender] -= _value"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 20233
         Source: "totalSupply -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "totalSupply -= _value"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 1453
         Source: "Burn(msg.sender, _value)"
        FunctionCall
           Type: tuple()
           Source: "Burn(msg.sender, _value)"
          Identifier Burn
             Type: function (address,uint256)
             Source: "Burn"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
  EventDefinition "Burn"
     Gas costs: 0
     Source: "event Burn(\r\n\t\taddress indexed _owner,\r\n\t\tuint _value\r\n\t\t);"
    ParameterList
       Source: "(\r\n\t\taddress indexed _owner,\r\n\t\tuint _value\r\n\t\t)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address indexed _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
