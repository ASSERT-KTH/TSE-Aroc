Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0x52ff8b15ef6b38cf0554ba9207d70d0d2437c56a.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.11;"
ContractDefinition "Token"
   Source: "contract Token {\r\n    string public symbol = \"711\";\r\n    string public name = \"711 token\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 _totalSupply = 711000000000000000000;\r\n    address owner = 0;\r\n    bool startDone = false;\r\n    uint public amountRaised;\r\n    uint public deadline;\r\n    uint public overRaisedUnsend = 0;\r\n    uint public backers = 0;\r\n    uint rate = 4;\r\n    uint successcoef = 2;\r\n    uint unreserved = 80;\r\n    uint _durationInMinutes = 0;\r\n    bool fundingGoalReached = false;\r\n    mapping(address => uint256) public balanceOf;\r\n\t\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    mapping(address => uint256) balances;\r\n \r\n    mapping(address => mapping (address => uint256)) allowed;\r\n \r\n    function Token(address adr) {\r\n\t\towner = adr;        \r\n    }\r\n\t\r\n\tfunction StartICO(uint256 durationInMinutes)\r\n\t{\r\n\t\tif (msg.sender == owner && startDone == false)\r\n\t\t{\r\n\t\t\tbalances[owner] = _totalSupply;\r\n\t\t\t_durationInMinutes = durationInMinutes;\r\n            deadline = now + durationInMinutes * 1 minutes;\r\n\t\t\tstartDone = true;\r\n\t\t}\r\n\t}\r\n \r\n    function totalSupply() constant returns (uint256 totalSupply) {        \r\n\t\treturn _totalSupply;\r\n    }\r\n \r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n \r\n    function transfer(address _to, uint256 _amount) returns (bool success) {\r\n        if (balances[msg.sender] >= _amount \r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n \r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) returns (bool success) {\r\n        if (balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    function () payable {\r\n        uint _amount = msg.value;\r\n        uint amount = msg.value;\r\n        _amount = _amount * rate;\r\n        if (amountRaised + _amount <= _totalSupply * unreserved / 100\r\n            && balances[owner] >= _amount\r\n            && _amount > 0\r\n            && balances[msg.sender] + _amount > balances[msg.sender]\r\n            && now <= deadline\r\n            && !fundingGoalReached \r\n            && startDone) {\r\n        backers += 1;\r\n        balances[msg.sender] += _amount;\r\n        balances[owner] -= _amount;\r\n        amountRaised += _amount;\r\n        Transfer(owner, msg.sender, _amount);\r\n        } else {\r\n            if (!msg.sender.send(amount)) {\r\n                overRaisedUnsend += amount; \r\n            }\r\n        }\r\n    }\r\n \r\n    function approve(address _spender, uint256 _amount) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n \r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    modifier afterDeadline() { if (now > deadline || amountRaised >= _totalSupply / successcoef) _; }\r\n\r\n    function safeWithdrawal() afterDeadline {\r\n\r\n    if (amountRaised < _totalSupply / successcoef) {\r\n            uint _amount = balances[msg.sender];\r\n            balances[msg.sender] = 0;\r\n            if (_amount > 0) {\r\n                if (msg.sender.send(_amount / rate)) {\r\n                    balances[owner] += _amount;\r\n                    amountRaised -= _amount;\r\n                    Transfer(msg.sender, owner, _amount);\r\n                } else {\r\n                    balances[msg.sender] = _amount;\r\n                }\r\n            }\r\n        }\r\n\r\n    if (owner == msg.sender\r\n    \t&& amountRaised >= _totalSupply / successcoef) {\r\n           if (owner.send(this.balance)) {\r\n               fundingGoalReached = true;\r\n            } \r\n        }\r\n    }\r\n}"
  VariableDeclaration "symbol"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public symbol = \"711\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: 711
       Type: literal_string "711"
       Source: "\"711\""
  VariableDeclaration "name"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public name = \"711 token\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: 711 token
       Type: literal_string "711 token"
       Source: "\"711 token\""
  VariableDeclaration "decimals"
     Type: uint8
     Gas costs: 99
     Source: "uint8 public constant decimals = 18"
    ElementaryTypeName uint8
       Source: "uint8"
    Literal, token: [no token] value: 18
       Type: int_const 18
       Source: "18"
  VariableDeclaration "_totalSupply"
     Type: uint256
     Gas costs: 0
     Source: "uint256 _totalSupply = 711000000000000000000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 711000000000000000000
       Type: int_const 711000000000000000000
       Source: "711000000000000000000"
  VariableDeclaration "owner"
     Type: address
     Gas costs: 0
     Source: "address owner = 0"
    ElementaryTypeName address
       Source: "address"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "startDone"
     Type: bool
     Gas costs: 0
     Source: "bool startDone = false"
    ElementaryTypeName bool
       Source: "bool"
    Literal, token: false value: false
       Type: bool
       Source: "false"
  VariableDeclaration "amountRaised"
     Type: uint256
     Gas costs: 287
     Source: "uint public amountRaised"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "deadline"
     Type: uint256
     Gas costs: 287
     Source: "uint public deadline"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "overRaisedUnsend"
     Type: uint256
     Gas costs: 287
     Source: "uint public overRaisedUnsend = 0"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "backers"
     Type: uint256
     Gas costs: 287
     Source: "uint public backers = 0"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "rate"
     Type: uint256
     Gas costs: 0
     Source: "uint rate = 4"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 4
       Type: int_const 4
       Source: "4"
  VariableDeclaration "successcoef"
     Type: uint256
     Gas costs: 0
     Source: "uint successcoef = 2"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 2
       Type: int_const 2
       Source: "2"
  VariableDeclaration "unreserved"
     Type: uint256
     Gas costs: 0
     Source: "uint unreserved = 80"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 80
       Type: int_const 80
       Source: "80"
  VariableDeclaration "_durationInMinutes"
     Type: uint256
     Gas costs: 0
     Source: "uint _durationInMinutes = 0"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "fundingGoalReached"
     Type: bool
     Gas costs: 0
     Source: "bool fundingGoalReached = false"
    ElementaryTypeName bool
       Source: "bool"
    Literal, token: false value: false
       Type: bool
       Source: "false"
  VariableDeclaration "balanceOf"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping(address => uint256) public balanceOf"
    Mapping
       Source: "mapping(address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  EventDefinition "Transfer"
     Gas costs: 0
     Source: "event Transfer(address indexed _from, address indexed _to, uint256 _value);"
    ParameterList
       Source: "(address indexed _from, address indexed _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address indexed _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address indexed _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Approval"
     Gas costs: 0
     Source: "event Approval(address indexed _owner, address indexed _spender, uint256 _value);"
    ParameterList
       Source: "(address indexed _owner, address indexed _spender, uint256 _value)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address indexed _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address indexed _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping(address => uint256) balances"
    Mapping
       Source: "mapping(address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "allowed"
     Type: mapping(address => mapping(address => uint256))
     Gas costs: 0
     Source: "mapping(address => mapping (address => uint256)) allowed"
    Mapping
       Source: "mapping(address => mapping (address => uint256))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping (address => uint256)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "Token" - public
     Source: "function Token(address adr) {\r\n\t\towner = adr;        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address adr)"
      VariableDeclaration "adr"
         Type: address
         Source: "address adr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n\t\towner = adr;        \r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "owner = adr"
        Assignment using operator =
           Type: address
           Source: "owner = adr"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier adr
             Type: address
             Source: "adr"
  FunctionDefinition "StartICO" - public
     Source: "function StartICO(uint256 durationInMinutes)\r\n\t{\r\n\t\tif (msg.sender == owner && startDone == false)\r\n\t\t{\r\n\t\t\tbalances[owner] = _totalSupply;\r\n\t\t\t_durationInMinutes = durationInMinutes;\r\n            deadline = now + durationInMinutes * 1 minutes;\r\n\t\t\tstartDone = true;\r\n\t\t}\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "(uint256 durationInMinutes)"
      VariableDeclaration "durationInMinutes"
         Type: uint256
         Source: "uint256 durationInMinutes"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n\t\tif (msg.sender == owner && startDone == false)\r\n\t\t{\r\n\t\t\tbalances[owner] = _totalSupply;\r\n\t\t\t_durationInMinutes = durationInMinutes;\r\n            deadline = now + durationInMinutes * 1 minutes;\r\n\t\t\tstartDone = true;\r\n\t\t}\r\n\t}"
      IfStatement
         Source: "if (msg.sender == owner && startDone == false)\r\n\t\t{\r\n\t\t\tbalances[owner] = _totalSupply;\r\n\t\t\t_durationInMinutes = durationInMinutes;\r\n            deadline = now + durationInMinutes * 1 minutes;\r\n\t\t\tstartDone = true;\r\n\t\t}"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 585
           Source: "msg.sender == owner && startDone == false"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == owner"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier owner
               Type: address
               Source: "owner"
          BinaryOperation using operator ==
             Type: bool
             Source: "startDone == false"
            Identifier startDone
               Type: bool
               Source: "startDone"
            Literal, token: false value: false
               Type: bool
               Source: "false"
        Block
           Source: "{\r\n\t\t\tbalances[owner] = _totalSupply;\r\n\t\t\t_durationInMinutes = durationInMinutes;\r\n            deadline = now + durationInMinutes * 1 minutes;\r\n\t\t\tstartDone = true;\r\n\t\t}"
          ExpressionStatement
             Gas costs: 20546
             Source: "balances[owner] = _totalSupply"
            Assignment using operator =
               Type: uint256
               Source: "balances[owner] = _totalSupply"
              IndexAccess
                 Type: uint256
                 Source: "balances[owner]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier owner
                   Type: address
                   Source: "owner"
              Identifier _totalSupply
                 Type: uint256
                 Source: "_totalSupply"
          ExpressionStatement
             Gas costs: 20014
             Source: "_durationInMinutes = durationInMinutes"
            Assignment using operator =
               Type: uint256
               Source: "_durationInMinutes = durationInMinutes"
              Identifier _durationInMinutes
                 Type: uint256
                 Source: "_durationInMinutes"
              Identifier durationInMinutes
                 Type: uint256
                 Source: "durationInMinutes"
          ExpressionStatement
             Gas costs: 20027
             Source: "deadline = now + durationInMinutes * 1 minutes"
            Assignment using operator =
               Type: uint256
               Source: "deadline = now + durationInMinutes * 1 minutes"
              Identifier deadline
                 Type: uint256
                 Source: "deadline"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "now + durationInMinutes * 1 minutes"
                Identifier now
                   Type: uint256
                   Source: "now"
                BinaryOperation using operator *
                   Type: uint256
                   Source: "durationInMinutes * 1 minutes"
                  Identifier durationInMinutes
                     Type: uint256
                     Source: "durationInMinutes"
                  Literal, token: [no token] value: 1
                     Type: int_const 60
                     Source: "1 minutes"
          ExpressionStatement
             Gas costs: 20317
             Source: "startDone = true"
            Assignment using operator =
               Type: bool
               Source: "startDone = true"
              Identifier startDone
                 Type: bool
                 Source: "startDone"
              Literal, token: true value: true
                 Type: bool
                 Source: "true"
  FunctionDefinition "totalSupply" - public - const
     Source: "function totalSupply() constant returns (uint256 totalSupply) {        \r\n\t\treturn _totalSupply;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256 totalSupply)"
      VariableDeclaration "totalSupply"
         Type: uint256
         Source: "uint256 totalSupply"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{        \r\n\t\treturn _totalSupply;\r\n    }"
      Return
         Gas costs: 208
         Source: "return _totalSupply"
        Identifier _totalSupply
           Type: uint256
           Source: "_totalSupply"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return balances[_owner];\r\n    }"
      Return
         Gas costs: 304
         Source: "return balances[_owner]"
        IndexAccess
           Type: uint256
           Source: "balances[_owner]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          Identifier _owner
             Type: address
             Source: "_owner"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _amount) returns (bool success) {\r\n        if (balances[msg.sender] >= _amount \r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _amount)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        if (balances[msg.sender] >= _amount \r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }"
      IfStatement
         Source: "if (balances[msg.sender] >= _amount \r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 961
           Source: "balances[msg.sender] >= _amount \r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]"
          BinaryOperation using operator &&
             Type: bool
             Source: "balances[msg.sender] >= _amount \r\n            && _amount > 0"
            BinaryOperation using operator >=
               Type: bool
               Source: "balances[msg.sender] >= _amount"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
            BinaryOperation using operator >
               Type: bool
               Source: "_amount > 0"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
          BinaryOperation using operator >
             Type: bool
             Source: "balances[_to] + _amount > balances[_to]"
            BinaryOperation using operator +
               Type: uint256
               Source: "balances[_to] + _amount"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
            IndexAccess
               Type: uint256
               Source: "balances[_to]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _to
                 Type: address
                 Source: "_to"
        Block
           Source: "{\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        }"
          ExpressionStatement
             Gas costs: 20328
             Source: "balances[msg.sender] -= _amount"
            Assignment using operator -=
               Type: uint256
               Source: "balances[msg.sender] -= _amount"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
          ExpressionStatement
             Gas costs: 20323
             Source: "balances[_to] += _amount"
            Assignment using operator +=
               Type: uint256
               Source: "balances[_to] += _amount"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
          ExpressionStatement
             Gas costs: 1837
             Source: "Transfer(msg.sender, _to, _amount)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(msg.sender, _to, _amount)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{\r\n            return false;\r\n        }"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) returns (bool success) {\r\n        if (balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    )"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        if (balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }"
      IfStatement
         Source: "if (balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 1381
           Source: "balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]"
          BinaryOperation using operator &&
             Type: bool
             Source: "balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0"
            BinaryOperation using operator &&
               Type: bool
               Source: "balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "balances[_from] >= _amount"
                IndexAccess
                   Type: uint256
                   Source: "balances[_from]"
                  Identifier balances
                     Type: mapping(address => uint256)
                     Source: "balances"
                  Identifier _from
                     Type: address
                     Source: "_from"
                Identifier _amount
                   Type: uint256
                   Source: "_amount"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "allowed[_from][msg.sender] >= _amount"
                IndexAccess
                   Type: uint256
                   Source: "allowed[_from][msg.sender]"
                  IndexAccess
                     Type: mapping(address => uint256)
                     Source: "allowed[_from]"
                    Identifier allowed
                       Type: mapping(address => mapping(address => uint256))
                       Source: "allowed"
                    Identifier _from
                       Type: address
                       Source: "_from"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
                Identifier _amount
                   Type: uint256
                   Source: "_amount"
            BinaryOperation using operator >
               Type: bool
               Source: "_amount > 0"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
          BinaryOperation using operator >
             Type: bool
             Source: "balances[_to] + _amount > balances[_to]"
            BinaryOperation using operator +
               Type: uint256
               Source: "balances[_to] + _amount"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
            IndexAccess
               Type: uint256
               Source: "balances[_to]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _to
                 Type: address
                 Source: "_to"
        Block
           Source: "{\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        }"
          ExpressionStatement
             Gas costs: 20329
             Source: "balances[_from] -= _amount"
            Assignment using operator -=
               Type: uint256
               Source: "balances[_from] -= _amount"
              IndexAccess
                 Type: uint256
                 Source: "balances[_from]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _from
                   Type: address
                   Source: "_from"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
          ExpressionStatement
             Gas costs: 20412
             Source: "allowed[_from][msg.sender] -= _amount"
            Assignment using operator -=
               Type: uint256
               Source: "allowed[_from][msg.sender] -= _amount"
              IndexAccess
                 Type: uint256
                 Source: "allowed[_from][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[_from]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  Identifier _from
                     Type: address
                     Source: "_from"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
          ExpressionStatement
             Gas costs: 20323
             Source: "balances[_to] += _amount"
            Assignment using operator +=
               Type: uint256
               Source: "balances[_to] += _amount"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
          ExpressionStatement
             Gas costs: 1838
             Source: "Transfer(_from, _to, _amount)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(_from, _to, _amount)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              Identifier _from
                 Type: address
                 Source: "_from"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{\r\n            return false;\r\n        }"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "" - public
     Source: "function () payable {\r\n        uint _amount = msg.value;\r\n        uint amount = msg.value;\r\n        _amount = _amount * rate;\r\n        if (amountRaised + _amount <= _totalSupply * unreserved / 100\r\n            && balances[owner] >= _amount\r\n            && _amount > 0\r\n            && balances[msg.sender] + _amount > balances[msg.sender]\r\n            && now <= deadline\r\n            && !fundingGoalReached \r\n            && startDone) {\r\n        backers += 1;\r\n        balances[msg.sender] += _amount;\r\n        balances[owner] -= _amount;\r\n        amountRaised += _amount;\r\n        Transfer(owner, msg.sender, _amount);\r\n        } else {\r\n            if (!msg.sender.send(amount)) {\r\n                overRaisedUnsend += amount; \r\n            }\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        uint _amount = msg.value;\r\n        uint amount = msg.value;\r\n        _amount = _amount * rate;\r\n        if (amountRaised + _amount <= _totalSupply * unreserved / 100\r\n            && balances[owner] >= _amount\r\n            && _amount > 0\r\n            && balances[msg.sender] + _amount > balances[msg.sender]\r\n            && now <= deadline\r\n            && !fundingGoalReached \r\n            && startDone) {\r\n        backers += 1;\r\n        balances[msg.sender] += _amount;\r\n        balances[owner] -= _amount;\r\n        amountRaised += _amount;\r\n        Transfer(owner, msg.sender, _amount);\r\n        } else {\r\n            if (!msg.sender.send(amount)) {\r\n                overRaisedUnsend += amount; \r\n            }\r\n        }\r\n    }"
      VariableDeclarationStatement
         Gas costs: 10
         Source: "uint _amount = msg.value"
        VariableDeclaration "_amount"
           Type: uint256
           Source: "uint _amount"
          ElementaryTypeName uint
             Source: "uint"
        MemberAccess to member value
           Type: uint256
           Source: "msg.value"
          Identifier msg
             Type: msg
             Source: "msg"
      VariableDeclarationStatement
         Gas costs: 10
         Source: "uint amount = msg.value"
        VariableDeclaration "amount"
           Type: uint256
           Source: "uint amount"
          ElementaryTypeName uint
             Source: "uint"
        MemberAccess to member value
           Type: uint256
           Source: "msg.value"
          Identifier msg
             Type: msg
             Source: "msg"
      ExpressionStatement
         Gas costs: 216
         Source: "_amount = _amount * rate"
        Assignment using operator =
           Type: uint256
           Source: "_amount = _amount * rate"
          Identifier _amount
             Type: uint256
             Source: "_amount"
          BinaryOperation using operator *
             Type: uint256
             Source: "_amount * rate"
            Identifier _amount
               Type: uint256
               Source: "_amount"
            Identifier rate
               Type: uint256
               Source: "rate"
      IfStatement
         Source: "if (amountRaised + _amount <= _totalSupply * unreserved / 100\r\n            && balances[owner] >= _amount\r\n            && _amount > 0\r\n            && balances[msg.sender] + _amount > balances[msg.sender]\r\n            && now <= deadline\r\n            && !fundingGoalReached \r\n            && startDone) {\r\n        backers += 1;\r\n        balances[msg.sender] += _amount;\r\n        balances[owner] -= _amount;\r\n        amountRaised += _amount;\r\n        Transfer(owner, msg.sender, _amount);\r\n        } else {\r\n            if (!msg.sender.send(amount)) {\r\n                overRaisedUnsend += amount; \r\n            }\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 2683
           Source: "amountRaised + _amount <= _totalSupply * unreserved / 100\r\n            && balances[owner] >= _amount\r\n            && _amount > 0\r\n            && balances[msg.sender] + _amount > balances[msg.sender]\r\n            && now <= deadline\r\n            && !fundingGoalReached \r\n            && startDone"
          BinaryOperation using operator &&
             Type: bool
             Source: "amountRaised + _amount <= _totalSupply * unreserved / 100\r\n            && balances[owner] >= _amount\r\n            && _amount > 0\r\n            && balances[msg.sender] + _amount > balances[msg.sender]\r\n            && now <= deadline\r\n            && !fundingGoalReached"
            BinaryOperation using operator &&
               Type: bool
               Source: "amountRaised + _amount <= _totalSupply * unreserved / 100\r\n            && balances[owner] >= _amount\r\n            && _amount > 0\r\n            && balances[msg.sender] + _amount > balances[msg.sender]\r\n            && now <= deadline"
              BinaryOperation using operator &&
                 Type: bool
                 Source: "amountRaised + _amount <= _totalSupply * unreserved / 100\r\n            && balances[owner] >= _amount\r\n            && _amount > 0\r\n            && balances[msg.sender] + _amount > balances[msg.sender]"
                BinaryOperation using operator &&
                   Type: bool
                   Source: "amountRaised + _amount <= _totalSupply * unreserved / 100\r\n            && balances[owner] >= _amount\r\n            && _amount > 0"
                  BinaryOperation using operator &&
                     Type: bool
                     Source: "amountRaised + _amount <= _totalSupply * unreserved / 100\r\n            && balances[owner] >= _amount"
                    BinaryOperation using operator <=
                       Type: bool
                       Source: "amountRaised + _amount <= _totalSupply * unreserved / 100"
                      BinaryOperation using operator +
                         Type: uint256
                         Source: "amountRaised + _amount"
                        Identifier amountRaised
                           Type: uint256
                           Source: "amountRaised"
                        Identifier _amount
                           Type: uint256
                           Source: "_amount"
                      BinaryOperation using operator /
                         Type: uint256
                         Source: "_totalSupply * unreserved / 100"
                        BinaryOperation using operator *
                           Type: uint256
                           Source: "_totalSupply * unreserved"
                          Identifier _totalSupply
                             Type: uint256
                             Source: "_totalSupply"
                          Identifier unreserved
                             Type: uint256
                             Source: "unreserved"
                        Literal, token: [no token] value: 100
                           Type: int_const 100
                           Source: "100"
                    BinaryOperation using operator >=
                       Type: bool
                       Source: "balances[owner] >= _amount"
                      IndexAccess
                         Type: uint256
                         Source: "balances[owner]"
                        Identifier balances
                           Type: mapping(address => uint256)
                           Source: "balances"
                        Identifier owner
                           Type: address
                           Source: "owner"
                      Identifier _amount
                         Type: uint256
                         Source: "_amount"
                  BinaryOperation using operator >
                     Type: bool
                     Source: "_amount > 0"
                    Identifier _amount
                       Type: uint256
                       Source: "_amount"
                    Literal, token: [no token] value: 0
                       Type: int_const 0
                       Source: "0"
                BinaryOperation using operator >
                   Type: bool
                   Source: "balances[msg.sender] + _amount > balances[msg.sender]"
                  BinaryOperation using operator +
                     Type: uint256
                     Source: "balances[msg.sender] + _amount"
                    IndexAccess
                       Type: uint256
                       Source: "balances[msg.sender]"
                      Identifier balances
                         Type: mapping(address => uint256)
                         Source: "balances"
                      MemberAccess to member sender
                         Type: address
                         Source: "msg.sender"
                        Identifier msg
                           Type: msg
                           Source: "msg"
                    Identifier _amount
                       Type: uint256
                       Source: "_amount"
                  IndexAccess
                     Type: uint256
                     Source: "balances[msg.sender]"
                    Identifier balances
                       Type: mapping(address => uint256)
                       Source: "balances"
                    MemberAccess to member sender
                       Type: address
                       Source: "msg.sender"
                      Identifier msg
                         Type: msg
                         Source: "msg"
              BinaryOperation using operator <=
                 Type: bool
                 Source: "now <= deadline"
                Identifier now
                   Type: uint256
                   Source: "now"
                Identifier deadline
                   Type: uint256
                   Source: "deadline"
            UnaryOperation (prefix) !
               Type: bool
               Source: "!fundingGoalReached"
              Identifier fundingGoalReached
                 Type: bool
                 Source: "fundingGoalReached"
          Identifier startDone
             Type: bool
             Source: "startDone"
        Block
           Source: "{\r\n        backers += 1;\r\n        balances[msg.sender] += _amount;\r\n        balances[owner] -= _amount;\r\n        amountRaised += _amount;\r\n        Transfer(owner, msg.sender, _amount);\r\n        }"
          ExpressionStatement
             Gas costs: 20233
             Source: "backers += 1"
            Assignment using operator +=
               Type: uint256
               Source: "backers += 1"
              Identifier backers
                 Type: uint256
                 Source: "backers"
              Literal, token: [no token] value: 1
                 Type: int_const 1
                 Source: "1"
          ExpressionStatement
             Gas costs: 20328
             Source: "balances[msg.sender] += _amount"
            Assignment using operator +=
               Type: uint256
               Source: "balances[msg.sender] += _amount"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
          ExpressionStatement
             Gas costs: 20559
             Source: "balances[owner] -= _amount"
            Assignment using operator -=
               Type: uint256
               Source: "balances[owner] -= _amount"
              IndexAccess
                 Type: uint256
                 Source: "balances[owner]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier owner
                   Type: address
                   Source: "owner"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
          ExpressionStatement
             Gas costs: 20233
             Source: "amountRaised += _amount"
            Assignment using operator +=
               Type: uint256
               Source: "amountRaised += _amount"
              Identifier amountRaised
                 Type: uint256
                 Source: "amountRaised"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
          ExpressionStatement
             Gas costs: 2073
             Source: "Transfer(owner, msg.sender, _amount)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(owner, msg.sender, _amount)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              Identifier owner
                 Type: address
                 Source: "owner"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
        Block
           Source: "{\r\n            if (!msg.sender.send(amount)) {\r\n                overRaisedUnsend += amount; \r\n            }\r\n        }"
          IfStatement
             Source: "if (!msg.sender.send(amount)) {\r\n                overRaisedUnsend += amount; \r\n            }"
            UnaryOperation (prefix) !
               Type: bool
               Gas costs: [???]
               Source: "!msg.sender.send(amount)"
              FunctionCall
                 Type: bool
                 Source: "msg.sender.send(amount)"
                MemberAccess to member send
                   Type: function (uint256) returns (bool)
                   Source: "msg.sender.send"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
                Identifier amount
                   Type: uint256
                   Source: "amount"
            Block
               Source: "{\r\n                overRaisedUnsend += amount; \r\n            }"
              ExpressionStatement
                 Gas costs: 20233
                 Source: "overRaisedUnsend += amount"
                Assignment using operator +=
                   Type: uint256
                   Source: "overRaisedUnsend += amount"
                  Identifier overRaisedUnsend
                     Type: uint256
                     Source: "overRaisedUnsend"
                  Identifier amount
                     Type: uint256
                     Source: "amount"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint256 _amount) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint256 _amount)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 20199
         Source: "allowed[msg.sender][_spender] = _amount"
        Assignment using operator =
           Type: uint256
           Source: "allowed[msg.sender][_spender] = _amount"
          IndexAccess
             Type: uint256
             Source: "allowed[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[msg.sender]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      ExpressionStatement
         Gas costs: 1837
         Source: "Approval(msg.sender, _spender, _amount)"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender, _spender, _amount)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint256 remaining"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return allowed[_owner][_spender];\r\n    }"
      Return
         Gas costs: 394
         Source: "return allowed[_owner][_spender]"
        IndexAccess
           Type: uint256
           Source: "allowed[_owner][_spender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowed[_owner]"
            Identifier allowed
               Type: mapping(address => mapping(address => uint256))
               Source: "allowed"
            Identifier _owner
               Type: address
               Source: "_owner"
          Identifier _spender
             Type: address
             Source: "_spender"
  ModifierDefinition "afterDeadline"
     Source: "modifier afterDeadline() { if (now > deadline || amountRaised >= _totalSupply / successcoef) _; }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{ if (now > deadline || amountRaised >= _totalSupply / successcoef) _; }"
      IfStatement
         Source: "if (now > deadline || amountRaised >= _totalSupply / successcoef) _"
        BinaryOperation using operator ||
           Type: bool
           Gas costs: 870
           Source: "now > deadline || amountRaised >= _totalSupply / successcoef"
          BinaryOperation using operator >
             Type: bool
             Source: "now > deadline"
            Identifier now
               Type: uint256
               Source: "now"
            Identifier deadline
               Type: uint256
               Source: "deadline"
          BinaryOperation using operator >=
             Type: bool
             Source: "amountRaised >= _totalSupply / successcoef"
            Identifier amountRaised
               Type: uint256
               Source: "amountRaised"
            BinaryOperation using operator /
               Type: uint256
               Source: "_totalSupply / successcoef"
              Identifier _totalSupply
                 Type: uint256
                 Source: "_totalSupply"
              Identifier successcoef
                 Type: uint256
                 Source: "successcoef"
        PlaceholderStatement
           Gas costs: 0
           Source: "_"
  FunctionDefinition "safeWithdrawal" - public
     Source: "function safeWithdrawal() afterDeadline {\r\n\r\n    if (amountRaised < _totalSupply / successcoef) {\r\n            uint _amount = balances[msg.sender];\r\n            balances[msg.sender] = 0;\r\n            if (_amount > 0) {\r\n                if (msg.sender.send(_amount / rate)) {\r\n                    balances[owner] += _amount;\r\n                    amountRaised -= _amount;\r\n                    Transfer(msg.sender, owner, _amount);\r\n                } else {\r\n                    balances[msg.sender] = _amount;\r\n                }\r\n            }\r\n        }\r\n\r\n    if (owner == msg.sender\r\n    \t&& amountRaised >= _totalSupply / successcoef) {\r\n           if (owner.send(this.balance)) {\r\n               fundingGoalReached = true;\r\n            } \r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "afterDeadline"
       Gas costs: 0
       Source: "afterDeadline"
      Identifier afterDeadline
         Type: modifier ()
         Source: "afterDeadline"
    Block
       Source: "{\r\n\r\n    if (amountRaised < _totalSupply / successcoef) {\r\n            uint _amount = balances[msg.sender];\r\n            balances[msg.sender] = 0;\r\n            if (_amount > 0) {\r\n                if (msg.sender.send(_amount / rate)) {\r\n                    balances[owner] += _amount;\r\n                    amountRaised -= _amount;\r\n                    Transfer(msg.sender, owner, _amount);\r\n                } else {\r\n                    balances[msg.sender] = _amount;\r\n                }\r\n            }\r\n        }\r\n\r\n    if (owner == msg.sender\r\n    \t&& amountRaised >= _totalSupply / successcoef) {\r\n           if (owner.send(this.balance)) {\r\n               fundingGoalReached = true;\r\n            } \r\n        }\r\n    }"
      IfStatement
         Source: "if (amountRaised < _totalSupply / successcoef) {\r\n            uint _amount = balances[msg.sender];\r\n            balances[msg.sender] = 0;\r\n            if (_amount > 0) {\r\n                if (msg.sender.send(_amount / rate)) {\r\n                    balances[owner] += _amount;\r\n                    amountRaised -= _amount;\r\n                    Transfer(msg.sender, owner, _amount);\r\n                } else {\r\n                    balances[msg.sender] = _amount;\r\n                }\r\n            }\r\n        }"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 640
           Source: "amountRaised < _totalSupply / successcoef"
          Identifier amountRaised
             Type: uint256
             Source: "amountRaised"
          BinaryOperation using operator /
             Type: uint256
             Source: "_totalSupply / successcoef"
            Identifier _totalSupply
               Type: uint256
               Source: "_totalSupply"
            Identifier successcoef
               Type: uint256
               Source: "successcoef"
        Block
           Source: "{\r\n            uint _amount = balances[msg.sender];\r\n            balances[msg.sender] = 0;\r\n            if (_amount > 0) {\r\n                if (msg.sender.send(_amount / rate)) {\r\n                    balances[owner] += _amount;\r\n                    amountRaised -= _amount;\r\n                    Transfer(msg.sender, owner, _amount);\r\n                } else {\r\n                    balances[msg.sender] = _amount;\r\n                }\r\n            }\r\n        }"
          VariableDeclarationStatement
             Gas costs: 306
             Source: "uint _amount = balances[msg.sender]"
            VariableDeclaration "_amount"
               Type: uint256
               Source: "uint _amount"
              ElementaryTypeName uint
                 Source: "uint"
            IndexAccess
               Type: uint256
               Source: "balances[msg.sender]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
          ExpressionStatement
             Gas costs: 5103
             Source: "balances[msg.sender] = 0"
            Assignment using operator =
               Type: uint256
               Source: "balances[msg.sender] = 0"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
          IfStatement
             Source: "if (_amount > 0) {\r\n                if (msg.sender.send(_amount / rate)) {\r\n                    balances[owner] += _amount;\r\n                    amountRaised -= _amount;\r\n                    Transfer(msg.sender, owner, _amount);\r\n                } else {\r\n                    balances[msg.sender] = _amount;\r\n                }\r\n            }"
            BinaryOperation using operator >
               Type: bool
               Gas costs: 9
               Source: "_amount > 0"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
            Block
               Source: "{\r\n                if (msg.sender.send(_amount / rate)) {\r\n                    balances[owner] += _amount;\r\n                    amountRaised -= _amount;\r\n                    Transfer(msg.sender, owner, _amount);\r\n                } else {\r\n                    balances[msg.sender] = _amount;\r\n                }\r\n            }"
              IfStatement
                 Source: "if (msg.sender.send(_amount / rate)) {\r\n                    balances[owner] += _amount;\r\n                    amountRaised -= _amount;\r\n                    Transfer(msg.sender, owner, _amount);\r\n                } else {\r\n                    balances[msg.sender] = _amount;\r\n                }"
                FunctionCall
                   Type: bool
                   Gas costs: [???]
                   Source: "msg.sender.send(_amount / rate)"
                  MemberAccess to member send
                     Type: function (uint256) returns (bool)
                     Source: "msg.sender.send"
                    MemberAccess to member sender
                       Type: address
                       Source: "msg.sender"
                      Identifier msg
                         Type: msg
                         Source: "msg"
                  BinaryOperation using operator /
                     Type: uint256
                     Source: "_amount / rate"
                    Identifier _amount
                       Type: uint256
                       Source: "_amount"
                    Identifier rate
                       Type: uint256
                       Source: "rate"
                Block
                   Source: "{\r\n                    balances[owner] += _amount;\r\n                    amountRaised -= _amount;\r\n                    Transfer(msg.sender, owner, _amount);\r\n                }"
                  ExpressionStatement
                     Gas costs: 20565
                     Source: "balances[owner] += _amount"
                    Assignment using operator +=
                       Type: uint256
                       Source: "balances[owner] += _amount"
                      IndexAccess
                         Type: uint256
                         Source: "balances[owner]"
                        Identifier balances
                           Type: mapping(address => uint256)
                           Source: "balances"
                        Identifier owner
                           Type: address
                           Source: "owner"
                      Identifier _amount
                         Type: uint256
                         Source: "_amount"
                  ExpressionStatement
                     Gas costs: 20233
                     Source: "amountRaised -= _amount"
                    Assignment using operator -=
                       Type: uint256
                       Source: "amountRaised -= _amount"
                      Identifier amountRaised
                         Type: uint256
                         Source: "amountRaised"
                      Identifier _amount
                         Type: uint256
                         Source: "_amount"
                  ExpressionStatement
                     Gas costs: [???]
                     Source: "Transfer(msg.sender, owner, _amount)"
                    FunctionCall
                       Type: tuple()
                       Source: "Transfer(msg.sender, owner, _amount)"
                      Identifier Transfer
                         Type: function (address,address,uint256)
                         Source: "Transfer"
                      MemberAccess to member sender
                         Type: address
                         Source: "msg.sender"
                        Identifier msg
                           Type: msg
                           Source: "msg"
                      Identifier owner
                         Type: address
                         Source: "owner"
                      Identifier _amount
                         Type: uint256
                         Source: "_amount"
                Block
                   Source: "{\r\n                    balances[msg.sender] = _amount;\r\n                }"
                  ExpressionStatement
                     Gas costs: 20109
                     Source: "balances[msg.sender] = _amount"
                    Assignment using operator =
                       Type: uint256
                       Source: "balances[msg.sender] = _amount"
                      IndexAccess
                         Type: uint256
                         Source: "balances[msg.sender]"
                        Identifier balances
                           Type: mapping(address => uint256)
                           Source: "balances"
                        MemberAccess to member sender
                           Type: address
                           Source: "msg.sender"
                          Identifier msg
                             Type: msg
                             Source: "msg"
                      Identifier _amount
                         Type: uint256
                         Source: "_amount"
      IfStatement
         Source: "if (owner == msg.sender\r\n    \t&& amountRaised >= _totalSupply / successcoef) {\r\n           if (owner.send(this.balance)) {\r\n               fundingGoalReached = true;\r\n            } \r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 921
           Source: "owner == msg.sender\r\n    \t&& amountRaised >= _totalSupply / successcoef"
          BinaryOperation using operator ==
             Type: bool
             Source: "owner == msg.sender"
            Identifier owner
               Type: address
               Source: "owner"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          BinaryOperation using operator >=
             Type: bool
             Source: "amountRaised >= _totalSupply / successcoef"
            Identifier amountRaised
               Type: uint256
               Source: "amountRaised"
            BinaryOperation using operator /
               Type: uint256
               Source: "_totalSupply / successcoef"
              Identifier _totalSupply
                 Type: uint256
                 Source: "_totalSupply"
              Identifier successcoef
                 Type: uint256
                 Source: "successcoef"
        Block
           Source: "{\r\n           if (owner.send(this.balance)) {\r\n               fundingGoalReached = true;\r\n            } \r\n        }"
          IfStatement
             Source: "if (owner.send(this.balance)) {\r\n               fundingGoalReached = true;\r\n            }"
            FunctionCall
               Type: bool
               Gas costs: [???]
               Source: "owner.send(this.balance)"
              MemberAccess to member send
                 Type: function (uint256) returns (bool)
                 Source: "owner.send"
                Identifier owner
                   Type: address
                   Source: "owner"
              MemberAccess to member balance
                 Type: uint256
                 Source: "this.balance"
                Identifier this
                   Type: contract Token
                   Source: "this"
            Block
               Source: "{\r\n               fundingGoalReached = true;\r\n            }"
              ExpressionStatement
                 Gas costs: 20267
                 Source: "fundingGoalReached = true"
                Assignment using operator =
                   Type: bool
                   Source: "fundingGoalReached = true"
                  Identifier fundingGoalReached
                     Type: bool
                     Source: "fundingGoalReached"
                  Literal, token: true value: true
                     Type: bool
                     Source: "true"
