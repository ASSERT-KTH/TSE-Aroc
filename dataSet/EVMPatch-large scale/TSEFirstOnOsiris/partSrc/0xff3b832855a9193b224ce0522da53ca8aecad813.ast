Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0xff3b832855a9193b224ce0522da53ca8aecad813.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.18;"
ContractDefinition "SafeMath"
   Source: "library SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {  //was constant\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}"
  FunctionDefinition "mul"
     Source: "function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }"
      VariableDeclarationStatement
         Gas costs: 19
         Source: "uint256 c = a * b"
        VariableDeclaration "c"
           Type: uint256
           Source: "uint256 c"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator *
           Type: uint256
           Source: "a * b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
      ExpressionStatement
         Gas costs: 88
         Source: "assert(a == 0 || c / a == b)"
        FunctionCall
           Type: tuple()
           Source: "assert(a == 0 || c / a == b)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator ||
             Type: bool
             Source: "a == 0 || c / a == b"
            BinaryOperation using operator ==
               Type: bool
               Source: "a == 0"
              Identifier a
                 Type: uint256
                 Source: "a"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
            BinaryOperation using operator ==
               Type: bool
               Source: "c / a == b"
              BinaryOperation using operator /
                 Type: uint256
                 Source: "c / a"
                Identifier c
                   Type: uint256
                   Source: "c"
                Identifier a
                   Type: uint256
                   Source: "a"
              Identifier b
                 Type: uint256
                 Source: "b"
      Return
         Gas costs: 8
         Source: "return c"
        Identifier c
           Type: uint256
           Source: "c"
  FunctionDefinition "div"
     Source: "function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }"
      VariableDeclarationStatement
         Gas costs: 42
         Source: "uint256 c = a / b"
        VariableDeclaration "c"
           Type: uint256
           Source: "uint256 c"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator /
           Type: uint256
           Source: "a / b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
      Return
         Gas costs: 8
         Source: "return c"
        Identifier c
           Type: uint256
           Source: "c"
  FunctionDefinition "sub"
     Source: "function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    assert(b <= a);\r\n    return a - b;\r\n  }"
      ExpressionStatement
         Gas costs: 0
         Source: "assert(b <= a)"
        FunctionCall
           Type: tuple()
           Source: "assert(b <= a)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator <=
             Type: bool
             Source: "b <= a"
            Identifier b
               Type: uint256
               Source: "b"
            Identifier a
               Type: uint256
               Source: "a"
      Return
         Gas costs: 0
         Source: "return a - b"
        BinaryOperation using operator -
           Type: uint256
           Source: "a - b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
  FunctionDefinition "add"
     Source: "function add(uint256 a, uint256 b) internal pure returns (uint256) {  //was constant\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{  //was constant\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 c = a + b"
        VariableDeclaration "c"
           Type: uint256
           Source: "uint256 c"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator +
           Type: uint256
           Source: "a + b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
      ExpressionStatement
         Gas costs: 0
         Source: "assert(c >= a)"
        FunctionCall
           Type: tuple()
           Source: "assert(c >= a)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator >=
             Type: bool
             Source: "c >= a"
            Identifier c
               Type: uint256
               Source: "c"
            Identifier a
               Type: uint256
               Source: "a"
      Return
         Gas costs: 0
         Source: "return c"
        Identifier c
           Type: uint256
           Source: "c"
ContractDefinition "Ownable"
   Source: "contract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}"
  VariableDeclaration "owner"
     Type: address
     Gas costs: 335
     Source: "address public owner"
    ElementaryTypeName address
       Source: "address"
  EventDefinition "OwnershipTransferred"
     Gas costs: 0
     Source: "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);"
    ParameterList
       Source: "(address indexed previousOwner, address indexed newOwner)"
      VariableDeclaration "previousOwner"
         Type: address
         Source: "address indexed previousOwner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "newOwner"
         Type: address
         Source: "address indexed newOwner"
        ElementaryTypeName address
           Source: "address"
  FunctionDefinition "Ownable" - public
     Source: "function Ownable() public {\r\n    owner = msg.sender;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    owner = msg.sender;\r\n  }"
      ExpressionStatement
         Gas costs: 0
         Source: "owner = msg.sender"
        Assignment using operator =
           Type: address
           Source: "owner = msg.sender"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  ModifierDefinition "onlyOwner"
     Source: "modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n    require(msg.sender == owner);\r\n    _;\r\n  }"
      ExpressionStatement
         Gas costs: 1974
         Source: "require(msg.sender == owner)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == owner)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == owner"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier owner
               Type: address
               Source: "owner"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "transferOwnership" - public
     Source: "function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address newOwner)"
      VariableDeclaration "newOwner"
         Type: address
         Source: "address newOwner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }"
      ExpressionStatement
         Gas costs: 50
         Source: "require(newOwner != address(0))"
        FunctionCall
           Type: tuple()
           Source: "require(newOwner != address(0))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "newOwner != address(0)"
            Identifier newOwner
               Type: address
               Source: "newOwner"
            FunctionCall
               Type: address
               Source: "address(0)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      ExpressionStatement
         Gas costs: 1790
         Source: "OwnershipTransferred(owner, newOwner)"
        FunctionCall
           Type: tuple()
           Source: "OwnershipTransferred(owner, newOwner)"
          Identifier OwnershipTransferred
             Type: function (address,address)
             Source: "OwnershipTransferred"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier newOwner
             Type: address
             Source: "newOwner"
      ExpressionStatement
         Gas costs: 20267
         Source: "owner = newOwner"
        Assignment using operator =
           Type: address
           Source: "owner = newOwner"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier newOwner
             Type: address
             Source: "newOwner"
ContractDefinition "ERC20"
   Gas costs: 0
   Source: "contract ERC20 { \r\n    function transfer(address receiver, uint amount) public ;\r\n    function transferFrom(address sender, address receiver, uint amount) public returns(bool success); // do token.approve on the ICO contract\r\n    function balanceOf(address _owner) constant public returns (uint256 balance);\r\n}"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address receiver, uint amount) public ;"
    ParameterList
       Source: "(address receiver, uint amount)"
      VariableDeclaration "receiver"
         Type: address
         Source: "address receiver"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "amount"
         Type: uint256
         Source: "uint amount"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: ""
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address sender, address receiver, uint amount) public returns(bool success);"
    ParameterList
       Source: "(address sender, address receiver, uint amount)"
      VariableDeclaration "sender"
         Type: address
         Source: "address sender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "receiver"
         Type: address
         Source: "address receiver"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "amount"
         Type: uint256
         Source: "uint amount"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) constant public returns (uint256 balance);"
    ParameterList
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256 balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
ContractDefinition "ASTRICOPreSale"
   Source: "contract ASTRICOPreSale is Ownable {\r\n  ERC20 public token;  // using the ASTRCoin token - will set an address\r\n\r\n  // start and end of the sale - 4 weeks\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // where funds are collected \r\n\r\n  address public wallet;  // beneficiary\r\n  address public ownerAddress;  // deploy owner\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n  \r\n  uint8 internal decimals             = 4; // 4 decimal places should be enough in general\r\n  uint256 internal decimalsConversion = 10 ** uint256(decimals);\r\n  uint256 internal ALLOC_CROWDSALE    = 10000000 * decimalsConversion; // (10 ** uint256(decimals)); // 10 mill in ICO\r\n  // we have already sold some\r\n  // \r\n  // 90MIL      90000000\r\n  // 10MIL      10000000\r\n  // 90MIL 4DCP 900000000000\r\n  // 10MIL 4dCP 100000000000\r\n\r\n  uint internal BASIC_RATE        = 75 * decimalsConversion; // based on the price of ether at 330 USD\r\n  uint internal PRICE_STAGE_PS    = 431 * decimalsConversion; \r\n  uint internal STAGE_PS_TIME_END = 60 minutes; // THIS IS TO BE SET PROPERLY\r\n  uint internal PRICE_VARIABLE    = 0 * decimalsConversion;\r\n  uint256 public astrSold         = 0;\r\n\r\n  bool public halted;\r\n  bool public crowdsaleClosed;\r\n\r\n  // simple event to track purchases\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  modifier isNotHalted() {     require(!halted);    _;  }\r\n  modifier afterDeadline() { if (now >= endTime) _; }\r\n\r\n  /**\r\n    * Constructor for ASTRICOPreSale\r\n    * param _token  ASTRCoin   0x567354a9F8367ff25F6967C947239fe75649e64e\r\n    * param _startTime start time for public sale\r\n    * param _ethWallet all incoming eth transfered here. Use multisig wallet 0xeA173bf22d7fF1ad9695652432b8759A331d668b\r\n    *\r\n    *     *\r\n\r\n0x80E7a4d750aDe616Da896C49049B7EdE9e04C191\r\n\r\n\r\n1510911600\r\n2017-11-17 17:40:00\r\n\r\n1511758800\r\n2017-11-27 13:00:00\r\n\r\n    *\r\n    * 90000000000\r\n  */\r\n    function ASTRICOPreSale() public  {\r\n\r\n    crowdsaleClosed = false;\r\n    halted          = false;\r\n    startTime       = 1510911600; //1510563716; //_startTime;  make it +20 minutes for it to work\r\n    endTime         = 1511758800; //_startTime + STAGE_FOUR_TIME_END; set start and end the same :/\r\n    wallet          = ERC20(0x3baDA155408AB1C9898FDF28e545b51f2f9a65CC); // This wallet needs to give permission for the ICO to transfer Tokens  Ropsten 0xeA173bf22d7fF1ad9695652432b8759A331d668b\r\n    ownerAddress    = ERC20(0x3EFAe2e152F62F5cc12cc0794b816d22d416a721);  // This is bad in theory but does fix the 2300 gas problem Ropsten 0xeA173bf22d7fF1ad9695652432b8759A331d668b\r\n    token           = ERC20(0x80E7a4d750aDe616Da896C49049B7EdE9e04C191); // Ropsten we have pregenerated thiss\r\n  }\r\n\r\n        // fallback function can be used to buy tokens\r\n  function () public payable {\r\n    require(msg.sender                 != 0x0);\r\n    require(validPurchase());\r\n    require(!halted); // useful to test if we have paused it\r\n    uint256 weiAmount                  = msg.value; // money sent in wei\r\n    uint256 tokens                     = SafeMath.div(SafeMath.mul(weiAmount, getCurrentRate()), 1 ether);\r\n    require(ALLOC_CROWDSALE - astrSold >= tokens);\r\n    weiRaised                          += weiAmount;\r\n    astrSold                           += tokens;\r\n    token.transferFrom(ownerAddress, msg.sender, tokens);\r\n    wallet.transfer(msg.value); // transfer straight away PRESALE wallet\r\n  }\r\n\r\n\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = (msg.value != 0);\r\n    bool astrAvailable = (ALLOC_CROWDSALE - astrSold) > 0; \r\n    return withinPeriod && nonZeroPurchase && astrAvailable && ! crowdsaleClosed;\r\n  }\r\n\r\n  function getCurrentRate() internal constant returns (uint256) {  \r\n    if( PRICE_VARIABLE > 0 ) {\r\n      return PRICE_VARIABLE; // we can manually set prices if we want\r\n    }\r\n    return PRICE_STAGE_PS;\r\n  }\r\n\r\n\r\n  // this closes it when we want to close - rather than waiting \r\n  function setNewRate(uint256 _coinsPerEther) onlyOwner public {\r\n    if( _coinsPerEther > 0 ) {\r\n        PRICE_VARIABLE = _coinsPerEther * decimalsConversion;\r\n    }\r\n  }\r\n    // this closes it when we want to close - rather than waiting \r\n  function setFixedRate() onlyOwner public {\r\n     PRICE_VARIABLE = 0 * decimalsConversion;\r\n  }\r\n\r\n\r\n  // this closes it when we want to close - rather than waiting - this is BAD\r\n  function closeSaleAnyway() onlyOwner public {\r\n      // wallet.transfer(weiRaised);\r\n      crowdsaleClosed = true;\r\n    }\r\n\r\n    // this closes it when we want to close - rather than waiting \r\n  function safeCloseSale()  onlyOwner afterDeadline public {\r\n    // wallet.transfer(weiRaised);\r\n    crowdsaleClosed = true;\r\n  }\r\n\r\n  function pause() onlyOwner public {\r\n    halted = true;\r\n  }\r\n\r\n\r\n  function unpause() onlyOwner public {\r\n    halted = false;\r\n  }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Ownable"
    UserDefinedTypeName "Ownable"
       Source: "Ownable"
  VariableDeclaration "token"
     Type: contract ERC20
     Gas costs: 335
     Source: "ERC20 public token"
    UserDefinedTypeName "ERC20"
       Source: "ERC20"
  VariableDeclaration "startTime"
     Type: uint256
     Gas costs: 287
     Source: "uint256 public startTime"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "endTime"
     Type: uint256
     Gas costs: 287
     Source: "uint256 public endTime"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "wallet"
     Type: address
     Gas costs: 335
     Source: "address public wallet"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "ownerAddress"
     Type: address
     Gas costs: 335
     Source: "address public ownerAddress"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "weiRaised"
     Type: uint256
     Gas costs: 287
     Source: "uint256 public weiRaised"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "decimals"
     Type: uint8
     Gas costs: 0
     Source: "uint8 internal decimals             = 4"
    ElementaryTypeName uint8
       Source: "uint8"
    Literal, token: [no token] value: 4
       Type: int_const 4
       Source: "4"
  VariableDeclaration "decimalsConversion"
     Type: uint256
     Gas costs: 0
     Source: "uint256 internal decimalsConversion = 10 ** uint256(decimals)"
    ElementaryTypeName uint256
       Source: "uint256"
    BinaryOperation using operator **
       Type: uint256
       Source: "10 ** uint256(decimals)"
      Literal, token: [no token] value: 10
         Type: int_const 10
         Source: "10"
      FunctionCall
         Type: uint256
         Source: "uint256(decimals)"
        ElementaryTypeNameExpression uint256
           Type: type(uint256)
           Source: "uint256"
        Identifier decimals
           Type: uint8
           Source: "decimals"
  VariableDeclaration "ALLOC_CROWDSALE"
     Type: uint256
     Gas costs: 0
     Source: "uint256 internal ALLOC_CROWDSALE    = 10000000 * decimalsConversion"
    ElementaryTypeName uint256
       Source: "uint256"
    BinaryOperation using operator *
       Type: uint256
       Source: "10000000 * decimalsConversion"
      Literal, token: [no token] value: 10000000
         Type: int_const 10000000
         Source: "10000000"
      Identifier decimalsConversion
         Type: uint256
         Source: "decimalsConversion"
  VariableDeclaration "BASIC_RATE"
     Type: uint256
     Gas costs: 0
     Source: "uint internal BASIC_RATE        = 75 * decimalsConversion"
    ElementaryTypeName uint
       Source: "uint"
    BinaryOperation using operator *
       Type: uint256
       Source: "75 * decimalsConversion"
      Literal, token: [no token] value: 75
         Type: int_const 75
         Source: "75"
      Identifier decimalsConversion
         Type: uint256
         Source: "decimalsConversion"
  VariableDeclaration "PRICE_STAGE_PS"
     Type: uint256
     Gas costs: 0
     Source: "uint internal PRICE_STAGE_PS    = 431 * decimalsConversion"
    ElementaryTypeName uint
       Source: "uint"
    BinaryOperation using operator *
       Type: uint256
       Source: "431 * decimalsConversion"
      Literal, token: [no token] value: 431
         Type: int_const 431
         Source: "431"
      Identifier decimalsConversion
         Type: uint256
         Source: "decimalsConversion"
  VariableDeclaration "STAGE_PS_TIME_END"
     Type: uint256
     Gas costs: 0
     Source: "uint internal STAGE_PS_TIME_END = 60 minutes"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 60
       Type: int_const 3600
       Source: "60 minutes"
  VariableDeclaration "PRICE_VARIABLE"
     Type: uint256
     Gas costs: 0
     Source: "uint internal PRICE_VARIABLE    = 0 * decimalsConversion"
    ElementaryTypeName uint
       Source: "uint"
    BinaryOperation using operator *
       Type: uint256
       Source: "0 * decimalsConversion"
      Literal, token: [no token] value: 0
         Type: int_const 0
         Source: "0"
      Identifier decimalsConversion
         Type: uint256
         Source: "decimalsConversion"
  VariableDeclaration "astrSold"
     Type: uint256
     Gas costs: 287
     Source: "uint256 public astrSold         = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "halted"
     Type: bool
     Gas costs: 335
     Source: "bool public halted"
    ElementaryTypeName bool
       Source: "bool"
  VariableDeclaration "crowdsaleClosed"
     Type: bool
     Gas costs: 385
     Source: "bool public crowdsaleClosed"
    ElementaryTypeName bool
       Source: "bool"
  EventDefinition "TokenPurchase"
     Gas costs: 0
     Source: "event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);"
    ParameterList
       Source: "(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount)"
      VariableDeclaration "purchaser"
         Type: address
         Source: "address indexed purchaser"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "beneficiary"
         Type: address
         Source: "address indexed beneficiary"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "amount"
         Type: uint256
         Source: "uint256 amount"
        ElementaryTypeName uint256
           Source: "uint256"
  ModifierDefinition "isNotHalted"
     Source: "modifier isNotHalted() {     require(!halted);    _;  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{     require(!halted);    _;  }"
      ExpressionStatement
         Gas costs: 0
         Source: "require(!halted)"
        FunctionCall
           Type: tuple()
           Source: "require(!halted)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!halted"
            Identifier halted
               Type: bool
               Source: "halted"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "afterDeadline"
     Source: "modifier afterDeadline() { if (now >= endTime) _; }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{ if (now >= endTime) _; }"
      IfStatement
         Source: "if (now >= endTime) _"
        BinaryOperation using operator >=
           Type: bool
           Gas costs: 211
           Source: "now >= endTime"
          Identifier now
             Type: uint256
             Source: "now"
          Identifier endTime
             Type: uint256
             Source: "endTime"
        PlaceholderStatement
           Gas costs: 0
           Source: "_"
  FunctionDefinition "ASTRICOPreSale" - public
     Source: "function ASTRICOPreSale() public  {\r\n\r\n    crowdsaleClosed = false;\r\n    halted          = false;\r\n    startTime       = 1510911600; //1510563716; //_startTime;  make it +20 minutes for it to work\r\n    endTime         = 1511758800; //_startTime + STAGE_FOUR_TIME_END; set start and end the same :/\r\n    wallet          = ERC20(0x3baDA155408AB1C9898FDF28e545b51f2f9a65CC); // This wallet needs to give permission for the ICO to transfer Tokens  Ropsten 0xeA173bf22d7fF1ad9695652432b8759A331d668b\r\n    ownerAddress    = ERC20(0x3EFAe2e152F62F5cc12cc0794b816d22d416a721);  // This is bad in theory but does fix the 2300 gas problem Ropsten 0xeA173bf22d7fF1ad9695652432b8759A331d668b\r\n    token           = ERC20(0x80E7a4d750aDe616Da896C49049B7EdE9e04C191); // Ropsten we have pregenerated thiss\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n\r\n    crowdsaleClosed = false;\r\n    halted          = false;\r\n    startTime       = 1510911600; //1510563716; //_startTime;  make it +20 minutes for it to work\r\n    endTime         = 1511758800; //_startTime + STAGE_FOUR_TIME_END; set start and end the same :/\r\n    wallet          = ERC20(0x3baDA155408AB1C9898FDF28e545b51f2f9a65CC); // This wallet needs to give permission for the ICO to transfer Tokens  Ropsten 0xeA173bf22d7fF1ad9695652432b8759A331d668b\r\n    ownerAddress    = ERC20(0x3EFAe2e152F62F5cc12cc0794b816d22d416a721);  // This is bad in theory but does fix the 2300 gas problem Ropsten 0xeA173bf22d7fF1ad9695652432b8759A331d668b\r\n    token           = ERC20(0x80E7a4d750aDe616Da896C49049B7EdE9e04C191); // Ropsten we have pregenerated thiss\r\n  }"
      ExpressionStatement
         Gas costs: 0
         Source: "crowdsaleClosed = false"
        Assignment using operator =
           Type: bool
           Source: "crowdsaleClosed = false"
          Identifier crowdsaleClosed
             Type: bool
             Source: "crowdsaleClosed"
          Literal, token: false value: false
             Type: bool
             Source: "false"
      ExpressionStatement
         Gas costs: 0
         Source: "halted          = false"
        Assignment using operator =
           Type: bool
           Source: "halted          = false"
          Identifier halted
             Type: bool
             Source: "halted"
          Literal, token: false value: false
             Type: bool
             Source: "false"
      ExpressionStatement
         Gas costs: 0
         Source: "startTime       = 1510911600"
        Assignment using operator =
           Type: uint256
           Source: "startTime       = 1510911600"
          Identifier startTime
             Type: uint256
             Source: "startTime"
          Literal, token: [no token] value: 1510911600
             Type: int_const 1510911600
             Source: "1510911600"
      ExpressionStatement
         Gas costs: 0
         Source: "endTime         = 1511758800"
        Assignment using operator =
           Type: uint256
           Source: "endTime         = 1511758800"
          Identifier endTime
             Type: uint256
             Source: "endTime"
          Literal, token: [no token] value: 1511758800
             Type: int_const 1511758800
             Source: "1511758800"
      ExpressionStatement
         Gas costs: 0
         Source: "wallet          = ERC20(0x3baDA155408AB1C9898FDF28e545b51f2f9a65CC)"
        Assignment using operator =
           Type: address
           Source: "wallet          = ERC20(0x3baDA155408AB1C9898FDF28e545b51f2f9a65CC)"
          Identifier wallet
             Type: address
             Source: "wallet"
          FunctionCall
             Type: contract ERC20
             Source: "ERC20(0x3baDA155408AB1C9898FDF28e545b51f2f9a65CC)"
            Identifier ERC20
               Type: type(contract ERC20)
               Source: "ERC20"
            Literal, token: [no token] value: 0x3baDA155408AB1C9898FDF28e545b51f2f9a65CC
               Type: address
               Source: "0x3baDA155408AB1C9898FDF28e545b51f2f9a65CC"
      ExpressionStatement
         Gas costs: 0
         Source: "ownerAddress    = ERC20(0x3EFAe2e152F62F5cc12cc0794b816d22d416a721)"
        Assignment using operator =
           Type: address
           Source: "ownerAddress    = ERC20(0x3EFAe2e152F62F5cc12cc0794b816d22d416a721)"
          Identifier ownerAddress
             Type: address
             Source: "ownerAddress"
          FunctionCall
             Type: contract ERC20
             Source: "ERC20(0x3EFAe2e152F62F5cc12cc0794b816d22d416a721)"
            Identifier ERC20
               Type: type(contract ERC20)
               Source: "ERC20"
            Literal, token: [no token] value: 0x3EFAe2e152F62F5cc12cc0794b816d22d416a721
               Type: address
               Source: "0x3EFAe2e152F62F5cc12cc0794b816d22d416a721"
      ExpressionStatement
         Gas costs: 0
         Source: "token           = ERC20(0x80E7a4d750aDe616Da896C49049B7EdE9e04C191)"
        Assignment using operator =
           Type: contract ERC20
           Source: "token           = ERC20(0x80E7a4d750aDe616Da896C49049B7EdE9e04C191)"
          Identifier token
             Type: contract ERC20
             Source: "token"
          FunctionCall
             Type: contract ERC20
             Source: "ERC20(0x80E7a4d750aDe616Da896C49049B7EdE9e04C191)"
            Identifier ERC20
               Type: type(contract ERC20)
               Source: "ERC20"
            Literal, token: [no token] value: 0x80E7a4d750aDe616Da896C49049B7EdE9e04C191
               Type: address
               Source: "0x80E7a4d750aDe616Da896C49049B7EdE9e04C191"
  FunctionDefinition "" - public
     Source: "function () public payable {\r\n    require(msg.sender                 != 0x0);\r\n    require(validPurchase());\r\n    require(!halted); // useful to test if we have paused it\r\n    uint256 weiAmount                  = msg.value; // money sent in wei\r\n    uint256 tokens                     = SafeMath.div(SafeMath.mul(weiAmount, getCurrentRate()), 1 ether);\r\n    require(ALLOC_CROWDSALE - astrSold >= tokens);\r\n    weiRaised                          += weiAmount;\r\n    astrSold                           += tokens;\r\n    token.transferFrom(ownerAddress, msg.sender, tokens);\r\n    wallet.transfer(msg.value); // transfer straight away PRESALE wallet\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    require(msg.sender                 != 0x0);\r\n    require(validPurchase());\r\n    require(!halted); // useful to test if we have paused it\r\n    uint256 weiAmount                  = msg.value; // money sent in wei\r\n    uint256 tokens                     = SafeMath.div(SafeMath.mul(weiAmount, getCurrentRate()), 1 ether);\r\n    require(ALLOC_CROWDSALE - astrSold >= tokens);\r\n    weiRaised                          += weiAmount;\r\n    astrSold                           += tokens;\r\n    token.transferFrom(ownerAddress, msg.sender, tokens);\r\n    wallet.transfer(msg.value); // transfer straight away PRESALE wallet\r\n  }"
      ExpressionStatement
         Gas costs: 43
         Source: "require(msg.sender                 != 0x0)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender                 != 0x0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "msg.sender                 != 0x0"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Literal, token: [no token] value: 0x0
               Type: int_const 0
               Source: "0x0"
      ExpressionStatement
         Gas costs: 30
         Source: "require(validPurchase())"
        FunctionCall
           Type: tuple()
           Source: "require(validPurchase())"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "validPurchase()"
            Identifier validPurchase
               Type: function () view returns (bool)
               Source: "validPurchase"
      ExpressionStatement
         Gas costs: 268
         Source: "require(!halted)"
        FunctionCall
           Type: tuple()
           Source: "require(!halted)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!halted"
            Identifier halted
               Type: bool
               Source: "halted"
      VariableDeclarationStatement
         Gas costs: 10
         Source: "uint256 weiAmount                  = msg.value"
        VariableDeclaration "weiAmount"
           Type: uint256
           Source: "uint256 weiAmount"
          ElementaryTypeName uint256
             Source: "uint256"
        MemberAccess to member value
           Type: uint256
           Source: "msg.value"
          Identifier msg
             Type: msg
             Source: "msg"
      VariableDeclarationStatement
         Gas costs: 26
         Source: "uint256 tokens                     = SafeMath.div(SafeMath.mul(weiAmount, getCurrentRate()), 1 ether)"
        VariableDeclaration "tokens"
           Type: uint256
           Source: "uint256 tokens"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "SafeMath.div(SafeMath.mul(weiAmount, getCurrentRate()), 1 ether)"
          MemberAccess to member div
             Type: function (uint256,uint256) pure returns (uint256)
             Source: "SafeMath.div"
            Identifier SafeMath
               Type: type(library SafeMath)
               Source: "SafeMath"
          FunctionCall
             Type: uint256
             Source: "SafeMath.mul(weiAmount, getCurrentRate())"
            MemberAccess to member mul
               Type: function (uint256,uint256) pure returns (uint256)
               Source: "SafeMath.mul"
              Identifier SafeMath
                 Type: type(library SafeMath)
                 Source: "SafeMath"
            Identifier weiAmount
               Type: uint256
               Source: "weiAmount"
            FunctionCall
               Type: uint256
               Source: "getCurrentRate()"
              Identifier getCurrentRate
                 Type: function () view returns (uint256)
                 Source: "getCurrentRate"
          Literal, token: [no token] value: 1
             Type: int_const 1000000000000000000
             Source: "1 ether"
      ExpressionStatement
         Gas costs: 444
         Source: "require(ALLOC_CROWDSALE - astrSold >= tokens)"
        FunctionCall
           Type: tuple()
           Source: "require(ALLOC_CROWDSALE - astrSold >= tokens)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "ALLOC_CROWDSALE - astrSold >= tokens"
            BinaryOperation using operator -
               Type: uint256
               Source: "ALLOC_CROWDSALE - astrSold"
              Identifier ALLOC_CROWDSALE
                 Type: uint256
                 Source: "ALLOC_CROWDSALE"
              Identifier astrSold
                 Type: uint256
                 Source: "astrSold"
            Identifier tokens
               Type: uint256
               Source: "tokens"
      ExpressionStatement
         Gas costs: 20233
         Source: "weiRaised                          += weiAmount"
        Assignment using operator +=
           Type: uint256
           Source: "weiRaised                          += weiAmount"
          Identifier weiRaised
             Type: uint256
             Source: "weiRaised"
          Identifier weiAmount
             Type: uint256
             Source: "weiAmount"
      ExpressionStatement
         Gas costs: 20233
         Source: "astrSold                           += tokens"
        Assignment using operator +=
           Type: uint256
           Source: "astrSold                           += tokens"
          Identifier astrSold
             Type: uint256
             Source: "astrSold"
          Identifier tokens
             Type: uint256
             Source: "tokens"
      ExpressionStatement
         Gas costs: [???]
         Source: "token.transferFrom(ownerAddress, msg.sender, tokens)"
        FunctionCall
           Type: bool
           Source: "token.transferFrom(ownerAddress, msg.sender, tokens)"
          MemberAccess to member transferFrom
             Type: function (address,address,uint256) external returns (bool)
             Source: "token.transferFrom"
            Identifier token
               Type: contract ERC20
               Source: "token"
          Identifier ownerAddress
             Type: address
             Source: "ownerAddress"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier tokens
             Type: uint256
             Source: "tokens"
      ExpressionStatement
         Gas costs: [???]
         Source: "wallet.transfer(msg.value)"
        FunctionCall
           Type: tuple()
           Source: "wallet.transfer(msg.value)"
          MemberAccess to member transfer
             Type: function (uint256)
             Source: "wallet.transfer"
            Identifier wallet
               Type: address
               Source: "wallet"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "validPurchase" - const
     Source: "function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = (msg.value != 0);\r\n    bool astrAvailable = (ALLOC_CROWDSALE - astrSold) > 0; \r\n    return withinPeriod && nonZeroPurchase && astrAvailable && ! crowdsaleClosed;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = (msg.value != 0);\r\n    bool astrAvailable = (ALLOC_CROWDSALE - astrSold) > 0; \r\n    return withinPeriod && nonZeroPurchase && astrAvailable && ! crowdsaleClosed;\r\n  }"
      VariableDeclarationStatement
         Gas costs: 452
         Source: "bool withinPeriod = now >= startTime && now <= endTime"
        VariableDeclaration "withinPeriod"
           Type: bool
           Source: "bool withinPeriod"
          ElementaryTypeName bool
             Source: "bool"
        BinaryOperation using operator &&
           Type: bool
           Source: "now >= startTime && now <= endTime"
          BinaryOperation using operator >=
             Type: bool
             Source: "now >= startTime"
            Identifier now
               Type: uint256
               Source: "now"
            Identifier startTime
               Type: uint256
               Source: "startTime"
          BinaryOperation using operator <=
             Type: bool
             Source: "now <= endTime"
            Identifier now
               Type: uint256
               Source: "now"
            Identifier endTime
               Type: uint256
               Source: "endTime"
      VariableDeclarationStatement
         Gas costs: 19
         Source: "bool nonZeroPurchase = (msg.value != 0)"
        VariableDeclaration "nonZeroPurchase"
           Type: bool
           Source: "bool nonZeroPurchase"
          ElementaryTypeName bool
             Source: "bool"
        TupleExpression
           Type: bool
           Source: "(msg.value != 0)"
          BinaryOperation using operator !=
             Type: bool
             Source: "msg.value != 0"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      VariableDeclarationStatement
         Gas costs: 423
         Source: "bool astrAvailable = (ALLOC_CROWDSALE - astrSold) > 0"
        VariableDeclaration "astrAvailable"
           Type: bool
           Source: "bool astrAvailable"
          ElementaryTypeName bool
             Source: "bool"
        BinaryOperation using operator >
           Type: bool
           Source: "(ALLOC_CROWDSALE - astrSold) > 0"
          TupleExpression
             Type: uint256
             Source: "(ALLOC_CROWDSALE - astrSold)"
            BinaryOperation using operator -
               Type: uint256
               Source: "ALLOC_CROWDSALE - astrSold"
              Identifier ALLOC_CROWDSALE
                 Type: uint256
                 Source: "ALLOC_CROWDSALE"
              Identifier astrSold
                 Type: uint256
                 Source: "astrSold"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      Return
         Gas costs: 372
         Source: "return withinPeriod && nonZeroPurchase && astrAvailable && ! crowdsaleClosed"
        BinaryOperation using operator &&
           Type: bool
           Source: "withinPeriod && nonZeroPurchase && astrAvailable && ! crowdsaleClosed"
          BinaryOperation using operator &&
             Type: bool
             Source: "withinPeriod && nonZeroPurchase && astrAvailable"
            BinaryOperation using operator &&
               Type: bool
               Source: "withinPeriod && nonZeroPurchase"
              Identifier withinPeriod
                 Type: bool
                 Source: "withinPeriod"
              Identifier nonZeroPurchase
                 Type: bool
                 Source: "nonZeroPurchase"
            Identifier astrAvailable
               Type: bool
               Source: "astrAvailable"
          UnaryOperation (prefix) !
             Type: bool
             Source: "! crowdsaleClosed"
            Identifier crowdsaleClosed
               Type: bool
               Source: "crowdsaleClosed"
  FunctionDefinition "getCurrentRate" - const
     Source: "function getCurrentRate() internal constant returns (uint256) {  \r\n    if( PRICE_VARIABLE > 0 ) {\r\n      return PRICE_VARIABLE; // we can manually set prices if we want\r\n    }\r\n    return PRICE_STAGE_PS;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{  \r\n    if( PRICE_VARIABLE > 0 ) {\r\n      return PRICE_VARIABLE; // we can manually set prices if we want\r\n    }\r\n    return PRICE_STAGE_PS;\r\n  }"
      IfStatement
         Source: "if( PRICE_VARIABLE > 0 ) {\r\n      return PRICE_VARIABLE; // we can manually set prices if we want\r\n    }"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 209
           Source: "PRICE_VARIABLE > 0"
          Identifier PRICE_VARIABLE
             Type: uint256
             Source: "PRICE_VARIABLE"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n      return PRICE_VARIABLE; // we can manually set prices if we want\r\n    }"
          Return
             Gas costs: 219
             Source: "return PRICE_VARIABLE"
            Identifier PRICE_VARIABLE
               Type: uint256
               Source: "PRICE_VARIABLE"
      Return
         Gas costs: 208
         Source: "return PRICE_STAGE_PS"
        Identifier PRICE_STAGE_PS
           Type: uint256
           Source: "PRICE_STAGE_PS"
  FunctionDefinition "setNewRate" - public
     Source: "function setNewRate(uint256 _coinsPerEther) onlyOwner public {\r\n    if( _coinsPerEther > 0 ) {\r\n        PRICE_VARIABLE = _coinsPerEther * decimalsConversion;\r\n    }\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _coinsPerEther)"
      VariableDeclaration "_coinsPerEther"
         Type: uint256
         Source: "uint256 _coinsPerEther"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n    if( _coinsPerEther > 0 ) {\r\n        PRICE_VARIABLE = _coinsPerEther * decimalsConversion;\r\n    }\r\n  }"
      IfStatement
         Source: "if( _coinsPerEther > 0 ) {\r\n        PRICE_VARIABLE = _coinsPerEther * decimalsConversion;\r\n    }"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 9
           Source: "_coinsPerEther > 0"
          Identifier _coinsPerEther
             Type: uint256
             Source: "_coinsPerEther"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n        PRICE_VARIABLE = _coinsPerEther * decimalsConversion;\r\n    }"
          ExpressionStatement
             Gas costs: 20222
             Source: "PRICE_VARIABLE = _coinsPerEther * decimalsConversion"
            Assignment using operator =
               Type: uint256
               Source: "PRICE_VARIABLE = _coinsPerEther * decimalsConversion"
              Identifier PRICE_VARIABLE
                 Type: uint256
                 Source: "PRICE_VARIABLE"
              BinaryOperation using operator *
                 Type: uint256
                 Source: "_coinsPerEther * decimalsConversion"
                Identifier _coinsPerEther
                   Type: uint256
                   Source: "_coinsPerEther"
                Identifier decimalsConversion
                   Type: uint256
                   Source: "decimalsConversion"
  FunctionDefinition "setFixedRate" - public
     Source: "function setFixedRate() onlyOwner public {\r\n     PRICE_VARIABLE = 0 * decimalsConversion;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n     PRICE_VARIABLE = 0 * decimalsConversion;\r\n  }"
      ExpressionStatement
         Gas costs: 5222
         Source: "PRICE_VARIABLE = 0 * decimalsConversion"
        Assignment using operator =
           Type: uint256
           Source: "PRICE_VARIABLE = 0 * decimalsConversion"
          Identifier PRICE_VARIABLE
             Type: uint256
             Source: "PRICE_VARIABLE"
          BinaryOperation using operator *
             Type: uint256
             Source: "0 * decimalsConversion"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
            Identifier decimalsConversion
               Type: uint256
               Source: "decimalsConversion"
  FunctionDefinition "closeSaleAnyway" - public
     Source: "function closeSaleAnyway() onlyOwner public {\r\n      // wallet.transfer(weiRaised);\r\n      crowdsaleClosed = true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n      // wallet.transfer(weiRaised);\r\n      crowdsaleClosed = true;\r\n    }"
      ExpressionStatement
         Gas costs: 20317
         Source: "crowdsaleClosed = true"
        Assignment using operator =
           Type: bool
           Source: "crowdsaleClosed = true"
          Identifier crowdsaleClosed
             Type: bool
             Source: "crowdsaleClosed"
          Literal, token: true value: true
             Type: bool
             Source: "true"
  FunctionDefinition "safeCloseSale" - public
     Source: "function safeCloseSale()  onlyOwner afterDeadline public {\r\n    // wallet.transfer(weiRaised);\r\n    crowdsaleClosed = true;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    ModifierInvocation "afterDeadline"
       Gas costs: 0
       Source: "afterDeadline"
      Identifier afterDeadline
         Type: modifier ()
         Source: "afterDeadline"
    Block
       Source: "{\r\n    // wallet.transfer(weiRaised);\r\n    crowdsaleClosed = true;\r\n  }"
      ExpressionStatement
         Gas costs: 20317
         Source: "crowdsaleClosed = true"
        Assignment using operator =
           Type: bool
           Source: "crowdsaleClosed = true"
          Identifier crowdsaleClosed
             Type: bool
             Source: "crowdsaleClosed"
          Literal, token: true value: true
             Type: bool
             Source: "true"
  FunctionDefinition "pause" - public
     Source: "function pause() onlyOwner public {\r\n    halted = true;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n    halted = true;\r\n  }"
      ExpressionStatement
         Gas costs: 20267
         Source: "halted = true"
        Assignment using operator =
           Type: bool
           Source: "halted = true"
          Identifier halted
             Type: bool
             Source: "halted"
          Literal, token: true value: true
             Type: bool
             Source: "true"
  FunctionDefinition "unpause" - public
     Source: "function unpause() onlyOwner public {\r\n    halted = false;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n    halted = false;\r\n  }"
      ExpressionStatement
         Gas costs: 20267
         Source: "halted = false"
        Assignment using operator =
           Type: bool
           Source: "halted = false"
          Identifier halted
             Type: bool
             Source: "halted"
          Literal, token: false value: false
             Type: bool
             Source: "false"
