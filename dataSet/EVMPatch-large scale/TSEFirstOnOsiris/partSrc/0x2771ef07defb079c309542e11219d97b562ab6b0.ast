Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0x2771ef07defb079c309542e11219d97b562ab6b0.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.19;"
ContractDefinition "ERC20"
   Gas costs: 0
   Source: "contract ERC20\r\n{\r\n    function totalSupply() public constant returns (uint totalsupply);\r\n    \r\n    function balanceOf(address _owner) public constant returns (uint balance);\r\n    \r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    \r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    \r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    \r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining);\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    \r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}"
  FunctionDefinition "totalSupply" - public - const
     Source: "function totalSupply() public constant returns (uint totalsupply);"
    ParameterList
       Source: "()"
    ParameterList
       Source: "(uint totalsupply)"
      VariableDeclaration "totalsupply"
         Type: uint256
         Source: "uint totalsupply"
        ElementaryTypeName uint
           Source: "uint"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) public constant returns (uint balance);"
    ParameterList
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint balance"
        ElementaryTypeName uint
           Source: "uint"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint _value) public returns (bool success);"
    ParameterList
       Source: "(address _to, uint _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint _value) public returns (bool success);"
    ParameterList
       Source: "(address _from, address _to, uint _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint _value) public returns (bool success);"
    ParameterList
       Source: "(address _spender, uint _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) public constant returns (uint remaining);"
    ParameterList
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint remaining"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "Transfer"
     Source: "event Transfer(address indexed _from, address indexed _to, uint _value);"
    ParameterList
       Source: "(address indexed _from, address indexed _to, uint _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address indexed _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address indexed _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "Approval"
     Source: "event Approval(address indexed _owner, address indexed _spender, uint _value);"
    ParameterList
       Source: "(address indexed _owner, address indexed _spender, uint _value)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address indexed _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address indexed _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
ContractDefinition "AVL"
   Source: "contract AVL is ERC20\r\n{\r\n    uint public incirculation;\r\n\r\n    mapping (address => uint) balances;\r\n    mapping (address => mapping (address => uint)) allowed;\r\n    \r\n    mapping (address => uint) goo;\r\n\r\n    function transfer(address _to, uint _value) public returns (bool success)\r\n    {\r\n        uint gas = msg.gas;\r\n        \r\n        if (balances[msg.sender] >= _value && _value > 0)\r\n        {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            \r\n            Transfer(msg.sender, _to, _value);\r\n          \r\n            refund(gas+1158);\r\n            \r\n            return true;\r\n        } \r\n        else\r\n        {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success)\r\n    {\r\n        uint gas = msg.gas;\r\n\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0)\r\n        {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            \r\n            Transfer(_from, _to, _value);\r\n          \r\n            refund(gas);\r\n            \r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public returns (bool success)\r\n    {\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n   \r\n    function balanceOf(address _owner) public constant returns (uint balance)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint totalsupply)\r\n    {\r\n        return incirculation;\r\n    }\r\n    \r\n    function refund(uint gas) internal\r\n    {\r\n        uint amount = (gas-msg.gas+36120) * tx.gasprice;\r\n        \r\n        if (goo[msg.sender] < amount && goo[msg.sender] > 0)\r\n        {\r\n            amount = goo[msg.sender];\r\n        }\r\n        \r\n        if (goo[msg.sender] >= amount)\r\n        {\r\n            goo[msg.sender] -= amount;\r\n            \r\n            msg.sender.transfer(amount);\r\n        }\r\n    }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "ERC20"
    UserDefinedTypeName "ERC20"
       Source: "ERC20"
  VariableDeclaration "incirculation"
     Type: uint256
     Gas costs: [???]
     Source: "uint public incirculation"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping (address => uint) balances"
    Mapping
       Source: "mapping (address => uint)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint
         Source: "uint"
  VariableDeclaration "allowed"
     Type: mapping(address => mapping(address => uint256))
     Gas costs: 0
     Source: "mapping (address => mapping (address => uint)) allowed"
    Mapping
       Source: "mapping (address => mapping (address => uint))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping (address => uint)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint
           Source: "uint"
  VariableDeclaration "goo"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping (address => uint) goo"
    Mapping
       Source: "mapping (address => uint)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint
         Source: "uint"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint _value) public returns (bool success)\r\n    {\r\n        uint gas = msg.gas;\r\n        \r\n        if (balances[msg.sender] >= _value && _value > 0)\r\n        {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            \r\n            Transfer(msg.sender, _to, _value);\r\n          \r\n            refund(gas+1158);\r\n            \r\n            return true;\r\n        } \r\n        else\r\n        {\r\n            revert();\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        uint gas = msg.gas;\r\n        \r\n        if (balances[msg.sender] >= _value && _value > 0)\r\n        {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            \r\n            Transfer(msg.sender, _to, _value);\r\n          \r\n            refund(gas+1158);\r\n            \r\n            return true;\r\n        } \r\n        else\r\n        {\r\n            revert();\r\n        }\r\n    }"
      VariableDeclarationStatement
         Gas costs: 10
         Source: "uint gas = msg.gas"
        VariableDeclaration "gas"
           Type: uint256
           Source: "uint gas"
          ElementaryTypeName uint
             Source: "uint"
        MemberAccess to member gas
           Type: uint256
           Source: "msg.gas"
          Identifier msg
             Type: msg
             Source: "msg"
      IfStatement
         Source: "if (balances[msg.sender] >= _value && _value > 0)\r\n        {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            \r\n            Transfer(msg.sender, _to, _value);\r\n          \r\n            refund(gas+1158);\r\n            \r\n            return true;\r\n        } \r\n        else\r\n        {\r\n            revert();\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 338
           Source: "balances[msg.sender] >= _value && _value > 0"
          BinaryOperation using operator >=
             Type: bool
             Source: "balances[msg.sender] >= _value"
            IndexAccess
               Type: uint256
               Source: "balances[msg.sender]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
          BinaryOperation using operator >
             Type: bool
             Source: "_value > 0"
            Identifier _value
               Type: uint256
               Source: "_value"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
        Block
           Source: "{\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            \r\n            Transfer(msg.sender, _to, _value);\r\n          \r\n            refund(gas+1158);\r\n            \r\n            return true;\r\n        }"
          ExpressionStatement
             Gas costs: 20328
             Source: "balances[msg.sender] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "balances[msg.sender] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20323
             Source: "balances[_to] += _value"
            Assignment using operator +=
               Type: uint256
               Source: "balances[_to] += _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: [???]
             Source: "Transfer(msg.sender, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(msg.sender, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 24
             Source: "refund(gas+1158)"
            FunctionCall
               Type: tuple()
               Source: "refund(gas+1158)"
              Identifier refund
                 Type: function (uint256)
                 Source: "refund"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "gas+1158"
                Identifier gas
                   Type: uint256
                   Source: "gas"
                Literal, token: [no token] value: 1158
                   Type: int_const 1158
                   Source: "1158"
          Return
             Gas costs: 8
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{\r\n            revert();\r\n        }"
          ExpressionStatement
             Gas costs: 6
             Source: "revert()"
            FunctionCall
               Type: tuple()
               Source: "revert()"
              Identifier revert
                 Type: function () pure
                 Source: "revert"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint _value) public returns (bool success)\r\n    {\r\n        uint gas = msg.gas;\r\n\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0)\r\n        {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            \r\n            Transfer(_from, _to, _value);\r\n          \r\n            refund(gas);\r\n            \r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            revert();\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        uint gas = msg.gas;\r\n\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0)\r\n        {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            \r\n            Transfer(_from, _to, _value);\r\n          \r\n            refund(gas);\r\n            \r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            revert();\r\n        }\r\n    }"
      VariableDeclarationStatement
         Gas costs: 10
         Source: "uint gas = msg.gas"
        VariableDeclaration "gas"
           Type: uint256
           Source: "uint gas"
          ElementaryTypeName uint
             Source: "uint"
        MemberAccess to member gas
           Type: uint256
           Source: "msg.gas"
          Identifier msg
             Type: msg
             Source: "msg"
      IfStatement
         Source: "if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0)\r\n        {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            \r\n            Transfer(_from, _to, _value);\r\n          \r\n            refund(gas);\r\n            \r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            revert();\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 758
           Source: "balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0"
          BinaryOperation using operator &&
             Type: bool
             Source: "balances[_from] >= _value && allowed[_from][msg.sender] >= _value"
            BinaryOperation using operator >=
               Type: bool
               Source: "balances[_from] >= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_from]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _from
                   Type: address
                   Source: "_from"
              Identifier _value
                 Type: uint256
                 Source: "_value"
            BinaryOperation using operator >=
               Type: bool
               Source: "allowed[_from][msg.sender] >= _value"
              IndexAccess
                 Type: uint256
                 Source: "allowed[_from][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[_from]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  Identifier _from
                     Type: address
                     Source: "_from"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          BinaryOperation using operator >
             Type: bool
             Source: "_value > 0"
            Identifier _value
               Type: uint256
               Source: "_value"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
        Block
           Source: "{\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            \r\n            Transfer(_from, _to, _value);\r\n          \r\n            refund(gas);\r\n            \r\n            return true;\r\n        }"
          ExpressionStatement
             Gas costs: 20329
             Source: "balances[_to] += _value"
            Assignment using operator +=
               Type: uint256
               Source: "balances[_to] += _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20323
             Source: "balances[_from] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "balances[_from] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_from]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _from
                   Type: address
                   Source: "_from"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20412
             Source: "allowed[_from][msg.sender] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "allowed[_from][msg.sender] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "allowed[_from][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[_from]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  Identifier _from
                     Type: address
                     Source: "_from"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: [???]
             Source: "Transfer(_from, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(_from, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              Identifier _from
                 Type: address
                 Source: "_from"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 18
             Source: "refund(gas)"
            FunctionCall
               Type: tuple()
               Source: "refund(gas)"
              Identifier refund
                 Type: function (uint256)
                 Source: "refund"
              Identifier gas
                 Type: uint256
                 Source: "gas"
          Return
             Gas costs: 8
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{\r\n            revert();\r\n        }"
          ExpressionStatement
             Gas costs: 6
             Source: "revert()"
            FunctionCall
               Type: tuple()
               Source: "revert()"
              Identifier revert
                 Type: function () pure
                 Source: "revert"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint _value) public returns (bool success)\r\n    {\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 20199
         Source: "allowed[msg.sender][_spender] = _value"
        Assignment using operator =
           Type: uint256
           Source: "allowed[msg.sender][_spender] = _value"
          IndexAccess
             Type: uint256
             Source: "allowed[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[msg.sender]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: [???]
         Source: "Approval(msg.sender, _spender, _value)"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender, _spender, _value)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) public constant returns (uint remaining)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint remaining"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        return allowed[_owner][_spender];\r\n    }"
      Return
         Gas costs: 394
         Source: "return allowed[_owner][_spender]"
        IndexAccess
           Type: uint256
           Source: "allowed[_owner][_spender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowed[_owner]"
            Identifier allowed
               Type: mapping(address => mapping(address => uint256))
               Source: "allowed"
            Identifier _owner
               Type: address
               Source: "_owner"
          Identifier _spender
             Type: address
             Source: "_spender"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) public constant returns (uint balance)\r\n    {\r\n        return balances[_owner];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint balance"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        return balances[_owner];\r\n    }"
      Return
         Gas costs: 304
         Source: "return balances[_owner]"
        IndexAccess
           Type: uint256
           Source: "balances[_owner]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          Identifier _owner
             Type: address
             Source: "_owner"
  FunctionDefinition "totalSupply" - public - const
     Source: "function totalSupply() public constant returns (uint totalsupply)\r\n    {\r\n        return incirculation;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint totalsupply)"
      VariableDeclaration "totalsupply"
         Type: uint256
         Source: "uint totalsupply"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        return incirculation;\r\n    }"
      Return
         Gas costs: 208
         Source: "return incirculation"
        Identifier incirculation
           Type: uint256
           Source: "incirculation"
  FunctionDefinition "refund"
     Source: "function refund(uint gas) internal\r\n    {\r\n        uint amount = (gas-msg.gas+36120) * tx.gasprice;\r\n        \r\n        if (goo[msg.sender] < amount && goo[msg.sender] > 0)\r\n        {\r\n            amount = goo[msg.sender];\r\n        }\r\n        \r\n        if (goo[msg.sender] >= amount)\r\n        {\r\n            goo[msg.sender] -= amount;\r\n            \r\n            msg.sender.transfer(amount);\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint gas)"
      VariableDeclaration "gas"
         Type: uint256
         Source: "uint gas"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        uint amount = (gas-msg.gas+36120) * tx.gasprice;\r\n        \r\n        if (goo[msg.sender] < amount && goo[msg.sender] > 0)\r\n        {\r\n            amount = goo[msg.sender];\r\n        }\r\n        \r\n        if (goo[msg.sender] >= amount)\r\n        {\r\n            goo[msg.sender] -= amount;\r\n            \r\n            msg.sender.transfer(amount);\r\n        }\r\n    }"
      VariableDeclarationStatement
         Gas costs: 29
         Source: "uint amount = (gas-msg.gas+36120) * tx.gasprice"
        VariableDeclaration "amount"
           Type: uint256
           Source: "uint amount"
          ElementaryTypeName uint
             Source: "uint"
        BinaryOperation using operator *
           Type: uint256
           Source: "(gas-msg.gas+36120) * tx.gasprice"
          TupleExpression
             Type: uint256
             Source: "(gas-msg.gas+36120)"
            BinaryOperation using operator +
               Type: uint256
               Source: "gas-msg.gas+36120"
              BinaryOperation using operator -
                 Type: uint256
                 Source: "gas-msg.gas"
                Identifier gas
                   Type: uint256
                   Source: "gas"
                MemberAccess to member gas
                   Type: uint256
                   Source: "msg.gas"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Literal, token: [no token] value: 36120
                 Type: int_const 36120
                 Source: "36120"
          MemberAccess to member gasprice
             Type: uint256
             Source: "tx.gasprice"
            Identifier tx
               Type: tx
               Source: "tx"
      IfStatement
         Source: "if (goo[msg.sender] < amount && goo[msg.sender] > 0)\r\n        {\r\n            amount = goo[msg.sender];\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 630
           Source: "goo[msg.sender] < amount && goo[msg.sender] > 0"
          BinaryOperation using operator <
             Type: bool
             Source: "goo[msg.sender] < amount"
            IndexAccess
               Type: uint256
               Source: "goo[msg.sender]"
              Identifier goo
                 Type: mapping(address => uint256)
                 Source: "goo"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier amount
               Type: uint256
               Source: "amount"
          BinaryOperation using operator >
             Type: bool
             Source: "goo[msg.sender] > 0"
            IndexAccess
               Type: uint256
               Source: "goo[msg.sender]"
              Identifier goo
                 Type: mapping(address => uint256)
                 Source: "goo"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
        Block
           Source: "{\r\n            amount = goo[msg.sender];\r\n        }"
          ExpressionStatement
             Gas costs: 303
             Source: "amount = goo[msg.sender]"
            Assignment using operator =
               Type: uint256
               Source: "amount = goo[msg.sender]"
              Identifier amount
                 Type: uint256
                 Source: "amount"
              IndexAccess
                 Type: uint256
                 Source: "goo[msg.sender]"
                Identifier goo
                   Type: mapping(address => uint256)
                   Source: "goo"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
      IfStatement
         Source: "if (goo[msg.sender] >= amount)\r\n        {\r\n            goo[msg.sender] -= amount;\r\n            \r\n            msg.sender.transfer(amount);\r\n        }"
        BinaryOperation using operator >=
           Type: bool
           Gas costs: 307
           Source: "goo[msg.sender] >= amount"
          IndexAccess
             Type: uint256
             Source: "goo[msg.sender]"
            Identifier goo
               Type: mapping(address => uint256)
               Source: "goo"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier amount
             Type: uint256
             Source: "amount"
        Block
           Source: "{\r\n            goo[msg.sender] -= amount;\r\n            \r\n            msg.sender.transfer(amount);\r\n        }"
          ExpressionStatement
             Gas costs: 20328
             Source: "goo[msg.sender] -= amount"
            Assignment using operator -=
               Type: uint256
               Source: "goo[msg.sender] -= amount"
              IndexAccess
                 Type: uint256
                 Source: "goo[msg.sender]"
                Identifier goo
                   Type: mapping(address => uint256)
                   Source: "goo"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier amount
                 Type: uint256
                 Source: "amount"
          ExpressionStatement
             Gas costs: [???]
             Source: "msg.sender.transfer(amount)"
            FunctionCall
               Type: tuple()
               Source: "msg.sender.transfer(amount)"
              MemberAccess to member transfer
                 Type: function (uint256)
                 Source: "msg.sender.transfer"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier amount
                 Type: uint256
                 Source: "amount"
ContractDefinition "Avalanche"
   Source: "contract Avalanche is AVL \r\n{\r\n    string public constant name = \"Avalanche\";\r\n    uint8 public constant decimals = 4;\r\n    string public constant symbol = \"AVL\";\r\n    string public constant version = \"1.0\";\r\n\r\n    event tokensCreated(uint total, uint price);\r\n    event etherSent(uint total);\r\n    event etherLeaked(uint total);\r\n    \r\n    uint public constant pieceprice = 1 ether / 256;\r\n    uint public constant oneavl = 10000;\r\n    uint public constant totalavl = 1000000 * oneavl;\r\n    \r\n    mapping (address => bytes1) addresslevels;\r\n\r\n    mapping (address => uint) lastleak;\r\n    \r\n    function Avalanche() public\r\n    {\r\n        incirculation = 10000 * oneavl;\r\n        balances[0xe277694b762249f62e2458054fd3bfbb0a52ebc9] = 10000 * oneavl;\r\n    }\r\n\r\n    function () public payable\r\n    {\r\n        uint gas = msg.gas;\r\n\r\n        uint generateprice = getPrice(getAddressLevel());\r\n        uint generateamount = msg.value * oneavl / generateprice;\r\n        \r\n        if (incirculation + generateamount > totalavl)\r\n        {\r\n            revert();\r\n        }\r\n        \r\n        incirculation += generateamount;\r\n        balances[msg.sender] += generateamount;\r\n        goo[msg.sender] += msg.value;\r\n       \r\n        refund(gas); \r\n        \r\n        tokensCreated(generateamount, msg.value);\r\n    }\r\n   \r\n    function sendEther(address x) public payable \r\n    {\r\n        uint gas = msg.gas;\r\n        \r\n        x.transfer(msg.value);\r\n        \r\n        refund(gas+1715);\r\n        \r\n        etherSent(msg.value);\r\n    }\r\n   \r\n    function leakEther() public \r\n    {\r\n        uint gas = msg.gas;\r\n        \r\n        if (now-lastleak[msg.sender] < 1 days)\r\n        { \r\n            refund(gas);\r\n            \r\n            etherLeaked(0);\r\n            \r\n            return;\r\n        }\r\n        \r\n        uint amount = goo[msg.sender] / uint(getAddressLevel());\r\n        \r\n        if (goo[msg.sender] < amount && goo[msg.sender] > 0)\r\n        {\r\n            amount = goo[msg.sender];\r\n        }\r\n        \r\n        if (goo[msg.sender] >= amount)\r\n        {\r\n            lastleak[msg.sender] = now;\r\n            \r\n            goo[msg.sender] -= amount;\r\n            \r\n            msg.sender.transfer(amount);\r\n            \r\n            refund(gas+359);\r\n            \r\n            etherLeaked(amount);\r\n        }\r\n    }\r\n    \r\n    function gooBalanceOf(address x) public constant returns (uint) \r\n    { \r\n        return goo[x]; \r\n    }\r\n    \r\n    function getPrice(bytes1 addrLevel) public pure returns (uint)\r\n    {\r\n        return pieceprice * (uint(addrLevel) + 1);\r\n    }\r\n   \r\n    function getAddressLevel() internal returns (bytes1 res)\r\n    {\r\n        if (addresslevels[msg.sender] > 0) \r\n        {\r\n            return addresslevels[msg.sender];\r\n        }\r\n      \r\n        bytes1 highest = 0;\r\n        \r\n        for (uint i = 0; i < 20; i++)\r\n        {\r\n            bytes1 c = bytes1(uint8(uint(msg.sender) / (2 ** (8 * (19 - i)))));\r\n            \r\n            if (bytes1(c) > highest) highest = c;\r\n        }\r\n      \r\n        addresslevels[msg.sender] = highest;\r\n        \r\n        return highest;\r\n    }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "AVL"
    UserDefinedTypeName "AVL"
       Source: "AVL"
  VariableDeclaration "name"
     Type: string memory
     Gas costs: [???]
     Source: "string public constant name = \"Avalanche\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: Avalanche
       Type: literal_string "Avalanche"
       Source: "\"Avalanche\""
  VariableDeclaration "decimals"
     Type: uint8
     Gas costs: [???]
     Source: "uint8 public constant decimals = 4"
    ElementaryTypeName uint8
       Source: "uint8"
    Literal, token: [no token] value: 4
       Type: int_const 4
       Source: "4"
  VariableDeclaration "symbol"
     Type: string memory
     Gas costs: [???]
     Source: "string public constant symbol = \"AVL\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: AVL
       Type: literal_string "AVL"
       Source: "\"AVL\""
  VariableDeclaration "version"
     Type: string memory
     Gas costs: [???]
     Source: "string public constant version = \"1.0\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: 1.0
       Type: literal_string "1.0"
       Source: "\"1.0\""
  EventDefinition "tokensCreated"
     Gas costs: 0
     Source: "event tokensCreated(uint total, uint price);"
    ParameterList
       Source: "(uint total, uint price)"
      VariableDeclaration "total"
         Type: uint256
         Source: "uint total"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "price"
         Type: uint256
         Source: "uint price"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "etherSent"
     Gas costs: 0
     Source: "event etherSent(uint total);"
    ParameterList
       Source: "(uint total)"
      VariableDeclaration "total"
         Type: uint256
         Source: "uint total"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "etherLeaked"
     Gas costs: 0
     Source: "event etherLeaked(uint total);"
    ParameterList
       Source: "(uint total)"
      VariableDeclaration "total"
         Type: uint256
         Source: "uint total"
        ElementaryTypeName uint
           Source: "uint"
  VariableDeclaration "pieceprice"
     Type: uint256
     Gas costs: [???]
     Source: "uint public constant pieceprice = 1 ether / 256"
    ElementaryTypeName uint
       Source: "uint"
    BinaryOperation using operator /
       Type: int_const 3906250000000000
       Source: "1 ether / 256"
      Literal, token: [no token] value: 1
         Type: int_const 1000000000000000000
         Source: "1 ether"
      Literal, token: [no token] value: 256
         Type: int_const 256
         Source: "256"
  VariableDeclaration "oneavl"
     Type: uint256
     Gas costs: [???]
     Source: "uint public constant oneavl = 10000"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 10000
       Type: int_const 10000
       Source: "10000"
  VariableDeclaration "totalavl"
     Type: uint256
     Gas costs: [???]
     Source: "uint public constant totalavl = 1000000 * oneavl"
    ElementaryTypeName uint
       Source: "uint"
    BinaryOperation using operator *
       Type: uint256
       Source: "1000000 * oneavl"
      Literal, token: [no token] value: 1000000
         Type: int_const 1000000
         Source: "1000000"
      Identifier oneavl
         Type: uint256
         Source: "oneavl"
  VariableDeclaration "addresslevels"
     Type: mapping(address => bytes1)
     Gas costs: 0
     Source: "mapping (address => bytes1) addresslevels"
    Mapping
       Source: "mapping (address => bytes1)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName bytes1
         Source: "bytes1"
  VariableDeclaration "lastleak"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping (address => uint) lastleak"
    Mapping
       Source: "mapping (address => uint)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint
         Source: "uint"
  FunctionDefinition "Avalanche" - public
     Source: "function Avalanche() public\r\n    {\r\n        incirculation = 10000 * oneavl;\r\n        balances[0xe277694b762249f62e2458054fd3bfbb0a52ebc9] = 10000 * oneavl;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        incirculation = 10000 * oneavl;\r\n        balances[0xe277694b762249f62e2458054fd3bfbb0a52ebc9] = 10000 * oneavl;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "incirculation = 10000 * oneavl"
        Assignment using operator =
           Type: uint256
           Source: "incirculation = 10000 * oneavl"
          Identifier incirculation
             Type: uint256
             Source: "incirculation"
          BinaryOperation using operator *
             Type: uint256
             Source: "10000 * oneavl"
            Literal, token: [no token] value: 10000
               Type: int_const 10000
               Source: "10000"
            Identifier oneavl
               Type: uint256
               Source: "oneavl"
      ExpressionStatement
         Gas costs: 0
         Source: "balances[0xe277694b762249f62e2458054fd3bfbb0a52ebc9] = 10000 * oneavl"
        Assignment using operator =
           Type: uint256
           Source: "balances[0xe277694b762249f62e2458054fd3bfbb0a52ebc9] = 10000 * oneavl"
          IndexAccess
             Type: uint256
             Source: "balances[0xe277694b762249f62e2458054fd3bfbb0a52ebc9]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Literal, token: [no token] value: 0xe277694b762249f62e2458054fd3bfbb0a52ebc9
               Type: int_const 1292...(41 digits omitted)...4777
               Source: "0xe277694b762249f62e2458054fd3bfbb0a52ebc9"
          BinaryOperation using operator *
             Type: uint256
             Source: "10000 * oneavl"
            Literal, token: [no token] value: 10000
               Type: int_const 10000
               Source: "10000"
            Identifier oneavl
               Type: uint256
               Source: "oneavl"
  FunctionDefinition "" - public
     Source: "function () public payable\r\n    {\r\n        uint gas = msg.gas;\r\n\r\n        uint generateprice = getPrice(getAddressLevel());\r\n        uint generateamount = msg.value * oneavl / generateprice;\r\n        \r\n        if (incirculation + generateamount > totalavl)\r\n        {\r\n            revert();\r\n        }\r\n        \r\n        incirculation += generateamount;\r\n        balances[msg.sender] += generateamount;\r\n        goo[msg.sender] += msg.value;\r\n       \r\n        refund(gas); \r\n        \r\n        tokensCreated(generateamount, msg.value);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        uint gas = msg.gas;\r\n\r\n        uint generateprice = getPrice(getAddressLevel());\r\n        uint generateamount = msg.value * oneavl / generateprice;\r\n        \r\n        if (incirculation + generateamount > totalavl)\r\n        {\r\n            revert();\r\n        }\r\n        \r\n        incirculation += generateamount;\r\n        balances[msg.sender] += generateamount;\r\n        goo[msg.sender] += msg.value;\r\n       \r\n        refund(gas); \r\n        \r\n        tokensCreated(generateamount, msg.value);\r\n    }"
      VariableDeclarationStatement
         Gas costs: 10
         Source: "uint gas = msg.gas"
        VariableDeclaration "gas"
           Type: uint256
           Source: "uint gas"
          ElementaryTypeName uint
             Source: "uint"
        MemberAccess to member gas
           Type: uint256
           Source: "msg.gas"
          Identifier msg
             Type: msg
             Source: "msg"
      VariableDeclarationStatement
         Gas costs: 16
         Source: "uint generateprice = getPrice(getAddressLevel())"
        VariableDeclaration "generateprice"
           Type: uint256
           Source: "uint generateprice"
          ElementaryTypeName uint
             Source: "uint"
        FunctionCall
           Type: uint256
           Source: "getPrice(getAddressLevel())"
          Identifier getPrice
             Type: function (bytes1) pure returns (uint256)
             Source: "getPrice"
          FunctionCall
             Type: bytes1
             Source: "getAddressLevel()"
            Identifier getAddressLevel
               Type: function () returns (bytes1)
               Source: "getAddressLevel"
      VariableDeclarationStatement
         Gas costs: 46
         Source: "uint generateamount = msg.value * oneavl / generateprice"
        VariableDeclaration "generateamount"
           Type: uint256
           Source: "uint generateamount"
          ElementaryTypeName uint
             Source: "uint"
        BinaryOperation using operator /
           Type: uint256
           Source: "msg.value * oneavl / generateprice"
          BinaryOperation using operator *
             Type: uint256
             Source: "msg.value * oneavl"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier oneavl
               Type: uint256
               Source: "oneavl"
          Identifier generateprice
             Type: uint256
             Source: "generateprice"
      IfStatement
         Source: "if (incirculation + generateamount > totalavl)\r\n        {\r\n            revert();\r\n        }"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 212
           Source: "incirculation + generateamount > totalavl"
          BinaryOperation using operator +
             Type: uint256
             Source: "incirculation + generateamount"
            Identifier incirculation
               Type: uint256
               Source: "incirculation"
            Identifier generateamount
               Type: uint256
               Source: "generateamount"
          Identifier totalavl
             Type: uint256
             Source: "totalavl"
        Block
           Source: "{\r\n            revert();\r\n        }"
          ExpressionStatement
             Gas costs: 6
             Source: "revert()"
            FunctionCall
               Type: tuple()
               Source: "revert()"
              Identifier revert
                 Type: function () pure
                 Source: "revert"
      ExpressionStatement
         Gas costs: 20233
         Source: "incirculation += generateamount"
        Assignment using operator +=
           Type: uint256
           Source: "incirculation += generateamount"
          Identifier incirculation
             Type: uint256
             Source: "incirculation"
          Identifier generateamount
             Type: uint256
             Source: "generateamount"
      ExpressionStatement
         Gas costs: 20328
         Source: "balances[msg.sender] += generateamount"
        Assignment using operator +=
           Type: uint256
           Source: "balances[msg.sender] += generateamount"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier generateamount
             Type: uint256
             Source: "generateamount"
      ExpressionStatement
         Gas costs: 20321
         Source: "goo[msg.sender] += msg.value"
        Assignment using operator +=
           Type: uint256
           Source: "goo[msg.sender] += msg.value"
          IndexAccess
             Type: uint256
             Source: "goo[msg.sender]"
            Identifier goo
               Type: mapping(address => uint256)
               Source: "goo"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 7
         Source: "refund(gas)"
        FunctionCall
           Type: tuple()
           Source: "refund(gas)"
          Identifier refund
             Type: function (uint256)
             Source: "refund"
          Identifier gas
             Type: uint256
             Source: "gas"
      ExpressionStatement
         Gas costs: [???]
         Source: "tokensCreated(generateamount, msg.value)"
        FunctionCall
           Type: tuple()
           Source: "tokensCreated(generateamount, msg.value)"
          Identifier tokensCreated
             Type: function (uint256,uint256)
             Source: "tokensCreated"
          Identifier generateamount
             Type: uint256
             Source: "generateamount"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "sendEther" - public
     Source: "function sendEther(address x) public payable \r\n    {\r\n        uint gas = msg.gas;\r\n        \r\n        x.transfer(msg.value);\r\n        \r\n        refund(gas+1715);\r\n        \r\n        etherSent(msg.value);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address x)"
      VariableDeclaration "x"
         Type: address
         Source: "address x"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        uint gas = msg.gas;\r\n        \r\n        x.transfer(msg.value);\r\n        \r\n        refund(gas+1715);\r\n        \r\n        etherSent(msg.value);\r\n    }"
      VariableDeclarationStatement
         Gas costs: 10
         Source: "uint gas = msg.gas"
        VariableDeclaration "gas"
           Type: uint256
           Source: "uint gas"
          ElementaryTypeName uint
             Source: "uint"
        MemberAccess to member gas
           Type: uint256
           Source: "msg.gas"
          Identifier msg
             Type: msg
             Source: "msg"
      ExpressionStatement
         Gas costs: [???]
         Source: "x.transfer(msg.value)"
        FunctionCall
           Type: tuple()
           Source: "x.transfer(msg.value)"
          MemberAccess to member transfer
             Type: function (uint256)
             Source: "x.transfer"
            Identifier x
               Type: address
               Source: "x"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 24
         Source: "refund(gas+1715)"
        FunctionCall
           Type: tuple()
           Source: "refund(gas+1715)"
          Identifier refund
             Type: function (uint256)
             Source: "refund"
          BinaryOperation using operator +
             Type: uint256
             Source: "gas+1715"
            Identifier gas
               Type: uint256
               Source: "gas"
            Literal, token: [no token] value: 1715
               Type: int_const 1715
               Source: "1715"
      ExpressionStatement
         Gas costs: [???]
         Source: "etherSent(msg.value)"
        FunctionCall
           Type: tuple()
           Source: "etherSent(msg.value)"
          Identifier etherSent
             Type: function (uint256)
             Source: "etherSent"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "leakEther" - public
     Source: "function leakEther() public \r\n    {\r\n        uint gas = msg.gas;\r\n        \r\n        if (now-lastleak[msg.sender] < 1 days)\r\n        { \r\n            refund(gas);\r\n            \r\n            etherLeaked(0);\r\n            \r\n            return;\r\n        }\r\n        \r\n        uint amount = goo[msg.sender] / uint(getAddressLevel());\r\n        \r\n        if (goo[msg.sender] < amount && goo[msg.sender] > 0)\r\n        {\r\n            amount = goo[msg.sender];\r\n        }\r\n        \r\n        if (goo[msg.sender] >= amount)\r\n        {\r\n            lastleak[msg.sender] = now;\r\n            \r\n            goo[msg.sender] -= amount;\r\n            \r\n            msg.sender.transfer(amount);\r\n            \r\n            refund(gas+359);\r\n            \r\n            etherLeaked(amount);\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        uint gas = msg.gas;\r\n        \r\n        if (now-lastleak[msg.sender] < 1 days)\r\n        { \r\n            refund(gas);\r\n            \r\n            etherLeaked(0);\r\n            \r\n            return;\r\n        }\r\n        \r\n        uint amount = goo[msg.sender] / uint(getAddressLevel());\r\n        \r\n        if (goo[msg.sender] < amount && goo[msg.sender] > 0)\r\n        {\r\n            amount = goo[msg.sender];\r\n        }\r\n        \r\n        if (goo[msg.sender] >= amount)\r\n        {\r\n            lastleak[msg.sender] = now;\r\n            \r\n            goo[msg.sender] -= amount;\r\n            \r\n            msg.sender.transfer(amount);\r\n            \r\n            refund(gas+359);\r\n            \r\n            etherLeaked(amount);\r\n        }\r\n    }"
      VariableDeclarationStatement
         Gas costs: 10
         Source: "uint gas = msg.gas"
        VariableDeclaration "gas"
           Type: uint256
           Source: "uint gas"
          ElementaryTypeName uint
             Source: "uint"
        MemberAccess to member gas
           Type: uint256
           Source: "msg.gas"
          Identifier msg
             Type: msg
             Source: "msg"
      IfStatement
         Source: "if (now-lastleak[msg.sender] < 1 days)\r\n        { \r\n            refund(gas);\r\n            \r\n            etherLeaked(0);\r\n            \r\n            return;\r\n        }"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 309
           Source: "now-lastleak[msg.sender] < 1 days"
          BinaryOperation using operator -
             Type: uint256
             Source: "now-lastleak[msg.sender]"
            Identifier now
               Type: uint256
               Source: "now"
            IndexAccess
               Type: uint256
               Source: "lastleak[msg.sender]"
              Identifier lastleak
                 Type: mapping(address => uint256)
                 Source: "lastleak"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
          Literal, token: [no token] value: 1
             Type: int_const 86400
             Source: "1 days"
        Block
           Source: "{ \r\n            refund(gas);\r\n            \r\n            etherLeaked(0);\r\n            \r\n            return;\r\n        }"
          ExpressionStatement
             Gas costs: 18
             Source: "refund(gas)"
            FunctionCall
               Type: tuple()
               Source: "refund(gas)"
              Identifier refund
                 Type: function (uint256)
                 Source: "refund"
              Identifier gas
                 Type: uint256
                 Source: "gas"
          ExpressionStatement
             Gas costs: [???]
             Source: "etherLeaked(0)"
            FunctionCall
               Type: tuple()
               Source: "etherLeaked(0)"
              Identifier etherLeaked
                 Type: function (uint256)
                 Source: "etherLeaked"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
          Return
             Gas costs: 11
             Source: "return;"
      VariableDeclarationStatement
         Gas costs: 360
         Source: "uint amount = goo[msg.sender] / uint(getAddressLevel())"
        VariableDeclaration "amount"
           Type: uint256
           Source: "uint amount"
          ElementaryTypeName uint
             Source: "uint"
        BinaryOperation using operator /
           Type: uint256
           Source: "goo[msg.sender] / uint(getAddressLevel())"
          IndexAccess
             Type: uint256
             Source: "goo[msg.sender]"
            Identifier goo
               Type: mapping(address => uint256)
               Source: "goo"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          FunctionCall
             Type: uint256
             Source: "uint(getAddressLevel())"
            ElementaryTypeNameExpression uint
               Type: type(uint256)
               Source: "uint"
            FunctionCall
               Type: bytes1
               Source: "getAddressLevel()"
              Identifier getAddressLevel
                 Type: function () returns (bytes1)
                 Source: "getAddressLevel"
      IfStatement
         Source: "if (goo[msg.sender] < amount && goo[msg.sender] > 0)\r\n        {\r\n            amount = goo[msg.sender];\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 630
           Source: "goo[msg.sender] < amount && goo[msg.sender] > 0"
          BinaryOperation using operator <
             Type: bool
             Source: "goo[msg.sender] < amount"
            IndexAccess
               Type: uint256
               Source: "goo[msg.sender]"
              Identifier goo
                 Type: mapping(address => uint256)
                 Source: "goo"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier amount
               Type: uint256
               Source: "amount"
          BinaryOperation using operator >
             Type: bool
             Source: "goo[msg.sender] > 0"
            IndexAccess
               Type: uint256
               Source: "goo[msg.sender]"
              Identifier goo
                 Type: mapping(address => uint256)
                 Source: "goo"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
        Block
           Source: "{\r\n            amount = goo[msg.sender];\r\n        }"
          ExpressionStatement
             Gas costs: 303
             Source: "amount = goo[msg.sender]"
            Assignment using operator =
               Type: uint256
               Source: "amount = goo[msg.sender]"
              Identifier amount
                 Type: uint256
                 Source: "amount"
              IndexAccess
                 Type: uint256
                 Source: "goo[msg.sender]"
                Identifier goo
                   Type: mapping(address => uint256)
                   Source: "goo"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
      IfStatement
         Source: "if (goo[msg.sender] >= amount)\r\n        {\r\n            lastleak[msg.sender] = now;\r\n            \r\n            goo[msg.sender] -= amount;\r\n            \r\n            msg.sender.transfer(amount);\r\n            \r\n            refund(gas+359);\r\n            \r\n            etherLeaked(amount);\r\n        }"
        BinaryOperation using operator >=
           Type: bool
           Gas costs: 307
           Source: "goo[msg.sender] >= amount"
          IndexAccess
             Type: uint256
             Source: "goo[msg.sender]"
            Identifier goo
               Type: mapping(address => uint256)
               Source: "goo"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier amount
             Type: uint256
             Source: "amount"
        Block
           Source: "{\r\n            lastleak[msg.sender] = now;\r\n            \r\n            goo[msg.sender] -= amount;\r\n            \r\n            msg.sender.transfer(amount);\r\n            \r\n            refund(gas+359);\r\n            \r\n            etherLeaked(amount);\r\n        }"
          ExpressionStatement
             Gas costs: 20108
             Source: "lastleak[msg.sender] = now"
            Assignment using operator =
               Type: uint256
               Source: "lastleak[msg.sender] = now"
              IndexAccess
                 Type: uint256
                 Source: "lastleak[msg.sender]"
                Identifier lastleak
                   Type: mapping(address => uint256)
                   Source: "lastleak"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier now
                 Type: uint256
                 Source: "now"
          ExpressionStatement
             Gas costs: 20322
             Source: "goo[msg.sender] -= amount"
            Assignment using operator -=
               Type: uint256
               Source: "goo[msg.sender] -= amount"
              IndexAccess
                 Type: uint256
                 Source: "goo[msg.sender]"
                Identifier goo
                   Type: mapping(address => uint256)
                   Source: "goo"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier amount
                 Type: uint256
                 Source: "amount"
          ExpressionStatement
             Gas costs: [???]
             Source: "msg.sender.transfer(amount)"
            FunctionCall
               Type: tuple()
               Source: "msg.sender.transfer(amount)"
              MemberAccess to member transfer
                 Type: function (uint256)
                 Source: "msg.sender.transfer"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier amount
                 Type: uint256
                 Source: "amount"
          ExpressionStatement
             Gas costs: 24
             Source: "refund(gas+359)"
            FunctionCall
               Type: tuple()
               Source: "refund(gas+359)"
              Identifier refund
                 Type: function (uint256)
                 Source: "refund"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "gas+359"
                Identifier gas
                   Type: uint256
                   Source: "gas"
                Literal, token: [no token] value: 359
                   Type: int_const 359
                   Source: "359"
          ExpressionStatement
             Gas costs: [???]
             Source: "etherLeaked(amount)"
            FunctionCall
               Type: tuple()
               Source: "etherLeaked(amount)"
              Identifier etherLeaked
                 Type: function (uint256)
                 Source: "etherLeaked"
              Identifier amount
                 Type: uint256
                 Source: "amount"
  FunctionDefinition "gooBalanceOf" - public - const
     Source: "function gooBalanceOf(address x) public constant returns (uint) \r\n    { \r\n        return goo[x]; \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address x)"
      VariableDeclaration "x"
         Type: address
         Source: "address x"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{ \r\n        return goo[x]; \r\n    }"
      Return
         Gas costs: 304
         Source: "return goo[x]"
        IndexAccess
           Type: uint256
           Source: "goo[x]"
          Identifier goo
             Type: mapping(address => uint256)
             Source: "goo"
          Identifier x
             Type: address
             Source: "x"
  FunctionDefinition "getPrice" - public
     Source: "function getPrice(bytes1 addrLevel) public pure returns (uint)\r\n    {\r\n        return pieceprice * (uint(addrLevel) + 1);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes1 addrLevel)"
      VariableDeclaration "addrLevel"
         Type: bytes1
         Source: "bytes1 addrLevel"
        ElementaryTypeName bytes1
           Source: "bytes1"
    ParameterList
       Gas costs: 3
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        return pieceprice * (uint(addrLevel) + 1);\r\n    }"
      Return
         Gas costs: 30
         Source: "return pieceprice * (uint(addrLevel) + 1)"
        BinaryOperation using operator *
           Type: uint256
           Source: "pieceprice * (uint(addrLevel) + 1)"
          Identifier pieceprice
             Type: uint256
             Source: "pieceprice"
          TupleExpression
             Type: uint256
             Source: "(uint(addrLevel) + 1)"
            BinaryOperation using operator +
               Type: uint256
               Source: "uint(addrLevel) + 1"
              FunctionCall
                 Type: uint256
                 Source: "uint(addrLevel)"
                ElementaryTypeNameExpression uint
                   Type: type(uint256)
                   Source: "uint"
                Identifier addrLevel
                   Type: bytes1
                   Source: "addrLevel"
              Literal, token: [no token] value: 1
                 Type: int_const 1
                 Source: "1"
  FunctionDefinition "getAddressLevel"
     Source: "function getAddressLevel() internal returns (bytes1 res)\r\n    {\r\n        if (addresslevels[msg.sender] > 0) \r\n        {\r\n            return addresslevels[msg.sender];\r\n        }\r\n      \r\n        bytes1 highest = 0;\r\n        \r\n        for (uint i = 0; i < 20; i++)\r\n        {\r\n            bytes1 c = bytes1(uint8(uint(msg.sender) / (2 ** (8 * (19 - i)))));\r\n            \r\n            if (bytes1(c) > highest) highest = c;\r\n        }\r\n      \r\n        addresslevels[msg.sender] = highest;\r\n        \r\n        return highest;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(bytes1 res)"
      VariableDeclaration "res"
         Type: bytes1
         Source: "bytes1 res"
        ElementaryTypeName bytes1
           Source: "bytes1"
    Block
       Source: "{\r\n        if (addresslevels[msg.sender] > 0) \r\n        {\r\n            return addresslevels[msg.sender];\r\n        }\r\n      \r\n        bytes1 highest = 0;\r\n        \r\n        for (uint i = 0; i < 20; i++)\r\n        {\r\n            bytes1 c = bytes1(uint8(uint(msg.sender) / (2 ** (8 * (19 - i)))));\r\n            \r\n            if (bytes1(c) > highest) highest = c;\r\n        }\r\n      \r\n        addresslevels[msg.sender] = highest;\r\n        \r\n        return highest;\r\n    }"
      IfStatement
         Source: "if (addresslevels[msg.sender] > 0) \r\n        {\r\n            return addresslevels[msg.sender];\r\n        }"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 359
           Source: "addresslevels[msg.sender] > 0"
          IndexAccess
             Type: bytes1
             Source: "addresslevels[msg.sender]"
            Identifier addresslevels
               Type: mapping(address => bytes1)
               Source: "addresslevels"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n            return addresslevels[msg.sender];\r\n        }"
          Return
             Gas costs: 352
             Source: "return addresslevels[msg.sender]"
            IndexAccess
               Type: bytes1
               Source: "addresslevels[msg.sender]"
              Identifier addresslevels
                 Type: mapping(address => bytes1)
                 Source: "addresslevels"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
      VariableDeclarationStatement
         Gas costs: 19
         Source: "bytes1 highest = 0"
        VariableDeclaration "highest"
           Type: bytes1
           Source: "bytes1 highest"
          ElementaryTypeName bytes1
             Source: "bytes1"
        Literal, token: [no token] value: 0
           Type: int_const 0
           Source: "0"
      ForStatement
         Source: "for (uint i = 0; i < 20; i++)\r\n        {\r\n            bytes1 c = bytes1(uint8(uint(msg.sender) / (2 ** (8 * (19 - i)))));\r\n            \r\n            if (bytes1(c) > highest) highest = c;\r\n        }"
        VariableDeclarationStatement
           Gas costs: 11
           Source: "uint i = 0"
          VariableDeclaration "i"
             Type: uint256
             Source: "uint i"
            ElementaryTypeName uint
               Source: "uint"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 9
           Source: "i < 20"
          Identifier i
             Type: uint256
             Source: "i"
          Literal, token: [no token] value: 20
             Type: int_const 20
             Source: "20"
        ExpressionStatement
           Gas costs: 19
           Source: "i++"
          UnaryOperation (postfix) ++
             Type: uint256
             Source: "i++"
            Identifier i
               Type: uint256
               Source: "i"
        Block
           Source: "{\r\n            bytes1 c = bytes1(uint8(uint(msg.sender) / (2 ** (8 * (19 - i)))));\r\n            \r\n            if (bytes1(c) > highest) highest = c;\r\n        }"
          VariableDeclarationStatement
             Gas costs: 1682
             Source: "bytes1 c = bytes1(uint8(uint(msg.sender) / (2 ** (8 * (19 - i)))))"
            VariableDeclaration "c"
               Type: bytes1
               Source: "bytes1 c"
              ElementaryTypeName bytes1
                 Source: "bytes1"
            FunctionCall
               Type: bytes1
               Source: "bytes1(uint8(uint(msg.sender) / (2 ** (8 * (19 - i)))))"
              ElementaryTypeNameExpression bytes1
                 Type: type(bytes1)
                 Source: "bytes1"
              FunctionCall
                 Type: uint8
                 Source: "uint8(uint(msg.sender) / (2 ** (8 * (19 - i))))"
                ElementaryTypeNameExpression uint8
                   Type: type(uint8)
                   Source: "uint8"
                BinaryOperation using operator /
                   Type: uint256
                   Source: "uint(msg.sender) / (2 ** (8 * (19 - i)))"
                  FunctionCall
                     Type: uint256
                     Source: "uint(msg.sender)"
                    ElementaryTypeNameExpression uint
                       Type: type(uint256)
                       Source: "uint"
                    MemberAccess to member sender
                       Type: address
                       Source: "msg.sender"
                      Identifier msg
                         Type: msg
                         Source: "msg"
                  TupleExpression
                     Type: uint256
                     Source: "(2 ** (8 * (19 - i)))"
                    BinaryOperation using operator **
                       Type: uint256
                       Source: "2 ** (8 * (19 - i))"
                      Literal, token: [no token] value: 2
                         Type: int_const 2
                         Source: "2"
                      TupleExpression
                         Type: uint256
                         Source: "(8 * (19 - i))"
                        BinaryOperation using operator *
                           Type: uint256
                           Source: "8 * (19 - i)"
                          Literal, token: [no token] value: 8
                             Type: int_const 8
                             Source: "8"
                          TupleExpression
                             Type: uint256
                             Source: "(19 - i)"
                            BinaryOperation using operator -
                               Type: uint256
                               Source: "19 - i"
                              Literal, token: [no token] value: 19
                                 Type: int_const 19
                                 Source: "19"
                              Identifier i
                                 Type: uint256
                                 Source: "i"
          IfStatement
             Source: "if (bytes1(c) > highest) highest = c"
            BinaryOperation using operator >
               Type: bool
               Gas costs: 27
               Source: "bytes1(c) > highest"
              FunctionCall
                 Type: bytes1
                 Source: "bytes1(c)"
                ElementaryTypeNameExpression bytes1
                   Type: type(bytes1)
                   Source: "bytes1"
                Identifier c
                   Type: bytes1
                   Source: "c"
              Identifier highest
                 Type: bytes1
                 Source: "highest"
            ExpressionStatement
               Gas costs: 8
               Source: "highest = c"
              Assignment using operator =
                 Type: bytes1
                 Source: "highest = c"
                Identifier highest
                   Type: bytes1
                   Source: "highest"
                Identifier c
                   Type: bytes1
                   Source: "c"
      ExpressionStatement
         Gas costs: 20367
         Source: "addresslevels[msg.sender] = highest"
        Assignment using operator =
           Type: bytes1
           Source: "addresslevels[msg.sender] = highest"
          IndexAccess
             Type: bytes1
             Source: "addresslevels[msg.sender]"
            Identifier addresslevels
               Type: mapping(address => bytes1)
               Source: "addresslevels"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier highest
             Type: bytes1
             Source: "highest"
      Return
         Gas costs: 8
         Source: "return highest"
        Identifier highest
           Type: bytes1
           Source: "highest"
