Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0x53344c813fbc35890a7304187dc920358b5acf4a.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.9;"
ContractDefinition "SafeMath"
   Source: "library SafeMath {\r\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n}"
  FunctionDefinition "mul"
     Source: "function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 c = a * b"
        VariableDeclaration "c"
           Type: uint256
           Source: "uint256 c"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator *
           Type: uint256
           Source: "a * b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
      ExpressionStatement
         Gas costs: 0
         Source: "assert(a == 0 || c / a == b)"
        FunctionCall
           Type: tuple()
           Source: "assert(a == 0 || c / a == b)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator ||
             Type: bool
             Source: "a == 0 || c / a == b"
            BinaryOperation using operator ==
               Type: bool
               Source: "a == 0"
              Identifier a
                 Type: uint256
                 Source: "a"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
            BinaryOperation using operator ==
               Type: bool
               Source: "c / a == b"
              BinaryOperation using operator /
                 Type: uint256
                 Source: "c / a"
                Identifier c
                   Type: uint256
                   Source: "c"
                Identifier a
                   Type: uint256
                   Source: "a"
              Identifier b
                 Type: uint256
                 Source: "b"
      Return
         Gas costs: 0
         Source: "return c"
        Identifier c
           Type: uint256
           Source: "c"
  FunctionDefinition "div"
     Source: "function div(uint256 a, uint256 b) internal returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 c = a / b"
        VariableDeclaration "c"
           Type: uint256
           Source: "uint256 c"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator /
           Type: uint256
           Source: "a / b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
      Return
         Gas costs: 0
         Source: "return c"
        Identifier c
           Type: uint256
           Source: "c"
  FunctionDefinition "sub"
     Source: "function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    assert(b <= a);\r\n    return a - b;\r\n  }"
      ExpressionStatement
         Gas costs: 32
         Source: "assert(b <= a)"
        FunctionCall
           Type: tuple()
           Source: "assert(b <= a)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator <=
             Type: bool
             Source: "b <= a"
            Identifier b
               Type: uint256
               Source: "b"
            Identifier a
               Type: uint256
               Source: "a"
      Return
         Gas costs: 14
         Source: "return a - b"
        BinaryOperation using operator -
           Type: uint256
           Source: "a - b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
  FunctionDefinition "add"
     Source: "function add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }"
      VariableDeclarationStatement
         Gas costs: 17
         Source: "uint256 c = a + b"
        VariableDeclaration "c"
           Type: uint256
           Source: "uint256 c"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator +
           Type: uint256
           Source: "a + b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
      ExpressionStatement
         Gas costs: 32
         Source: "assert(c >= a)"
        FunctionCall
           Type: tuple()
           Source: "assert(c >= a)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator >=
             Type: bool
             Source: "c >= a"
            Identifier c
               Type: uint256
               Source: "c"
            Identifier a
               Type: uint256
               Source: "a"
      Return
         Gas costs: 8
         Source: "return c"
        Identifier c
           Type: uint256
           Source: "c"
  FunctionDefinition "max64" - const
     Source: "function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint64 a, uint64 b)"
      VariableDeclaration "a"
         Type: uint64
         Source: "uint64 a"
        ElementaryTypeName uint64
           Source: "uint64"
      VariableDeclaration "b"
         Type: uint64
         Source: "uint64 b"
        ElementaryTypeName uint64
           Source: "uint64"
    ParameterList
       Gas costs: 0
       Source: "(uint64)"
      VariableDeclaration ""
         Type: uint64
         Source: "uint64"
        ElementaryTypeName uint64
           Source: "uint64"
    Block
       Source: "{\r\n    return a >= b ? a : b;\r\n  }"
      Return
         Gas costs: 0
         Source: "return a >= b ? a : b"
        Conditional
           Type: uint64
           Source: "a >= b ? a : b"
          BinaryOperation using operator >=
             Type: bool
             Source: "a >= b"
            Identifier a
               Type: uint64
               Source: "a"
            Identifier b
               Type: uint64
               Source: "b"
          Identifier a
             Type: uint64
             Source: "a"
          Identifier b
             Type: uint64
             Source: "b"
  FunctionDefinition "min64" - const
     Source: "function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint64 a, uint64 b)"
      VariableDeclaration "a"
         Type: uint64
         Source: "uint64 a"
        ElementaryTypeName uint64
           Source: "uint64"
      VariableDeclaration "b"
         Type: uint64
         Source: "uint64 b"
        ElementaryTypeName uint64
           Source: "uint64"
    ParameterList
       Gas costs: 0
       Source: "(uint64)"
      VariableDeclaration ""
         Type: uint64
         Source: "uint64"
        ElementaryTypeName uint64
           Source: "uint64"
    Block
       Source: "{\r\n    return a < b ? a : b;\r\n  }"
      Return
         Gas costs: 0
         Source: "return a < b ? a : b"
        Conditional
           Type: uint64
           Source: "a < b ? a : b"
          BinaryOperation using operator <
             Type: bool
             Source: "a < b"
            Identifier a
               Type: uint64
               Source: "a"
            Identifier b
               Type: uint64
               Source: "b"
          Identifier a
             Type: uint64
             Source: "a"
          Identifier b
             Type: uint64
             Source: "b"
  FunctionDefinition "max256" - const
     Source: "function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    return a >= b ? a : b;\r\n  }"
      Return
         Gas costs: 0
         Source: "return a >= b ? a : b"
        Conditional
           Type: uint256
           Source: "a >= b ? a : b"
          BinaryOperation using operator >=
             Type: bool
             Source: "a >= b"
            Identifier a
               Type: uint256
               Source: "a"
            Identifier b
               Type: uint256
               Source: "b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
  FunctionDefinition "min256" - const
     Source: "function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    return a < b ? a : b;\r\n  }"
      Return
         Gas costs: 0
         Source: "return a < b ? a : b"
        Conditional
           Type: uint256
           Source: "a < b ? a : b"
          BinaryOperation using operator <
             Type: bool
             Source: "a < b"
            Identifier a
               Type: uint256
               Source: "a"
            Identifier b
               Type: uint256
               Source: "b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
ContractDefinition "ERC20Basic"
   Gas costs: [???]
   Source: "contract ERC20Basic {\r\n\t  uint256 public totalSupply;\r\n\t  function balanceOf(address who) constant returns (uint256);\r\n\t  function transfer(address to, uint256 value);\r\n\t  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}"
  VariableDeclaration "totalSupply"
     Type: uint256
     Source: "uint256 public totalSupply"
    ElementaryTypeName uint256
       Source: "uint256"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address who) constant returns (uint256);"
    ParameterList
       Source: "(address who)"
      VariableDeclaration "who"
         Type: address
         Source: "address who"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address to, uint256 value);"
    ParameterList
       Source: "(address to, uint256 value)"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
  EventDefinition "Transfer"
     Source: "event Transfer(address indexed from, address indexed to, uint256 value);"
    ParameterList
       Source: "(address indexed from, address indexed to, uint256 value)"
      VariableDeclaration "from"
         Type: address
         Source: "address indexed from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "to"
         Type: address
         Source: "address indexed to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
ContractDefinition "ERC20"
   Gas costs: 0
   Source: "contract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value);\r\n  function approve(address spender, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"
  InheritanceSpecifier
     Source: "ERC20Basic"
    UserDefinedTypeName "ERC20Basic"
       Source: "ERC20Basic"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address owner, address spender) constant returns (uint256);"
    ParameterList
       Source: "(address owner, address spender)"
      VariableDeclaration "owner"
         Type: address
         Source: "address owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "spender"
         Type: address
         Source: "address spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address from, address to, uint256 value);"
    ParameterList
       Source: "(address from, address to, uint256 value)"
      VariableDeclaration "from"
         Type: address
         Source: "address from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
  FunctionDefinition "approve" - public
     Source: "function approve(address spender, uint256 value);"
    ParameterList
       Source: "(address spender, uint256 value)"
      VariableDeclaration "spender"
         Type: address
         Source: "address spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
  EventDefinition "Approval"
     Source: "event Approval(address indexed owner, address indexed spender, uint256 value);"
    ParameterList
       Source: "(address indexed owner, address indexed spender, uint256 value)"
      VariableDeclaration "owner"
         Type: address
         Source: "address indexed owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "spender"
         Type: address
         Source: "address indexed spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
ContractDefinition "BasicToken"
   Source: "contract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n   * @dev Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint256 size) {\r\n     require(!(msg.data.length < size + 4));\r\n     _;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "ERC20Basic"
    UserDefinedTypeName "ERC20Basic"
       Source: "ERC20Basic"
  UsingForDirective
     Gas costs: 0
     Source: "using SafeMath for uint256;"
    UserDefinedTypeName "SafeMath"
       Source: "SafeMath"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping(address => uint256) balances"
    Mapping
       Source: "mapping(address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  ModifierDefinition "onlyPayloadSize"
     Source: "modifier onlyPayloadSize(uint256 size) {\r\n     require(!(msg.data.length < size + 4));\r\n     _;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 size)"
      VariableDeclaration "size"
         Type: uint256
         Source: "uint256 size"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n     require(!(msg.data.length < size + 4));\r\n     _;\r\n  }"
      ExpressionStatement
         Gas costs: 102
         Source: "require(!(msg.data.length < size + 4))"
        FunctionCall
           Type: tuple()
           Source: "require(!(msg.data.length < size + 4))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!(msg.data.length < size + 4)"
            TupleExpression
               Type: bool
               Source: "(msg.data.length < size + 4)"
              BinaryOperation using operator <
                 Type: bool
                 Source: "msg.data.length < size + 4"
                MemberAccess to member length
                   Type: uint256
                   Source: "msg.data.length"
                  MemberAccess to member data
                     Type: bytes calldata
                     Source: "msg.data"
                    Identifier msg
                       Type: msg
                       Source: "msg"
                BinaryOperation using operator +
                   Type: uint256
                   Source: "size + 4"
                  Identifier size
                     Type: uint256
                     Source: "size"
                  Literal, token: [no token] value: 4
                     Type: int_const 4
                     Source: "4"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyPayloadSize"
       Gas costs: 0
       Source: "onlyPayloadSize(2 * 32)"
      Identifier onlyPayloadSize
         Type: modifier (uint256)
         Source: "onlyPayloadSize"
      BinaryOperation using operator *
         Type: int_const 64
         Source: "2 * 32"
        Literal, token: [no token] value: 2
           Type: int_const 2
           Source: "2"
        Literal, token: [no token] value: 32
           Type: int_const 32
           Source: "32"
    Block
       Source: "{\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }"
      ExpressionStatement
         Gas costs: 0
         Source: "balances[msg.sender] = balances[msg.sender].sub(_value)"
        Assignment using operator =
           Type: uint256
           Source: "balances[msg.sender] = balances[msg.sender].sub(_value)"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          FunctionCall
             Type: uint256
             Source: "balances[msg.sender].sub(_value)"
            MemberAccess to member sub
               Type: function (uint256,uint256) returns (uint256)
               Source: "balances[msg.sender].sub"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 0
         Source: "balances[_to] = balances[_to].add(_value)"
        Assignment using operator =
           Type: uint256
           Source: "balances[_to] = balances[_to].add(_value)"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
          FunctionCall
             Type: uint256
             Source: "balances[_to].add(_value)"
            MemberAccess to member add
               Type: function (uint256,uint256) returns (uint256)
               Source: "balances[_to].add"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 0
         Source: "Transfer(msg.sender, _to, _value)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(msg.sender, _to, _value)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    return balances[_owner];\r\n  }"
      Return
         Gas costs: 304
         Source: "return balances[_owner]"
        IndexAccess
           Type: uint256
           Source: "balances[_owner]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          Identifier _owner
             Type: address
             Source: "_owner"
ContractDefinition "StandardToken"
   Source: "contract StandardToken is BasicToken, ERC20 {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)) );\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "BasicToken"
    UserDefinedTypeName "BasicToken"
       Source: "BasicToken"
  InheritanceSpecifier
     Gas costs: 0
     Source: "ERC20"
    UserDefinedTypeName "ERC20"
       Source: "ERC20"
  VariableDeclaration "allowed"
     Type: mapping(address => mapping(address => uint256))
     Gas costs: 0
     Source: "mapping (address => mapping (address => uint256)) allowed"
    Mapping
       Source: "mapping (address => mapping (address => uint256))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping (address => uint256)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyPayloadSize"
       Gas costs: 0
       Source: "onlyPayloadSize(3 * 32)"
      Identifier onlyPayloadSize
         Type: modifier (uint256)
         Source: "onlyPayloadSize"
      BinaryOperation using operator *
         Type: int_const 96
         Source: "3 * 32"
        Literal, token: [no token] value: 3
           Type: int_const 3
           Source: "3"
        Literal, token: [no token] value: 32
           Type: int_const 32
           Source: "32"
    Block
       Source: "{\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "var _allowance = allowed[_from][msg.sender]"
        VariableDeclaration "_allowance"
           Type: uint256
           Source: "var _allowance"
        IndexAccess
           Type: uint256
           Source: "allowed[_from][msg.sender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowed[_from]"
            Identifier allowed
               Type: mapping(address => mapping(address => uint256))
               Source: "allowed"
            Identifier _from
               Type: address
               Source: "_from"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 0
         Source: "balances[_to] = balances[_to].add(_value)"
        Assignment using operator =
           Type: uint256
           Source: "balances[_to] = balances[_to].add(_value)"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
          FunctionCall
             Type: uint256
             Source: "balances[_to].add(_value)"
            MemberAccess to member add
               Type: function (uint256,uint256) returns (uint256)
               Source: "balances[_to].add"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 0
         Source: "balances[_from] = balances[_from].sub(_value)"
        Assignment using operator =
           Type: uint256
           Source: "balances[_from] = balances[_from].sub(_value)"
          IndexAccess
             Type: uint256
             Source: "balances[_from]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _from
               Type: address
               Source: "_from"
          FunctionCall
             Type: uint256
             Source: "balances[_from].sub(_value)"
            MemberAccess to member sub
               Type: function (uint256,uint256) returns (uint256)
               Source: "balances[_from].sub"
              IndexAccess
                 Type: uint256
                 Source: "balances[_from]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _from
                   Type: address
                   Source: "_from"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 0
         Source: "allowed[_from][msg.sender] = _allowance.sub(_value)"
        Assignment using operator =
           Type: uint256
           Source: "allowed[_from][msg.sender] = _allowance.sub(_value)"
          IndexAccess
             Type: uint256
             Source: "allowed[_from][msg.sender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[_from]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              Identifier _from
                 Type: address
                 Source: "_from"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          FunctionCall
             Type: uint256
             Source: "_allowance.sub(_value)"
            MemberAccess to member sub
               Type: function (uint256,uint256) returns (uint256)
               Source: "_allowance.sub"
              Identifier _allowance
                 Type: uint256
                 Source: "_allowance"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 0
         Source: "Transfer(_from, _to, _value)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(_from, _to, _value)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint256 _value) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)) );\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)) );\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }"
      ExpressionStatement
         Gas costs: 460
         Source: "require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)) )"
        FunctionCall
           Type: tuple()
           Source: "require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)) )"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!((_value != 0) && (allowed[msg.sender][_spender] != 0))"
            TupleExpression
               Type: bool
               Source: "((_value != 0) && (allowed[msg.sender][_spender] != 0))"
              BinaryOperation using operator &&
                 Type: bool
                 Source: "(_value != 0) && (allowed[msg.sender][_spender] != 0)"
                TupleExpression
                   Type: bool
                   Source: "(_value != 0)"
                  BinaryOperation using operator !=
                     Type: bool
                     Source: "_value != 0"
                    Identifier _value
                       Type: uint256
                       Source: "_value"
                    Literal, token: [no token] value: 0
                       Type: int_const 0
                       Source: "0"
                TupleExpression
                   Type: bool
                   Source: "(allowed[msg.sender][_spender] != 0)"
                  BinaryOperation using operator !=
                     Type: bool
                     Source: "allowed[msg.sender][_spender] != 0"
                    IndexAccess
                       Type: uint256
                       Source: "allowed[msg.sender][_spender]"
                      IndexAccess
                         Type: mapping(address => uint256)
                         Source: "allowed[msg.sender]"
                        Identifier allowed
                           Type: mapping(address => mapping(address => uint256))
                           Source: "allowed"
                        MemberAccess to member sender
                           Type: address
                           Source: "msg.sender"
                          Identifier msg
                             Type: msg
                             Source: "msg"
                      Identifier _spender
                         Type: address
                         Source: "_spender"
                    Literal, token: [no token] value: 0
                       Type: int_const 0
                       Source: "0"
      ExpressionStatement
         Gas costs: 20199
         Source: "allowed[msg.sender][_spender] = _value"
        Assignment using operator =
           Type: uint256
           Source: "allowed[msg.sender][_spender] = _value"
          IndexAccess
             Type: uint256
             Source: "allowed[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[msg.sender]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: [???]
         Source: "Approval(msg.sender, _spender, _value)"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender, _spender, _value)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint256 remaining"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    return allowed[_owner][_spender];\r\n  }"
      Return
         Gas costs: 394
         Source: "return allowed[_owner][_spender]"
        IndexAccess
           Type: uint256
           Source: "allowed[_owner][_spender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowed[_owner]"
            Identifier allowed
               Type: mapping(address => mapping(address => uint256))
               Source: "allowed"
            Identifier _owner
               Type: address
               Source: "_owner"
          Identifier _spender
             Type: address
             Source: "_spender"
ContractDefinition "Pixiu_Beta"
   Source: "contract Pixiu_Beta is StandardToken {\r\n\r\n    uint public decimals = 6;\r\n    bool public isPayable = true;\r\n    bool public isWithdrawable = true;\r\n\t\r\n    struct exchangeRate {\r\n        \r\n        uint time1;                                      \r\n        uint time2;                                     \r\n        uint value;\r\n        \r\n    }\r\n    \r\n    struct Member {\r\n         \r\n        bool isExists;                                      \r\n        bool isDividend;                                    \r\n        bool isWithdraw;                                     \r\n        uint256 dividend;                                   \r\n        uint256 withdraw;\r\n        \r\n    }\r\n    \r\n    exchangeRate[] public exchangeRateArray;  \r\n\r\n\tmapping (address => Member) public members; \r\n    address[] public adminArray;   \r\n    address[] public memberArray;\r\n\t\r\n    address public deposit_address;\r\n    uint256 public INITIAL_SUPPLY = 21000000000000;\r\n    uint256 public tokenExchangeRateInWei = 300000000;\r\n\r\n\t//\u4e0d\u6b78\u96f6\r\n\tuint256 public total_tokenwei = 0; \r\n\tuint256 public min_pay_wei = 0;\r\n\r\n\t// drawall \u6b78\u96f6\r\n\tuint256 public total_devidend = 0; //member\r\n\tuint256 public total_withdraw = 0; //member\r\n    uint256 public deposit_amount = 0;  //deposit\r\n    uint256 public withdraw_amount = 0; //deposit\r\n    uint256 public dividend_amount = 0; //admin   \r\n    \r\n    function Pixiu_Beta() {\r\n     \r\n        totalSupply = INITIAL_SUPPLY; \r\n        adminArray.push(msg.sender);\r\n        admin_set_deposit(msg.sender);\r\n         \r\n    }\r\n\r\n    modifier onlyDeposit() {\r\n        \r\n        require(msg.sender == deposit_address);\r\n        _;\r\n        \r\n    }\r\n    \r\n    modifier onlyAdmin() {\r\n        \r\n        bool ok = admin_check(msg.sender);\r\n        require(ok);\r\n        _;\r\n        \r\n    }\r\n    \r\n    modifier adminExists(address admin) {\r\n\r\n        bool ok = false;\r\n        if(admin != msg.sender){\r\n            \r\n            ok = admin_check(admin);\r\n        \r\n        }\r\n        require(ok);\r\n        _; \r\n        \r\n    }\r\n    \r\n    modifier adminDoesNotExist(address admin) {\r\n\r\n        bool ok = admin_check(admin);\r\n        require(!ok);\r\n        _;\r\n        \r\n    }\r\n    \r\n    function admin_check(address admin) private constant returns(bool){\r\n        \r\n        bool ok = false;\r\n        \r\n        for (uint i = 0; i < adminArray.length; i++) {\r\n            if (admin == adminArray[i]) {\r\n                ok = true;\r\n                break;\r\n            }\r\n        }\r\n        \r\n        return ok;\r\n        \r\n    }\r\n    \r\n    modifier memberExists(address member) {\r\n\r\n        bool ok = false;\r\n        if (members[member].isExists == true) {\r\n            \r\n            ok = true;\r\n            \r\n        }\r\n        require(ok);\r\n        _;\r\n        \r\n    }\r\n    \r\n    modifier isMember() {\r\n\r\n        bool ok = false;\r\n        if (members[msg.sender].isExists == true) {            \r\n            ok = true;            \r\n        }\r\n        require(ok);\r\n        _;\r\n        \r\n    }\r\n    \r\n    function admin_deposit(uint xEth) onlyAdmin{\r\n        \r\n        uint256 xwei = xEth * 10**18;\r\n        deposit_amount += xwei;\r\n        \r\n    }\r\n    \r\n    /**\t*\t\u7ba1\u7406\u54e1\u767c\u653e\u80a1\u606f\t*\t\u6bcf\u500b\u6703\u54e1\u80a1\u606f\u4f9d \t*\t*/\r\n    function admin_dividend(uint xEth) onlyAdmin{\r\n        \r\n\t\tuint256 xwei = xEth * 10**18;\r\n\t\trequire(xwei <= (deposit_amount-dividend_amount) ); \r\n\r\n\t\tdividend_amount += xwei;\r\n        uint256 len = memberArray.length;\t\r\n        uint i = 0;\r\n        address _member;\r\n        \r\n\t\tuint total_balance_dividened=0;\r\n        for( i = 0; i < len; i++){            \r\n            _member = memberArray[i];\r\n\t\t\tif(members[_member].isDividend){\r\n\t\t\t\ttotal_balance_dividened = balances[_member]; \r\n\t\t\t}            \r\n        }\r\n\t\tuint256 perTokenWei = xwei / (total_balance_dividened / 10 ** 6);\r\n            \r\n        for( i = 0; i < len; i++){            \r\n            _member = memberArray[i];\r\n\t\t\tif(members[_member].isDividend){\r\n\t\t\t\tuint256 thisWei = (balances[_member] / 10 ** 6) * perTokenWei;\r\n\t\t\t\tmembers[_member].dividend += thisWei; \r\n\t\t\t\ttotal_devidend += thisWei;\r\n\t\t\t}            \r\n        }\r\n    \r\n    }\r\n    \r\n    function admin_set_exchange_rate(uint[] exchangeRates) onlyAdmin{\r\n         \r\n        uint len = exchangeRates.length;\r\n        exchangeRateArray.length = 0;\r\n        \r\n        for(uint i = 0; i < len; i += 3){\r\n            \r\n            uint time1 = exchangeRates[i];\r\n            uint time2 = exchangeRates[i + 1];\r\n            uint value = exchangeRates[i + 2]*1000;\r\n            exchangeRateArray.push(exchangeRate(time1, time2, value));      \r\n            \r\n        }\r\n        \r\n    }\r\n\r\n\tfunction get_exchange_wei() constant returns(uint256){\r\n\r\n\t\tuint len = exchangeRateArray.length;  \r\n\t\tuint nowTime = block.timestamp;\r\n        for(uint i = 0; i < len; i += 3){\r\n            \r\n\t\t\texchangeRate memory rate = exchangeRateArray[i];\r\n            uint time1 = rate.time1;\r\n            uint time2 = rate.time2;\r\n            uint value = rate.value;\r\n\t\t\tif (nowTime>= time1 && nowTime<=time2) {\r\n\t\t\t\ttokenExchangeRateInWei = value;\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n            \r\n        }\r\n\t\treturn tokenExchangeRateInWei;\r\n\t}\r\n\t\r\n\tfunction admin_set_min_pay(uint256 _min_pay) onlyAdmin{\r\n\t    \r\n\t    require(_min_pay >= 0);\r\n\t    min_pay_wei = _min_pay * 10 ** 18;\r\n\t    \r\n\t}\r\n    \r\n    function get_admin_list() constant returns(address[] _adminArray){\r\n        \r\n        _adminArray = adminArray;\r\n        \r\n    }\r\n    \r\n    function admin_add(address admin) onlyAdmin adminDoesNotExist(admin){\r\n        \r\n        adminArray.push(admin);\r\n        \r\n    }\r\n    \r\n    function admin_del(address admin) onlyAdmin adminExists(admin){\r\n        \r\n        for (uint i = 0; i < adminArray.length - 1; i++)\r\n            if (adminArray[i] == admin) {\r\n                adminArray[i] = adminArray[adminArray.length - 1];\r\n                break;\r\n            }\r\n            \r\n        adminArray.length -= 1;\r\n        \r\n    }\r\n    \r\n    function admin_set_deposit(address addr) onlyAdmin{\r\n        \r\n        deposit_address = addr;\r\n        \r\n    }\r\n    \r\n    function admin_active_payable() onlyAdmin{\r\n    \r\n        isPayable = true;\r\n        \r\n    }\r\n    \r\n    function admin_inactive_payable() onlyAdmin{\r\n        \r\n        isPayable = false;\r\n        \r\n    }\r\n    \r\n    function admin_active_withdrawable() onlyAdmin{\r\n        \r\n        isWithdrawable = true;\r\n        \r\n    }\r\n    \r\n    function admin_inactive_withdrawable() onlyAdmin{\r\n        \r\n        isWithdrawable = false;\r\n        \r\n    }\r\n    \r\n    function admin_active_dividend(address _member) onlyAdmin memberExists(_member){\r\n        \r\n        members[_member].isDividend = true;\r\n        \r\n    }\r\n    \r\n    function admin_inactive_dividend(address _member) onlyAdmin memberExists(_member){\r\n        \r\n        members[_member].isDividend = false;\r\n        \r\n    }\r\n    \r\n    function admin_active_withdraw(address _member) onlyAdmin memberExists(_member){\r\n        \r\n        members[_member].isWithdraw = true;\r\n        \r\n    }\r\n    \r\n    function admin_inactive_withdraw(address _member) onlyAdmin memberExists(_member){\r\n        \r\n        members[_member].isWithdraw = false;\r\n        \r\n    }\r\n    \r\n    function get_total_info() constant returns(uint256 _deposit_amount, uint256 _total_devidend, uint256 _total_remain, uint256 _total_withdraw){\r\n\r\n        _total_remain = total_devidend - total_withdraw;\r\n        _deposit_amount = deposit_amount;\r\n        _total_devidend = total_devidend;\r\n        _total_withdraw = total_withdraw;\r\n        \r\n    }\r\n    \r\n    function get_info(address _member) constant returns (uint256 _balance, uint256 _devidend, uint256 _remain, uint256 _withdraw){\r\n        \r\n        _devidend = members[_member].dividend;\r\n        _withdraw = members[_member].withdraw;\r\n        _remain = _devidend - _withdraw;\r\n        _balance = balances[_member];\r\n        \r\n    }\r\n    \r\n    function withdraw() isMember {\r\n        \r\n        uint256 _remain = members[msg.sender].dividend - members[msg.sender].withdraw;\r\n        require(_remain > 0);\r\n        require(isWithdrawable);\r\n        require(members[msg.sender].isWithdraw);\r\n        msg.sender.transfer(_remain);\r\n        members[msg.sender].withdraw += _remain; \r\n        total_withdraw += _remain;          \r\n\r\n    }\r\n\r\n    function withdraw_admin(uint xEth) onlyDeposit{\r\n\r\n        uint256 _withdraw = xEth * 10**18;\r\n\t\trequire( msg.sender == deposit_address );\r\n\r\n\t\trequire(this.balance > _withdraw);\r\n\t\tmsg.sender.transfer(_withdraw);\r\n\r\n        withdraw_amount += _withdraw;  \r\n        \r\n    }\r\n    \r\n    function withdraw_all_admin(address _deposit) onlyAdmin {\r\n        \r\n\t\trequire( _deposit == deposit_address ); \r\n\r\n\t\t_deposit.transfer(this.balance);\r\n\r\n\t\ttotal_devidend = 0; //member\r\n\t\ttotal_withdraw = 0; //member\r\n\t\tdeposit_amount = 0;  //deposit\r\n\t\twithdraw_amount = 0; //deposit\r\n\t\tdividend_amount = 0; //admin   \r\n        \r\n    }\r\n \r\n\tfunction transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32)     {\r\n\t\trequire(_to != deposit_address);\r\n        require(isPayable);\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\r\n\t\tif (members[_to].isExists != true) {\t\t\r\n\t\t\tmembers[_to].isExists = true;\r\n\t\t\tmembers[_to].isDividend = true;\r\n\t\t\tmembers[_to].isWithdraw = true; \r\n\t\t\tmemberArray.push(_to);\t\t\r\n\t\t}  \r\n\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t}\r\n \r\n\tfunction transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32)     {\r\n\t\trequire(_to != deposit_address);\r\n\t\trequire(_from != deposit_address);\r\n        require(isPayable);\r\n\t\tvar _allowance = allowed[_from][msg.sender]; \r\n\t\trequire(_allowance >= _value);\r\n\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tallowed[_from][msg.sender] = _allowance.sub(_value);\r\n\t\t\r\n\t\tif (members[_to].isExists != true) {\t\t\r\n\t\t\tmembers[_to].isExists = true;\r\n\t\t\tmembers[_to].isDividend = true;\r\n\t\t\tmembers[_to].isWithdraw = true; \r\n\t\t\tmemberArray.push(_to);\t\t\r\n\t\t}  \r\n\r\n\t\tTransfer(_from, _to, _value);\r\n\t}\r\n\r\n    function () payable {\r\n        \r\n        pay();\r\n        \r\n    }\r\n  \r\n    function pay() public payable returns (bool) {\r\n      \r\n        require(msg.value > min_pay_wei);\r\n        require(isPayable);\r\n        \r\n        if(msg.sender == deposit_address){\r\n             deposit_amount += msg.value;\r\n        }else{\r\n        \r\n    \t\tuint256 exchangeWei = get_exchange_wei();\r\n    \t\tuint256 thisTokenWei = exchangeWei * msg.value / 10**18 ;\r\n        \r\n            if (members[msg.sender].isExists != true) {\r\n                \r\n                members[msg.sender].isExists = true;\r\n                members[msg.sender].isDividend = true;\r\n                members[msg.sender].isWithdraw = true; \r\n                memberArray.push(msg.sender);\r\n                \r\n            }  \r\n    \t\tbalances[msg.sender] += thisTokenWei;\r\n    \t\ttotal_tokenwei += thisTokenWei;\r\n\t\t\r\n        }\r\n        \r\n        return true;\r\n    \r\n    }\r\n            \r\n    function get_this_balance() constant returns(uint256){\r\n      \r\n        return this.balance;\r\n      \r\n    }\r\n    \r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "StandardToken"
    UserDefinedTypeName "StandardToken"
       Source: "StandardToken"
  VariableDeclaration "decimals"
     Type: uint256
     Gas costs: [???]
     Source: "uint public decimals = 6"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 6
       Type: int_const 6
       Source: "6"
  VariableDeclaration "isPayable"
     Type: bool
     Gas costs: [???]
     Source: "bool public isPayable = true"
    ElementaryTypeName bool
       Source: "bool"
    Literal, token: true value: true
       Type: bool
       Source: "true"
  VariableDeclaration "isWithdrawable"
     Type: bool
     Gas costs: [???]
     Source: "bool public isWithdrawable = true"
    ElementaryTypeName bool
       Source: "bool"
    Literal, token: true value: true
       Type: bool
       Source: "true"
  StructDefinition "exchangeRate"
     Gas costs: 0
     Source: "struct exchangeRate {\r\n        \r\n        uint time1;                                      \r\n        uint time2;                                     \r\n        uint value;\r\n        \r\n    }"
    VariableDeclaration "time1"
       Type: uint256
       Source: "uint time1"
      ElementaryTypeName uint
         Source: "uint"
    VariableDeclaration "time2"
       Type: uint256
       Source: "uint time2"
      ElementaryTypeName uint
         Source: "uint"
    VariableDeclaration "value"
       Type: uint256
       Source: "uint value"
      ElementaryTypeName uint
         Source: "uint"
  StructDefinition "Member"
     Gas costs: 0
     Source: "struct Member {\r\n         \r\n        bool isExists;                                      \r\n        bool isDividend;                                    \r\n        bool isWithdraw;                                     \r\n        uint256 dividend;                                   \r\n        uint256 withdraw;\r\n        \r\n    }"
    VariableDeclaration "isExists"
       Type: bool
       Source: "bool isExists"
      ElementaryTypeName bool
         Source: "bool"
    VariableDeclaration "isDividend"
       Type: bool
       Source: "bool isDividend"
      ElementaryTypeName bool
         Source: "bool"
    VariableDeclaration "isWithdraw"
       Type: bool
       Source: "bool isWithdraw"
      ElementaryTypeName bool
         Source: "bool"
    VariableDeclaration "dividend"
       Type: uint256
       Source: "uint256 dividend"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "withdraw"
       Type: uint256
       Source: "uint256 withdraw"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "exchangeRateArray"
     Type: struct Pixiu_Beta.exchangeRate storage ref[] storage ref
     Gas costs: [???]
     Source: "exchangeRate[] public exchangeRateArray"
    ArrayTypeName
       Source: "exchangeRate[]"
      UserDefinedTypeName "exchangeRate"
         Source: "exchangeRate"
  VariableDeclaration "members"
     Type: mapping(address => struct Pixiu_Beta.Member storage ref)
     Gas costs: [???]
     Source: "mapping (address => Member) public members"
    Mapping
       Source: "mapping (address => Member)"
      ElementaryTypeName address
         Source: "address"
      UserDefinedTypeName "Member"
         Source: "Member"
  VariableDeclaration "adminArray"
     Type: address[] storage ref
     Gas costs: [???]
     Source: "address[] public adminArray"
    ArrayTypeName
       Source: "address[]"
      ElementaryTypeName address
         Source: "address"
  VariableDeclaration "memberArray"
     Type: address[] storage ref
     Gas costs: [???]
     Source: "address[] public memberArray"
    ArrayTypeName
       Source: "address[]"
      ElementaryTypeName address
         Source: "address"
  VariableDeclaration "deposit_address"
     Type: address
     Gas costs: [???]
     Source: "address public deposit_address"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "INITIAL_SUPPLY"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public INITIAL_SUPPLY = 21000000000000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 21000000000000
       Type: int_const 21000000000000
       Source: "21000000000000"
  VariableDeclaration "tokenExchangeRateInWei"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public tokenExchangeRateInWei = 300000000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 300000000
       Type: int_const 300000000
       Source: "300000000"
  VariableDeclaration "total_tokenwei"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public total_tokenwei = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "min_pay_wei"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public min_pay_wei = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "total_devidend"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public total_devidend = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "total_withdraw"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public total_withdraw = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "deposit_amount"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public deposit_amount = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "withdraw_amount"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public withdraw_amount = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "dividend_amount"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public dividend_amount = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  FunctionDefinition "Pixiu_Beta" - public
     Source: "function Pixiu_Beta() {\r\n     \r\n        totalSupply = INITIAL_SUPPLY; \r\n        adminArray.push(msg.sender);\r\n        admin_set_deposit(msg.sender);\r\n         \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n     \r\n        totalSupply = INITIAL_SUPPLY; \r\n        adminArray.push(msg.sender);\r\n        admin_set_deposit(msg.sender);\r\n         \r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "totalSupply = INITIAL_SUPPLY"
        Assignment using operator =
           Type: uint256
           Source: "totalSupply = INITIAL_SUPPLY"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          Identifier INITIAL_SUPPLY
             Type: uint256
             Source: "INITIAL_SUPPLY"
      ExpressionStatement
         Gas costs: 0
         Source: "adminArray.push(msg.sender)"
        FunctionCall
           Type: uint256
           Source: "adminArray.push(msg.sender)"
          MemberAccess to member push
             Type: function (address) returns (uint256)
             Source: "adminArray.push"
            Identifier adminArray
               Type: address[] storage ref
               Source: "adminArray"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 0
         Source: "admin_set_deposit(msg.sender)"
        FunctionCall
           Type: tuple()
           Source: "admin_set_deposit(msg.sender)"
          Identifier admin_set_deposit
             Type: function (address)
             Source: "admin_set_deposit"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  ModifierDefinition "onlyDeposit"
     Source: "modifier onlyDeposit() {\r\n        \r\n        require(msg.sender == deposit_address);\r\n        _;\r\n        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n        \r\n        require(msg.sender == deposit_address);\r\n        _;\r\n        \r\n    }"
      ExpressionStatement
         Gas costs: 282
         Source: "require(msg.sender == deposit_address)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == deposit_address)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == deposit_address"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier deposit_address
               Type: address
               Source: "deposit_address"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "onlyAdmin"
     Source: "modifier onlyAdmin() {\r\n        \r\n        bool ok = admin_check(msg.sender);\r\n        require(ok);\r\n        _;\r\n        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n        \r\n        bool ok = admin_check(msg.sender);\r\n        require(ok);\r\n        _;\r\n        \r\n    }"
      VariableDeclarationStatement
         Gas costs: 389
         Source: "bool ok = admin_check(msg.sender)"
        VariableDeclaration "ok"
           Type: bool
           Source: "bool ok"
          ElementaryTypeName bool
             Source: "bool"
        FunctionCall
           Type: bool
           Source: "admin_check(msg.sender)"
          Identifier admin_check
             Type: function (address) view returns (bool)
             Source: "admin_check"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 464
         Source: "require(ok)"
        FunctionCall
           Type: tuple()
           Source: "require(ok)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          Identifier ok
             Type: bool
             Source: "ok"
      PlaceholderStatement
         Gas costs: 24
         Source: "_"
  ModifierDefinition "adminExists"
     Source: "modifier adminExists(address admin) {\r\n\r\n        bool ok = false;\r\n        if(admin != msg.sender){\r\n            \r\n            ok = admin_check(admin);\r\n        \r\n        }\r\n        require(ok);\r\n        _; \r\n        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address admin)"
      VariableDeclaration "admin"
         Type: address
         Source: "address admin"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\r\n\r\n        bool ok = false;\r\n        if(admin != msg.sender){\r\n            \r\n            ok = admin_check(admin);\r\n        \r\n        }\r\n        require(ok);\r\n        _; \r\n        \r\n    }"
      VariableDeclarationStatement
         Gas costs: 11
         Source: "bool ok = false"
        VariableDeclaration "ok"
           Type: bool
           Source: "bool ok"
          ElementaryTypeName bool
             Source: "bool"
        Literal, token: false value: false
           Type: bool
           Source: "false"
      IfStatement
         Source: "if(admin != msg.sender){\r\n            \r\n            ok = admin_check(admin);\r\n        \r\n        }"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 23
           Source: "admin != msg.sender"
          Identifier admin
             Type: address
             Source: "admin"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
        Block
           Source: "{\r\n            \r\n            ok = admin_check(admin);\r\n        \r\n        }"
          ExpressionStatement
             Gas costs: 23
             Source: "ok = admin_check(admin)"
            Assignment using operator =
               Type: bool
               Source: "ok = admin_check(admin)"
              Identifier ok
                 Type: bool
                 Source: "ok"
              FunctionCall
                 Type: bool
                 Source: "admin_check(admin)"
                Identifier admin_check
                   Type: function (address) view returns (bool)
                   Source: "admin_check"
                Identifier admin
                   Type: address
                   Source: "admin"
      ExpressionStatement
         Gas costs: 29
         Source: "require(ok)"
        FunctionCall
           Type: tuple()
           Source: "require(ok)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          Identifier ok
             Type: bool
             Source: "ok"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "adminDoesNotExist"
     Source: "modifier adminDoesNotExist(address admin) {\r\n\r\n        bool ok = admin_check(admin);\r\n        require(!ok);\r\n        _;\r\n        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address admin)"
      VariableDeclaration "admin"
         Type: address
         Source: "address admin"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\r\n\r\n        bool ok = admin_check(admin);\r\n        require(!ok);\r\n        _;\r\n        \r\n    }"
      VariableDeclarationStatement
         Gas costs: 26
         Source: "bool ok = admin_check(admin)"
        VariableDeclaration "ok"
           Type: bool
           Source: "bool ok"
          ElementaryTypeName bool
             Source: "bool"
        FunctionCall
           Type: bool
           Source: "admin_check(admin)"
          Identifier admin_check
             Type: function (address) view returns (bool)
             Source: "admin_check"
          Identifier admin
             Type: address
             Source: "admin"
      ExpressionStatement
         Gas costs: 32
         Source: "require(!ok)"
        FunctionCall
           Type: tuple()
           Source: "require(!ok)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!ok"
            Identifier ok
               Type: bool
               Source: "ok"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "admin_check" - const
     Source: "function admin_check(address admin) private constant returns(bool){\r\n        \r\n        bool ok = false;\r\n        \r\n        for (uint i = 0; i < adminArray.length; i++) {\r\n            if (admin == adminArray[i]) {\r\n                ok = true;\r\n                break;\r\n            }\r\n        }\r\n        \r\n        return ok;\r\n        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address admin)"
      VariableDeclaration "admin"
         Type: address
         Source: "address admin"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        \r\n        bool ok = false;\r\n        \r\n        for (uint i = 0; i < adminArray.length; i++) {\r\n            if (admin == adminArray[i]) {\r\n                ok = true;\r\n                break;\r\n            }\r\n        }\r\n        \r\n        return ok;\r\n        \r\n    }"
      VariableDeclarationStatement
         Gas costs: 11
         Source: "bool ok = false"
        VariableDeclaration "ok"
           Type: bool
           Source: "bool ok"
          ElementaryTypeName bool
             Source: "bool"
        Literal, token: false value: false
           Type: bool
           Source: "false"
      ForStatement
         Source: "for (uint i = 0; i < adminArray.length; i++) {\r\n            if (admin == adminArray[i]) {\r\n                ok = true;\r\n                break;\r\n            }\r\n        }"
        VariableDeclarationStatement
           Gas costs: 11
           Source: "uint i = 0"
          VariableDeclaration "i"
             Type: uint256
             Source: "uint i"
            ElementaryTypeName uint
               Source: "uint"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 217
           Source: "i < adminArray.length"
          Identifier i
             Type: uint256
             Source: "i"
          MemberAccess to member length
             Type: uint256
             Source: "adminArray.length"
            Identifier adminArray
               Type: address[] storage ref
               Source: "adminArray"
        ExpressionStatement
           Gas costs: 19
           Source: "i++"
          UnaryOperation (postfix) ++
             Type: uint256
             Source: "i++"
            Identifier i
               Type: uint256
               Source: "i"
        Block
           Source: "{\r\n            if (admin == adminArray[i]) {\r\n                ok = true;\r\n                break;\r\n            }\r\n        }"
          IfStatement
             Source: "if (admin == adminArray[i]) {\r\n                ok = true;\r\n                break;\r\n            }"
            BinaryOperation using operator ==
               Type: bool
               Gas costs: 546
               Source: "admin == adminArray[i]"
              Identifier admin
                 Type: address
                 Source: "admin"
              IndexAccess
                 Type: address
                 Source: "adminArray[i]"
                Identifier adminArray
                   Type: address[] storage ref
                   Source: "adminArray"
                Identifier i
                   Type: uint256
                   Source: "i"
            Block
               Source: "{\r\n                ok = true;\r\n                break;\r\n            }"
              ExpressionStatement
                 Gas costs: 8
                 Source: "ok = true"
                Assignment using operator =
                   Type: bool
                   Source: "ok = true"
                  Identifier ok
                     Type: bool
                     Source: "ok"
                  Literal, token: true value: true
                     Type: bool
                     Source: "true"
              Break
                 Gas costs: 0
                 Source: "break"
      Return
         Gas costs: 8
         Source: "return ok"
        Identifier ok
           Type: bool
           Source: "ok"
  ModifierDefinition "memberExists"
     Source: "modifier memberExists(address member) {\r\n\r\n        bool ok = false;\r\n        if (members[member].isExists == true) {\r\n            \r\n            ok = true;\r\n            \r\n        }\r\n        require(ok);\r\n        _;\r\n        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address member)"
      VariableDeclaration "member"
         Type: address
         Source: "address member"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\r\n\r\n        bool ok = false;\r\n        if (members[member].isExists == true) {\r\n            \r\n            ok = true;\r\n            \r\n        }\r\n        require(ok);\r\n        _;\r\n        \r\n    }"
      VariableDeclarationStatement
         Gas costs: 44
         Source: "bool ok = false"
        VariableDeclaration "ok"
           Type: bool
           Source: "bool ok"
          ElementaryTypeName bool
             Source: "bool"
        Literal, token: false value: false
           Type: bool
           Source: "false"
      IfStatement
         Source: "if (members[member].isExists == true) {\r\n            \r\n            ok = true;\r\n            \r\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 1436
           Source: "members[member].isExists == true"
          MemberAccess to member isExists
             Type: bool
             Source: "members[member].isExists"
            IndexAccess
               Type: struct Pixiu_Beta.Member storage ref
               Source: "members[member]"
              Identifier members
                 Type: mapping(address => struct Pixiu_Beta.Member storage ref)
                 Source: "members"
              Identifier member
                 Type: address
                 Source: "member"
          Literal, token: true value: true
             Type: bool
             Source: "true"
        Block
           Source: "{\r\n            \r\n            ok = true;\r\n            \r\n        }"
          ExpressionStatement
             Gas costs: 32
             Source: "ok = true"
            Assignment using operator =
               Type: bool
               Source: "ok = true"
              Identifier ok
                 Type: bool
                 Source: "ok"
              Literal, token: true value: true
                 Type: bool
                 Source: "true"
      ExpressionStatement
         Gas costs: 116
         Source: "require(ok)"
        FunctionCall
           Type: tuple()
           Source: "require(ok)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          Identifier ok
             Type: bool
             Source: "ok"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "isMember"
     Source: "modifier isMember() {\r\n\r\n        bool ok = false;\r\n        if (members[msg.sender].isExists == true) {            \r\n            ok = true;            \r\n        }\r\n        require(ok);\r\n        _;\r\n        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n\r\n        bool ok = false;\r\n        if (members[msg.sender].isExists == true) {            \r\n            ok = true;            \r\n        }\r\n        require(ok);\r\n        _;\r\n        \r\n    }"
      VariableDeclarationStatement
         Gas costs: 11
         Source: "bool ok = false"
        VariableDeclaration "ok"
           Type: bool
           Source: "bool ok"
          ElementaryTypeName bool
             Source: "bool"
        Literal, token: false value: false
           Type: bool
           Source: "false"
      IfStatement
         Source: "if (members[msg.sender].isExists == true) {            \r\n            ok = true;            \r\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 358
           Source: "members[msg.sender].isExists == true"
          MemberAccess to member isExists
             Type: bool
             Source: "members[msg.sender].isExists"
            IndexAccess
               Type: struct Pixiu_Beta.Member storage ref
               Source: "members[msg.sender]"
              Identifier members
                 Type: mapping(address => struct Pixiu_Beta.Member storage ref)
                 Source: "members"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
          Literal, token: true value: true
             Type: bool
             Source: "true"
        Block
           Source: "{            \r\n            ok = true;            \r\n        }"
          ExpressionStatement
             Gas costs: 8
             Source: "ok = true"
            Assignment using operator =
               Type: bool
               Source: "ok = true"
              Identifier ok
                 Type: bool
                 Source: "ok"
              Literal, token: true value: true
                 Type: bool
                 Source: "true"
      ExpressionStatement
         Gas costs: 29
         Source: "require(ok)"
        FunctionCall
           Type: tuple()
           Source: "require(ok)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          Identifier ok
             Type: bool
             Source: "ok"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "admin_deposit" - public
     Source: "function admin_deposit(uint xEth) onlyAdmin{\r\n        \r\n        uint256 xwei = xEth * 10**18;\r\n        deposit_amount += xwei;\r\n        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint xEth)"
      VariableDeclaration "xEth"
         Type: uint256
         Source: "uint xEth"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyAdmin"
       Gas costs: 0
       Source: "onlyAdmin"
      Identifier onlyAdmin
         Type: modifier ()
         Source: "onlyAdmin"
    Block
       Source: "{\r\n        \r\n        uint256 xwei = xEth * 10**18;\r\n        deposit_amount += xwei;\r\n        \r\n    }"
      VariableDeclarationStatement
         Gas costs: 19
         Source: "uint256 xwei = xEth * 10**18"
        VariableDeclaration "xwei"
           Type: uint256
           Source: "uint256 xwei"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator *
           Type: uint256
           Source: "xEth * 10**18"
          Identifier xEth
             Type: uint256
             Source: "xEth"
          BinaryOperation using operator **
             Type: int_const 1000000000000000000
             Source: "10**18"
            Literal, token: [no token] value: 10
               Type: int_const 10
               Source: "10"
            Literal, token: [no token] value: 18
               Type: int_const 18
               Source: "18"
      ExpressionStatement
         Gas costs: 20233
         Source: "deposit_amount += xwei"
        Assignment using operator +=
           Type: uint256
           Source: "deposit_amount += xwei"
          Identifier deposit_amount
             Type: uint256
             Source: "deposit_amount"
          Identifier xwei
             Type: uint256
             Source: "xwei"
  FunctionDefinition "admin_dividend" - public
     Source: "function admin_dividend(uint xEth) onlyAdmin{\r\n        \r\n\t\tuint256 xwei = xEth * 10**18;\r\n\t\trequire(xwei <= (deposit_amount-dividend_amount) ); \r\n\r\n\t\tdividend_amount += xwei;\r\n        uint256 len = memberArray.length;\t\r\n        uint i = 0;\r\n        address _member;\r\n        \r\n\t\tuint total_balance_dividened=0;\r\n        for( i = 0; i < len; i++){            \r\n            _member = memberArray[i];\r\n\t\t\tif(members[_member].isDividend){\r\n\t\t\t\ttotal_balance_dividened = balances[_member]; \r\n\t\t\t}            \r\n        }\r\n\t\tuint256 perTokenWei = xwei / (total_balance_dividened / 10 ** 6);\r\n            \r\n        for( i = 0; i < len; i++){            \r\n            _member = memberArray[i];\r\n\t\t\tif(members[_member].isDividend){\r\n\t\t\t\tuint256 thisWei = (balances[_member] / 10 ** 6) * perTokenWei;\r\n\t\t\t\tmembers[_member].dividend += thisWei; \r\n\t\t\t\ttotal_devidend += thisWei;\r\n\t\t\t}            \r\n        }\r\n    \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint xEth)"
      VariableDeclaration "xEth"
         Type: uint256
         Source: "uint xEth"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyAdmin"
       Gas costs: 0
       Source: "onlyAdmin"
      Identifier onlyAdmin
         Type: modifier ()
         Source: "onlyAdmin"
    Block
       Source: "{\r\n        \r\n\t\tuint256 xwei = xEth * 10**18;\r\n\t\trequire(xwei <= (deposit_amount-dividend_amount) ); \r\n\r\n\t\tdividend_amount += xwei;\r\n        uint256 len = memberArray.length;\t\r\n        uint i = 0;\r\n        address _member;\r\n        \r\n\t\tuint total_balance_dividened=0;\r\n        for( i = 0; i < len; i++){            \r\n            _member = memberArray[i];\r\n\t\t\tif(members[_member].isDividend){\r\n\t\t\t\ttotal_balance_dividened = balances[_member]; \r\n\t\t\t}            \r\n        }\r\n\t\tuint256 perTokenWei = xwei / (total_balance_dividened / 10 ** 6);\r\n            \r\n        for( i = 0; i < len; i++){            \r\n            _member = memberArray[i];\r\n\t\t\tif(members[_member].isDividend){\r\n\t\t\t\tuint256 thisWei = (balances[_member] / 10 ** 6) * perTokenWei;\r\n\t\t\t\tmembers[_member].dividend += thisWei; \r\n\t\t\t\ttotal_devidend += thisWei;\r\n\t\t\t}            \r\n        }\r\n    \r\n    }"
      VariableDeclarationStatement
         Gas costs: 19
         Source: "uint256 xwei = xEth * 10**18"
        VariableDeclaration "xwei"
           Type: uint256
           Source: "uint256 xwei"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator *
           Type: uint256
           Source: "xEth * 10**18"
          Identifier xEth
             Type: uint256
             Source: "xEth"
          BinaryOperation using operator **
             Type: int_const 1000000000000000000
             Source: "10**18"
            Literal, token: [no token] value: 10
               Type: int_const 10
               Source: "10"
            Literal, token: [no token] value: 18
               Type: int_const 18
               Source: "18"
      ExpressionStatement
         Gas costs: 444
         Source: "require(xwei <= (deposit_amount-dividend_amount) )"
        FunctionCall
           Type: tuple()
           Source: "require(xwei <= (deposit_amount-dividend_amount) )"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator <=
             Type: bool
             Source: "xwei <= (deposit_amount-dividend_amount)"
            Identifier xwei
               Type: uint256
               Source: "xwei"
            TupleExpression
               Type: uint256
               Source: "(deposit_amount-dividend_amount)"
              BinaryOperation using operator -
                 Type: uint256
                 Source: "deposit_amount-dividend_amount"
                Identifier deposit_amount
                   Type: uint256
                   Source: "deposit_amount"
                Identifier dividend_amount
                   Type: uint256
                   Source: "dividend_amount"
      ExpressionStatement
         Gas costs: 20233
         Source: "dividend_amount += xwei"
        Assignment using operator +=
           Type: uint256
           Source: "dividend_amount += xwei"
          Identifier dividend_amount
             Type: uint256
             Source: "dividend_amount"
          Identifier xwei
             Type: uint256
             Source: "xwei"
      VariableDeclarationStatement
         Gas costs: 219
         Source: "uint256 len = memberArray.length"
        VariableDeclaration "len"
           Type: uint256
           Source: "uint256 len"
          ElementaryTypeName uint256
             Source: "uint256"
        MemberAccess to member length
           Type: uint256
           Source: "memberArray.length"
          Identifier memberArray
             Type: address[] storage ref
             Source: "memberArray"
      VariableDeclarationStatement
         Gas costs: 11
         Source: "uint i = 0"
        VariableDeclaration "i"
           Type: uint256
           Source: "uint i"
          ElementaryTypeName uint
             Source: "uint"
        Literal, token: [no token] value: 0
           Type: int_const 0
           Source: "0"
      VariableDeclarationStatement
         Gas costs: 3
         Source: "address _member"
        VariableDeclaration "_member"
           Type: address
           Source: "address _member"
          ElementaryTypeName address
             Source: "address"
      VariableDeclarationStatement
         Gas costs: 11
         Source: "uint total_balance_dividened=0"
        VariableDeclaration "total_balance_dividened"
           Type: uint256
           Source: "uint total_balance_dividened"
          ElementaryTypeName uint
             Source: "uint"
        Literal, token: [no token] value: 0
           Type: int_const 0
           Source: "0"
      ForStatement
         Source: "for( i = 0; i < len; i++){            \r\n            _member = memberArray[i];\r\n\t\t\tif(members[_member].isDividend){\r\n\t\t\t\ttotal_balance_dividened = balances[_member]; \r\n\t\t\t}            \r\n        }"
        ExpressionStatement
           Gas costs: 8
           Source: "i = 0"
          Assignment using operator =
             Type: uint256
             Source: "i = 0"
            Identifier i
               Type: uint256
               Source: "i"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 9
           Source: "i < len"
          Identifier i
             Type: uint256
             Source: "i"
          Identifier len
             Type: uint256
             Source: "len"
        ExpressionStatement
           Gas costs: 19
           Source: "i++"
          UnaryOperation (postfix) ++
             Type: uint256
             Source: "i++"
            Identifier i
               Type: uint256
               Source: "i"
        Block
           Source: "{            \r\n            _member = memberArray[i];\r\n\t\t\tif(members[_member].isDividend){\r\n\t\t\t\ttotal_balance_dividened = balances[_member]; \r\n\t\t\t}            \r\n        }"
          ExpressionStatement
             Gas costs: 533
             Source: "_member = memberArray[i]"
            Assignment using operator =
               Type: address
               Source: "_member = memberArray[i]"
              Identifier _member
                 Type: address
                 Source: "_member"
              IndexAccess
                 Type: address
                 Source: "memberArray[i]"
                Identifier memberArray
                   Type: address[] storage ref
                   Source: "memberArray"
                Identifier i
                   Type: uint256
                   Source: "i"
          IfStatement
             Source: "if(members[_member].isDividend){\r\n\t\t\t\ttotal_balance_dividened = balances[_member]; \r\n\t\t\t}"
            MemberAccess to member isDividend
               Type: bool
               Gas costs: 388
               Source: "members[_member].isDividend"
              IndexAccess
                 Type: struct Pixiu_Beta.Member storage ref
                 Source: "members[_member]"
                Identifier members
                   Type: mapping(address => struct Pixiu_Beta.Member storage ref)
                   Source: "members"
                Identifier _member
                   Type: address
                   Source: "_member"
            Block
               Source: "{\r\n\t\t\t\ttotal_balance_dividened = balances[_member]; \r\n\t\t\t}"
              ExpressionStatement
                 Gas costs: 304
                 Source: "total_balance_dividened = balances[_member]"
                Assignment using operator =
                   Type: uint256
                   Source: "total_balance_dividened = balances[_member]"
                  Identifier total_balance_dividened
                     Type: uint256
                     Source: "total_balance_dividened"
                  IndexAccess
                     Type: uint256
                     Source: "balances[_member]"
                    Identifier balances
                       Type: mapping(address => uint256)
                       Source: "balances"
                    Identifier _member
                       Type: address
                       Source: "_member"
      VariableDeclarationStatement
         Gas costs: 73
         Source: "uint256 perTokenWei = xwei / (total_balance_dividened / 10 ** 6)"
        VariableDeclaration "perTokenWei"
           Type: uint256
           Source: "uint256 perTokenWei"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator /
           Type: uint256
           Source: "xwei / (total_balance_dividened / 10 ** 6)"
          Identifier xwei
             Type: uint256
             Source: "xwei"
          TupleExpression
             Type: uint256
             Source: "(total_balance_dividened / 10 ** 6)"
            BinaryOperation using operator /
               Type: uint256
               Source: "total_balance_dividened / 10 ** 6"
              Identifier total_balance_dividened
                 Type: uint256
                 Source: "total_balance_dividened"
              BinaryOperation using operator **
                 Type: int_const 1000000
                 Source: "10 ** 6"
                Literal, token: [no token] value: 10
                   Type: int_const 10
                   Source: "10"
                Literal, token: [no token] value: 6
                   Type: int_const 6
                   Source: "6"
      ForStatement
         Source: "for( i = 0; i < len; i++){            \r\n            _member = memberArray[i];\r\n\t\t\tif(members[_member].isDividend){\r\n\t\t\t\tuint256 thisWei = (balances[_member] / 10 ** 6) * perTokenWei;\r\n\t\t\t\tmembers[_member].dividend += thisWei; \r\n\t\t\t\ttotal_devidend += thisWei;\r\n\t\t\t}            \r\n        }"
        ExpressionStatement
           Gas costs: 8
           Source: "i = 0"
          Assignment using operator =
             Type: uint256
             Source: "i = 0"
            Identifier i
               Type: uint256
               Source: "i"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 9
           Source: "i < len"
          Identifier i
             Type: uint256
             Source: "i"
          Identifier len
             Type: uint256
             Source: "len"
        ExpressionStatement
           Gas costs: 19
           Source: "i++"
          UnaryOperation (postfix) ++
             Type: uint256
             Source: "i++"
            Identifier i
               Type: uint256
               Source: "i"
        Block
           Source: "{            \r\n            _member = memberArray[i];\r\n\t\t\tif(members[_member].isDividend){\r\n\t\t\t\tuint256 thisWei = (balances[_member] / 10 ** 6) * perTokenWei;\r\n\t\t\t\tmembers[_member].dividend += thisWei; \r\n\t\t\t\ttotal_devidend += thisWei;\r\n\t\t\t}            \r\n        }"
          ExpressionStatement
             Gas costs: 533
             Source: "_member = memberArray[i]"
            Assignment using operator =
               Type: address
               Source: "_member = memberArray[i]"
              Identifier _member
                 Type: address
                 Source: "_member"
              IndexAccess
                 Type: address
                 Source: "memberArray[i]"
                Identifier memberArray
                   Type: address[] storage ref
                   Source: "memberArray"
                Identifier i
                   Type: uint256
                   Source: "i"
          IfStatement
             Source: "if(members[_member].isDividend){\r\n\t\t\t\tuint256 thisWei = (balances[_member] / 10 ** 6) * perTokenWei;\r\n\t\t\t\tmembers[_member].dividend += thisWei; \r\n\t\t\t\ttotal_devidend += thisWei;\r\n\t\t\t}"
            MemberAccess to member isDividend
               Type: bool
               Gas costs: 388
               Source: "members[_member].isDividend"
              IndexAccess
                 Type: struct Pixiu_Beta.Member storage ref
                 Source: "members[_member]"
                Identifier members
                   Type: mapping(address => struct Pixiu_Beta.Member storage ref)
                   Source: "members"
                Identifier _member
                   Type: address
                   Source: "_member"
            Block
               Source: "{\r\n\t\t\t\tuint256 thisWei = (balances[_member] / 10 ** 6) * perTokenWei;\r\n\t\t\t\tmembers[_member].dividend += thisWei; \r\n\t\t\t\ttotal_devidend += thisWei;\r\n\t\t\t}"
              VariableDeclarationStatement
                 Gas costs: 346
                 Source: "uint256 thisWei = (balances[_member] / 10 ** 6) * perTokenWei"
                VariableDeclaration "thisWei"
                   Type: uint256
                   Source: "uint256 thisWei"
                  ElementaryTypeName uint256
                     Source: "uint256"
                BinaryOperation using operator *
                   Type: uint256
                   Source: "(balances[_member] / 10 ** 6) * perTokenWei"
                  TupleExpression
                     Type: uint256
                     Source: "(balances[_member] / 10 ** 6)"
                    BinaryOperation using operator /
                       Type: uint256
                       Source: "balances[_member] / 10 ** 6"
                      IndexAccess
                         Type: uint256
                         Source: "balances[_member]"
                        Identifier balances
                           Type: mapping(address => uint256)
                           Source: "balances"
                        Identifier _member
                           Type: address
                           Source: "_member"
                      BinaryOperation using operator **
                         Type: int_const 1000000
                         Source: "10 ** 6"
                        Literal, token: [no token] value: 10
                           Type: int_const 10
                           Source: "10"
                        Literal, token: [no token] value: 6
                           Type: int_const 6
                           Source: "6"
                  Identifier perTokenWei
                     Type: uint256
                     Source: "perTokenWei"
              ExpressionStatement
                 Gas costs: 20335
                 Source: "members[_member].dividend += thisWei"
                Assignment using operator +=
                   Type: uint256
                   Source: "members[_member].dividend += thisWei"
                  MemberAccess to member dividend
                     Type: uint256
                     Source: "members[_member].dividend"
                    IndexAccess
                       Type: struct Pixiu_Beta.Member storage ref
                       Source: "members[_member]"
                      Identifier members
                         Type: mapping(address => struct Pixiu_Beta.Member storage ref)
                         Source: "members"
                      Identifier _member
                         Type: address
                         Source: "_member"
                  Identifier thisWei
                     Type: uint256
                     Source: "thisWei"
              ExpressionStatement
                 Gas costs: 20233
                 Source: "total_devidend += thisWei"
                Assignment using operator +=
                   Type: uint256
                   Source: "total_devidend += thisWei"
                  Identifier total_devidend
                     Type: uint256
                     Source: "total_devidend"
                  Identifier thisWei
                     Type: uint256
                     Source: "thisWei"
  FunctionDefinition "admin_set_exchange_rate" - public
     Source: "function admin_set_exchange_rate(uint[] exchangeRates) onlyAdmin{\r\n         \r\n        uint len = exchangeRates.length;\r\n        exchangeRateArray.length = 0;\r\n        \r\n        for(uint i = 0; i < len; i += 3){\r\n            \r\n            uint time1 = exchangeRates[i];\r\n            uint time2 = exchangeRates[i + 1];\r\n            uint value = exchangeRates[i + 2]*1000;\r\n            exchangeRateArray.push(exchangeRate(time1, time2, value));      \r\n            \r\n        }\r\n        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint[] exchangeRates)"
      VariableDeclaration "exchangeRates"
         Type: uint256[] memory
         Source: "uint[] exchangeRates"
        ArrayTypeName
           Source: "uint[]"
          ElementaryTypeName uint
             Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyAdmin"
       Gas costs: 0
       Source: "onlyAdmin"
      Identifier onlyAdmin
         Type: modifier ()
         Source: "onlyAdmin"
    Block
       Source: "{\r\n         \r\n        uint len = exchangeRates.length;\r\n        exchangeRateArray.length = 0;\r\n        \r\n        for(uint i = 0; i < len; i += 3){\r\n            \r\n            uint time1 = exchangeRates[i];\r\n            uint time2 = exchangeRates[i + 1];\r\n            uint value = exchangeRates[i + 2]*1000;\r\n            exchangeRateArray.push(exchangeRate(time1, time2, value));      \r\n            \r\n        }\r\n        \r\n    }"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "uint len = exchangeRates.length"
        VariableDeclaration "len"
           Type: uint256
           Source: "uint len"
          ElementaryTypeName uint
             Source: "uint"
        MemberAccess to member length
           Type: uint256
           Source: "exchangeRates.length"
          Identifier exchangeRates
             Type: uint256[] memory
             Source: "exchangeRates"
      ExpressionStatement
         Gas costs: 21
         Source: "exchangeRateArray.length = 0"
        Assignment using operator =
           Type: uint256
           Source: "exchangeRateArray.length = 0"
          MemberAccess to member length
             Type: uint256
             Source: "exchangeRateArray.length"
            Identifier exchangeRateArray
               Type: struct Pixiu_Beta.exchangeRate storage ref[] storage ref
               Source: "exchangeRateArray"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ForStatement
         Source: "for(uint i = 0; i < len; i += 3){\r\n            \r\n            uint time1 = exchangeRates[i];\r\n            uint time2 = exchangeRates[i + 1];\r\n            uint value = exchangeRates[i + 2]*1000;\r\n            exchangeRateArray.push(exchangeRate(time1, time2, value));      \r\n            \r\n        }"
        VariableDeclarationStatement
           Gas costs: 11
           Source: "uint i = 0"
          VariableDeclaration "i"
             Type: uint256
             Source: "uint i"
            ElementaryTypeName uint
               Source: "uint"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 9
           Source: "i < len"
          Identifier i
             Type: uint256
             Source: "i"
          Identifier len
             Type: uint256
             Source: "len"
        ExpressionStatement
           Gas costs: 14
           Source: "i += 3"
          Assignment using operator +=
             Type: uint256
             Source: "i += 3"
            Identifier i
               Type: uint256
               Source: "i"
            Literal, token: [no token] value: 3
               Type: int_const 3
               Source: "3"
        Block
           Source: "{\r\n            \r\n            uint time1 = exchangeRates[i];\r\n            uint time2 = exchangeRates[i + 1];\r\n            uint value = exchangeRates[i + 2]*1000;\r\n            exchangeRateArray.push(exchangeRate(time1, time2, value));      \r\n            \r\n        }"
          VariableDeclarationStatement
             Gas costs: [???]
             Source: "uint time1 = exchangeRates[i]"
            VariableDeclaration "time1"
               Type: uint256
               Source: "uint time1"
              ElementaryTypeName uint
                 Source: "uint"
            IndexAccess
               Type: uint256
               Source: "exchangeRates[i]"
              Identifier exchangeRates
                 Type: uint256[] memory
                 Source: "exchangeRates"
              Identifier i
                 Type: uint256
                 Source: "i"
          VariableDeclarationStatement
             Gas costs: [???]
             Source: "uint time2 = exchangeRates[i + 1]"
            VariableDeclaration "time2"
               Type: uint256
               Source: "uint time2"
              ElementaryTypeName uint
                 Source: "uint"
            IndexAccess
               Type: uint256
               Source: "exchangeRates[i + 1]"
              Identifier exchangeRates
                 Type: uint256[] memory
                 Source: "exchangeRates"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "i + 1"
                Identifier i
                   Type: uint256
                   Source: "i"
                Literal, token: [no token] value: 1
                   Type: int_const 1
                   Source: "1"
          VariableDeclarationStatement
             Gas costs: [???]
             Source: "uint value = exchangeRates[i + 2]*1000"
            VariableDeclaration "value"
               Type: uint256
               Source: "uint value"
              ElementaryTypeName uint
                 Source: "uint"
            BinaryOperation using operator *
               Type: uint256
               Source: "exchangeRates[i + 2]*1000"
              IndexAccess
                 Type: uint256
                 Source: "exchangeRates[i + 2]"
                Identifier exchangeRates
                   Type: uint256[] memory
                   Source: "exchangeRates"
                BinaryOperation using operator +
                   Type: uint256
                   Source: "i + 2"
                  Identifier i
                     Type: uint256
                     Source: "i"
                  Literal, token: [no token] value: 2
                     Type: int_const 2
                     Source: "2"
              Literal, token: [no token] value: 1000
                 Type: int_const 1000
                 Source: "1000"
          ExpressionStatement
             Gas costs: [???]
             Source: "exchangeRateArray.push(exchangeRate(time1, time2, value))"
            FunctionCall
               Type: uint256
               Source: "exchangeRateArray.push(exchangeRate(time1, time2, value))"
              MemberAccess to member push
                 Type: function (struct Pixiu_Beta.exchangeRate storage ref) returns (uint256)
                 Source: "exchangeRateArray.push"
                Identifier exchangeRateArray
                   Type: struct Pixiu_Beta.exchangeRate storage ref[] storage ref
                   Source: "exchangeRateArray"
              FunctionCall
                 Type: struct Pixiu_Beta.exchangeRate memory
                 Source: "exchangeRate(time1, time2, value)"
                Identifier exchangeRate
                   Type: type(struct Pixiu_Beta.exchangeRate storage pointer)
                   Source: "exchangeRate"
                Identifier time1
                   Type: uint256
                   Source: "time1"
                Identifier time2
                   Type: uint256
                   Source: "time2"
                Identifier value
                   Type: uint256
                   Source: "value"
  FunctionDefinition "get_exchange_wei" - public - const
     Source: "function get_exchange_wei() constant returns(uint256){\r\n\r\n\t\tuint len = exchangeRateArray.length;  \r\n\t\tuint nowTime = block.timestamp;\r\n        for(uint i = 0; i < len; i += 3){\r\n            \r\n\t\t\texchangeRate memory rate = exchangeRateArray[i];\r\n            uint time1 = rate.time1;\r\n            uint time2 = rate.time2;\r\n            uint value = rate.value;\r\n\t\t\tif (nowTime>= time1 && nowTime<=time2) {\r\n\t\t\t\ttokenExchangeRateInWei = value;\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n            \r\n        }\r\n\t\treturn tokenExchangeRateInWei;\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n\r\n\t\tuint len = exchangeRateArray.length;  \r\n\t\tuint nowTime = block.timestamp;\r\n        for(uint i = 0; i < len; i += 3){\r\n            \r\n\t\t\texchangeRate memory rate = exchangeRateArray[i];\r\n            uint time1 = rate.time1;\r\n            uint time2 = rate.time2;\r\n            uint value = rate.value;\r\n\t\t\tif (nowTime>= time1 && nowTime<=time2) {\r\n\t\t\t\ttokenExchangeRateInWei = value;\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n            \r\n        }\r\n\t\treturn tokenExchangeRateInWei;\r\n\t}"
      VariableDeclarationStatement
         Gas costs: 219
         Source: "uint len = exchangeRateArray.length"
        VariableDeclaration "len"
           Type: uint256
           Source: "uint len"
          ElementaryTypeName uint
             Source: "uint"
        MemberAccess to member length
           Type: uint256
           Source: "exchangeRateArray.length"
          Identifier exchangeRateArray
             Type: struct Pixiu_Beta.exchangeRate storage ref[] storage ref
             Source: "exchangeRateArray"
      VariableDeclarationStatement
         Gas costs: 10
         Source: "uint nowTime = block.timestamp"
        VariableDeclaration "nowTime"
           Type: uint256
           Source: "uint nowTime"
          ElementaryTypeName uint
             Source: "uint"
        MemberAccess to member timestamp
           Type: uint256
           Source: "block.timestamp"
          Identifier block
             Type: block
             Source: "block"
      ForStatement
         Source: "for(uint i = 0; i < len; i += 3){\r\n            \r\n\t\t\texchangeRate memory rate = exchangeRateArray[i];\r\n            uint time1 = rate.time1;\r\n            uint time2 = rate.time2;\r\n            uint value = rate.value;\r\n\t\t\tif (nowTime>= time1 && nowTime<=time2) {\r\n\t\t\t\ttokenExchangeRateInWei = value;\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n            \r\n        }"
        VariableDeclarationStatement
           Gas costs: 11
           Source: "uint i = 0"
          VariableDeclaration "i"
             Type: uint256
             Source: "uint i"
            ElementaryTypeName uint
               Source: "uint"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 9
           Source: "i < len"
          Identifier i
             Type: uint256
             Source: "i"
          Identifier len
             Type: uint256
             Source: "len"
        ExpressionStatement
           Gas costs: 14
           Source: "i += 3"
          Assignment using operator +=
             Type: uint256
             Source: "i += 3"
            Identifier i
               Type: uint256
               Source: "i"
            Literal, token: [no token] value: 3
               Type: int_const 3
               Source: "3"
        Block
           Source: "{\r\n            \r\n\t\t\texchangeRate memory rate = exchangeRateArray[i];\r\n            uint time1 = rate.time1;\r\n            uint time2 = rate.time2;\r\n            uint value = rate.value;\r\n\t\t\tif (nowTime>= time1 && nowTime<=time2) {\r\n\t\t\t\ttokenExchangeRateInWei = value;\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n            \r\n        }"
          VariableDeclarationStatement
             Gas costs: [???]
             Source: "exchangeRate memory rate = exchangeRateArray[i]"
            VariableDeclaration "rate"
               Type: struct Pixiu_Beta.exchangeRate memory
               Source: "exchangeRate memory rate"
              UserDefinedTypeName "exchangeRate"
                 Source: "exchangeRate"
            IndexAccess
               Type: struct Pixiu_Beta.exchangeRate storage ref
               Source: "exchangeRateArray[i]"
              Identifier exchangeRateArray
                 Type: struct Pixiu_Beta.exchangeRate storage ref[] storage ref
                 Source: "exchangeRateArray"
              Identifier i
                 Type: uint256
                 Source: "i"
          VariableDeclarationStatement
             Gas costs: [???]
             Source: "uint time1 = rate.time1"
            VariableDeclaration "time1"
               Type: uint256
               Source: "uint time1"
              ElementaryTypeName uint
                 Source: "uint"
            MemberAccess to member time1
               Type: uint256
               Source: "rate.time1"
              Identifier rate
                 Type: struct Pixiu_Beta.exchangeRate memory
                 Source: "rate"
          VariableDeclarationStatement
             Gas costs: [???]
             Source: "uint time2 = rate.time2"
            VariableDeclaration "time2"
               Type: uint256
               Source: "uint time2"
              ElementaryTypeName uint
                 Source: "uint"
            MemberAccess to member time2
               Type: uint256
               Source: "rate.time2"
              Identifier rate
                 Type: struct Pixiu_Beta.exchangeRate memory
                 Source: "rate"
          VariableDeclarationStatement
             Gas costs: [???]
             Source: "uint value = rate.value"
            VariableDeclaration "value"
               Type: uint256
               Source: "uint value"
              ElementaryTypeName uint
                 Source: "uint"
            MemberAccess to member value
               Type: uint256
               Source: "rate.value"
              Identifier rate
                 Type: struct Pixiu_Beta.exchangeRate memory
                 Source: "rate"
          IfStatement
             Source: "if (nowTime>= time1 && nowTime<=time2) {\r\n\t\t\t\ttokenExchangeRateInWei = value;\r\n\t\t\t\treturn value;\r\n\t\t\t}"
            BinaryOperation using operator &&
               Type: bool
               Gas costs: 46
               Source: "nowTime>= time1 && nowTime<=time2"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "nowTime>= time1"
                Identifier nowTime
                   Type: uint256
                   Source: "nowTime"
                Identifier time1
                   Type: uint256
                   Source: "time1"
              BinaryOperation using operator <=
                 Type: bool
                 Source: "nowTime<=time2"
                Identifier nowTime
                   Type: uint256
                   Source: "nowTime"
                Identifier time2
                   Type: uint256
                   Source: "time2"
            Block
               Source: "{\r\n\t\t\t\ttokenExchangeRateInWei = value;\r\n\t\t\t\treturn value;\r\n\t\t\t}"
              ExpressionStatement
                 Gas costs: 20014
                 Source: "tokenExchangeRateInWei = value"
                Assignment using operator =
                   Type: uint256
                   Source: "tokenExchangeRateInWei = value"
                  Identifier tokenExchangeRateInWei
                     Type: uint256
                     Source: "tokenExchangeRateInWei"
                  Identifier value
                     Type: uint256
                     Source: "value"
              Return
                 Gas costs: 19
                 Source: "return value"
                Identifier value
                   Type: uint256
                   Source: "value"
      Return
         Gas costs: 208
         Source: "return tokenExchangeRateInWei"
        Identifier tokenExchangeRateInWei
           Type: uint256
           Source: "tokenExchangeRateInWei"
  FunctionDefinition "admin_set_min_pay" - public
     Source: "function admin_set_min_pay(uint256 _min_pay) onlyAdmin{\r\n\t    \r\n\t    require(_min_pay >= 0);\r\n\t    min_pay_wei = _min_pay * 10 ** 18;\r\n\t    \r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _min_pay)"
      VariableDeclaration "_min_pay"
         Type: uint256
         Source: "uint256 _min_pay"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyAdmin"
       Gas costs: 0
       Source: "onlyAdmin"
      Identifier onlyAdmin
         Type: modifier ()
         Source: "onlyAdmin"
    Block
       Source: "{\r\n\t    \r\n\t    require(_min_pay >= 0);\r\n\t    min_pay_wei = _min_pay * 10 ** 18;\r\n\t    \r\n\t}"
      ExpressionStatement
         Gas costs: 38
         Source: "require(_min_pay >= 0)"
        FunctionCall
           Type: tuple()
           Source: "require(_min_pay >= 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "_min_pay >= 0"
            Identifier _min_pay
               Type: uint256
               Source: "_min_pay"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: 20022
         Source: "min_pay_wei = _min_pay * 10 ** 18"
        Assignment using operator =
           Type: uint256
           Source: "min_pay_wei = _min_pay * 10 ** 18"
          Identifier min_pay_wei
             Type: uint256
             Source: "min_pay_wei"
          BinaryOperation using operator *
             Type: uint256
             Source: "_min_pay * 10 ** 18"
            Identifier _min_pay
               Type: uint256
               Source: "_min_pay"
            BinaryOperation using operator **
               Type: int_const 1000000000000000000
               Source: "10 ** 18"
              Literal, token: [no token] value: 10
                 Type: int_const 10
                 Source: "10"
              Literal, token: [no token] value: 18
                 Type: int_const 18
                 Source: "18"
  FunctionDefinition "get_admin_list" - public - const
     Source: "function get_admin_list() constant returns(address[] _adminArray){\r\n        \r\n        _adminArray = adminArray;\r\n        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(address[] _adminArray)"
      VariableDeclaration "_adminArray"
         Type: address[] memory
         Source: "address[] _adminArray"
        ArrayTypeName
           Source: "address[]"
          ElementaryTypeName address
             Source: "address"
    Block
       Source: "{\r\n        \r\n        _adminArray = adminArray;\r\n        \r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "_adminArray = adminArray"
        Assignment using operator =
           Type: address[] memory
           Source: "_adminArray = adminArray"
          Identifier _adminArray
             Type: address[] memory
             Source: "_adminArray"
          Identifier adminArray
             Type: address[] storage ref
             Source: "adminArray"
  FunctionDefinition "admin_add" - public
     Source: "function admin_add(address admin) onlyAdmin adminDoesNotExist(admin){\r\n        \r\n        adminArray.push(admin);\r\n        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address admin)"
      VariableDeclaration "admin"
         Type: address
         Source: "address admin"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyAdmin"
       Gas costs: 0
       Source: "onlyAdmin"
      Identifier onlyAdmin
         Type: modifier ()
         Source: "onlyAdmin"
    ModifierInvocation "adminDoesNotExist"
       Gas costs: 3
       Source: "adminDoesNotExist(admin)"
      Identifier adminDoesNotExist
         Type: modifier (address)
         Source: "adminDoesNotExist"
      Identifier admin
         Type: address
         Source: "admin"
    Block
       Source: "{\r\n        \r\n        adminArray.push(admin);\r\n        \r\n    }"
      ExpressionStatement
         Gas costs: 20365
         Source: "adminArray.push(admin)"
        FunctionCall
           Type: uint256
           Source: "adminArray.push(admin)"
          MemberAccess to member push
             Type: function (address) returns (uint256)
             Source: "adminArray.push"
            Identifier adminArray
               Type: address[] storage ref
               Source: "adminArray"
          Identifier admin
             Type: address
             Source: "admin"
  FunctionDefinition "admin_del" - public
     Source: "function admin_del(address admin) onlyAdmin adminExists(admin){\r\n        \r\n        for (uint i = 0; i < adminArray.length - 1; i++)\r\n            if (adminArray[i] == admin) {\r\n                adminArray[i] = adminArray[adminArray.length - 1];\r\n                break;\r\n            }\r\n            \r\n        adminArray.length -= 1;\r\n        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address admin)"
      VariableDeclaration "admin"
         Type: address
         Source: "address admin"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyAdmin"
       Gas costs: 0
       Source: "onlyAdmin"
      Identifier onlyAdmin
         Type: modifier ()
         Source: "onlyAdmin"
    ModifierInvocation "adminExists"
       Gas costs: 3
       Source: "adminExists(admin)"
      Identifier adminExists
         Type: modifier (address)
         Source: "adminExists"
      Identifier admin
         Type: address
         Source: "admin"
    Block
       Source: "{\r\n        \r\n        for (uint i = 0; i < adminArray.length - 1; i++)\r\n            if (adminArray[i] == admin) {\r\n                adminArray[i] = adminArray[adminArray.length - 1];\r\n                break;\r\n            }\r\n            \r\n        adminArray.length -= 1;\r\n        \r\n    }"
      ForStatement
         Source: "for (uint i = 0; i < adminArray.length - 1; i++)\r\n            if (adminArray[i] == admin) {\r\n                adminArray[i] = adminArray[adminArray.length - 1];\r\n                break;\r\n            }"
        VariableDeclarationStatement
           Gas costs: 11
           Source: "uint i = 0"
          VariableDeclaration "i"
             Type: uint256
             Source: "uint i"
            ElementaryTypeName uint
               Source: "uint"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 223
           Source: "i < adminArray.length - 1"
          Identifier i
             Type: uint256
             Source: "i"
          BinaryOperation using operator -
             Type: uint256
             Source: "adminArray.length - 1"
            MemberAccess to member length
               Type: uint256
               Source: "adminArray.length"
              Identifier adminArray
                 Type: address[] storage ref
                 Source: "adminArray"
            Literal, token: [no token] value: 1
               Type: int_const 1
               Source: "1"
        ExpressionStatement
           Gas costs: 19
           Source: "i++"
          UnaryOperation (postfix) ++
             Type: uint256
             Source: "i++"
            Identifier i
               Type: uint256
               Source: "i"
        IfStatement
           Source: "if (adminArray[i] == admin) {\r\n                adminArray[i] = adminArray[adminArray.length - 1];\r\n                break;\r\n            }"
          BinaryOperation using operator ==
             Type: bool
             Gas costs: 546
             Source: "adminArray[i] == admin"
            IndexAccess
               Type: address
               Source: "adminArray[i]"
              Identifier adminArray
                 Type: address[] storage ref
                 Source: "adminArray"
              Identifier i
                 Type: uint256
                 Source: "i"
            Identifier admin
               Type: address
               Source: "admin"
          Block
             Source: "{\r\n                adminArray[i] = adminArray[adminArray.length - 1];\r\n                break;\r\n            }"
            ExpressionStatement
               Gas costs: 21295
               Source: "adminArray[i] = adminArray[adminArray.length - 1]"
              Assignment using operator =
                 Type: address
                 Source: "adminArray[i] = adminArray[adminArray.length - 1]"
                IndexAccess
                   Type: address
                   Source: "adminArray[i]"
                  Identifier adminArray
                     Type: address[] storage ref
                     Source: "adminArray"
                  Identifier i
                     Type: uint256
                     Source: "i"
                IndexAccess
                   Type: address
                   Source: "adminArray[adminArray.length - 1]"
                  Identifier adminArray
                     Type: address[] storage ref
                     Source: "adminArray"
                  BinaryOperation using operator -
                     Type: uint256
                     Source: "adminArray.length - 1"
                    MemberAccess to member length
                       Type: uint256
                       Source: "adminArray.length"
                      Identifier adminArray
                         Type: address[] storage ref
                         Source: "adminArray"
                    Literal, token: [no token] value: 1
                       Type: int_const 1
                       Source: "1"
            Break
               Gas costs: 0
               Source: "break"
      ExpressionStatement
         Gas costs: 243
         Source: "adminArray.length -= 1"
        Assignment using operator -=
           Type: uint256
           Source: "adminArray.length -= 1"
          MemberAccess to member length
             Type: uint256
             Source: "adminArray.length"
            Identifier adminArray
               Type: address[] storage ref
               Source: "adminArray"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
  FunctionDefinition "admin_set_deposit" - public
     Source: "function admin_set_deposit(address addr) onlyAdmin{\r\n        \r\n        deposit_address = addr;\r\n        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address addr)"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyAdmin"
       Gas costs: 0
       Source: "onlyAdmin"
      Identifier onlyAdmin
         Type: modifier ()
         Source: "onlyAdmin"
    Block
       Source: "{\r\n        \r\n        deposit_address = addr;\r\n        \r\n    }"
      ExpressionStatement
         Gas costs: 20267
         Source: "deposit_address = addr"
        Assignment using operator =
           Type: address
           Source: "deposit_address = addr"
          Identifier deposit_address
             Type: address
             Source: "deposit_address"
          Identifier addr
             Type: address
             Source: "addr"
  FunctionDefinition "admin_active_payable" - public
     Source: "function admin_active_payable() onlyAdmin{\r\n    \r\n        isPayable = true;\r\n        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyAdmin"
       Gas costs: 0
       Source: "onlyAdmin"
      Identifier onlyAdmin
         Type: modifier ()
         Source: "onlyAdmin"
    Block
       Source: "{\r\n    \r\n        isPayable = true;\r\n        \r\n    }"
      ExpressionStatement
         Gas costs: 20267
         Source: "isPayable = true"
        Assignment using operator =
           Type: bool
           Source: "isPayable = true"
          Identifier isPayable
             Type: bool
             Source: "isPayable"
          Literal, token: true value: true
             Type: bool
             Source: "true"
  FunctionDefinition "admin_inactive_payable" - public
     Source: "function admin_inactive_payable() onlyAdmin{\r\n        \r\n        isPayable = false;\r\n        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyAdmin"
       Gas costs: 0
       Source: "onlyAdmin"
      Identifier onlyAdmin
         Type: modifier ()
         Source: "onlyAdmin"
    Block
       Source: "{\r\n        \r\n        isPayable = false;\r\n        \r\n    }"
      ExpressionStatement
         Gas costs: 20267
         Source: "isPayable = false"
        Assignment using operator =
           Type: bool
           Source: "isPayable = false"
          Identifier isPayable
             Type: bool
             Source: "isPayable"
          Literal, token: false value: false
             Type: bool
             Source: "false"
  FunctionDefinition "admin_active_withdrawable" - public
     Source: "function admin_active_withdrawable() onlyAdmin{\r\n        \r\n        isWithdrawable = true;\r\n        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyAdmin"
       Gas costs: 0
       Source: "onlyAdmin"
      Identifier onlyAdmin
         Type: modifier ()
         Source: "onlyAdmin"
    Block
       Source: "{\r\n        \r\n        isWithdrawable = true;\r\n        \r\n    }"
      ExpressionStatement
         Gas costs: 20317
         Source: "isWithdrawable = true"
        Assignment using operator =
           Type: bool
           Source: "isWithdrawable = true"
          Identifier isWithdrawable
             Type: bool
             Source: "isWithdrawable"
          Literal, token: true value: true
             Type: bool
             Source: "true"
  FunctionDefinition "admin_inactive_withdrawable" - public
     Source: "function admin_inactive_withdrawable() onlyAdmin{\r\n        \r\n        isWithdrawable = false;\r\n        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyAdmin"
       Gas costs: 0
       Source: "onlyAdmin"
      Identifier onlyAdmin
         Type: modifier ()
         Source: "onlyAdmin"
    Block
       Source: "{\r\n        \r\n        isWithdrawable = false;\r\n        \r\n    }"
      ExpressionStatement
         Gas costs: 20317
         Source: "isWithdrawable = false"
        Assignment using operator =
           Type: bool
           Source: "isWithdrawable = false"
          Identifier isWithdrawable
             Type: bool
             Source: "isWithdrawable"
          Literal, token: false value: false
             Type: bool
             Source: "false"
  FunctionDefinition "admin_active_dividend" - public
     Source: "function admin_active_dividend(address _member) onlyAdmin memberExists(_member){\r\n        \r\n        members[_member].isDividend = true;\r\n        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _member)"
      VariableDeclaration "_member"
         Type: address
         Source: "address _member"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyAdmin"
       Gas costs: 0
       Source: "onlyAdmin"
      Identifier onlyAdmin
         Type: modifier ()
         Source: "onlyAdmin"
    ModifierInvocation "memberExists"
       Gas costs: 3
       Source: "memberExists(_member)"
      Identifier memberExists
         Type: modifier (address)
         Source: "memberExists"
      Identifier _member
         Type: address
         Source: "_member"
    Block
       Source: "{\r\n        \r\n        members[_member].isDividend = true;\r\n        \r\n    }"
      ExpressionStatement
         Gas costs: 20419
         Source: "members[_member].isDividend = true"
        Assignment using operator =
           Type: bool
           Source: "members[_member].isDividend = true"
          MemberAccess to member isDividend
             Type: bool
             Source: "members[_member].isDividend"
            IndexAccess
               Type: struct Pixiu_Beta.Member storage ref
               Source: "members[_member]"
              Identifier members
                 Type: mapping(address => struct Pixiu_Beta.Member storage ref)
                 Source: "members"
              Identifier _member
                 Type: address
                 Source: "_member"
          Literal, token: true value: true
             Type: bool
             Source: "true"
  FunctionDefinition "admin_inactive_dividend" - public
     Source: "function admin_inactive_dividend(address _member) onlyAdmin memberExists(_member){\r\n        \r\n        members[_member].isDividend = false;\r\n        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _member)"
      VariableDeclaration "_member"
         Type: address
         Source: "address _member"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyAdmin"
       Gas costs: 0
       Source: "onlyAdmin"
      Identifier onlyAdmin
         Type: modifier ()
         Source: "onlyAdmin"
    ModifierInvocation "memberExists"
       Gas costs: 3
       Source: "memberExists(_member)"
      Identifier memberExists
         Type: modifier (address)
         Source: "memberExists"
      Identifier _member
         Type: address
         Source: "_member"
    Block
       Source: "{\r\n        \r\n        members[_member].isDividend = false;\r\n        \r\n    }"
      ExpressionStatement
         Gas costs: 20419
         Source: "members[_member].isDividend = false"
        Assignment using operator =
           Type: bool
           Source: "members[_member].isDividend = false"
          MemberAccess to member isDividend
             Type: bool
             Source: "members[_member].isDividend"
            IndexAccess
               Type: struct Pixiu_Beta.Member storage ref
               Source: "members[_member]"
              Identifier members
                 Type: mapping(address => struct Pixiu_Beta.Member storage ref)
                 Source: "members"
              Identifier _member
                 Type: address
                 Source: "_member"
          Literal, token: false value: false
             Type: bool
             Source: "false"
  FunctionDefinition "admin_active_withdraw" - public
     Source: "function admin_active_withdraw(address _member) onlyAdmin memberExists(_member){\r\n        \r\n        members[_member].isWithdraw = true;\r\n        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _member)"
      VariableDeclaration "_member"
         Type: address
         Source: "address _member"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyAdmin"
       Gas costs: 0
       Source: "onlyAdmin"
      Identifier onlyAdmin
         Type: modifier ()
         Source: "onlyAdmin"
    ModifierInvocation "memberExists"
       Gas costs: 3
       Source: "memberExists(_member)"
      Identifier memberExists
         Type: modifier (address)
         Source: "memberExists"
      Identifier _member
         Type: address
         Source: "_member"
    Block
       Source: "{\r\n        \r\n        members[_member].isWithdraw = true;\r\n        \r\n    }"
      ExpressionStatement
         Gas costs: 20419
         Source: "members[_member].isWithdraw = true"
        Assignment using operator =
           Type: bool
           Source: "members[_member].isWithdraw = true"
          MemberAccess to member isWithdraw
             Type: bool
             Source: "members[_member].isWithdraw"
            IndexAccess
               Type: struct Pixiu_Beta.Member storage ref
               Source: "members[_member]"
              Identifier members
                 Type: mapping(address => struct Pixiu_Beta.Member storage ref)
                 Source: "members"
              Identifier _member
                 Type: address
                 Source: "_member"
          Literal, token: true value: true
             Type: bool
             Source: "true"
  FunctionDefinition "admin_inactive_withdraw" - public
     Source: "function admin_inactive_withdraw(address _member) onlyAdmin memberExists(_member){\r\n        \r\n        members[_member].isWithdraw = false;\r\n        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _member)"
      VariableDeclaration "_member"
         Type: address
         Source: "address _member"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyAdmin"
       Gas costs: 0
       Source: "onlyAdmin"
      Identifier onlyAdmin
         Type: modifier ()
         Source: "onlyAdmin"
    ModifierInvocation "memberExists"
       Gas costs: 3
       Source: "memberExists(_member)"
      Identifier memberExists
         Type: modifier (address)
         Source: "memberExists"
      Identifier _member
         Type: address
         Source: "_member"
    Block
       Source: "{\r\n        \r\n        members[_member].isWithdraw = false;\r\n        \r\n    }"
      ExpressionStatement
         Gas costs: 20419
         Source: "members[_member].isWithdraw = false"
        Assignment using operator =
           Type: bool
           Source: "members[_member].isWithdraw = false"
          MemberAccess to member isWithdraw
             Type: bool
             Source: "members[_member].isWithdraw"
            IndexAccess
               Type: struct Pixiu_Beta.Member storage ref
               Source: "members[_member]"
              Identifier members
                 Type: mapping(address => struct Pixiu_Beta.Member storage ref)
                 Source: "members"
              Identifier _member
                 Type: address
                 Source: "_member"
          Literal, token: false value: false
             Type: bool
             Source: "false"
  FunctionDefinition "get_total_info" - public - const
     Source: "function get_total_info() constant returns(uint256 _deposit_amount, uint256 _total_devidend, uint256 _total_remain, uint256 _total_withdraw){\r\n\r\n        _total_remain = total_devidend - total_withdraw;\r\n        _deposit_amount = deposit_amount;\r\n        _total_devidend = total_devidend;\r\n        _total_withdraw = total_withdraw;\r\n        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 12
       Source: "(uint256 _deposit_amount, uint256 _total_devidend, uint256 _total_remain, uint256 _total_withdraw)"
      VariableDeclaration "_deposit_amount"
         Type: uint256
         Source: "uint256 _deposit_amount"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_total_devidend"
         Type: uint256
         Source: "uint256 _total_devidend"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_total_remain"
         Type: uint256
         Source: "uint256 _total_remain"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_total_withdraw"
         Type: uint256
         Source: "uint256 _total_withdraw"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n\r\n        _total_remain = total_devidend - total_withdraw;\r\n        _deposit_amount = deposit_amount;\r\n        _total_devidend = total_devidend;\r\n        _total_withdraw = total_withdraw;\r\n        \r\n    }"
      ExpressionStatement
         Gas costs: 414
         Source: "_total_remain = total_devidend - total_withdraw"
        Assignment using operator =
           Type: uint256
           Source: "_total_remain = total_devidend - total_withdraw"
          Identifier _total_remain
             Type: uint256
             Source: "_total_remain"
          BinaryOperation using operator -
             Type: uint256
             Source: "total_devidend - total_withdraw"
            Identifier total_devidend
               Type: uint256
               Source: "total_devidend"
            Identifier total_withdraw
               Type: uint256
               Source: "total_withdraw"
      ExpressionStatement
         Gas costs: 208
         Source: "_deposit_amount = deposit_amount"
        Assignment using operator =
           Type: uint256
           Source: "_deposit_amount = deposit_amount"
          Identifier _deposit_amount
             Type: uint256
             Source: "_deposit_amount"
          Identifier deposit_amount
             Type: uint256
             Source: "deposit_amount"
      ExpressionStatement
         Gas costs: 208
         Source: "_total_devidend = total_devidend"
        Assignment using operator =
           Type: uint256
           Source: "_total_devidend = total_devidend"
          Identifier _total_devidend
             Type: uint256
             Source: "_total_devidend"
          Identifier total_devidend
             Type: uint256
             Source: "total_devidend"
      ExpressionStatement
         Gas costs: 208
         Source: "_total_withdraw = total_withdraw"
        Assignment using operator =
           Type: uint256
           Source: "_total_withdraw = total_withdraw"
          Identifier _total_withdraw
             Type: uint256
             Source: "_total_withdraw"
          Identifier total_withdraw
             Type: uint256
             Source: "total_withdraw"
  FunctionDefinition "get_info" - public - const
     Source: "function get_info(address _member) constant returns (uint256 _balance, uint256 _devidend, uint256 _remain, uint256 _withdraw){\r\n        \r\n        _devidend = members[_member].dividend;\r\n        _withdraw = members[_member].withdraw;\r\n        _remain = _devidend - _withdraw;\r\n        _balance = balances[_member];\r\n        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _member)"
      VariableDeclaration "_member"
         Type: address
         Source: "address _member"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 12
       Source: "(uint256 _balance, uint256 _devidend, uint256 _remain, uint256 _withdraw)"
      VariableDeclaration "_balance"
         Type: uint256
         Source: "uint256 _balance"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_devidend"
         Type: uint256
         Source: "uint256 _devidend"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_remain"
         Type: uint256
         Source: "uint256 _remain"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_withdraw"
         Type: uint256
         Source: "uint256 _withdraw"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        \r\n        _devidend = members[_member].dividend;\r\n        _withdraw = members[_member].withdraw;\r\n        _remain = _devidend - _withdraw;\r\n        _balance = balances[_member];\r\n        \r\n    }"
      ExpressionStatement
         Gas costs: 310
         Source: "_devidend = members[_member].dividend"
        Assignment using operator =
           Type: uint256
           Source: "_devidend = members[_member].dividend"
          Identifier _devidend
             Type: uint256
             Source: "_devidend"
          MemberAccess to member dividend
             Type: uint256
             Source: "members[_member].dividend"
            IndexAccess
               Type: struct Pixiu_Beta.Member storage ref
               Source: "members[_member]"
              Identifier members
                 Type: mapping(address => struct Pixiu_Beta.Member storage ref)
                 Source: "members"
              Identifier _member
                 Type: address
                 Source: "_member"
      ExpressionStatement
         Gas costs: 304
         Source: "_withdraw = members[_member].withdraw"
        Assignment using operator =
           Type: uint256
           Source: "_withdraw = members[_member].withdraw"
          Identifier _withdraw
             Type: uint256
             Source: "_withdraw"
          MemberAccess to member withdraw
             Type: uint256
             Source: "members[_member].withdraw"
            IndexAccess
               Type: struct Pixiu_Beta.Member storage ref
               Source: "members[_member]"
              Identifier members
                 Type: mapping(address => struct Pixiu_Beta.Member storage ref)
                 Source: "members"
              Identifier _member
                 Type: address
                 Source: "_member"
      ExpressionStatement
         Gas costs: 14
         Source: "_remain = _devidend - _withdraw"
        Assignment using operator =
           Type: uint256
           Source: "_remain = _devidend - _withdraw"
          Identifier _remain
             Type: uint256
             Source: "_remain"
          BinaryOperation using operator -
             Type: uint256
             Source: "_devidend - _withdraw"
            Identifier _devidend
               Type: uint256
               Source: "_devidend"
            Identifier _withdraw
               Type: uint256
               Source: "_withdraw"
      ExpressionStatement
         Gas costs: 298
         Source: "_balance = balances[_member]"
        Assignment using operator =
           Type: uint256
           Source: "_balance = balances[_member]"
          Identifier _balance
             Type: uint256
             Source: "_balance"
          IndexAccess
             Type: uint256
             Source: "balances[_member]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _member
               Type: address
               Source: "_member"
  FunctionDefinition "withdraw" - public
     Source: "function withdraw() isMember {\r\n        \r\n        uint256 _remain = members[msg.sender].dividend - members[msg.sender].withdraw;\r\n        require(_remain > 0);\r\n        require(isWithdrawable);\r\n        require(members[msg.sender].isWithdraw);\r\n        msg.sender.transfer(_remain);\r\n        members[msg.sender].withdraw += _remain; \r\n        total_withdraw += _remain;          \r\n\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "isMember"
       Gas costs: 0
       Source: "isMember"
      Identifier isMember
         Type: modifier ()
         Source: "isMember"
    Block
       Source: "{\r\n        \r\n        uint256 _remain = members[msg.sender].dividend - members[msg.sender].withdraw;\r\n        require(_remain > 0);\r\n        require(isWithdrawable);\r\n        require(members[msg.sender].isWithdraw);\r\n        msg.sender.transfer(_remain);\r\n        members[msg.sender].withdraw += _remain; \r\n        total_withdraw += _remain;          \r\n\r\n    }"
      VariableDeclarationStatement
         Gas costs: 613
         Source: "uint256 _remain = members[msg.sender].dividend - members[msg.sender].withdraw"
        VariableDeclaration "_remain"
           Type: uint256
           Source: "uint256 _remain"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator -
           Type: uint256
           Source: "members[msg.sender].dividend - members[msg.sender].withdraw"
          MemberAccess to member dividend
             Type: uint256
             Source: "members[msg.sender].dividend"
            IndexAccess
               Type: struct Pixiu_Beta.Member storage ref
               Source: "members[msg.sender]"
              Identifier members
                 Type: mapping(address => struct Pixiu_Beta.Member storage ref)
                 Source: "members"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
          MemberAccess to member withdraw
             Type: uint256
             Source: "members[msg.sender].withdraw"
            IndexAccess
               Type: struct Pixiu_Beta.Member storage ref
               Source: "members[msg.sender]"
              Identifier members
                 Type: mapping(address => struct Pixiu_Beta.Member storage ref)
                 Source: "members"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
      ExpressionStatement
         Gas costs: 35
         Source: "require(_remain > 0)"
        FunctionCall
           Type: tuple()
           Source: "require(_remain > 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "_remain > 0"
            Identifier _remain
               Type: uint256
               Source: "_remain"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: 315
         Source: "require(isWithdrawable)"
        FunctionCall
           Type: tuple()
           Source: "require(isWithdrawable)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          Identifier isWithdrawable
             Type: bool
             Source: "isWithdrawable"
      ExpressionStatement
         Gas costs: 416
         Source: "require(members[msg.sender].isWithdraw)"
        FunctionCall
           Type: tuple()
           Source: "require(members[msg.sender].isWithdraw)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          MemberAccess to member isWithdraw
             Type: bool
             Source: "members[msg.sender].isWithdraw"
            IndexAccess
               Type: struct Pixiu_Beta.Member storage ref
               Source: "members[msg.sender]"
              Identifier members
                 Type: mapping(address => struct Pixiu_Beta.Member storage ref)
                 Source: "members"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
      ExpressionStatement
         Gas costs: [???]
         Source: "msg.sender.transfer(_remain)"
        FunctionCall
           Type: tuple()
           Source: "msg.sender.transfer(_remain)"
          MemberAccess to member transfer
             Type: function (uint256)
             Source: "msg.sender.transfer"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _remain
             Type: uint256
             Source: "_remain"
      ExpressionStatement
         Gas costs: 20334
         Source: "members[msg.sender].withdraw += _remain"
        Assignment using operator +=
           Type: uint256
           Source: "members[msg.sender].withdraw += _remain"
          MemberAccess to member withdraw
             Type: uint256
             Source: "members[msg.sender].withdraw"
            IndexAccess
               Type: struct Pixiu_Beta.Member storage ref
               Source: "members[msg.sender]"
              Identifier members
                 Type: mapping(address => struct Pixiu_Beta.Member storage ref)
                 Source: "members"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
          Identifier _remain
             Type: uint256
             Source: "_remain"
      ExpressionStatement
         Gas costs: 20233
         Source: "total_withdraw += _remain"
        Assignment using operator +=
           Type: uint256
           Source: "total_withdraw += _remain"
          Identifier total_withdraw
             Type: uint256
             Source: "total_withdraw"
          Identifier _remain
             Type: uint256
             Source: "_remain"
  FunctionDefinition "withdraw_admin" - public
     Source: "function withdraw_admin(uint xEth) onlyDeposit{\r\n\r\n        uint256 _withdraw = xEth * 10**18;\r\n\t\trequire( msg.sender == deposit_address );\r\n\r\n\t\trequire(this.balance > _withdraw);\r\n\t\tmsg.sender.transfer(_withdraw);\r\n\r\n        withdraw_amount += _withdraw;  \r\n        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint xEth)"
      VariableDeclaration "xEth"
         Type: uint256
         Source: "uint xEth"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyDeposit"
       Gas costs: 0
       Source: "onlyDeposit"
      Identifier onlyDeposit
         Type: modifier ()
         Source: "onlyDeposit"
    Block
       Source: "{\r\n\r\n        uint256 _withdraw = xEth * 10**18;\r\n\t\trequire( msg.sender == deposit_address );\r\n\r\n\t\trequire(this.balance > _withdraw);\r\n\t\tmsg.sender.transfer(_withdraw);\r\n\r\n        withdraw_amount += _withdraw;  \r\n        \r\n    }"
      VariableDeclarationStatement
         Gas costs: 19
         Source: "uint256 _withdraw = xEth * 10**18"
        VariableDeclaration "_withdraw"
           Type: uint256
           Source: "uint256 _withdraw"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator *
           Type: uint256
           Source: "xEth * 10**18"
          Identifier xEth
             Type: uint256
             Source: "xEth"
          BinaryOperation using operator **
             Type: int_const 1000000000000000000
             Source: "10**18"
            Literal, token: [no token] value: 10
               Type: int_const 10
               Source: "10"
            Literal, token: [no token] value: 18
               Type: int_const 18
               Source: "18"
      ExpressionStatement
         Gas costs: 282
         Source: "require( msg.sender == deposit_address )"
        FunctionCall
           Type: tuple()
           Source: "require( msg.sender == deposit_address )"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == deposit_address"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier deposit_address
               Type: address
               Source: "deposit_address"
      ExpressionStatement
         Gas costs: 440
         Source: "require(this.balance > _withdraw)"
        FunctionCall
           Type: tuple()
           Source: "require(this.balance > _withdraw)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "this.balance > _withdraw"
            MemberAccess to member balance
               Type: uint256
               Source: "this.balance"
              Identifier this
                 Type: contract Pixiu_Beta
                 Source: "this"
            Identifier _withdraw
               Type: uint256
               Source: "_withdraw"
      ExpressionStatement
         Gas costs: [???]
         Source: "msg.sender.transfer(_withdraw)"
        FunctionCall
           Type: tuple()
           Source: "msg.sender.transfer(_withdraw)"
          MemberAccess to member transfer
             Type: function (uint256)
             Source: "msg.sender.transfer"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _withdraw
             Type: uint256
             Source: "_withdraw"
      ExpressionStatement
         Gas costs: 20233
         Source: "withdraw_amount += _withdraw"
        Assignment using operator +=
           Type: uint256
           Source: "withdraw_amount += _withdraw"
          Identifier withdraw_amount
             Type: uint256
             Source: "withdraw_amount"
          Identifier _withdraw
             Type: uint256
             Source: "_withdraw"
  FunctionDefinition "withdraw_all_admin" - public
     Source: "function withdraw_all_admin(address _deposit) onlyAdmin {\r\n        \r\n\t\trequire( _deposit == deposit_address ); \r\n\r\n\t\t_deposit.transfer(this.balance);\r\n\r\n\t\ttotal_devidend = 0; //member\r\n\t\ttotal_withdraw = 0; //member\r\n\t\tdeposit_amount = 0;  //deposit\r\n\t\twithdraw_amount = 0; //deposit\r\n\t\tdividend_amount = 0; //admin   \r\n        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _deposit)"
      VariableDeclaration "_deposit"
         Type: address
         Source: "address _deposit"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyAdmin"
       Gas costs: 0
       Source: "onlyAdmin"
      Identifier onlyAdmin
         Type: modifier ()
         Source: "onlyAdmin"
    Block
       Source: "{\r\n        \r\n\t\trequire( _deposit == deposit_address ); \r\n\r\n\t\t_deposit.transfer(this.balance);\r\n\r\n\t\ttotal_devidend = 0; //member\r\n\t\ttotal_withdraw = 0; //member\r\n\t\tdeposit_amount = 0;  //deposit\r\n\t\twithdraw_amount = 0; //deposit\r\n\t\tdividend_amount = 0; //admin   \r\n        \r\n    }"
      ExpressionStatement
         Gas costs: 283
         Source: "require( _deposit == deposit_address )"
        FunctionCall
           Type: tuple()
           Source: "require( _deposit == deposit_address )"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "_deposit == deposit_address"
            Identifier _deposit
               Type: address
               Source: "_deposit"
            Identifier deposit_address
               Type: address
               Source: "deposit_address"
      ExpressionStatement
         Gas costs: [???]
         Source: "_deposit.transfer(this.balance)"
        FunctionCall
           Type: tuple()
           Source: "_deposit.transfer(this.balance)"
          MemberAccess to member transfer
             Type: function (uint256)
             Source: "_deposit.transfer"
            Identifier _deposit
               Type: address
               Source: "_deposit"
          MemberAccess to member balance
             Type: uint256
             Source: "this.balance"
            Identifier this
               Type: contract Pixiu_Beta
               Source: "this"
      ExpressionStatement
         Gas costs: 5014
         Source: "total_devidend = 0"
        Assignment using operator =
           Type: uint256
           Source: "total_devidend = 0"
          Identifier total_devidend
             Type: uint256
             Source: "total_devidend"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 5014
         Source: "total_withdraw = 0"
        Assignment using operator =
           Type: uint256
           Source: "total_withdraw = 0"
          Identifier total_withdraw
             Type: uint256
             Source: "total_withdraw"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 5014
         Source: "deposit_amount = 0"
        Assignment using operator =
           Type: uint256
           Source: "deposit_amount = 0"
          Identifier deposit_amount
             Type: uint256
             Source: "deposit_amount"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 5014
         Source: "withdraw_amount = 0"
        Assignment using operator =
           Type: uint256
           Source: "withdraw_amount = 0"
          Identifier withdraw_amount
             Type: uint256
             Source: "withdraw_amount"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 5014
         Source: "dividend_amount = 0"
        Assignment using operator =
           Type: uint256
           Source: "dividend_amount = 0"
          Identifier dividend_amount
             Type: uint256
             Source: "dividend_amount"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32)     {\r\n\t\trequire(_to != deposit_address);\r\n        require(isPayable);\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\r\n\t\tif (members[_to].isExists != true) {\t\t\r\n\t\t\tmembers[_to].isExists = true;\r\n\t\t\tmembers[_to].isDividend = true;\r\n\t\t\tmembers[_to].isWithdraw = true; \r\n\t\t\tmemberArray.push(_to);\t\t\r\n\t\t}  \r\n\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyPayloadSize"
       Gas costs: 3
       Source: "onlyPayloadSize(2 * 32)"
      Identifier onlyPayloadSize
         Type: modifier (uint256)
         Source: "onlyPayloadSize"
      BinaryOperation using operator *
         Type: int_const 64
         Source: "2 * 32"
        Literal, token: [no token] value: 2
           Type: int_const 2
           Source: "2"
        Literal, token: [no token] value: 32
           Type: int_const 32
           Source: "32"
    Block
       Source: "{\r\n\t\trequire(_to != deposit_address);\r\n        require(isPayable);\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\r\n\t\tif (members[_to].isExists != true) {\t\t\r\n\t\t\tmembers[_to].isExists = true;\r\n\t\t\tmembers[_to].isDividend = true;\r\n\t\t\tmembers[_to].isWithdraw = true; \r\n\t\t\tmemberArray.push(_to);\t\t\r\n\t\t}  \r\n\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t}"
      ExpressionStatement
         Gas costs: 286
         Source: "require(_to != deposit_address)"
        FunctionCall
           Type: tuple()
           Source: "require(_to != deposit_address)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "_to != deposit_address"
            Identifier _to
               Type: address
               Source: "_to"
            Identifier deposit_address
               Type: address
               Source: "deposit_address"
      ExpressionStatement
         Gas costs: 265
         Source: "require(isPayable)"
        FunctionCall
           Type: tuple()
           Source: "require(isPayable)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          Identifier isPayable
             Type: bool
             Source: "isPayable"
      ExpressionStatement
         Gas costs: 20437
         Source: "balances[msg.sender] = balances[msg.sender].sub(_value)"
        Assignment using operator =
           Type: uint256
           Source: "balances[msg.sender] = balances[msg.sender].sub(_value)"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          FunctionCall
             Type: uint256
             Source: "balances[msg.sender].sub(_value)"
            MemberAccess to member sub
               Type: function (uint256,uint256) returns (uint256)
               Source: "balances[msg.sender].sub"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 20433
         Source: "balances[_to] = balances[_to].add(_value)"
        Assignment using operator =
           Type: uint256
           Source: "balances[_to] = balances[_to].add(_value)"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
          FunctionCall
             Type: uint256
             Source: "balances[_to].add(_value)"
            MemberAccess to member add
               Type: function (uint256,uint256) returns (uint256)
               Source: "balances[_to].add"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
            Identifier _value
               Type: uint256
               Source: "_value"
      IfStatement
         Source: "if (members[_to].isExists != true) {\t\t\r\n\t\t\tmembers[_to].isExists = true;\r\n\t\t\tmembers[_to].isDividend = true;\r\n\t\t\tmembers[_to].isWithdraw = true; \r\n\t\t\tmemberArray.push(_to);\t\t\r\n\t\t}"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 356
           Source: "members[_to].isExists != true"
          MemberAccess to member isExists
             Type: bool
             Source: "members[_to].isExists"
            IndexAccess
               Type: struct Pixiu_Beta.Member storage ref
               Source: "members[_to]"
              Identifier members
                 Type: mapping(address => struct Pixiu_Beta.Member storage ref)
                 Source: "members"
              Identifier _to
                 Type: address
                 Source: "_to"
          Literal, token: true value: true
             Type: bool
             Source: "true"
        Block
           Source: "{\t\t\r\n\t\t\tmembers[_to].isExists = true;\r\n\t\t\tmembers[_to].isDividend = true;\r\n\t\t\tmembers[_to].isWithdraw = true; \r\n\t\t\tmemberArray.push(_to);\t\t\r\n\t\t}"
          ExpressionStatement
             Gas costs: 20369
             Source: "members[_to].isExists = true"
            Assignment using operator =
               Type: bool
               Source: "members[_to].isExists = true"
              MemberAccess to member isExists
                 Type: bool
                 Source: "members[_to].isExists"
                IndexAccess
                   Type: struct Pixiu_Beta.Member storage ref
                   Source: "members[_to]"
                  Identifier members
                     Type: mapping(address => struct Pixiu_Beta.Member storage ref)
                     Source: "members"
                  Identifier _to
                     Type: address
                     Source: "_to"
              Literal, token: true value: true
                 Type: bool
                 Source: "true"
          ExpressionStatement
             Gas costs: 20413
             Source: "members[_to].isDividend = true"
            Assignment using operator =
               Type: bool
               Source: "members[_to].isDividend = true"
              MemberAccess to member isDividend
                 Type: bool
                 Source: "members[_to].isDividend"
                IndexAccess
                   Type: struct Pixiu_Beta.Member storage ref
                   Source: "members[_to]"
                  Identifier members
                     Type: mapping(address => struct Pixiu_Beta.Member storage ref)
                     Source: "members"
                  Identifier _to
                     Type: address
                     Source: "_to"
              Literal, token: true value: true
                 Type: bool
                 Source: "true"
          ExpressionStatement
             Gas costs: 20413
             Source: "members[_to].isWithdraw = true"
            Assignment using operator =
               Type: bool
               Source: "members[_to].isWithdraw = true"
              MemberAccess to member isWithdraw
                 Type: bool
                 Source: "members[_to].isWithdraw"
                IndexAccess
                   Type: struct Pixiu_Beta.Member storage ref
                   Source: "members[_to]"
                  Identifier members
                     Type: mapping(address => struct Pixiu_Beta.Member storage ref)
                     Source: "members"
                  Identifier _to
                     Type: address
                     Source: "_to"
              Literal, token: true value: true
                 Type: bool
                 Source: "true"
          ExpressionStatement
             Gas costs: 20362
             Source: "memberArray.push(_to)"
            FunctionCall
               Type: uint256
               Source: "memberArray.push(_to)"
              MemberAccess to member push
                 Type: function (address) returns (uint256)
                 Source: "memberArray.push"
                Identifier memberArray
                   Type: address[] storage ref
                   Source: "memberArray"
              Identifier _to
                 Type: address
                 Source: "_to"
      ExpressionStatement
         Gas costs: [???]
         Source: "Transfer(msg.sender, _to, _value)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(msg.sender, _to, _value)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32)     {\r\n\t\trequire(_to != deposit_address);\r\n\t\trequire(_from != deposit_address);\r\n        require(isPayable);\r\n\t\tvar _allowance = allowed[_from][msg.sender]; \r\n\t\trequire(_allowance >= _value);\r\n\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tallowed[_from][msg.sender] = _allowance.sub(_value);\r\n\t\t\r\n\t\tif (members[_to].isExists != true) {\t\t\r\n\t\t\tmembers[_to].isExists = true;\r\n\t\t\tmembers[_to].isDividend = true;\r\n\t\t\tmembers[_to].isWithdraw = true; \r\n\t\t\tmemberArray.push(_to);\t\t\r\n\t\t}  \r\n\r\n\t\tTransfer(_from, _to, _value);\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyPayloadSize"
       Gas costs: 3
       Source: "onlyPayloadSize(3 * 32)"
      Identifier onlyPayloadSize
         Type: modifier (uint256)
         Source: "onlyPayloadSize"
      BinaryOperation using operator *
         Type: int_const 96
         Source: "3 * 32"
        Literal, token: [no token] value: 3
           Type: int_const 3
           Source: "3"
        Literal, token: [no token] value: 32
           Type: int_const 32
           Source: "32"
    Block
       Source: "{\r\n\t\trequire(_to != deposit_address);\r\n\t\trequire(_from != deposit_address);\r\n        require(isPayable);\r\n\t\tvar _allowance = allowed[_from][msg.sender]; \r\n\t\trequire(_allowance >= _value);\r\n\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tallowed[_from][msg.sender] = _allowance.sub(_value);\r\n\t\t\r\n\t\tif (members[_to].isExists != true) {\t\t\r\n\t\t\tmembers[_to].isExists = true;\r\n\t\t\tmembers[_to].isDividend = true;\r\n\t\t\tmembers[_to].isWithdraw = true; \r\n\t\t\tmemberArray.push(_to);\t\t\r\n\t\t}  \r\n\r\n\t\tTransfer(_from, _to, _value);\r\n\t}"
      ExpressionStatement
         Gas costs: 286
         Source: "require(_to != deposit_address)"
        FunctionCall
           Type: tuple()
           Source: "require(_to != deposit_address)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "_to != deposit_address"
            Identifier _to
               Type: address
               Source: "_to"
            Identifier deposit_address
               Type: address
               Source: "deposit_address"
      ExpressionStatement
         Gas costs: 286
         Source: "require(_from != deposit_address)"
        FunctionCall
           Type: tuple()
           Source: "require(_from != deposit_address)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "_from != deposit_address"
            Identifier _from
               Type: address
               Source: "_from"
            Identifier deposit_address
               Type: address
               Source: "deposit_address"
      ExpressionStatement
         Gas costs: 265
         Source: "require(isPayable)"
        FunctionCall
           Type: tuple()
           Source: "require(isPayable)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          Identifier isPayable
             Type: bool
             Source: "isPayable"
      VariableDeclarationStatement
         Gas costs: 396
         Source: "var _allowance = allowed[_from][msg.sender]"
        VariableDeclaration "_allowance"
           Type: uint256
           Source: "var _allowance"
        IndexAccess
           Type: uint256
           Source: "allowed[_from][msg.sender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowed[_from]"
            Identifier allowed
               Type: mapping(address => mapping(address => uint256))
               Source: "allowed"
            Identifier _from
               Type: address
               Source: "_from"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 38
         Source: "require(_allowance >= _value)"
        FunctionCall
           Type: tuple()
           Source: "require(_allowance >= _value)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "_allowance >= _value"
            Identifier _allowance
               Type: uint256
               Source: "_allowance"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 20439
         Source: "balances[_to] = balances[_to].add(_value)"
        Assignment using operator =
           Type: uint256
           Source: "balances[_to] = balances[_to].add(_value)"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
          FunctionCall
             Type: uint256
             Source: "balances[_to].add(_value)"
            MemberAccess to member add
               Type: function (uint256,uint256) returns (uint256)
               Source: "balances[_to].add"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 20433
         Source: "balances[_from] = balances[_from].sub(_value)"
        Assignment using operator =
           Type: uint256
           Source: "balances[_from] = balances[_from].sub(_value)"
          IndexAccess
             Type: uint256
             Source: "balances[_from]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _from
               Type: address
               Source: "_from"
          FunctionCall
             Type: uint256
             Source: "balances[_from].sub(_value)"
            MemberAccess to member sub
               Type: function (uint256,uint256) returns (uint256)
               Source: "balances[_from].sub"
              IndexAccess
                 Type: uint256
                 Source: "balances[_from]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _from
                   Type: address
                   Source: "_from"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 20232
         Source: "allowed[_from][msg.sender] = _allowance.sub(_value)"
        Assignment using operator =
           Type: uint256
           Source: "allowed[_from][msg.sender] = _allowance.sub(_value)"
          IndexAccess
             Type: uint256
             Source: "allowed[_from][msg.sender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[_from]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              Identifier _from
                 Type: address
                 Source: "_from"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          FunctionCall
             Type: uint256
             Source: "_allowance.sub(_value)"
            MemberAccess to member sub
               Type: function (uint256,uint256) returns (uint256)
               Source: "_allowance.sub"
              Identifier _allowance
                 Type: uint256
                 Source: "_allowance"
            Identifier _value
               Type: uint256
               Source: "_value"
      IfStatement
         Source: "if (members[_to].isExists != true) {\t\t\r\n\t\t\tmembers[_to].isExists = true;\r\n\t\t\tmembers[_to].isDividend = true;\r\n\t\t\tmembers[_to].isWithdraw = true; \r\n\t\t\tmemberArray.push(_to);\t\t\r\n\t\t}"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 356
           Source: "members[_to].isExists != true"
          MemberAccess to member isExists
             Type: bool
             Source: "members[_to].isExists"
            IndexAccess
               Type: struct Pixiu_Beta.Member storage ref
               Source: "members[_to]"
              Identifier members
                 Type: mapping(address => struct Pixiu_Beta.Member storage ref)
                 Source: "members"
              Identifier _to
                 Type: address
                 Source: "_to"
          Literal, token: true value: true
             Type: bool
             Source: "true"
        Block
           Source: "{\t\t\r\n\t\t\tmembers[_to].isExists = true;\r\n\t\t\tmembers[_to].isDividend = true;\r\n\t\t\tmembers[_to].isWithdraw = true; \r\n\t\t\tmemberArray.push(_to);\t\t\r\n\t\t}"
          ExpressionStatement
             Gas costs: 20369
             Source: "members[_to].isExists = true"
            Assignment using operator =
               Type: bool
               Source: "members[_to].isExists = true"
              MemberAccess to member isExists
                 Type: bool
                 Source: "members[_to].isExists"
                IndexAccess
                   Type: struct Pixiu_Beta.Member storage ref
                   Source: "members[_to]"
                  Identifier members
                     Type: mapping(address => struct Pixiu_Beta.Member storage ref)
                     Source: "members"
                  Identifier _to
                     Type: address
                     Source: "_to"
              Literal, token: true value: true
                 Type: bool
                 Source: "true"
          ExpressionStatement
             Gas costs: 20413
             Source: "members[_to].isDividend = true"
            Assignment using operator =
               Type: bool
               Source: "members[_to].isDividend = true"
              MemberAccess to member isDividend
                 Type: bool
                 Source: "members[_to].isDividend"
                IndexAccess
                   Type: struct Pixiu_Beta.Member storage ref
                   Source: "members[_to]"
                  Identifier members
                     Type: mapping(address => struct Pixiu_Beta.Member storage ref)
                     Source: "members"
                  Identifier _to
                     Type: address
                     Source: "_to"
              Literal, token: true value: true
                 Type: bool
                 Source: "true"
          ExpressionStatement
             Gas costs: 20413
             Source: "members[_to].isWithdraw = true"
            Assignment using operator =
               Type: bool
               Source: "members[_to].isWithdraw = true"
              MemberAccess to member isWithdraw
                 Type: bool
                 Source: "members[_to].isWithdraw"
                IndexAccess
                   Type: struct Pixiu_Beta.Member storage ref
                   Source: "members[_to]"
                  Identifier members
                     Type: mapping(address => struct Pixiu_Beta.Member storage ref)
                     Source: "members"
                  Identifier _to
                     Type: address
                     Source: "_to"
              Literal, token: true value: true
                 Type: bool
                 Source: "true"
          ExpressionStatement
             Gas costs: 20362
             Source: "memberArray.push(_to)"
            FunctionCall
               Type: uint256
               Source: "memberArray.push(_to)"
              MemberAccess to member push
                 Type: function (address) returns (uint256)
                 Source: "memberArray.push"
                Identifier memberArray
                   Type: address[] storage ref
                   Source: "memberArray"
              Identifier _to
                 Type: address
                 Source: "_to"
      ExpressionStatement
         Gas costs: [???]
         Source: "Transfer(_from, _to, _value)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(_from, _to, _value)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
  FunctionDefinition "" - public
     Source: "function () payable {\r\n        \r\n        pay();\r\n        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        \r\n        pay();\r\n        \r\n    }"
      ExpressionStatement
         Gas costs: 6
         Source: "pay()"
        FunctionCall
           Type: bool
           Source: "pay()"
          Identifier pay
             Type: function () returns (bool)
             Source: "pay"
  FunctionDefinition "pay" - public
     Source: "function pay() public payable returns (bool) {\r\n      \r\n        require(msg.value > min_pay_wei);\r\n        require(isPayable);\r\n        \r\n        if(msg.sender == deposit_address){\r\n             deposit_amount += msg.value;\r\n        }else{\r\n        \r\n    \t\tuint256 exchangeWei = get_exchange_wei();\r\n    \t\tuint256 thisTokenWei = exchangeWei * msg.value / 10**18 ;\r\n        \r\n            if (members[msg.sender].isExists != true) {\r\n                \r\n                members[msg.sender].isExists = true;\r\n                members[msg.sender].isDividend = true;\r\n                members[msg.sender].isWithdraw = true; \r\n                memberArray.push(msg.sender);\r\n                \r\n            }  \r\n    \t\tbalances[msg.sender] += thisTokenWei;\r\n    \t\ttotal_tokenwei += thisTokenWei;\r\n\t\t\r\n        }\r\n        \r\n        return true;\r\n    \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n      \r\n        require(msg.value > min_pay_wei);\r\n        require(isPayable);\r\n        \r\n        if(msg.sender == deposit_address){\r\n             deposit_amount += msg.value;\r\n        }else{\r\n        \r\n    \t\tuint256 exchangeWei = get_exchange_wei();\r\n    \t\tuint256 thisTokenWei = exchangeWei * msg.value / 10**18 ;\r\n        \r\n            if (members[msg.sender].isExists != true) {\r\n                \r\n                members[msg.sender].isExists = true;\r\n                members[msg.sender].isDividend = true;\r\n                members[msg.sender].isWithdraw = true; \r\n                memberArray.push(msg.sender);\r\n                \r\n            }  \r\n    \t\tbalances[msg.sender] += thisTokenWei;\r\n    \t\ttotal_tokenwei += thisTokenWei;\r\n\t\t\r\n        }\r\n        \r\n        return true;\r\n    \r\n    }"
      ExpressionStatement
         Gas costs: 234
         Source: "require(msg.value > min_pay_wei)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.value > min_pay_wei)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "msg.value > min_pay_wei"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier min_pay_wei
               Type: uint256
               Source: "min_pay_wei"
      ExpressionStatement
         Gas costs: 265
         Source: "require(isPayable)"
        FunctionCall
           Type: tuple()
           Source: "require(isPayable)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          Identifier isPayable
             Type: bool
             Source: "isPayable"
      IfStatement
         Source: "if(msg.sender == deposit_address){\r\n             deposit_amount += msg.value;\r\n        }else{\r\n        \r\n    \t\tuint256 exchangeWei = get_exchange_wei();\r\n    \t\tuint256 thisTokenWei = exchangeWei * msg.value / 10**18 ;\r\n        \r\n            if (members[msg.sender].isExists != true) {\r\n                \r\n                members[msg.sender].isExists = true;\r\n                members[msg.sender].isDividend = true;\r\n                members[msg.sender].isWithdraw = true; \r\n                memberArray.push(msg.sender);\r\n                \r\n            }  \r\n    \t\tbalances[msg.sender] += thisTokenWei;\r\n    \t\ttotal_tokenwei += thisTokenWei;\r\n\t\t\r\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 256
           Source: "msg.sender == deposit_address"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier deposit_address
             Type: address
             Source: "deposit_address"
        Block
           Source: "{\r\n             deposit_amount += msg.value;\r\n        }"
          ExpressionStatement
             Gas costs: 20232
             Source: "deposit_amount += msg.value"
            Assignment using operator +=
               Type: uint256
               Source: "deposit_amount += msg.value"
              Identifier deposit_amount
                 Type: uint256
                 Source: "deposit_amount"
              MemberAccess to member value
                 Type: uint256
                 Source: "msg.value"
                Identifier msg
                   Type: msg
                   Source: "msg"
        Block
           Source: "{\r\n        \r\n    \t\tuint256 exchangeWei = get_exchange_wei();\r\n    \t\tuint256 thisTokenWei = exchangeWei * msg.value / 10**18 ;\r\n        \r\n            if (members[msg.sender].isExists != true) {\r\n                \r\n                members[msg.sender].isExists = true;\r\n                members[msg.sender].isDividend = true;\r\n                members[msg.sender].isWithdraw = true; \r\n                memberArray.push(msg.sender);\r\n                \r\n            }  \r\n    \t\tbalances[msg.sender] += thisTokenWei;\r\n    \t\ttotal_tokenwei += thisTokenWei;\r\n\t\t\r\n        }"
          VariableDeclarationStatement
             Gas costs: 23
             Source: "uint256 exchangeWei = get_exchange_wei()"
            VariableDeclaration "exchangeWei"
               Type: uint256
               Source: "uint256 exchangeWei"
              ElementaryTypeName uint256
                 Source: "uint256"
            FunctionCall
               Type: uint256
               Source: "get_exchange_wei()"
              Identifier get_exchange_wei
                 Type: function () view returns (uint256)
                 Source: "get_exchange_wei"
          VariableDeclarationStatement
             Gas costs: 49
             Source: "uint256 thisTokenWei = exchangeWei * msg.value / 10**18"
            VariableDeclaration "thisTokenWei"
               Type: uint256
               Source: "uint256 thisTokenWei"
              ElementaryTypeName uint256
                 Source: "uint256"
            BinaryOperation using operator /
               Type: uint256
               Source: "exchangeWei * msg.value / 10**18"
              BinaryOperation using operator *
                 Type: uint256
                 Source: "exchangeWei * msg.value"
                Identifier exchangeWei
                   Type: uint256
                   Source: "exchangeWei"
                MemberAccess to member value
                   Type: uint256
                   Source: "msg.value"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              BinaryOperation using operator **
                 Type: int_const 1000000000000000000
                 Source: "10**18"
                Literal, token: [no token] value: 10
                   Type: int_const 10
                   Source: "10"
                Literal, token: [no token] value: 18
                   Type: int_const 18
                   Source: "18"
          IfStatement
             Source: "if (members[msg.sender].isExists != true) {\r\n                \r\n                members[msg.sender].isExists = true;\r\n                members[msg.sender].isDividend = true;\r\n                members[msg.sender].isWithdraw = true; \r\n                memberArray.push(msg.sender);\r\n                \r\n            }"
            BinaryOperation using operator !=
               Type: bool
               Gas costs: 361
               Source: "members[msg.sender].isExists != true"
              MemberAccess to member isExists
                 Type: bool
                 Source: "members[msg.sender].isExists"
                IndexAccess
                   Type: struct Pixiu_Beta.Member storage ref
                   Source: "members[msg.sender]"
                  Identifier members
                     Type: mapping(address => struct Pixiu_Beta.Member storage ref)
                     Source: "members"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
              Literal, token: true value: true
                 Type: bool
                 Source: "true"
            Block
               Source: "{\r\n                \r\n                members[msg.sender].isExists = true;\r\n                members[msg.sender].isDividend = true;\r\n                members[msg.sender].isWithdraw = true; \r\n                memberArray.push(msg.sender);\r\n                \r\n            }"
              ExpressionStatement
                 Gas costs: 20368
                 Source: "members[msg.sender].isExists = true"
                Assignment using operator =
                   Type: bool
                   Source: "members[msg.sender].isExists = true"
                  MemberAccess to member isExists
                     Type: bool
                     Source: "members[msg.sender].isExists"
                    IndexAccess
                       Type: struct Pixiu_Beta.Member storage ref
                       Source: "members[msg.sender]"
                      Identifier members
                         Type: mapping(address => struct Pixiu_Beta.Member storage ref)
                         Source: "members"
                      MemberAccess to member sender
                         Type: address
                         Source: "msg.sender"
                        Identifier msg
                           Type: msg
                           Source: "msg"
                  Literal, token: true value: true
                     Type: bool
                     Source: "true"
              ExpressionStatement
                 Gas costs: 20412
                 Source: "members[msg.sender].isDividend = true"
                Assignment using operator =
                   Type: bool
                   Source: "members[msg.sender].isDividend = true"
                  MemberAccess to member isDividend
                     Type: bool
                     Source: "members[msg.sender].isDividend"
                    IndexAccess
                       Type: struct Pixiu_Beta.Member storage ref
                       Source: "members[msg.sender]"
                      Identifier members
                         Type: mapping(address => struct Pixiu_Beta.Member storage ref)
                         Source: "members"
                      MemberAccess to member sender
                         Type: address
                         Source: "msg.sender"
                        Identifier msg
                           Type: msg
                           Source: "msg"
                  Literal, token: true value: true
                     Type: bool
                     Source: "true"
              ExpressionStatement
                 Gas costs: 20412
                 Source: "members[msg.sender].isWithdraw = true"
                Assignment using operator =
                   Type: bool
                   Source: "members[msg.sender].isWithdraw = true"
                  MemberAccess to member isWithdraw
                     Type: bool
                     Source: "members[msg.sender].isWithdraw"
                    IndexAccess
                       Type: struct Pixiu_Beta.Member storage ref
                       Source: "members[msg.sender]"
                      Identifier members
                         Type: mapping(address => struct Pixiu_Beta.Member storage ref)
                         Source: "members"
                      MemberAccess to member sender
                         Type: address
                         Source: "msg.sender"
                        Identifier msg
                           Type: msg
                           Source: "msg"
                  Literal, token: true value: true
                     Type: bool
                     Source: "true"
              ExpressionStatement
                 Gas costs: 20361
                 Source: "memberArray.push(msg.sender)"
                FunctionCall
                   Type: uint256
                   Source: "memberArray.push(msg.sender)"
                  MemberAccess to member push
                     Type: function (address) returns (uint256)
                     Source: "memberArray.push"
                    Identifier memberArray
                       Type: address[] storage ref
                       Source: "memberArray"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
          ExpressionStatement
             Gas costs: 20328
             Source: "balances[msg.sender] += thisTokenWei"
            Assignment using operator +=
               Type: uint256
               Source: "balances[msg.sender] += thisTokenWei"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier thisTokenWei
                 Type: uint256
                 Source: "thisTokenWei"
          ExpressionStatement
             Gas costs: 20233
             Source: "total_tokenwei += thisTokenWei"
            Assignment using operator +=
               Type: uint256
               Source: "total_tokenwei += thisTokenWei"
              Identifier total_tokenwei
                 Type: uint256
                 Source: "total_tokenwei"
              Identifier thisTokenWei
                 Type: uint256
                 Source: "thisTokenWei"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "get_this_balance" - public - const
     Source: "function get_this_balance() constant returns(uint256){\r\n      \r\n        return this.balance;\r\n      \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n      \r\n        return this.balance;\r\n      \r\n    }"
      Return
         Gas costs: 413
         Source: "return this.balance"
        MemberAccess to member balance
           Type: uint256
           Source: "this.balance"
          Identifier this
             Type: contract Pixiu_Beta
             Source: "this"
