Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0x4a86a4a982c1fea8bd341b7d2fb20d767b71d322.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.8;"
ContractDefinition "CreditBOND"
   Source: "contract CreditBOND {\r\n    \r\n    uint public yearlyBlockCount = 2102400;\r\n    \r\n    function getBondMultiplier(uint _creditAmount, uint _locktime) constant returns (uint bondMultiplier){\r\n\r\n        if (_locktime >= block.number + yearlyBlockCount * 2) { return 0; }\r\n        \r\n        uint answer = 0;\r\n        if (_locktime > block.number){\r\n            if (_locktime < 175200 + block.number){ // 1 month\r\n                answer = 1;\r\n            }else if(_locktime < 525600 + block.number){ // 3 months\r\n                answer = 3;\r\n            }else if(_locktime < 1051200 + block.number){ // 6 months\r\n                answer = 6;\r\n            }else if (_locktime < 2102400 + block.number){ // 12 months\r\n                answer = 8;\r\n            }else{\r\n                answer = 12;\r\n            }\r\n        }\r\n        return answer;\r\n    }\r\n    \r\n    function getNewCoinsIssued(uint _lockedBalance, uint _blockDifference, uint _percentReward) constant returns(uint newCoinsIssued){\r\n        return (_percentReward*_lockedBalance*_blockDifference)/(100*yearlyBlockCount);\r\n    }\r\n}"
  VariableDeclaration "yearlyBlockCount"
     Type: uint256
     Gas costs: 287
     Source: "uint public yearlyBlockCount = 2102400"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 2102400
       Type: int_const 2102400
       Source: "2102400"
  FunctionDefinition "getBondMultiplier" - public - const
     Source: "function getBondMultiplier(uint _creditAmount, uint _locktime) constant returns (uint bondMultiplier){\r\n\r\n        if (_locktime >= block.number + yearlyBlockCount * 2) { return 0; }\r\n        \r\n        uint answer = 0;\r\n        if (_locktime > block.number){\r\n            if (_locktime < 175200 + block.number){ // 1 month\r\n                answer = 1;\r\n            }else if(_locktime < 525600 + block.number){ // 3 months\r\n                answer = 3;\r\n            }else if(_locktime < 1051200 + block.number){ // 6 months\r\n                answer = 6;\r\n            }else if (_locktime < 2102400 + block.number){ // 12 months\r\n                answer = 8;\r\n            }else{\r\n                answer = 12;\r\n            }\r\n        }\r\n        return answer;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint _creditAmount, uint _locktime)"
      VariableDeclaration "_creditAmount"
         Type: uint256
         Source: "uint _creditAmount"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_locktime"
         Type: uint256
         Source: "uint _locktime"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(uint bondMultiplier)"
      VariableDeclaration "bondMultiplier"
         Type: uint256
         Source: "uint bondMultiplier"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n\r\n        if (_locktime >= block.number + yearlyBlockCount * 2) { return 0; }\r\n        \r\n        uint answer = 0;\r\n        if (_locktime > block.number){\r\n            if (_locktime < 175200 + block.number){ // 1 month\r\n                answer = 1;\r\n            }else if(_locktime < 525600 + block.number){ // 3 months\r\n                answer = 3;\r\n            }else if(_locktime < 1051200 + block.number){ // 6 months\r\n                answer = 6;\r\n            }else if (_locktime < 2102400 + block.number){ // 12 months\r\n                answer = 8;\r\n            }else{\r\n                answer = 12;\r\n            }\r\n        }\r\n        return answer;\r\n    }"
      IfStatement
         Source: "if (_locktime >= block.number + yearlyBlockCount * 2) { return 0; }"
        BinaryOperation using operator >=
           Type: bool
           Gas costs: 225
           Source: "_locktime >= block.number + yearlyBlockCount * 2"
          Identifier _locktime
             Type: uint256
             Source: "_locktime"
          BinaryOperation using operator +
             Type: uint256
             Source: "block.number + yearlyBlockCount * 2"
            MemberAccess to member number
               Type: uint256
               Source: "block.number"
              Identifier block
                 Type: block
                 Source: "block"
            BinaryOperation using operator *
               Type: uint256
               Source: "yearlyBlockCount * 2"
              Identifier yearlyBlockCount
                 Type: uint256
                 Source: "yearlyBlockCount"
              Literal, token: [no token] value: 2
                 Type: int_const 2
                 Source: "2"
        Block
           Source: "{ return 0; }"
          Return
             Gas costs: 19
             Source: "return 0"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      VariableDeclarationStatement
         Gas costs: 11
         Source: "uint answer = 0"
        VariableDeclaration "answer"
           Type: uint256
           Source: "uint answer"
          ElementaryTypeName uint
             Source: "uint"
        Literal, token: [no token] value: 0
           Type: int_const 0
           Source: "0"
      IfStatement
         Source: "if (_locktime > block.number){\r\n            if (_locktime < 175200 + block.number){ // 1 month\r\n                answer = 1;\r\n            }else if(_locktime < 525600 + block.number){ // 3 months\r\n                answer = 3;\r\n            }else if(_locktime < 1051200 + block.number){ // 6 months\r\n                answer = 6;\r\n            }else if (_locktime < 2102400 + block.number){ // 12 months\r\n                answer = 8;\r\n            }else{\r\n                answer = 12;\r\n            }\r\n        }"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 8
           Source: "_locktime > block.number"
          Identifier _locktime
             Type: uint256
             Source: "_locktime"
          MemberAccess to member number
             Type: uint256
             Source: "block.number"
            Identifier block
               Type: block
               Source: "block"
        Block
           Source: "{\r\n            if (_locktime < 175200 + block.number){ // 1 month\r\n                answer = 1;\r\n            }else if(_locktime < 525600 + block.number){ // 3 months\r\n                answer = 3;\r\n            }else if(_locktime < 1051200 + block.number){ // 6 months\r\n                answer = 6;\r\n            }else if (_locktime < 2102400 + block.number){ // 12 months\r\n                answer = 8;\r\n            }else{\r\n                answer = 12;\r\n            }\r\n        }"
          IfStatement
             Source: "if (_locktime < 175200 + block.number){ // 1 month\r\n                answer = 1;\r\n            }else if(_locktime < 525600 + block.number){ // 3 months\r\n                answer = 3;\r\n            }else if(_locktime < 1051200 + block.number){ // 6 months\r\n                answer = 6;\r\n            }else if (_locktime < 2102400 + block.number){ // 12 months\r\n                answer = 8;\r\n            }else{\r\n                answer = 12;\r\n            }"
            BinaryOperation using operator <
               Type: bool
               Gas costs: 14
               Source: "_locktime < 175200 + block.number"
              Identifier _locktime
                 Type: uint256
                 Source: "_locktime"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "175200 + block.number"
                Literal, token: [no token] value: 175200
                   Type: int_const 175200
                   Source: "175200"
                MemberAccess to member number
                   Type: uint256
                   Source: "block.number"
                  Identifier block
                     Type: block
                     Source: "block"
            Block
               Source: "{ // 1 month\r\n                answer = 1;\r\n            }"
              ExpressionStatement
                 Gas costs: 8
                 Source: "answer = 1"
                Assignment using operator =
                   Type: uint256
                   Source: "answer = 1"
                  Identifier answer
                     Type: uint256
                     Source: "answer"
                  Literal, token: [no token] value: 1
                     Type: int_const 1
                     Source: "1"
            IfStatement
               Source: "if(_locktime < 525600 + block.number){ // 3 months\r\n                answer = 3;\r\n            }else if(_locktime < 1051200 + block.number){ // 6 months\r\n                answer = 6;\r\n            }else if (_locktime < 2102400 + block.number){ // 12 months\r\n                answer = 8;\r\n            }else{\r\n                answer = 12;\r\n            }"
              BinaryOperation using operator <
                 Type: bool
                 Gas costs: 14
                 Source: "_locktime < 525600 + block.number"
                Identifier _locktime
                   Type: uint256
                   Source: "_locktime"
                BinaryOperation using operator +
                   Type: uint256
                   Source: "525600 + block.number"
                  Literal, token: [no token] value: 525600
                     Type: int_const 525600
                     Source: "525600"
                  MemberAccess to member number
                     Type: uint256
                     Source: "block.number"
                    Identifier block
                       Type: block
                       Source: "block"
              Block
                 Source: "{ // 3 months\r\n                answer = 3;\r\n            }"
                ExpressionStatement
                   Gas costs: 8
                   Source: "answer = 3"
                  Assignment using operator =
                     Type: uint256
                     Source: "answer = 3"
                    Identifier answer
                       Type: uint256
                       Source: "answer"
                    Literal, token: [no token] value: 3
                       Type: int_const 3
                       Source: "3"
              IfStatement
                 Source: "if(_locktime < 1051200 + block.number){ // 6 months\r\n                answer = 6;\r\n            }else if (_locktime < 2102400 + block.number){ // 12 months\r\n                answer = 8;\r\n            }else{\r\n                answer = 12;\r\n            }"
                BinaryOperation using operator <
                   Type: bool
                   Gas costs: 14
                   Source: "_locktime < 1051200 + block.number"
                  Identifier _locktime
                     Type: uint256
                     Source: "_locktime"
                  BinaryOperation using operator +
                     Type: uint256
                     Source: "1051200 + block.number"
                    Literal, token: [no token] value: 1051200
                       Type: int_const 1051200
                       Source: "1051200"
                    MemberAccess to member number
                       Type: uint256
                       Source: "block.number"
                      Identifier block
                         Type: block
                         Source: "block"
                Block
                   Source: "{ // 6 months\r\n                answer = 6;\r\n            }"
                  ExpressionStatement
                     Gas costs: 8
                     Source: "answer = 6"
                    Assignment using operator =
                       Type: uint256
                       Source: "answer = 6"
                      Identifier answer
                         Type: uint256
                         Source: "answer"
                      Literal, token: [no token] value: 6
                         Type: int_const 6
                         Source: "6"
                IfStatement
                   Source: "if (_locktime < 2102400 + block.number){ // 12 months\r\n                answer = 8;\r\n            }else{\r\n                answer = 12;\r\n            }"
                  BinaryOperation using operator <
                     Type: bool
                     Gas costs: 14
                     Source: "_locktime < 2102400 + block.number"
                    Identifier _locktime
                       Type: uint256
                       Source: "_locktime"
                    BinaryOperation using operator +
                       Type: uint256
                       Source: "2102400 + block.number"
                      Literal, token: [no token] value: 2102400
                         Type: int_const 2102400
                         Source: "2102400"
                      MemberAccess to member number
                         Type: uint256
                         Source: "block.number"
                        Identifier block
                           Type: block
                           Source: "block"
                  Block
                     Source: "{ // 12 months\r\n                answer = 8;\r\n            }"
                    ExpressionStatement
                       Gas costs: 8
                       Source: "answer = 8"
                      Assignment using operator =
                         Type: uint256
                         Source: "answer = 8"
                        Identifier answer
                           Type: uint256
                           Source: "answer"
                        Literal, token: [no token] value: 8
                           Type: int_const 8
                           Source: "8"
                  Block
                     Source: "{\r\n                answer = 12;\r\n            }"
                    ExpressionStatement
                       Gas costs: 8
                       Source: "answer = 12"
                      Assignment using operator =
                         Type: uint256
                         Source: "answer = 12"
                        Identifier answer
                           Type: uint256
                           Source: "answer"
                        Literal, token: [no token] value: 12
                           Type: int_const 12
                           Source: "12"
      Return
         Gas costs: 8
         Source: "return answer"
        Identifier answer
           Type: uint256
           Source: "answer"
  FunctionDefinition "getNewCoinsIssued" - public - const
     Source: "function getNewCoinsIssued(uint _lockedBalance, uint _blockDifference, uint _percentReward) constant returns(uint newCoinsIssued){\r\n        return (_percentReward*_lockedBalance*_blockDifference)/(100*yearlyBlockCount);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint _lockedBalance, uint _blockDifference, uint _percentReward)"
      VariableDeclaration "_lockedBalance"
         Type: uint256
         Source: "uint _lockedBalance"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_blockDifference"
         Type: uint256
         Source: "uint _blockDifference"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_percentReward"
         Type: uint256
         Source: "uint _percentReward"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(uint newCoinsIssued)"
      VariableDeclaration "newCoinsIssued"
         Type: uint256
         Source: "uint newCoinsIssued"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        return (_percentReward*_lockedBalance*_blockDifference)/(100*yearlyBlockCount);\r\n    }"
      Return
         Gas costs: 263
         Source: "return (_percentReward*_lockedBalance*_blockDifference)/(100*yearlyBlockCount)"
        BinaryOperation using operator /
           Type: uint256
           Source: "(_percentReward*_lockedBalance*_blockDifference)/(100*yearlyBlockCount)"
          TupleExpression
             Type: uint256
             Source: "(_percentReward*_lockedBalance*_blockDifference)"
            BinaryOperation using operator *
               Type: uint256
               Source: "_percentReward*_lockedBalance*_blockDifference"
              BinaryOperation using operator *
                 Type: uint256
                 Source: "_percentReward*_lockedBalance"
                Identifier _percentReward
                   Type: uint256
                   Source: "_percentReward"
                Identifier _lockedBalance
                   Type: uint256
                   Source: "_lockedBalance"
              Identifier _blockDifference
                 Type: uint256
                 Source: "_blockDifference"
          TupleExpression
             Type: uint256
             Source: "(100*yearlyBlockCount)"
            BinaryOperation using operator *
               Type: uint256
               Source: "100*yearlyBlockCount"
              Literal, token: [no token] value: 100
                 Type: int_const 100
                 Source: "100"
              Identifier yearlyBlockCount
                 Type: uint256
                 Source: "yearlyBlockCount"
