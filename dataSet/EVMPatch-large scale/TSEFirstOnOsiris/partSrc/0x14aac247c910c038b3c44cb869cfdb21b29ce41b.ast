Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0x14aac247c910c038b3c44cb869cfdb21b29ce41b.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.11;"
ContractDefinition "TronToken"
   Source: "contract TronToken {\r\n\r\n    string public name = \"Tronix\";      //  token name\r\n    string public symbol = \"TRX\";           //  token symbol\r\n    uint256 public decimals = 6;            //  token digit\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    uint256 public totalSupply = 0;\r\n    bool public stopped = false;\r\n\r\n    uint256 constant valueFounder = 100000000000000000;\r\n    address owner = 0x0;\r\n\r\n    modifier isOwner {\r\n        assert(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier isRunning {\r\n        assert (!stopped);\r\n        _;\r\n    }\r\n\r\n    modifier validAddress {\r\n        assert(0x0 != msg.sender);\r\n        _;\r\n    }\r\n\r\n    function TronToken(address _addressFounder) {\r\n        owner = msg.sender;\r\n        totalSupply = valueFounder;\r\n        balanceOf[_addressFounder] = valueFounder;\r\n        Transfer(0x0, _addressFounder, valueFounder);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) isRunning validAddress returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) isRunning validAddress returns (bool success) {\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        require(allowance[_from][msg.sender] >= _value);\r\n        balanceOf[_to] += _value;\r\n        balanceOf[_from] -= _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) isRunning validAddress returns (bool success) {\r\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function stop() isOwner {\r\n        stopped = true;\r\n    }\r\n\r\n    function start() isOwner {\r\n        stopped = false;\r\n    }\r\n\r\n    function setName(string _name) isOwner {\r\n        name = _name;\r\n    }\r\n\r\n    function burn(uint256 _value) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[0x0] += _value;\r\n        Transfer(msg.sender, 0x0, _value);\r\n    }\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}"
  VariableDeclaration "name"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public name = \"Tronix\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: Tronix
       Type: literal_string "Tronix"
       Source: "\"Tronix\""
  VariableDeclaration "symbol"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public symbol = \"TRX\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: TRX
       Type: literal_string "TRX"
       Source: "\"TRX\""
  VariableDeclaration "decimals"
     Type: uint256
     Gas costs: 287
     Source: "uint256 public decimals = 6"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 6
       Type: int_const 6
       Source: "6"
  VariableDeclaration "balanceOf"
     Type: mapping(address => uint256)
     Gas costs: 431
     Source: "mapping (address => uint256) public balanceOf"
    Mapping
       Source: "mapping (address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "allowance"
     Type: mapping(address => mapping(address => uint256))
     Gas costs: 529
     Source: "mapping (address => mapping (address => uint256)) public allowance"
    Mapping
       Source: "mapping (address => mapping (address => uint256))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping (address => uint256)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint256
           Source: "uint256"
  VariableDeclaration "totalSupply"
     Type: uint256
     Gas costs: 287
     Source: "uint256 public totalSupply = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "stopped"
     Type: bool
     Gas costs: 335
     Source: "bool public stopped = false"
    ElementaryTypeName bool
       Source: "bool"
    Literal, token: false value: false
       Type: bool
       Source: "false"
  VariableDeclaration "valueFounder"
     Type: uint256
     Gas costs: 0
     Source: "uint256 constant valueFounder = 100000000000000000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 100000000000000000
       Type: int_const 100000000000000000
       Source: "100000000000000000"
  VariableDeclaration "owner"
     Type: address
     Gas costs: 0
     Source: "address owner = 0x0"
    ElementaryTypeName address
       Source: "address"
    Literal, token: [no token] value: 0x0
       Type: int_const 0
       Source: "0x0"
  ModifierDefinition "isOwner"
     Source: "modifier isOwner {\r\n        assert(owner == msg.sender);\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        assert(owner == msg.sender);\r\n        _;\r\n    }"
      ExpressionStatement
         Gas costs: 978
         Source: "assert(owner == msg.sender)"
        FunctionCall
           Type: tuple()
           Source: "assert(owner == msg.sender)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator ==
             Type: bool
             Source: "owner == msg.sender"
            Identifier owner
               Type: address
               Source: "owner"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "isRunning"
     Source: "modifier isRunning {\r\n        assert (!stopped);\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        assert (!stopped);\r\n        _;\r\n    }"
      ExpressionStatement
         Gas costs: 786
         Source: "assert (!stopped)"
        FunctionCall
           Type: tuple()
           Source: "assert (!stopped)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!stopped"
            Identifier stopped
               Type: bool
               Source: "stopped"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "validAddress"
     Source: "modifier validAddress {\r\n        assert(0x0 != msg.sender);\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        assert(0x0 != msg.sender);\r\n        _;\r\n    }"
      ExpressionStatement
         Gas costs: 111
         Source: "assert(0x0 != msg.sender)"
        FunctionCall
           Type: tuple()
           Source: "assert(0x0 != msg.sender)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator !=
             Type: bool
             Source: "0x0 != msg.sender"
            Literal, token: [no token] value: 0x0
               Type: int_const 0
               Source: "0x0"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "TronToken" - public
     Source: "function TronToken(address _addressFounder) {\r\n        owner = msg.sender;\r\n        totalSupply = valueFounder;\r\n        balanceOf[_addressFounder] = valueFounder;\r\n        Transfer(0x0, _addressFounder, valueFounder);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _addressFounder)"
      VariableDeclaration "_addressFounder"
         Type: address
         Source: "address _addressFounder"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        owner = msg.sender;\r\n        totalSupply = valueFounder;\r\n        balanceOf[_addressFounder] = valueFounder;\r\n        Transfer(0x0, _addressFounder, valueFounder);\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "owner = msg.sender"
        Assignment using operator =
           Type: address
           Source: "owner = msg.sender"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 0
         Source: "totalSupply = valueFounder"
        Assignment using operator =
           Type: uint256
           Source: "totalSupply = valueFounder"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          Identifier valueFounder
             Type: uint256
             Source: "valueFounder"
      ExpressionStatement
         Gas costs: 0
         Source: "balanceOf[_addressFounder] = valueFounder"
        Assignment using operator =
           Type: uint256
           Source: "balanceOf[_addressFounder] = valueFounder"
          IndexAccess
             Type: uint256
             Source: "balanceOf[_addressFounder]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier _addressFounder
               Type: address
               Source: "_addressFounder"
          Identifier valueFounder
             Type: uint256
             Source: "valueFounder"
      ExpressionStatement
         Gas costs: 0
         Source: "Transfer(0x0, _addressFounder, valueFounder)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(0x0, _addressFounder, valueFounder)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          Literal, token: [no token] value: 0x0
             Type: int_const 0
             Source: "0x0"
          Identifier _addressFounder
             Type: address
             Source: "_addressFounder"
          Identifier valueFounder
             Type: uint256
             Source: "valueFounder"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) isRunning validAddress returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "isRunning"
       Gas costs: 0
       Source: "isRunning"
      Identifier isRunning
         Type: modifier ()
         Source: "isRunning"
    ModifierInvocation "validAddress"
       Gas costs: 0
       Source: "validAddress"
      Identifier validAddress
         Type: modifier ()
         Source: "validAddress"
    Block
       Source: "{\r\n        require(balanceOf[msg.sender] >= _value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 333
         Source: "require(balanceOf[msg.sender] >= _value)"
        FunctionCall
           Type: tuple()
           Source: "require(balanceOf[msg.sender] >= _value)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "balanceOf[msg.sender] >= _value"
            IndexAccess
               Type: uint256
               Source: "balanceOf[msg.sender]"
              Identifier balanceOf
                 Type: mapping(address => uint256)
                 Source: "balanceOf"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 630
         Source: "require(balanceOf[_to] + _value >= balanceOf[_to])"
        FunctionCall
           Type: tuple()
           Source: "require(balanceOf[_to] + _value >= balanceOf[_to])"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "balanceOf[_to] + _value >= balanceOf[_to]"
            BinaryOperation using operator +
               Type: uint256
               Source: "balanceOf[_to] + _value"
              IndexAccess
                 Type: uint256
                 Source: "balanceOf[_to]"
                Identifier balanceOf
                   Type: mapping(address => uint256)
                   Source: "balanceOf"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
            IndexAccess
               Type: uint256
               Source: "balanceOf[_to]"
              Identifier balanceOf
                 Type: mapping(address => uint256)
                 Source: "balanceOf"
              Identifier _to
                 Type: address
                 Source: "_to"
      ExpressionStatement
         Gas costs: 20328
         Source: "balanceOf[msg.sender] -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "balanceOf[msg.sender] -= _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[msg.sender]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 20323
         Source: "balanceOf[_to] += _value"
        Assignment using operator +=
           Type: uint256
           Source: "balanceOf[_to] += _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[_to]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier _to
               Type: address
               Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 1837
         Source: "Transfer(msg.sender, _to, _value)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(msg.sender, _to, _value)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _value) isRunning validAddress returns (bool success) {\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        require(allowance[_from][msg.sender] >= _value);\r\n        balanceOf[_to] += _value;\r\n        balanceOf[_from] -= _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "isRunning"
       Gas costs: 0
       Source: "isRunning"
      Identifier isRunning
         Type: modifier ()
         Source: "isRunning"
    ModifierInvocation "validAddress"
       Gas costs: 0
       Source: "validAddress"
      Identifier validAddress
         Type: modifier ()
         Source: "validAddress"
    Block
       Source: "{\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        require(allowance[_from][msg.sender] >= _value);\r\n        balanceOf[_to] += _value;\r\n        balanceOf[_from] -= _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 334
         Source: "require(balanceOf[_from] >= _value)"
        FunctionCall
           Type: tuple()
           Source: "require(balanceOf[_from] >= _value)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "balanceOf[_from] >= _value"
            IndexAccess
               Type: uint256
               Source: "balanceOf[_from]"
              Identifier balanceOf
                 Type: mapping(address => uint256)
                 Source: "balanceOf"
              Identifier _from
                 Type: address
                 Source: "_from"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 630
         Source: "require(balanceOf[_to] + _value >= balanceOf[_to])"
        FunctionCall
           Type: tuple()
           Source: "require(balanceOf[_to] + _value >= balanceOf[_to])"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "balanceOf[_to] + _value >= balanceOf[_to]"
            BinaryOperation using operator +
               Type: uint256
               Source: "balanceOf[_to] + _value"
              IndexAccess
                 Type: uint256
                 Source: "balanceOf[_to]"
                Identifier balanceOf
                   Type: mapping(address => uint256)
                   Source: "balanceOf"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
            IndexAccess
               Type: uint256
               Source: "balanceOf[_to]"
              Identifier balanceOf
                 Type: mapping(address => uint256)
                 Source: "balanceOf"
              Identifier _to
                 Type: address
                 Source: "_to"
      ExpressionStatement
         Gas costs: 423
         Source: "require(allowance[_from][msg.sender] >= _value)"
        FunctionCall
           Type: tuple()
           Source: "require(allowance[_from][msg.sender] >= _value)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "allowance[_from][msg.sender] >= _value"
            IndexAccess
               Type: uint256
               Source: "allowance[_from][msg.sender]"
              IndexAccess
                 Type: mapping(address => uint256)
                 Source: "allowance[_from]"
                Identifier allowance
                   Type: mapping(address => mapping(address => uint256))
                   Source: "allowance"
                Identifier _from
                   Type: address
                   Source: "_from"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 20329
         Source: "balanceOf[_to] += _value"
        Assignment using operator +=
           Type: uint256
           Source: "balanceOf[_to] += _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[_to]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier _to
               Type: address
               Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 20323
         Source: "balanceOf[_from] -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "balanceOf[_from] -= _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[_from]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier _from
               Type: address
               Source: "_from"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 20412
         Source: "allowance[_from][msg.sender] -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "allowance[_from][msg.sender] -= _value"
          IndexAccess
             Type: uint256
             Source: "allowance[_from][msg.sender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowance[_from]"
              Identifier allowance
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowance"
              Identifier _from
                 Type: address
                 Source: "_from"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 1838
         Source: "Transfer(_from, _to, _value)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(_from, _to, _value)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint256 _value) isRunning validAddress returns (bool success) {\r\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "isRunning"
       Gas costs: 0
       Source: "isRunning"
      Identifier isRunning
         Type: modifier ()
         Source: "isRunning"
    ModifierInvocation "validAddress"
       Gas costs: 0
       Source: "validAddress"
      Identifier validAddress
         Type: modifier ()
         Source: "validAddress"
    Block
       Source: "{\r\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 448
         Source: "require(_value == 0 || allowance[msg.sender][_spender] == 0)"
        FunctionCall
           Type: tuple()
           Source: "require(_value == 0 || allowance[msg.sender][_spender] == 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ||
             Type: bool
             Source: "_value == 0 || allowance[msg.sender][_spender] == 0"
            BinaryOperation using operator ==
               Type: bool
               Source: "_value == 0"
              Identifier _value
                 Type: uint256
                 Source: "_value"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
            BinaryOperation using operator ==
               Type: bool
               Source: "allowance[msg.sender][_spender] == 0"
              IndexAccess
                 Type: uint256
                 Source: "allowance[msg.sender][_spender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowance[msg.sender]"
                  Identifier allowance
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowance"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
                Identifier _spender
                   Type: address
                   Source: "_spender"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      ExpressionStatement
         Gas costs: 20199
         Source: "allowance[msg.sender][_spender] = _value"
        Assignment using operator =
           Type: uint256
           Source: "allowance[msg.sender][_spender] = _value"
          IndexAccess
             Type: uint256
             Source: "allowance[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowance[msg.sender]"
              Identifier allowance
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowance"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 1837
         Source: "Approval(msg.sender, _spender, _value)"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender, _spender, _value)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "stop" - public
     Source: "function stop() isOwner {\r\n        stopped = true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "isOwner"
       Gas costs: 0
       Source: "isOwner"
      Identifier isOwner
         Type: modifier ()
         Source: "isOwner"
    Block
       Source: "{\r\n        stopped = true;\r\n    }"
      ExpressionStatement
         Gas costs: 20267
         Source: "stopped = true"
        Assignment using operator =
           Type: bool
           Source: "stopped = true"
          Identifier stopped
             Type: bool
             Source: "stopped"
          Literal, token: true value: true
             Type: bool
             Source: "true"
  FunctionDefinition "start" - public
     Source: "function start() isOwner {\r\n        stopped = false;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "isOwner"
       Gas costs: 0
       Source: "isOwner"
      Identifier isOwner
         Type: modifier ()
         Source: "isOwner"
    Block
       Source: "{\r\n        stopped = false;\r\n    }"
      ExpressionStatement
         Gas costs: 20267
         Source: "stopped = false"
        Assignment using operator =
           Type: bool
           Source: "stopped = false"
          Identifier stopped
             Type: bool
             Source: "stopped"
          Literal, token: false value: false
             Type: bool
             Source: "false"
  FunctionDefinition "setName" - public
     Source: "function setName(string _name) isOwner {\r\n        name = _name;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(string _name)"
      VariableDeclaration "_name"
         Type: string memory
         Source: "string _name"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "isOwner"
       Gas costs: 0
       Source: "isOwner"
      Identifier isOwner
         Type: modifier ()
         Source: "isOwner"
    Block
       Source: "{\r\n        name = _name;\r\n    }"
      ExpressionStatement
         Gas costs: 57
         Source: "name = _name"
        Assignment using operator =
           Type: string storage ref
           Source: "name = _name"
          Identifier name
             Type: string storage ref
             Source: "name"
          Identifier _name
             Type: string memory
             Source: "_name"
  FunctionDefinition "burn" - public
     Source: "function burn(uint256 _value) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[0x0] += _value;\r\n        Transfer(msg.sender, 0x0, _value);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _value)"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[0x0] += _value;\r\n        Transfer(msg.sender, 0x0, _value);\r\n    }"
      ExpressionStatement
         Gas costs: 333
         Source: "require(balanceOf[msg.sender] >= _value)"
        FunctionCall
           Type: tuple()
           Source: "require(balanceOf[msg.sender] >= _value)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "balanceOf[msg.sender] >= _value"
            IndexAccess
               Type: uint256
               Source: "balanceOf[msg.sender]"
              Identifier balanceOf
                 Type: mapping(address => uint256)
                 Source: "balanceOf"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 20328
         Source: "balanceOf[msg.sender] -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "balanceOf[msg.sender] -= _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[msg.sender]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 20317
         Source: "balanceOf[0x0] += _value"
        Assignment using operator +=
           Type: uint256
           Source: "balanceOf[0x0] += _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[0x0]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Literal, token: [no token] value: 0x0
               Type: int_const 0
               Source: "0x0"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 1831
         Source: "Transfer(msg.sender, 0x0, _value)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(msg.sender, 0x0, _value)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Literal, token: [no token] value: 0x0
             Type: int_const 0
             Source: "0x0"
          Identifier _value
             Type: uint256
             Source: "_value"
  EventDefinition "Transfer"
     Gas costs: 0
     Source: "event Transfer(address indexed _from, address indexed _to, uint256 _value);"
    ParameterList
       Source: "(address indexed _from, address indexed _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address indexed _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address indexed _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Approval"
     Gas costs: 0
     Source: "event Approval(address indexed _owner, address indexed _spender, uint256 _value);"
    ParameterList
       Source: "(address indexed _owner, address indexed _spender, uint256 _value)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address indexed _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address indexed _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
