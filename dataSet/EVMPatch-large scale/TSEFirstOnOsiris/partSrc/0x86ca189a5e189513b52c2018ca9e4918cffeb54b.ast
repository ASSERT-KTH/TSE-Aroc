Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0x86ca189a5e189513b52c2018ca9e4918cffeb54b.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.11;"
ContractDefinition "Token"
   Gas costs: 0
   Source: "contract Token {\r\n    function totalSupply() constant returns (uint256 supply);\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}"
  FunctionDefinition "totalSupply" - public - const
     Source: "function totalSupply() constant returns (uint256 supply);"
    ParameterList
       Source: "()"
    ParameterList
       Source: "(uint256 supply)"
      VariableDeclaration "supply"
         Type: uint256
         Source: "uint256 supply"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) constant returns (uint256 balance);"
    ParameterList
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256 balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) returns (bool success);"
    ParameterList
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _value) returns (bool success);"
    ParameterList
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint256 _value) returns (bool success);"
    ParameterList
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) constant returns (uint256 remaining);"
    ParameterList
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256 remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint256 remaining"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Transfer"
     Source: "event Transfer(address indexed _from, address indexed _to, uint256 _value);"
    ParameterList
       Source: "(address indexed _from, address indexed _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address indexed _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address indexed _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Approval"
     Source: "event Approval(address indexed _owner, address indexed _spender, uint256 _value);"
    ParameterList
       Source: "(address indexed _owner, address indexed _spender, uint256 _value)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address indexed _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address indexed _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
ContractDefinition "E4LavaRewards"
   Gas costs: 0
   Source: "contract E4LavaRewards\r\n{\r\n        function checkDividends(address _addr) constant returns(uint _amount);\r\n        function withdrawDividends() public returns (uint namount);\r\n        function transferDividends(address _to) returns (bool success);\r\n        function getAccountInfo(address _addr) constant returns(uint _tokens, uint _snapshot, uint _points);\r\n\r\n}"
  FunctionDefinition "checkDividends" - public - const
     Source: "function checkDividends(address _addr) constant returns(uint _amount);"
    ParameterList
       Source: "(address _addr)"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint _amount)"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint _amount"
        ElementaryTypeName uint
           Source: "uint"
  FunctionDefinition "withdrawDividends" - public
     Source: "function withdrawDividends() public returns (uint namount);"
    ParameterList
       Source: "()"
    ParameterList
       Source: "(uint namount)"
      VariableDeclaration "namount"
         Type: uint256
         Source: "uint namount"
        ElementaryTypeName uint
           Source: "uint"
  FunctionDefinition "transferDividends" - public
     Source: "function transferDividends(address _to) returns (bool success);"
    ParameterList
       Source: "(address _to)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "getAccountInfo" - public - const
     Source: "function getAccountInfo(address _addr) constant returns(uint _tokens, uint _snapshot, uint _points);"
    ParameterList
       Source: "(address _addr)"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint _tokens, uint _snapshot, uint _points)"
      VariableDeclaration "_tokens"
         Type: uint256
         Source: "uint _tokens"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_snapshot"
         Type: uint256
         Source: "uint _snapshot"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_points"
         Type: uint256
         Source: "uint _points"
        ElementaryTypeName uint
           Source: "uint"
ContractDefinition "E4LavaOptIn"
   Gas costs: 0
   Source: "contract E4LavaOptIn\r\n{\r\n        function optInFromClassic() public;\r\n}"
  FunctionDefinition "optInFromClassic" - public
     Source: "function optInFromClassic() public;"
    ParameterList
       Source: "()"
    ParameterList
       Source: ""
ContractDefinition "E4Lava"
   Source: "contract E4Lava is Token, E4LavaRewards, E4LavaOptIn {\r\n        event StatEvent(string msg);\r\n        event StatEventI(string msg, uint val);\r\n\r\n        enum SettingStateValue  {debug, lockedRelease}\r\n\r\n        struct tokenAccount {\r\n                bool alloced;       // flag to ascert prior allocation\r\n                uint tokens;        // num tokens currently held in this acct\r\n                uint currentPoints; // updated before token balance changes, or before a withdrawal. credit for owning tokens\r\n                uint lastSnapshot;  // snapshot of global TotalPoints, last time we updated this acct's currentPoints\r\n        }\r\n\r\n// -----------------------------\r\n//  data storage\r\n// ----------------------------------------\r\n        uint constant NumOrigTokens         = 5762;   // number of old tokens, from original token contract\r\n        uint constant NewTokensPerOrigToken = 100000; // how many new tokens are created for each from original token\r\n        uint constant NewTokenSupply        = 5762 * 100000;\r\n        uint public numToksSwitchedOver;              // count old tokens that have been converted\r\n        uint public holdoverBalance;                  // funds received, but not yet distributed\r\n        uint public TotalFeesReceived;                // total fees received from partner contract(s)\r\n\r\n        address public developers;                    // developers token holding address\r\n        address public owner;                         // deployer executor\r\n        address public oldE4;                         // addr of old e4 token contract\r\n        address public oldE4RecycleBin;               // addr to transfer old tokens\r\n\r\n        uint public decimals;\r\n        string public symbol;\r\n\r\n        mapping (address => tokenAccount) holderAccounts;          // who holds how many tokens (high two bytes contain curPayId)\r\n        mapping (uint => address) holderIndexes;                   // for iteration thru holder\r\n        mapping (address => mapping (address => uint256)) allowed; // approvals\r\n        uint public numAccounts;\r\n\r\n        uint public payoutThreshold;                  // no withdrawals less than this amount, to avoid remainders\r\n        uint public rwGas;                            // reward gas\r\n        uint public optInXferGas;                     // gas used when optInFromClassic calls xfer on old contract\r\n        uint public optInFcnMinGas;                   // gas we need for the optInFromClassic fcn, *excluding* optInXferGas\r\n        uint public vestTime = 1525219201;            // 1 year past sale vest developer tokens\r\n\r\n        SettingStateValue public settingsState;\r\n\r\n\r\n        // --------------------\r\n        // contract constructor\r\n        // --------------------\r\n        function E4Lava()\r\n        {\r\n                owner = msg.sender;\r\n                developers = msg.sender;\r\n                decimals = 2;\r\n                symbol = \"E4ROW\";\r\n        }\r\n\r\n        // -----------------------------------\r\n        // use this to reset everything, will never be called after lockRelease\r\n        // -----------------------------------\r\n        function applySettings(SettingStateValue qState, uint _threshold, uint _rw, uint _optXferGas, uint _optFcnGas )\r\n        {\r\n                if (msg.sender != owner)\r\n                        return;\r\n\r\n                // these settings are permanently tweakable for performance adjustments\r\n                payoutThreshold = _threshold;\r\n                rwGas = _rw;\r\n                optInXferGas = _optXferGas;\r\n                optInFcnMinGas = _optFcnGas;\r\n\r\n                // this first test checks if already locked\r\n                if (settingsState == SettingStateValue.lockedRelease)\r\n                        return;\r\n\r\n                settingsState = qState;\r\n\r\n                // this second test allows locking without changing other permanent settings\r\n                // WARNING, MAKE SURE YOUR'RE HAPPY WITH ALL SETTINGS\r\n                // BEFORE LOCKING\r\n\r\n                if (qState == SettingStateValue.lockedRelease) {\r\n                        StatEvent(\"Locking!\");\r\n                        return;\r\n                }\r\n\r\n                // zero out all token holders.\r\n                // leave alloced on, leave num accounts\r\n                // cant delete them anyways\r\n\r\n                for (uint i = 0; i < numAccounts; i++ ) {\r\n                        address a = holderIndexes[i];\r\n                        if (a != address(0)) {\r\n                                holderAccounts[a].tokens = 0;\r\n                                holderAccounts[a].currentPoints = 0;\r\n                                holderAccounts[a].lastSnapshot = 0;\r\n                        }\r\n                }\r\n\r\n                numToksSwitchedOver = 0;\r\n\r\n                if (this.balance > 0) {\r\n                        if (!owner.call.gas(rwGas).value(this.balance)())\r\n                                StatEvent(\"ERROR!\");\r\n                }\r\n                StatEvent(\"ok\");\r\n\r\n        }\r\n\r\n\r\n        // ---------------------------------------------------\r\n        // allocate a new account by setting alloc to true\r\n        // add holder index, bump the num accounts\r\n        // ---------------------------------------------------\r\n        function addAccount(address _addr) internal  {\r\n                holderAccounts[_addr].alloced = true;\r\n                holderAccounts[_addr].tokens = 0;\r\n                holderAccounts[_addr].currentPoints = 0;\r\n                holderAccounts[_addr].lastSnapshot = TotalFeesReceived;\r\n                holderIndexes[numAccounts++] = _addr;\r\n        }\r\n\r\n\r\n// --------------------------------------\r\n// BEGIN ERC-20 from StandardToken\r\n// --------------------------------------\r\n\r\n        function totalSupply() constant returns (uint256 supply)\r\n        {\r\n                supply = NewTokenSupply;\r\n        }\r\n\r\n        // ----------------------------\r\n        // sender transfers tokens to a new acct\r\n        // do not use this fcn for a token-split transfer from the old token contract!\r\n        // ----------------------------\r\n        function transfer(address _to, uint256 _value) returns (bool success)\r\n        {\r\n                if ((msg.sender == developers)\r\n                        &&  (now < vestTime)) {\r\n                        //statEvent(\"Tokens not yet vested.\");\r\n                        return false;\r\n                }\r\n\r\n                //Default assumes totalSupply can't be over max (2^256 - 1).\r\n                //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n                //Replace the if with this one instead.\r\n                //if (holderAccounts[msg.sender].tokens >= _value && balances[_to] + _value > holderAccounts[_to]) {\r\n                if (holderAccounts[msg.sender].tokens >= _value && _value > 0) {\r\n                    //first credit sender with points accrued so far.. must do this before number of held tokens changes\r\n                    calcCurPointsForAcct(msg.sender);\r\n                    holderAccounts[msg.sender].tokens -= _value;\r\n\r\n                    if (!holderAccounts[_to].alloced) {\r\n                        addAccount(_to);\r\n                    }\r\n                    //credit destination acct with points accrued so far.. must do this before number of held tokens changes\r\n                    calcCurPointsForAcct(_to);\r\n                    holderAccounts[_to].tokens += _value;\r\n\r\n                    Transfer(msg.sender, _to, _value);\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n        }\r\n\r\n\r\n        function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n                if ((_from == developers)\r\n                        &&  (now < vestTime)) {\r\n                        //statEvent(\"Tokens not yet vested.\");\r\n                        return false;\r\n                }\r\n\r\n                //same as above. Replace this line with the following if you want to protect against wrapping uints.\r\n                //if (holderAccounts[_from].tokens >= _value && allowed[_from][msg.sender] >= _value && holderAccounts[_to].tokens + _value > holderAccounts[_to].tokens) {\r\n                if (holderAccounts[_from].tokens >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n\r\n                    calcCurPointsForAcct(_from);\r\n                    holderAccounts[_from].tokens -= _value;\r\n\r\n                    if (!holderAccounts[_to].alloced) {\r\n                        addAccount(_to);\r\n                    }\r\n                    //credit destination acct with points accrued so far.. must do this before number of held tokens changes\r\n                    calcCurPointsForAcct(_to);\r\n                    holderAccounts[_to].tokens += _value;\r\n\r\n                    allowed[_from][msg.sender] -= _value;\r\n                    Transfer(_from, _to, _value);\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n        }\r\n\r\n\r\n        function balanceOf(address _owner) constant returns (uint256 balance) {\r\n                balance = holderAccounts[_owner].tokens;\r\n        }\r\n\r\n        function approve(address _spender, uint256 _value) returns (bool success) {\r\n                allowed[msg.sender][_spender] = _value;\r\n                Approval(msg.sender, _spender, _value);\r\n                return true;\r\n        }\r\n\r\n        function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n                return allowed[_owner][_spender];\r\n        }\r\n// ----------------------------------\r\n// END ERC20\r\n// ----------------------------------\r\n\r\n        // ----------------------------\r\n        // calc current points for a token holder; that is, points that are due to this token holder for all dividends\r\n        // received by the contract during the current \"period\". the period began the last time this fcn was called, at which\r\n        // time we updated the account's snapshot of the running point count, TotalFeesReceived. during the period the account's\r\n        // number of tokens must not have changed. so always call this fcn before changing the number of tokens.\r\n        // ----------------------------\r\n        function calcCurPointsForAcct(address _acct) internal {\r\n              holderAccounts[_acct].currentPoints += (TotalFeesReceived - holderAccounts[_acct].lastSnapshot) * holderAccounts[_acct].tokens;\r\n              holderAccounts[_acct].lastSnapshot = TotalFeesReceived;\r\n        }\r\n\r\n\r\n        // ---------------------------\r\n        // accept payment from a partner contract\r\n        // funds sent here are added to TotalFeesReceived\r\n        // WARNING! DO NOT CALL THIS FUNCTION LEST YOU LOSE YOUR MONEY\r\n        // ---------------------------\r\n        function () payable {\r\n                holdoverBalance += msg.value;\r\n                TotalFeesReceived += msg.value;\r\n                StatEventI(\"Payment\", msg.value);\r\n        }\r\n\r\n        // ---------------------------\r\n        // one never knows if this will come in handy.\r\n        // ---------------------------\r\n        function blackHole() payable {\r\n                StatEventI(\"adjusted\", msg.value);\r\n        }\r\n\r\n        // ----------------------------\r\n        // sender withdraw entire rewards/dividends\r\n        // ----------------------------\r\n        function withdrawDividends() public returns (uint _amount)\r\n        {\r\n                calcCurPointsForAcct(msg.sender);\r\n\r\n                _amount = holderAccounts[msg.sender].currentPoints / NewTokenSupply;\r\n                if (_amount <= payoutThreshold) {\r\n                        StatEventI(\"low Balance\", _amount);\r\n                        return;\r\n                } else {\r\n                        if ((msg.sender == developers)\r\n                                &&  (now < vestTime)) {\r\n                                StatEvent(\"Tokens not yet vested.\");\r\n                                _amount = 0;\r\n                                return;\r\n                        }\r\n\r\n                        uint _pointsUsed = _amount * NewTokenSupply;\r\n                        holderAccounts[msg.sender].currentPoints -= _pointsUsed;\r\n                        holdoverBalance -= _amount;\r\n                        if (!msg.sender.call.gas(rwGas).value(_amount)())\r\n                                throw;\r\n                }\r\n        }\r\n\r\n        // ----------------------------\r\n        // allow sender to transfer dividends\r\n        // ----------------------------\r\n        function transferDividends(address _to) returns (bool success)\r\n        {\r\n                if ((msg.sender == developers)\r\n                        &&  (now < vestTime)) {\r\n                        //statEvent(\"Tokens not yet vested.\");\r\n                        return false;\r\n                }\r\n                calcCurPointsForAcct(msg.sender);\r\n                if (holderAccounts[msg.sender].currentPoints == 0) {\r\n                        StatEvent(\"Zero balance\");\r\n                        return false;\r\n                }\r\n                if (!holderAccounts[_to].alloced) {\r\n                        addAccount(_to);\r\n                }\r\n                calcCurPointsForAcct(_to);\r\n                holderAccounts[_to].currentPoints += holderAccounts[msg.sender].currentPoints;\r\n                holderAccounts[msg.sender].currentPoints = 0;\r\n                StatEvent(\"Trasnfered Dividends\");\r\n                return true;\r\n        }\r\n\r\n\r\n\r\n        // ----------------------------\r\n        // set gas for operations\r\n        // ----------------------------\r\n        function setOpGas(uint _rw, uint _optXferGas, uint _optFcnGas)\r\n        {\r\n                if (msg.sender != owner && msg.sender != developers) {\r\n                        //StatEvent(\"only owner calls\");\r\n                        return;\r\n                } else {\r\n                        rwGas = _rw;\r\n                        optInXferGas = _optXferGas;\r\n                        optInFcnMinGas = _optFcnGas;\r\n                }\r\n        }\r\n\r\n\r\n        // ----------------------------\r\n        // check rewards.  pass in address of token holder\r\n        // ----------------------------\r\n        function checkDividends(address _addr) constant returns(uint _amount)\r\n        {\r\n                if (holderAccounts[_addr].alloced) {\r\n                   //don't call calcCurPointsForAcct here, cuz this is a constant fcn\r\n                   uint _currentPoints = holderAccounts[_addr].currentPoints +\r\n                        ((TotalFeesReceived - holderAccounts[_addr].lastSnapshot) * holderAccounts[_addr].tokens);\r\n                   _amount = _currentPoints / NewTokenSupply;\r\n\r\n                // low balance? let him see it -Etansky\r\n                  // if (_amount <= payoutThreshold) {\r\n                  //    _amount = 0;\r\n                  // }\r\n\r\n                }\r\n        }\r\n\r\n\r\n\r\n        // ----------------------------\r\n        // swap executor\r\n        // ----------------------------\r\n        function changeOwner(address _addr)\r\n        {\r\n                if (msg.sender != owner\r\n                        || settingsState == SettingStateValue.lockedRelease)\r\n                         throw;\r\n                owner = _addr;\r\n        }\r\n\r\n        // ----------------------------\r\n        // set developers account\r\n        // ----------------------------\r\n        function setDeveloper(address _addr)\r\n        {\r\n                if (msg.sender != owner\r\n                        || settingsState == SettingStateValue.lockedRelease)\r\n                         throw;\r\n                developers = _addr;\r\n        }\r\n\r\n        // ----------------------------\r\n        // set oldE4 Addresses\r\n        // ----------------------------\r\n        function setOldE4(address _oldE4, address _oldE4Recyle)\r\n        {\r\n                if (msg.sender != owner\r\n                        || settingsState == SettingStateValue.lockedRelease)\r\n                         throw;\r\n                oldE4 = _oldE4;\r\n                oldE4RecycleBin = _oldE4Recyle;\r\n        }\r\n\r\n        // ----------------------------\r\n        // get account info\r\n        // ----------------------------\r\n        function getAccountInfo(address _addr) constant returns(uint _tokens, uint _snapshot, uint _points)\r\n        {\r\n                _tokens = holderAccounts[_addr].tokens;\r\n                _snapshot = holderAccounts[_addr].lastSnapshot;\r\n                _points = holderAccounts[_addr].currentPoints;\r\n        }\r\n\r\n\r\n        // ----------------------------\r\n        // DEBUG ONLY - end this contract, suicide to developers\r\n        // ----------------------------\r\n        function haraKiri()\r\n        {\r\n                if (settingsState != SettingStateValue.debug)\r\n                        throw;\r\n                if (msg.sender != owner)\r\n                         throw;\r\n                suicide(developers);\r\n        }\r\n\r\n\r\n        // ----------------------------\r\n        // OPT IN FROM CLASSIC.\r\n        // All old token holders can opt into this new contract by calling this function.\r\n        // This \"transferFrom\"s tokens from the old addresses to the new recycleBin address\r\n        // which is a new address set up on the old contract.  Afterwhich new tokens\r\n        // are credited to the old holder.  Also the lastSnapShot is set to 0 then\r\n        // calcCredited points are called setting up the new signatoree all of his\r\n        // accrued dividends.\r\n        // ----------------------------\r\n        function optInFromClassic() public\r\n        {\r\n                if (oldE4 == address(0)) {\r\n                        StatEvent(\"config err\");\r\n                        return;\r\n                }\r\n                // 1. check balance of msg.sender in old contract.\r\n                address nrequester = msg.sender;\r\n\r\n                // 2. make sure account not already allocd (in fact, it's ok if it's allocd, so long\r\n                // as it is empty now. the reason for this check is cuz we are going to credit him with\r\n                // dividends, according to his token count, from the begin of time.\r\n                if (holderAccounts[nrequester].tokens != 0) {\r\n                        StatEvent(\"Account has already has tokens!\");\r\n                        return;\r\n                }\r\n\r\n                // 3. check his tok balance\r\n                Token iclassic = Token(oldE4);\r\n                uint _toks = iclassic.balanceOf(nrequester);\r\n                if (_toks == 0) {\r\n                        StatEvent(\"Nothing to do\");\r\n                        return;\r\n                }\r\n\r\n                // must be 100 percent of holdings\r\n                if (iclassic.allowance(nrequester, address(this)) < _toks) {\r\n                        StatEvent(\"Please approve this contract to transfer\");\r\n                        return;\r\n                }\r\n\r\n                // 4. before we do the transfer, make sure that we have at least enough gas for the\r\n                // transfer plus the remainder of this fcn.\r\n                if (msg.gas < optInXferGas + optInFcnMinGas)\r\n                        throw;\r\n\r\n                // 5. transfer his old toks to recyle bin\r\n                iclassic.transferFrom.gas(optInXferGas)(nrequester, oldE4RecycleBin, _toks);\r\n\r\n                // todo, error check?\r\n                if (iclassic.balanceOf(nrequester) == 0) {\r\n                        // success, add the account, set the tokens, set snapshot to zero\r\n                        if (!holderAccounts[nrequester].alloced)\r\n                                addAccount(nrequester);\r\n                        holderAccounts[nrequester].tokens = _toks * NewTokensPerOrigToken;\r\n                        holderAccounts[nrequester].lastSnapshot = 0;\r\n                        calcCurPointsForAcct(nrequester);\r\n                        numToksSwitchedOver += _toks;\r\n                        // no need to decrement points from a \"holding account\"\r\n                        // b/c there is no need to keep it.\r\n                        StatEvent(\"Success Switched Over\");\r\n                } else\r\n                        StatEvent(\"Transfer Error! please contact Dev team!\");\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Token"
    UserDefinedTypeName "Token"
       Source: "Token"
  InheritanceSpecifier
     Gas costs: 0
     Source: "E4LavaRewards"
    UserDefinedTypeName "E4LavaRewards"
       Source: "E4LavaRewards"
  InheritanceSpecifier
     Gas costs: 0
     Source: "E4LavaOptIn"
    UserDefinedTypeName "E4LavaOptIn"
       Source: "E4LavaOptIn"
  EventDefinition "StatEvent"
     Gas costs: 0
     Source: "event StatEvent(string msg);"
    ParameterList
       Source: "(string msg)"
      VariableDeclaration "msg"
         Type: string memory
         Source: "string msg"
        ElementaryTypeName string
           Source: "string"
  EventDefinition "StatEventI"
     Gas costs: 0
     Source: "event StatEventI(string msg, uint val);"
    ParameterList
       Source: "(string msg, uint val)"
      VariableDeclaration "msg"
         Type: string memory
         Source: "string msg"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "val"
         Type: uint256
         Source: "uint val"
        ElementaryTypeName uint
           Source: "uint"
  EnumDefinition "SettingStateValue"
    EnumValue "debug"
    EnumValue "lockedRelease"
  StructDefinition "tokenAccount"
     Gas costs: 0
     Source: "struct tokenAccount {\r\n                bool alloced;       // flag to ascert prior allocation\r\n                uint tokens;        // num tokens currently held in this acct\r\n                uint currentPoints; // updated before token balance changes, or before a withdrawal. credit for owning tokens\r\n                uint lastSnapshot;  // snapshot of global TotalPoints, last time we updated this acct's currentPoints\r\n        }"
    VariableDeclaration "alloced"
       Type: bool
       Source: "bool alloced"
      ElementaryTypeName bool
         Source: "bool"
    VariableDeclaration "tokens"
       Type: uint256
       Source: "uint tokens"
      ElementaryTypeName uint
         Source: "uint"
    VariableDeclaration "currentPoints"
       Type: uint256
       Source: "uint currentPoints"
      ElementaryTypeName uint
         Source: "uint"
    VariableDeclaration "lastSnapshot"
       Type: uint256
       Source: "uint lastSnapshot"
      ElementaryTypeName uint
         Source: "uint"
  VariableDeclaration "NumOrigTokens"
     Type: uint256
     Gas costs: 0
     Source: "uint constant NumOrigTokens         = 5762"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 5762
       Type: int_const 5762
       Source: "5762"
  VariableDeclaration "NewTokensPerOrigToken"
     Type: uint256
     Gas costs: 3
     Source: "uint constant NewTokensPerOrigToken = 100000"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 100000
       Type: int_const 100000
       Source: "100000"
  VariableDeclaration "NewTokenSupply"
     Type: uint256
     Gas costs: 12
     Source: "uint constant NewTokenSupply        = 5762 * 100000"
    ElementaryTypeName uint
       Source: "uint"
    BinaryOperation using operator *
       Type: int_const 576200000
       Source: "5762 * 100000"
      Literal, token: [no token] value: 5762
         Type: int_const 5762
         Source: "5762"
      Literal, token: [no token] value: 100000
         Type: int_const 100000
         Source: "100000"
  VariableDeclaration "numToksSwitchedOver"
     Type: uint256
     Gas costs: [???]
     Source: "uint public numToksSwitchedOver"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "holdoverBalance"
     Type: uint256
     Gas costs: [???]
     Source: "uint public holdoverBalance"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "TotalFeesReceived"
     Type: uint256
     Gas costs: [???]
     Source: "uint public TotalFeesReceived"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "developers"
     Type: address
     Gas costs: [???]
     Source: "address public developers"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "owner"
     Type: address
     Gas costs: [???]
     Source: "address public owner"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "oldE4"
     Type: address
     Gas costs: [???]
     Source: "address public oldE4"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "oldE4RecycleBin"
     Type: address
     Gas costs: [???]
     Source: "address public oldE4RecycleBin"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "decimals"
     Type: uint256
     Gas costs: [???]
     Source: "uint public decimals"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "symbol"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public symbol"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "holderAccounts"
     Type: mapping(address => struct E4Lava.tokenAccount storage ref)
     Gas costs: 0
     Source: "mapping (address => tokenAccount) holderAccounts"
    Mapping
       Source: "mapping (address => tokenAccount)"
      ElementaryTypeName address
         Source: "address"
      UserDefinedTypeName "tokenAccount"
         Source: "tokenAccount"
  VariableDeclaration "holderIndexes"
     Type: mapping(uint256 => address)
     Gas costs: 0
     Source: "mapping (uint => address) holderIndexes"
    Mapping
       Source: "mapping (uint => address)"
      ElementaryTypeName uint
         Source: "uint"
      ElementaryTypeName address
         Source: "address"
  VariableDeclaration "allowed"
     Type: mapping(address => mapping(address => uint256))
     Gas costs: 0
     Source: "mapping (address => mapping (address => uint256)) allowed"
    Mapping
       Source: "mapping (address => mapping (address => uint256))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping (address => uint256)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint256
           Source: "uint256"
  VariableDeclaration "numAccounts"
     Type: uint256
     Gas costs: [???]
     Source: "uint public numAccounts"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "payoutThreshold"
     Type: uint256
     Gas costs: [???]
     Source: "uint public payoutThreshold"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "rwGas"
     Type: uint256
     Gas costs: [???]
     Source: "uint public rwGas"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "optInXferGas"
     Type: uint256
     Gas costs: [???]
     Source: "uint public optInXferGas"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "optInFcnMinGas"
     Type: uint256
     Gas costs: [???]
     Source: "uint public optInFcnMinGas"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "vestTime"
     Type: uint256
     Gas costs: [???]
     Source: "uint public vestTime = 1525219201"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 1525219201
       Type: int_const 1525219201
       Source: "1525219201"
  VariableDeclaration "settingsState"
     Type: enum E4Lava.SettingStateValue
     Gas costs: [???]
     Source: "SettingStateValue public settingsState"
    UserDefinedTypeName "SettingStateValue"
       Source: "SettingStateValue"
  FunctionDefinition "E4Lava" - public
     Source: "function E4Lava()\r\n        {\r\n                owner = msg.sender;\r\n                developers = msg.sender;\r\n                decimals = 2;\r\n                symbol = \"E4ROW\";\r\n        }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n                owner = msg.sender;\r\n                developers = msg.sender;\r\n                decimals = 2;\r\n                symbol = \"E4ROW\";\r\n        }"
      ExpressionStatement
         Gas costs: 0
         Source: "owner = msg.sender"
        Assignment using operator =
           Type: address
           Source: "owner = msg.sender"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 0
         Source: "developers = msg.sender"
        Assignment using operator =
           Type: address
           Source: "developers = msg.sender"
          Identifier developers
             Type: address
             Source: "developers"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 0
         Source: "decimals = 2"
        Assignment using operator =
           Type: uint256
           Source: "decimals = 2"
          Identifier decimals
             Type: uint256
             Source: "decimals"
          Literal, token: [no token] value: 2
             Type: int_const 2
             Source: "2"
      ExpressionStatement
         Gas costs: 0
         Source: "symbol = \"E4ROW\""
        Assignment using operator =
           Type: string storage ref
           Source: "symbol = \"E4ROW\""
          Identifier symbol
             Type: string storage ref
             Source: "symbol"
          Literal, token: [no token] value: E4ROW
             Type: literal_string "E4ROW"
             Source: "\"E4ROW\""
  FunctionDefinition "applySettings" - public
     Source: "function applySettings(SettingStateValue qState, uint _threshold, uint _rw, uint _optXferGas, uint _optFcnGas )\r\n        {\r\n                if (msg.sender != owner)\r\n                        return;\r\n\r\n                // these settings are permanently tweakable for performance adjustments\r\n                payoutThreshold = _threshold;\r\n                rwGas = _rw;\r\n                optInXferGas = _optXferGas;\r\n                optInFcnMinGas = _optFcnGas;\r\n\r\n                // this first test checks if already locked\r\n                if (settingsState == SettingStateValue.lockedRelease)\r\n                        return;\r\n\r\n                settingsState = qState;\r\n\r\n                // this second test allows locking without changing other permanent settings\r\n                // WARNING, MAKE SURE YOUR'RE HAPPY WITH ALL SETTINGS\r\n                // BEFORE LOCKING\r\n\r\n                if (qState == SettingStateValue.lockedRelease) {\r\n                        StatEvent(\"Locking!\");\r\n                        return;\r\n                }\r\n\r\n                // zero out all token holders.\r\n                // leave alloced on, leave num accounts\r\n                // cant delete them anyways\r\n\r\n                for (uint i = 0; i < numAccounts; i++ ) {\r\n                        address a = holderIndexes[i];\r\n                        if (a != address(0)) {\r\n                                holderAccounts[a].tokens = 0;\r\n                                holderAccounts[a].currentPoints = 0;\r\n                                holderAccounts[a].lastSnapshot = 0;\r\n                        }\r\n                }\r\n\r\n                numToksSwitchedOver = 0;\r\n\r\n                if (this.balance > 0) {\r\n                        if (!owner.call.gas(rwGas).value(this.balance)())\r\n                                StatEvent(\"ERROR!\");\r\n                }\r\n                StatEvent(\"ok\");\r\n\r\n        }"
    ParameterList
       Gas costs: 0
       Source: "(SettingStateValue qState, uint _threshold, uint _rw, uint _optXferGas, uint _optFcnGas )"
      VariableDeclaration "qState"
         Type: enum E4Lava.SettingStateValue
         Source: "SettingStateValue qState"
        UserDefinedTypeName "SettingStateValue"
           Source: "SettingStateValue"
      VariableDeclaration "_threshold"
         Type: uint256
         Source: "uint _threshold"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_rw"
         Type: uint256
         Source: "uint _rw"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_optXferGas"
         Type: uint256
         Source: "uint _optXferGas"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_optFcnGas"
         Type: uint256
         Source: "uint _optFcnGas"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n                if (msg.sender != owner)\r\n                        return;\r\n\r\n                // these settings are permanently tweakable for performance adjustments\r\n                payoutThreshold = _threshold;\r\n                rwGas = _rw;\r\n                optInXferGas = _optXferGas;\r\n                optInFcnMinGas = _optFcnGas;\r\n\r\n                // this first test checks if already locked\r\n                if (settingsState == SettingStateValue.lockedRelease)\r\n                        return;\r\n\r\n                settingsState = qState;\r\n\r\n                // this second test allows locking without changing other permanent settings\r\n                // WARNING, MAKE SURE YOUR'RE HAPPY WITH ALL SETTINGS\r\n                // BEFORE LOCKING\r\n\r\n                if (qState == SettingStateValue.lockedRelease) {\r\n                        StatEvent(\"Locking!\");\r\n                        return;\r\n                }\r\n\r\n                // zero out all token holders.\r\n                // leave alloced on, leave num accounts\r\n                // cant delete them anyways\r\n\r\n                for (uint i = 0; i < numAccounts; i++ ) {\r\n                        address a = holderIndexes[i];\r\n                        if (a != address(0)) {\r\n                                holderAccounts[a].tokens = 0;\r\n                                holderAccounts[a].currentPoints = 0;\r\n                                holderAccounts[a].lastSnapshot = 0;\r\n                        }\r\n                }\r\n\r\n                numToksSwitchedOver = 0;\r\n\r\n                if (this.balance > 0) {\r\n                        if (!owner.call.gas(rwGas).value(this.balance)())\r\n                                StatEvent(\"ERROR!\");\r\n                }\r\n                StatEvent(\"ok\");\r\n\r\n        }"
      IfStatement
         Source: "if (msg.sender != owner)\r\n                        return;"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 259
           Source: "msg.sender != owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier owner
             Type: address
             Source: "owner"
        Return
           Gas costs: 11
           Source: "return;"
      ExpressionStatement
         Gas costs: 20014
         Source: "payoutThreshold = _threshold"
        Assignment using operator =
           Type: uint256
           Source: "payoutThreshold = _threshold"
          Identifier payoutThreshold
             Type: uint256
             Source: "payoutThreshold"
          Identifier _threshold
             Type: uint256
             Source: "_threshold"
      ExpressionStatement
         Gas costs: 20014
         Source: "rwGas = _rw"
        Assignment using operator =
           Type: uint256
           Source: "rwGas = _rw"
          Identifier rwGas
             Type: uint256
             Source: "rwGas"
          Identifier _rw
             Type: uint256
             Source: "_rw"
      ExpressionStatement
         Gas costs: 20014
         Source: "optInXferGas = _optXferGas"
        Assignment using operator =
           Type: uint256
           Source: "optInXferGas = _optXferGas"
          Identifier optInXferGas
             Type: uint256
             Source: "optInXferGas"
          Identifier _optXferGas
             Type: uint256
             Source: "_optXferGas"
      ExpressionStatement
         Gas costs: 20014
         Source: "optInFcnMinGas = _optFcnGas"
        Assignment using operator =
           Type: uint256
           Source: "optInFcnMinGas = _optFcnGas"
          Identifier optInFcnMinGas
             Type: uint256
             Source: "optInFcnMinGas"
          Identifier _optFcnGas
             Type: uint256
             Source: "_optFcnGas"
      IfStatement
         Source: "if (settingsState == SettingStateValue.lockedRelease)\r\n                        return;"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 297
           Source: "settingsState == SettingStateValue.lockedRelease"
          Identifier settingsState
             Type: enum E4Lava.SettingStateValue
             Source: "settingsState"
          MemberAccess to member lockedRelease
             Type: enum E4Lava.SettingStateValue
             Source: "SettingStateValue.lockedRelease"
            Identifier SettingStateValue
               Type: type(enum E4Lava.SettingStateValue)
               Source: "SettingStateValue"
        Return
           Gas costs: 11
           Source: "return;"
      ExpressionStatement
         Gas costs: 20287
         Source: "settingsState = qState"
        Assignment using operator =
           Type: enum E4Lava.SettingStateValue
           Source: "settingsState = qState"
          Identifier settingsState
             Type: enum E4Lava.SettingStateValue
             Source: "settingsState"
          Identifier qState
             Type: enum E4Lava.SettingStateValue
             Source: "qState"
      IfStatement
         Source: "if (qState == SettingStateValue.lockedRelease) {\r\n                        StatEvent(\"Locking!\");\r\n                        return;\r\n                }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 61
           Source: "qState == SettingStateValue.lockedRelease"
          Identifier qState
             Type: enum E4Lava.SettingStateValue
             Source: "qState"
          MemberAccess to member lockedRelease
             Type: enum E4Lava.SettingStateValue
             Source: "SettingStateValue.lockedRelease"
            Identifier SettingStateValue
               Type: type(enum E4Lava.SettingStateValue)
               Source: "SettingStateValue"
        Block
           Source: "{\r\n                        StatEvent(\"Locking!\");\r\n                        return;\r\n                }"
          ExpressionStatement
             Gas costs: [???]
             Source: "StatEvent(\"Locking!\")"
            FunctionCall
               Type: tuple()
               Source: "StatEvent(\"Locking!\")"
              Identifier StatEvent
                 Type: function (string memory)
                 Source: "StatEvent"
              Literal, token: [no token] value: Locking!
                 Type: literal_string "Locking!"
                 Source: "\"Locking!\""
          Return
             Gas costs: 11
             Source: "return;"
      ForStatement
         Source: "for (uint i = 0; i < numAccounts; i++ ) {\r\n                        address a = holderIndexes[i];\r\n                        if (a != address(0)) {\r\n                                holderAccounts[a].tokens = 0;\r\n                                holderAccounts[a].currentPoints = 0;\r\n                                holderAccounts[a].lastSnapshot = 0;\r\n                        }\r\n                }"
        VariableDeclarationStatement
           Gas costs: 11
           Source: "uint i = 0"
          VariableDeclaration "i"
             Type: uint256
             Source: "uint i"
            ElementaryTypeName uint
               Source: "uint"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 209
           Source: "i < numAccounts"
          Identifier i
             Type: uint256
             Source: "i"
          Identifier numAccounts
             Type: uint256
             Source: "numAccounts"
        ExpressionStatement
           Gas costs: 19
           Source: "i++"
          UnaryOperation (postfix) ++
             Type: uint256
             Source: "i++"
            Identifier i
               Type: uint256
               Source: "i"
        Block
           Source: "{\r\n                        address a = holderIndexes[i];\r\n                        if (a != address(0)) {\r\n                                holderAccounts[a].tokens = 0;\r\n                                holderAccounts[a].currentPoints = 0;\r\n                                holderAccounts[a].lastSnapshot = 0;\r\n                        }\r\n                }"
          VariableDeclarationStatement
             Gas costs: 331
             Source: "address a = holderIndexes[i]"
            VariableDeclaration "a"
               Type: address
               Source: "address a"
              ElementaryTypeName address
                 Source: "address"
            IndexAccess
               Type: address
               Source: "holderIndexes[i]"
              Identifier holderIndexes
                 Type: mapping(uint256 => address)
                 Source: "holderIndexes"
              Identifier i
                 Type: uint256
                 Source: "i"
          IfStatement
             Source: "if (a != address(0)) {\r\n                                holderAccounts[a].tokens = 0;\r\n                                holderAccounts[a].currentPoints = 0;\r\n                                holderAccounts[a].lastSnapshot = 0;\r\n                        }"
            BinaryOperation using operator !=
               Type: bool
               Gas costs: 24
               Source: "a != address(0)"
              Identifier a
                 Type: address
                 Source: "a"
              FunctionCall
                 Type: address
                 Source: "address(0)"
                ElementaryTypeNameExpression address
                   Type: type(address)
                   Source: "address"
                Literal, token: [no token] value: 0
                   Type: int_const 0
                   Source: "0"
            Block
               Source: "{\r\n                                holderAccounts[a].tokens = 0;\r\n                                holderAccounts[a].currentPoints = 0;\r\n                                holderAccounts[a].lastSnapshot = 0;\r\n                        }"
              ExpressionStatement
                 Gas costs: 5116
                 Source: "holderAccounts[a].tokens = 0"
                Assignment using operator =
                   Type: uint256
                   Source: "holderAccounts[a].tokens = 0"
                  MemberAccess to member tokens
                     Type: uint256
                     Source: "holderAccounts[a].tokens"
                    IndexAccess
                       Type: struct E4Lava.tokenAccount storage ref
                       Source: "holderAccounts[a]"
                      Identifier holderAccounts
                         Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                         Source: "holderAccounts"
                      Identifier a
                         Type: address
                         Source: "a"
                  Literal, token: [no token] value: 0
                     Type: int_const 0
                     Source: "0"
              ExpressionStatement
                 Gas costs: 5110
                 Source: "holderAccounts[a].currentPoints = 0"
                Assignment using operator =
                   Type: uint256
                   Source: "holderAccounts[a].currentPoints = 0"
                  MemberAccess to member currentPoints
                     Type: uint256
                     Source: "holderAccounts[a].currentPoints"
                    IndexAccess
                       Type: struct E4Lava.tokenAccount storage ref
                       Source: "holderAccounts[a]"
                      Identifier holderAccounts
                         Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                         Source: "holderAccounts"
                      Identifier a
                         Type: address
                         Source: "a"
                  Literal, token: [no token] value: 0
                     Type: int_const 0
                     Source: "0"
              ExpressionStatement
                 Gas costs: 5110
                 Source: "holderAccounts[a].lastSnapshot = 0"
                Assignment using operator =
                   Type: uint256
                   Source: "holderAccounts[a].lastSnapshot = 0"
                  MemberAccess to member lastSnapshot
                     Type: uint256
                     Source: "holderAccounts[a].lastSnapshot"
                    IndexAccess
                       Type: struct E4Lava.tokenAccount storage ref
                       Source: "holderAccounts[a]"
                      Identifier holderAccounts
                         Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                         Source: "holderAccounts"
                      Identifier a
                         Type: address
                         Source: "a"
                  Literal, token: [no token] value: 0
                     Type: int_const 0
                     Source: "0"
      ExpressionStatement
         Gas costs: 5014
         Source: "numToksSwitchedOver = 0"
        Assignment using operator =
           Type: uint256
           Source: "numToksSwitchedOver = 0"
          Identifier numToksSwitchedOver
             Type: uint256
             Source: "numToksSwitchedOver"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      IfStatement
         Source: "if (this.balance > 0) {\r\n                        if (!owner.call.gas(rwGas).value(this.balance)())\r\n                                StatEvent(\"ERROR!\");\r\n                }"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 414
           Source: "this.balance > 0"
          MemberAccess to member balance
             Type: uint256
             Source: "this.balance"
            Identifier this
               Type: contract E4Lava
               Source: "this"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n                        if (!owner.call.gas(rwGas).value(this.balance)())\r\n                                StatEvent(\"ERROR!\");\r\n                }"
          IfStatement
             Source: "if (!owner.call.gas(rwGas).value(this.balance)())\r\n                                StatEvent(\"ERROR!\")"
            UnaryOperation (prefix) !
               Type: bool
               Gas costs: [???]
               Source: "!owner.call.gas(rwGas).value(this.balance)()"
              FunctionCall
                 Type: bool
                 Source: "owner.call.gas(rwGas).value(this.balance)()"
                FunctionCall
                   Type: function () payable returns (bool)
                   Source: "owner.call.gas(rwGas).value(this.balance)"
                  MemberAccess to member value
                     Type: function (uint256) returns (function () payable returns (bool))
                     Source: "owner.call.gas(rwGas).value"
                    FunctionCall
                       Type: function () payable returns (bool)
                       Source: "owner.call.gas(rwGas)"
                      MemberAccess to member gas
                         Type: function (uint256) returns (function () payable returns (bool))
                         Source: "owner.call.gas"
                        MemberAccess to member call
                           Type: function () payable returns (bool)
                           Source: "owner.call"
                          Identifier owner
                             Type: address
                             Source: "owner"
                      Identifier rwGas
                         Type: uint256
                         Source: "rwGas"
                  MemberAccess to member balance
                     Type: uint256
                     Source: "this.balance"
                    Identifier this
                       Type: contract E4Lava
                       Source: "this"
            ExpressionStatement
               Gas costs: [???]
               Source: "StatEvent(\"ERROR!\")"
              FunctionCall
                 Type: tuple()
                 Source: "StatEvent(\"ERROR!\")"
                Identifier StatEvent
                   Type: function (string memory)
                   Source: "StatEvent"
                Literal, token: [no token] value: ERROR!
                   Type: literal_string "ERROR!"
                   Source: "\"ERROR!\""
      ExpressionStatement
         Gas costs: [???]
         Source: "StatEvent(\"ok\")"
        FunctionCall
           Type: tuple()
           Source: "StatEvent(\"ok\")"
          Identifier StatEvent
             Type: function (string memory)
             Source: "StatEvent"
          Literal, token: [no token] value: ok
             Type: literal_string "ok"
             Source: "\"ok\""
  FunctionDefinition "addAccount"
     Source: "function addAccount(address _addr) internal  {\r\n                holderAccounts[_addr].alloced = true;\r\n                holderAccounts[_addr].tokens = 0;\r\n                holderAccounts[_addr].currentPoints = 0;\r\n                holderAccounts[_addr].lastSnapshot = TotalFeesReceived;\r\n                holderIndexes[numAccounts++] = _addr;\r\n        }"
    ParameterList
       Gas costs: 0
       Source: "(address _addr)"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n                holderAccounts[_addr].alloced = true;\r\n                holderAccounts[_addr].tokens = 0;\r\n                holderAccounts[_addr].currentPoints = 0;\r\n                holderAccounts[_addr].lastSnapshot = TotalFeesReceived;\r\n                holderIndexes[numAccounts++] = _addr;\r\n        }"
      ExpressionStatement
         Gas costs: 20369
         Source: "holderAccounts[_addr].alloced = true"
        Assignment using operator =
           Type: bool
           Source: "holderAccounts[_addr].alloced = true"
          MemberAccess to member alloced
             Type: bool
             Source: "holderAccounts[_addr].alloced"
            IndexAccess
               Type: struct E4Lava.tokenAccount storage ref
               Source: "holderAccounts[_addr]"
              Identifier holderAccounts
                 Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                 Source: "holderAccounts"
              Identifier _addr
                 Type: address
                 Source: "_addr"
          Literal, token: true value: true
             Type: bool
             Source: "true"
      ExpressionStatement
         Gas costs: 5110
         Source: "holderAccounts[_addr].tokens = 0"
        Assignment using operator =
           Type: uint256
           Source: "holderAccounts[_addr].tokens = 0"
          MemberAccess to member tokens
             Type: uint256
             Source: "holderAccounts[_addr].tokens"
            IndexAccess
               Type: struct E4Lava.tokenAccount storage ref
               Source: "holderAccounts[_addr]"
              Identifier holderAccounts
                 Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                 Source: "holderAccounts"
              Identifier _addr
                 Type: address
                 Source: "_addr"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 5110
         Source: "holderAccounts[_addr].currentPoints = 0"
        Assignment using operator =
           Type: uint256
           Source: "holderAccounts[_addr].currentPoints = 0"
          MemberAccess to member currentPoints
             Type: uint256
             Source: "holderAccounts[_addr].currentPoints"
            IndexAccess
               Type: struct E4Lava.tokenAccount storage ref
               Source: "holderAccounts[_addr]"
              Identifier holderAccounts
                 Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                 Source: "holderAccounts"
              Identifier _addr
                 Type: address
                 Source: "_addr"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 20310
         Source: "holderAccounts[_addr].lastSnapshot = TotalFeesReceived"
        Assignment using operator =
           Type: uint256
           Source: "holderAccounts[_addr].lastSnapshot = TotalFeesReceived"
          MemberAccess to member lastSnapshot
             Type: uint256
             Source: "holderAccounts[_addr].lastSnapshot"
            IndexAccess
               Type: struct E4Lava.tokenAccount storage ref
               Source: "holderAccounts[_addr]"
              Identifier holderAccounts
                 Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                 Source: "holderAccounts"
              Identifier _addr
                 Type: address
                 Source: "_addr"
          Identifier TotalFeesReceived
             Type: uint256
             Source: "TotalFeesReceived"
      ExpressionStatement
         Gas costs: 40577
         Source: "holderIndexes[numAccounts++] = _addr"
        Assignment using operator =
           Type: address
           Source: "holderIndexes[numAccounts++] = _addr"
          IndexAccess
             Type: address
             Source: "holderIndexes[numAccounts++]"
            Identifier holderIndexes
               Type: mapping(uint256 => address)
               Source: "holderIndexes"
            UnaryOperation (postfix) ++
               Type: uint256
               Source: "numAccounts++"
              Identifier numAccounts
                 Type: uint256
                 Source: "numAccounts"
          Identifier _addr
             Type: address
             Source: "_addr"
  FunctionDefinition "totalSupply" - public - const
     Source: "function totalSupply() constant returns (uint256 supply)\r\n        {\r\n                supply = NewTokenSupply;\r\n        }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256 supply)"
      VariableDeclaration "supply"
         Type: uint256
         Source: "uint256 supply"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n                supply = NewTokenSupply;\r\n        }"
      ExpressionStatement
         Gas costs: 5
         Source: "supply = NewTokenSupply"
        Assignment using operator =
           Type: uint256
           Source: "supply = NewTokenSupply"
          Identifier supply
             Type: uint256
             Source: "supply"
          Identifier NewTokenSupply
             Type: uint256
             Source: "NewTokenSupply"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) returns (bool success)\r\n        {\r\n                if ((msg.sender == developers)\r\n                        &&  (now < vestTime)) {\r\n                        //statEvent(\"Tokens not yet vested.\");\r\n                        return false;\r\n                }\r\n\r\n                //Default assumes totalSupply can't be over max (2^256 - 1).\r\n                //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n                //Replace the if with this one instead.\r\n                //if (holderAccounts[msg.sender].tokens >= _value && balances[_to] + _value > holderAccounts[_to]) {\r\n                if (holderAccounts[msg.sender].tokens >= _value && _value > 0) {\r\n                    //first credit sender with points accrued so far.. must do this before number of held tokens changes\r\n                    calcCurPointsForAcct(msg.sender);\r\n                    holderAccounts[msg.sender].tokens -= _value;\r\n\r\n                    if (!holderAccounts[_to].alloced) {\r\n                        addAccount(_to);\r\n                    }\r\n                    //credit destination acct with points accrued so far.. must do this before number of held tokens changes\r\n                    calcCurPointsForAcct(_to);\r\n                    holderAccounts[_to].tokens += _value;\r\n\r\n                    Transfer(msg.sender, _to, _value);\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n        }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n                if ((msg.sender == developers)\r\n                        &&  (now < vestTime)) {\r\n                        //statEvent(\"Tokens not yet vested.\");\r\n                        return false;\r\n                }\r\n\r\n                //Default assumes totalSupply can't be over max (2^256 - 1).\r\n                //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n                //Replace the if with this one instead.\r\n                //if (holderAccounts[msg.sender].tokens >= _value && balances[_to] + _value > holderAccounts[_to]) {\r\n                if (holderAccounts[msg.sender].tokens >= _value && _value > 0) {\r\n                    //first credit sender with points accrued so far.. must do this before number of held tokens changes\r\n                    calcCurPointsForAcct(msg.sender);\r\n                    holderAccounts[msg.sender].tokens -= _value;\r\n\r\n                    if (!holderAccounts[_to].alloced) {\r\n                        addAccount(_to);\r\n                    }\r\n                    //credit destination acct with points accrued so far.. must do this before number of held tokens changes\r\n                    calcCurPointsForAcct(_to);\r\n                    holderAccounts[_to].tokens += _value;\r\n\r\n                    Transfer(msg.sender, _to, _value);\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n        }"
      IfStatement
         Source: "if ((msg.sender == developers)\r\n                        &&  (now < vestTime)) {\r\n                        //statEvent(\"Tokens not yet vested.\");\r\n                        return false;\r\n                }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 486
           Source: "(msg.sender == developers)\r\n                        &&  (now < vestTime)"
          TupleExpression
             Type: bool
             Source: "(msg.sender == developers)"
            BinaryOperation using operator ==
               Type: bool
               Source: "msg.sender == developers"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier developers
                 Type: address
                 Source: "developers"
          TupleExpression
             Type: bool
             Source: "(now < vestTime)"
            BinaryOperation using operator <
               Type: bool
               Source: "now < vestTime"
              Identifier now
                 Type: uint256
                 Source: "now"
              Identifier vestTime
                 Type: uint256
                 Source: "vestTime"
        Block
           Source: "{\r\n                        //statEvent(\"Tokens not yet vested.\");\r\n                        return false;\r\n                }"
          Return
             Gas costs: 19
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
      IfStatement
         Source: "if (holderAccounts[msg.sender].tokens >= _value && _value > 0) {\r\n                    //first credit sender with points accrued so far.. must do this before number of held tokens changes\r\n                    calcCurPointsForAcct(msg.sender);\r\n                    holderAccounts[msg.sender].tokens -= _value;\r\n\r\n                    if (!holderAccounts[_to].alloced) {\r\n                        addAccount(_to);\r\n                    }\r\n                    //credit destination acct with points accrued so far.. must do this before number of held tokens changes\r\n                    calcCurPointsForAcct(_to);\r\n                    holderAccounts[_to].tokens += _value;\r\n\r\n                    Transfer(msg.sender, _to, _value);\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 344
           Source: "holderAccounts[msg.sender].tokens >= _value && _value > 0"
          BinaryOperation using operator >=
             Type: bool
             Source: "holderAccounts[msg.sender].tokens >= _value"
            MemberAccess to member tokens
               Type: uint256
               Source: "holderAccounts[msg.sender].tokens"
              IndexAccess
                 Type: struct E4Lava.tokenAccount storage ref
                 Source: "holderAccounts[msg.sender]"
                Identifier holderAccounts
                   Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                   Source: "holderAccounts"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
          BinaryOperation using operator >
             Type: bool
             Source: "_value > 0"
            Identifier _value
               Type: uint256
               Source: "_value"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
        Block
           Source: "{\r\n                    //first credit sender with points accrued so far.. must do this before number of held tokens changes\r\n                    calcCurPointsForAcct(msg.sender);\r\n                    holderAccounts[msg.sender].tokens -= _value;\r\n\r\n                    if (!holderAccounts[_to].alloced) {\r\n                        addAccount(_to);\r\n                    }\r\n                    //credit destination acct with points accrued so far.. must do this before number of held tokens changes\r\n                    calcCurPointsForAcct(_to);\r\n                    holderAccounts[_to].tokens += _value;\r\n\r\n                    Transfer(msg.sender, _to, _value);\r\n                    return true;\r\n                }"
          ExpressionStatement
             Gas costs: 17
             Source: "calcCurPointsForAcct(msg.sender)"
            FunctionCall
               Type: tuple()
               Source: "calcCurPointsForAcct(msg.sender)"
              Identifier calcCurPointsForAcct
                 Type: function (address)
                 Source: "calcCurPointsForAcct"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
          ExpressionStatement
             Gas costs: 20334
             Source: "holderAccounts[msg.sender].tokens -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "holderAccounts[msg.sender].tokens -= _value"
              MemberAccess to member tokens
                 Type: uint256
                 Source: "holderAccounts[msg.sender].tokens"
                IndexAccess
                   Type: struct E4Lava.tokenAccount storage ref
                   Source: "holderAccounts[msg.sender]"
                  Identifier holderAccounts
                     Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                     Source: "holderAccounts"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          IfStatement
             Source: "if (!holderAccounts[_to].alloced) {\r\n                        addAccount(_to);\r\n                    }"
            UnaryOperation (prefix) !
               Type: bool
               Gas costs: 338
               Source: "!holderAccounts[_to].alloced"
              MemberAccess to member alloced
                 Type: bool
                 Source: "holderAccounts[_to].alloced"
                IndexAccess
                   Type: struct E4Lava.tokenAccount storage ref
                   Source: "holderAccounts[_to]"
                  Identifier holderAccounts
                     Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                     Source: "holderAccounts"
                  Identifier _to
                     Type: address
                     Source: "_to"
            Block
               Source: "{\r\n                        addAccount(_to);\r\n                    }"
              ExpressionStatement
                 Gas costs: 18
                 Source: "addAccount(_to)"
                FunctionCall
                   Type: tuple()
                   Source: "addAccount(_to)"
                  Identifier addAccount
                     Type: function (address)
                     Source: "addAccount"
                  Identifier _to
                     Type: address
                     Source: "_to"
          ExpressionStatement
             Gas costs: 18
             Source: "calcCurPointsForAcct(_to)"
            FunctionCall
               Type: tuple()
               Source: "calcCurPointsForAcct(_to)"
              Identifier calcCurPointsForAcct
                 Type: function (address)
                 Source: "calcCurPointsForAcct"
              Identifier _to
                 Type: address
                 Source: "_to"
          ExpressionStatement
             Gas costs: 20335
             Source: "holderAccounts[_to].tokens += _value"
            Assignment using operator +=
               Type: uint256
               Source: "holderAccounts[_to].tokens += _value"
              MemberAccess to member tokens
                 Type: uint256
                 Source: "holderAccounts[_to].tokens"
                IndexAccess
                   Type: struct E4Lava.tokenAccount storage ref
                   Source: "holderAccounts[_to]"
                  Identifier holderAccounts
                     Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                     Source: "holderAccounts"
                  Identifier _to
                     Type: address
                     Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: [???]
             Source: "Transfer(msg.sender, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(msg.sender, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{\r\n                    return false;\r\n                }"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n                if ((_from == developers)\r\n                        &&  (now < vestTime)) {\r\n                        //statEvent(\"Tokens not yet vested.\");\r\n                        return false;\r\n                }\r\n\r\n                //same as above. Replace this line with the following if you want to protect against wrapping uints.\r\n                //if (holderAccounts[_from].tokens >= _value && allowed[_from][msg.sender] >= _value && holderAccounts[_to].tokens + _value > holderAccounts[_to].tokens) {\r\n                if (holderAccounts[_from].tokens >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n\r\n                    calcCurPointsForAcct(_from);\r\n                    holderAccounts[_from].tokens -= _value;\r\n\r\n                    if (!holderAccounts[_to].alloced) {\r\n                        addAccount(_to);\r\n                    }\r\n                    //credit destination acct with points accrued so far.. must do this before number of held tokens changes\r\n                    calcCurPointsForAcct(_to);\r\n                    holderAccounts[_to].tokens += _value;\r\n\r\n                    allowed[_from][msg.sender] -= _value;\r\n                    Transfer(_from, _to, _value);\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n        }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n                if ((_from == developers)\r\n                        &&  (now < vestTime)) {\r\n                        //statEvent(\"Tokens not yet vested.\");\r\n                        return false;\r\n                }\r\n\r\n                //same as above. Replace this line with the following if you want to protect against wrapping uints.\r\n                //if (holderAccounts[_from].tokens >= _value && allowed[_from][msg.sender] >= _value && holderAccounts[_to].tokens + _value > holderAccounts[_to].tokens) {\r\n                if (holderAccounts[_from].tokens >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n\r\n                    calcCurPointsForAcct(_from);\r\n                    holderAccounts[_from].tokens -= _value;\r\n\r\n                    if (!holderAccounts[_to].alloced) {\r\n                        addAccount(_to);\r\n                    }\r\n                    //credit destination acct with points accrued so far.. must do this before number of held tokens changes\r\n                    calcCurPointsForAcct(_to);\r\n                    holderAccounts[_to].tokens += _value;\r\n\r\n                    allowed[_from][msg.sender] -= _value;\r\n                    Transfer(_from, _to, _value);\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n        }"
      IfStatement
         Source: "if ((_from == developers)\r\n                        &&  (now < vestTime)) {\r\n                        //statEvent(\"Tokens not yet vested.\");\r\n                        return false;\r\n                }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 487
           Source: "(_from == developers)\r\n                        &&  (now < vestTime)"
          TupleExpression
             Type: bool
             Source: "(_from == developers)"
            BinaryOperation using operator ==
               Type: bool
               Source: "_from == developers"
              Identifier _from
                 Type: address
                 Source: "_from"
              Identifier developers
                 Type: address
                 Source: "developers"
          TupleExpression
             Type: bool
             Source: "(now < vestTime)"
            BinaryOperation using operator <
               Type: bool
               Source: "now < vestTime"
              Identifier now
                 Type: uint256
                 Source: "now"
              Identifier vestTime
                 Type: uint256
                 Source: "vestTime"
        Block
           Source: "{\r\n                        //statEvent(\"Tokens not yet vested.\");\r\n                        return false;\r\n                }"
          Return
             Gas costs: 19
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
      IfStatement
         Source: "if (holderAccounts[_from].tokens >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n\r\n                    calcCurPointsForAcct(_from);\r\n                    holderAccounts[_from].tokens -= _value;\r\n\r\n                    if (!holderAccounts[_to].alloced) {\r\n                        addAccount(_to);\r\n                    }\r\n                    //credit destination acct with points accrued so far.. must do this before number of held tokens changes\r\n                    calcCurPointsForAcct(_to);\r\n                    holderAccounts[_to].tokens += _value;\r\n\r\n                    allowed[_from][msg.sender] -= _value;\r\n                    Transfer(_from, _to, _value);\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 764
           Source: "holderAccounts[_from].tokens >= _value && allowed[_from][msg.sender] >= _value && _value > 0"
          BinaryOperation using operator &&
             Type: bool
             Source: "holderAccounts[_from].tokens >= _value && allowed[_from][msg.sender] >= _value"
            BinaryOperation using operator >=
               Type: bool
               Source: "holderAccounts[_from].tokens >= _value"
              MemberAccess to member tokens
                 Type: uint256
                 Source: "holderAccounts[_from].tokens"
                IndexAccess
                   Type: struct E4Lava.tokenAccount storage ref
                   Source: "holderAccounts[_from]"
                  Identifier holderAccounts
                     Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                     Source: "holderAccounts"
                  Identifier _from
                     Type: address
                     Source: "_from"
              Identifier _value
                 Type: uint256
                 Source: "_value"
            BinaryOperation using operator >=
               Type: bool
               Source: "allowed[_from][msg.sender] >= _value"
              IndexAccess
                 Type: uint256
                 Source: "allowed[_from][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[_from]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  Identifier _from
                     Type: address
                     Source: "_from"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          BinaryOperation using operator >
             Type: bool
             Source: "_value > 0"
            Identifier _value
               Type: uint256
               Source: "_value"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
        Block
           Source: "{\r\n\r\n                    calcCurPointsForAcct(_from);\r\n                    holderAccounts[_from].tokens -= _value;\r\n\r\n                    if (!holderAccounts[_to].alloced) {\r\n                        addAccount(_to);\r\n                    }\r\n                    //credit destination acct with points accrued so far.. must do this before number of held tokens changes\r\n                    calcCurPointsForAcct(_to);\r\n                    holderAccounts[_to].tokens += _value;\r\n\r\n                    allowed[_from][msg.sender] -= _value;\r\n                    Transfer(_from, _to, _value);\r\n                    return true;\r\n                }"
          ExpressionStatement
             Gas costs: 18
             Source: "calcCurPointsForAcct(_from)"
            FunctionCall
               Type: tuple()
               Source: "calcCurPointsForAcct(_from)"
              Identifier calcCurPointsForAcct
                 Type: function (address)
                 Source: "calcCurPointsForAcct"
              Identifier _from
                 Type: address
                 Source: "_from"
          ExpressionStatement
             Gas costs: 20335
             Source: "holderAccounts[_from].tokens -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "holderAccounts[_from].tokens -= _value"
              MemberAccess to member tokens
                 Type: uint256
                 Source: "holderAccounts[_from].tokens"
                IndexAccess
                   Type: struct E4Lava.tokenAccount storage ref
                   Source: "holderAccounts[_from]"
                  Identifier holderAccounts
                     Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                     Source: "holderAccounts"
                  Identifier _from
                     Type: address
                     Source: "_from"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          IfStatement
             Source: "if (!holderAccounts[_to].alloced) {\r\n                        addAccount(_to);\r\n                    }"
            UnaryOperation (prefix) !
               Type: bool
               Gas costs: 338
               Source: "!holderAccounts[_to].alloced"
              MemberAccess to member alloced
                 Type: bool
                 Source: "holderAccounts[_to].alloced"
                IndexAccess
                   Type: struct E4Lava.tokenAccount storage ref
                   Source: "holderAccounts[_to]"
                  Identifier holderAccounts
                     Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                     Source: "holderAccounts"
                  Identifier _to
                     Type: address
                     Source: "_to"
            Block
               Source: "{\r\n                        addAccount(_to);\r\n                    }"
              ExpressionStatement
                 Gas costs: 7
                 Source: "addAccount(_to)"
                FunctionCall
                   Type: tuple()
                   Source: "addAccount(_to)"
                  Identifier addAccount
                     Type: function (address)
                     Source: "addAccount"
                  Identifier _to
                     Type: address
                     Source: "_to"
          ExpressionStatement
             Gas costs: 18
             Source: "calcCurPointsForAcct(_to)"
            FunctionCall
               Type: tuple()
               Source: "calcCurPointsForAcct(_to)"
              Identifier calcCurPointsForAcct
                 Type: function (address)
                 Source: "calcCurPointsForAcct"
              Identifier _to
                 Type: address
                 Source: "_to"
          ExpressionStatement
             Gas costs: 20335
             Source: "holderAccounts[_to].tokens += _value"
            Assignment using operator +=
               Type: uint256
               Source: "holderAccounts[_to].tokens += _value"
              MemberAccess to member tokens
                 Type: uint256
                 Source: "holderAccounts[_to].tokens"
                IndexAccess
                   Type: struct E4Lava.tokenAccount storage ref
                   Source: "holderAccounts[_to]"
                  Identifier holderAccounts
                     Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                     Source: "holderAccounts"
                  Identifier _to
                     Type: address
                     Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20412
             Source: "allowed[_from][msg.sender] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "allowed[_from][msg.sender] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "allowed[_from][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[_from]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  Identifier _from
                     Type: address
                     Source: "_from"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: [???]
             Source: "Transfer(_from, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(_from, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              Identifier _from
                 Type: address
                 Source: "_from"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{\r\n                    return false;\r\n                }"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) constant returns (uint256 balance) {\r\n                balance = holderAccounts[_owner].tokens;\r\n        }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n                balance = holderAccounts[_owner].tokens;\r\n        }"
      ExpressionStatement
         Gas costs: 310
         Source: "balance = holderAccounts[_owner].tokens"
        Assignment using operator =
           Type: uint256
           Source: "balance = holderAccounts[_owner].tokens"
          Identifier balance
             Type: uint256
             Source: "balance"
          MemberAccess to member tokens
             Type: uint256
             Source: "holderAccounts[_owner].tokens"
            IndexAccess
               Type: struct E4Lava.tokenAccount storage ref
               Source: "holderAccounts[_owner]"
              Identifier holderAccounts
                 Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                 Source: "holderAccounts"
              Identifier _owner
                 Type: address
                 Source: "_owner"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint256 _value) returns (bool success) {\r\n                allowed[msg.sender][_spender] = _value;\r\n                Approval(msg.sender, _spender, _value);\r\n                return true;\r\n        }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n                allowed[msg.sender][_spender] = _value;\r\n                Approval(msg.sender, _spender, _value);\r\n                return true;\r\n        }"
      ExpressionStatement
         Gas costs: 20199
         Source: "allowed[msg.sender][_spender] = _value"
        Assignment using operator =
           Type: uint256
           Source: "allowed[msg.sender][_spender] = _value"
          IndexAccess
             Type: uint256
             Source: "allowed[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[msg.sender]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: [???]
         Source: "Approval(msg.sender, _spender, _value)"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender, _spender, _value)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n                return allowed[_owner][_spender];\r\n        }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint256 remaining"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n                return allowed[_owner][_spender];\r\n        }"
      Return
         Gas costs: 394
         Source: "return allowed[_owner][_spender]"
        IndexAccess
           Type: uint256
           Source: "allowed[_owner][_spender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowed[_owner]"
            Identifier allowed
               Type: mapping(address => mapping(address => uint256))
               Source: "allowed"
            Identifier _owner
               Type: address
               Source: "_owner"
          Identifier _spender
             Type: address
             Source: "_spender"
  FunctionDefinition "calcCurPointsForAcct"
     Source: "function calcCurPointsForAcct(address _acct) internal {\r\n              holderAccounts[_acct].currentPoints += (TotalFeesReceived - holderAccounts[_acct].lastSnapshot) * holderAccounts[_acct].tokens;\r\n              holderAccounts[_acct].lastSnapshot = TotalFeesReceived;\r\n        }"
    ParameterList
       Gas costs: 0
       Source: "(address _acct)"
      VariableDeclaration "_acct"
         Type: address
         Source: "address _acct"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n              holderAccounts[_acct].currentPoints += (TotalFeesReceived - holderAccounts[_acct].lastSnapshot) * holderAccounts[_acct].tokens;\r\n              holderAccounts[_acct].lastSnapshot = TotalFeesReceived;\r\n        }"
      ExpressionStatement
         Gas costs: 21141
         Source: "holderAccounts[_acct].currentPoints += (TotalFeesReceived - holderAccounts[_acct].lastSnapshot) * holderAccounts[_acct].tokens"
        Assignment using operator +=
           Type: uint256
           Source: "holderAccounts[_acct].currentPoints += (TotalFeesReceived - holderAccounts[_acct].lastSnapshot) * holderAccounts[_acct].tokens"
          MemberAccess to member currentPoints
             Type: uint256
             Source: "holderAccounts[_acct].currentPoints"
            IndexAccess
               Type: struct E4Lava.tokenAccount storage ref
               Source: "holderAccounts[_acct]"
              Identifier holderAccounts
                 Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                 Source: "holderAccounts"
              Identifier _acct
                 Type: address
                 Source: "_acct"
          BinaryOperation using operator *
             Type: uint256
             Source: "(TotalFeesReceived - holderAccounts[_acct].lastSnapshot) * holderAccounts[_acct].tokens"
            TupleExpression
               Type: uint256
               Source: "(TotalFeesReceived - holderAccounts[_acct].lastSnapshot)"
              BinaryOperation using operator -
                 Type: uint256
                 Source: "TotalFeesReceived - holderAccounts[_acct].lastSnapshot"
                Identifier TotalFeesReceived
                   Type: uint256
                   Source: "TotalFeesReceived"
                MemberAccess to member lastSnapshot
                   Type: uint256
                   Source: "holderAccounts[_acct].lastSnapshot"
                  IndexAccess
                     Type: struct E4Lava.tokenAccount storage ref
                     Source: "holderAccounts[_acct]"
                    Identifier holderAccounts
                       Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                       Source: "holderAccounts"
                    Identifier _acct
                       Type: address
                       Source: "_acct"
            MemberAccess to member tokens
               Type: uint256
               Source: "holderAccounts[_acct].tokens"
              IndexAccess
                 Type: struct E4Lava.tokenAccount storage ref
                 Source: "holderAccounts[_acct]"
                Identifier holderAccounts
                   Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                   Source: "holderAccounts"
                Identifier _acct
                   Type: address
                   Source: "_acct"
      ExpressionStatement
         Gas costs: 20310
         Source: "holderAccounts[_acct].lastSnapshot = TotalFeesReceived"
        Assignment using operator =
           Type: uint256
           Source: "holderAccounts[_acct].lastSnapshot = TotalFeesReceived"
          MemberAccess to member lastSnapshot
             Type: uint256
             Source: "holderAccounts[_acct].lastSnapshot"
            IndexAccess
               Type: struct E4Lava.tokenAccount storage ref
               Source: "holderAccounts[_acct]"
              Identifier holderAccounts
                 Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                 Source: "holderAccounts"
              Identifier _acct
                 Type: address
                 Source: "_acct"
          Identifier TotalFeesReceived
             Type: uint256
             Source: "TotalFeesReceived"
  FunctionDefinition "" - public
     Source: "function () payable {\r\n                holdoverBalance += msg.value;\r\n                TotalFeesReceived += msg.value;\r\n                StatEventI(\"Payment\", msg.value);\r\n        }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n                holdoverBalance += msg.value;\r\n                TotalFeesReceived += msg.value;\r\n                StatEventI(\"Payment\", msg.value);\r\n        }"
      ExpressionStatement
         Gas costs: 20232
         Source: "holdoverBalance += msg.value"
        Assignment using operator +=
           Type: uint256
           Source: "holdoverBalance += msg.value"
          Identifier holdoverBalance
             Type: uint256
             Source: "holdoverBalance"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 20232
         Source: "TotalFeesReceived += msg.value"
        Assignment using operator +=
           Type: uint256
           Source: "TotalFeesReceived += msg.value"
          Identifier TotalFeesReceived
             Type: uint256
             Source: "TotalFeesReceived"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: [???]
         Source: "StatEventI(\"Payment\", msg.value)"
        FunctionCall
           Type: tuple()
           Source: "StatEventI(\"Payment\", msg.value)"
          Identifier StatEventI
             Type: function (string memory,uint256)
             Source: "StatEventI"
          Literal, token: [no token] value: Payment
             Type: literal_string "Payment"
             Source: "\"Payment\""
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "blackHole" - public
     Source: "function blackHole() payable {\r\n                StatEventI(\"adjusted\", msg.value);\r\n        }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n                StatEventI(\"adjusted\", msg.value);\r\n        }"
      ExpressionStatement
         Gas costs: [???]
         Source: "StatEventI(\"adjusted\", msg.value)"
        FunctionCall
           Type: tuple()
           Source: "StatEventI(\"adjusted\", msg.value)"
          Identifier StatEventI
             Type: function (string memory,uint256)
             Source: "StatEventI"
          Literal, token: [no token] value: adjusted
             Type: literal_string "adjusted"
             Source: "\"adjusted\""
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "withdrawDividends" - public
     Source: "function withdrawDividends() public returns (uint _amount)\r\n        {\r\n                calcCurPointsForAcct(msg.sender);\r\n\r\n                _amount = holderAccounts[msg.sender].currentPoints / NewTokenSupply;\r\n                if (_amount <= payoutThreshold) {\r\n                        StatEventI(\"low Balance\", _amount);\r\n                        return;\r\n                } else {\r\n                        if ((msg.sender == developers)\r\n                                &&  (now < vestTime)) {\r\n                                StatEvent(\"Tokens not yet vested.\");\r\n                                _amount = 0;\r\n                                return;\r\n                        }\r\n\r\n                        uint _pointsUsed = _amount * NewTokenSupply;\r\n                        holderAccounts[msg.sender].currentPoints -= _pointsUsed;\r\n                        holdoverBalance -= _amount;\r\n                        if (!msg.sender.call.gas(rwGas).value(_amount)())\r\n                                throw;\r\n                }\r\n        }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint _amount)"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint _amount"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n                calcCurPointsForAcct(msg.sender);\r\n\r\n                _amount = holderAccounts[msg.sender].currentPoints / NewTokenSupply;\r\n                if (_amount <= payoutThreshold) {\r\n                        StatEventI(\"low Balance\", _amount);\r\n                        return;\r\n                } else {\r\n                        if ((msg.sender == developers)\r\n                                &&  (now < vestTime)) {\r\n                                StatEvent(\"Tokens not yet vested.\");\r\n                                _amount = 0;\r\n                                return;\r\n                        }\r\n\r\n                        uint _pointsUsed = _amount * NewTokenSupply;\r\n                        holderAccounts[msg.sender].currentPoints -= _pointsUsed;\r\n                        holdoverBalance -= _amount;\r\n                        if (!msg.sender.call.gas(rwGas).value(_amount)())\r\n                                throw;\r\n                }\r\n        }"
      ExpressionStatement
         Gas costs: 6
         Source: "calcCurPointsForAcct(msg.sender)"
        FunctionCall
           Type: tuple()
           Source: "calcCurPointsForAcct(msg.sender)"
          Identifier calcCurPointsForAcct
             Type: function (address)
             Source: "calcCurPointsForAcct"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 337
         Source: "_amount = holderAccounts[msg.sender].currentPoints / NewTokenSupply"
        Assignment using operator =
           Type: uint256
           Source: "_amount = holderAccounts[msg.sender].currentPoints / NewTokenSupply"
          Identifier _amount
             Type: uint256
             Source: "_amount"
          BinaryOperation using operator /
             Type: uint256
             Source: "holderAccounts[msg.sender].currentPoints / NewTokenSupply"
            MemberAccess to member currentPoints
               Type: uint256
               Source: "holderAccounts[msg.sender].currentPoints"
              IndexAccess
                 Type: struct E4Lava.tokenAccount storage ref
                 Source: "holderAccounts[msg.sender]"
                Identifier holderAccounts
                   Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                   Source: "holderAccounts"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
            Identifier NewTokenSupply
               Type: uint256
               Source: "NewTokenSupply"
      IfStatement
         Source: "if (_amount <= payoutThreshold) {\r\n                        StatEventI(\"low Balance\", _amount);\r\n                        return;\r\n                } else {\r\n                        if ((msg.sender == developers)\r\n                                &&  (now < vestTime)) {\r\n                                StatEvent(\"Tokens not yet vested.\");\r\n                                _amount = 0;\r\n                                return;\r\n                        }\r\n\r\n                        uint _pointsUsed = _amount * NewTokenSupply;\r\n                        holderAccounts[msg.sender].currentPoints -= _pointsUsed;\r\n                        holdoverBalance -= _amount;\r\n                        if (!msg.sender.call.gas(rwGas).value(_amount)())\r\n                                throw;\r\n                }"
        BinaryOperation using operator <=
           Type: bool
           Gas costs: 212
           Source: "_amount <= payoutThreshold"
          Identifier _amount
             Type: uint256
             Source: "_amount"
          Identifier payoutThreshold
             Type: uint256
             Source: "payoutThreshold"
        Block
           Source: "{\r\n                        StatEventI(\"low Balance\", _amount);\r\n                        return;\r\n                }"
          ExpressionStatement
             Gas costs: [???]
             Source: "StatEventI(\"low Balance\", _amount)"
            FunctionCall
               Type: tuple()
               Source: "StatEventI(\"low Balance\", _amount)"
              Identifier StatEventI
                 Type: function (string memory,uint256)
                 Source: "StatEventI"
              Literal, token: [no token] value: low Balance
                 Type: literal_string "low Balance"
                 Source: "\"low Balance\""
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
          Return
             Gas costs: 11
             Source: "return;"
        Block
           Source: "{\r\n                        if ((msg.sender == developers)\r\n                                &&  (now < vestTime)) {\r\n                                StatEvent(\"Tokens not yet vested.\");\r\n                                _amount = 0;\r\n                                return;\r\n                        }\r\n\r\n                        uint _pointsUsed = _amount * NewTokenSupply;\r\n                        holderAccounts[msg.sender].currentPoints -= _pointsUsed;\r\n                        holdoverBalance -= _amount;\r\n                        if (!msg.sender.call.gas(rwGas).value(_amount)())\r\n                                throw;\r\n                }"
          IfStatement
             Source: "if ((msg.sender == developers)\r\n                                &&  (now < vestTime)) {\r\n                                StatEvent(\"Tokens not yet vested.\");\r\n                                _amount = 0;\r\n                                return;\r\n                        }"
            BinaryOperation using operator &&
               Type: bool
               Gas costs: 486
               Source: "(msg.sender == developers)\r\n                                &&  (now < vestTime)"
              TupleExpression
                 Type: bool
                 Source: "(msg.sender == developers)"
                BinaryOperation using operator ==
                   Type: bool
                   Source: "msg.sender == developers"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
                  Identifier developers
                     Type: address
                     Source: "developers"
              TupleExpression
                 Type: bool
                 Source: "(now < vestTime)"
                BinaryOperation using operator <
                   Type: bool
                   Source: "now < vestTime"
                  Identifier now
                     Type: uint256
                     Source: "now"
                  Identifier vestTime
                     Type: uint256
                     Source: "vestTime"
            Block
               Source: "{\r\n                                StatEvent(\"Tokens not yet vested.\");\r\n                                _amount = 0;\r\n                                return;\r\n                        }"
              ExpressionStatement
                 Gas costs: [???]
                 Source: "StatEvent(\"Tokens not yet vested.\")"
                FunctionCall
                   Type: tuple()
                   Source: "StatEvent(\"Tokens not yet vested.\")"
                  Identifier StatEvent
                     Type: function (string memory)
                     Source: "StatEvent"
                  Literal, token: [no token] value: Tokens not yet vested.
                     Type: literal_string "Tokens not yet vested."
                     Source: "\"Tokens not yet vested.\""
              ExpressionStatement
                 Gas costs: 8
                 Source: "_amount = 0"
                Assignment using operator =
                   Type: uint256
                   Source: "_amount = 0"
                  Identifier _amount
                     Type: uint256
                     Source: "_amount"
                  Literal, token: [no token] value: 0
                     Type: int_const 0
                     Source: "0"
              Return
                 Gas costs: 11
                 Source: "return;"
          VariableDeclarationStatement
             Gas costs: 16
             Source: "uint _pointsUsed = _amount * NewTokenSupply"
            VariableDeclaration "_pointsUsed"
               Type: uint256
               Source: "uint _pointsUsed"
              ElementaryTypeName uint
                 Source: "uint"
            BinaryOperation using operator *
               Type: uint256
               Source: "_amount * NewTokenSupply"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
              Identifier NewTokenSupply
                 Type: uint256
                 Source: "NewTokenSupply"
          ExpressionStatement
             Gas costs: 20334
             Source: "holderAccounts[msg.sender].currentPoints -= _pointsUsed"
            Assignment using operator -=
               Type: uint256
               Source: "holderAccounts[msg.sender].currentPoints -= _pointsUsed"
              MemberAccess to member currentPoints
                 Type: uint256
                 Source: "holderAccounts[msg.sender].currentPoints"
                IndexAccess
                   Type: struct E4Lava.tokenAccount storage ref
                   Source: "holderAccounts[msg.sender]"
                  Identifier holderAccounts
                     Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                     Source: "holderAccounts"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
              Identifier _pointsUsed
                 Type: uint256
                 Source: "_pointsUsed"
          ExpressionStatement
             Gas costs: 20233
             Source: "holdoverBalance -= _amount"
            Assignment using operator -=
               Type: uint256
               Source: "holdoverBalance -= _amount"
              Identifier holdoverBalance
                 Type: uint256
                 Source: "holdoverBalance"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
          IfStatement
             Source: "if (!msg.sender.call.gas(rwGas).value(_amount)())\r\n                                throw"
            UnaryOperation (prefix) !
               Type: bool
               Gas costs: [???]
               Source: "!msg.sender.call.gas(rwGas).value(_amount)()"
              FunctionCall
                 Type: bool
                 Source: "msg.sender.call.gas(rwGas).value(_amount)()"
                FunctionCall
                   Type: function () payable returns (bool)
                   Source: "msg.sender.call.gas(rwGas).value(_amount)"
                  MemberAccess to member value
                     Type: function (uint256) returns (function () payable returns (bool))
                     Source: "msg.sender.call.gas(rwGas).value"
                    FunctionCall
                       Type: function () payable returns (bool)
                       Source: "msg.sender.call.gas(rwGas)"
                      MemberAccess to member gas
                         Type: function (uint256) returns (function () payable returns (bool))
                         Source: "msg.sender.call.gas"
                        MemberAccess to member call
                           Type: function () payable returns (bool)
                           Source: "msg.sender.call"
                          MemberAccess to member sender
                             Type: address
                             Source: "msg.sender"
                            Identifier msg
                               Type: msg
                               Source: "msg"
                      Identifier rwGas
                         Type: uint256
                         Source: "rwGas"
                  Identifier _amount
                     Type: uint256
                     Source: "_amount"
            Throw
               Gas costs: 6
               Source: "throw"
  FunctionDefinition "transferDividends" - public
     Source: "function transferDividends(address _to) returns (bool success)\r\n        {\r\n                if ((msg.sender == developers)\r\n                        &&  (now < vestTime)) {\r\n                        //statEvent(\"Tokens not yet vested.\");\r\n                        return false;\r\n                }\r\n                calcCurPointsForAcct(msg.sender);\r\n                if (holderAccounts[msg.sender].currentPoints == 0) {\r\n                        StatEvent(\"Zero balance\");\r\n                        return false;\r\n                }\r\n                if (!holderAccounts[_to].alloced) {\r\n                        addAccount(_to);\r\n                }\r\n                calcCurPointsForAcct(_to);\r\n                holderAccounts[_to].currentPoints += holderAccounts[msg.sender].currentPoints;\r\n                holderAccounts[msg.sender].currentPoints = 0;\r\n                StatEvent(\"Trasnfered Dividends\");\r\n                return true;\r\n        }"
    ParameterList
       Gas costs: 0
       Source: "(address _to)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n                if ((msg.sender == developers)\r\n                        &&  (now < vestTime)) {\r\n                        //statEvent(\"Tokens not yet vested.\");\r\n                        return false;\r\n                }\r\n                calcCurPointsForAcct(msg.sender);\r\n                if (holderAccounts[msg.sender].currentPoints == 0) {\r\n                        StatEvent(\"Zero balance\");\r\n                        return false;\r\n                }\r\n                if (!holderAccounts[_to].alloced) {\r\n                        addAccount(_to);\r\n                }\r\n                calcCurPointsForAcct(_to);\r\n                holderAccounts[_to].currentPoints += holderAccounts[msg.sender].currentPoints;\r\n                holderAccounts[msg.sender].currentPoints = 0;\r\n                StatEvent(\"Trasnfered Dividends\");\r\n                return true;\r\n        }"
      IfStatement
         Source: "if ((msg.sender == developers)\r\n                        &&  (now < vestTime)) {\r\n                        //statEvent(\"Tokens not yet vested.\");\r\n                        return false;\r\n                }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 486
           Source: "(msg.sender == developers)\r\n                        &&  (now < vestTime)"
          TupleExpression
             Type: bool
             Source: "(msg.sender == developers)"
            BinaryOperation using operator ==
               Type: bool
               Source: "msg.sender == developers"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier developers
                 Type: address
                 Source: "developers"
          TupleExpression
             Type: bool
             Source: "(now < vestTime)"
            BinaryOperation using operator <
               Type: bool
               Source: "now < vestTime"
              Identifier now
                 Type: uint256
                 Source: "now"
              Identifier vestTime
                 Type: uint256
                 Source: "vestTime"
        Block
           Source: "{\r\n                        //statEvent(\"Tokens not yet vested.\");\r\n                        return false;\r\n                }"
          Return
             Gas costs: 19
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
      ExpressionStatement
         Gas costs: 17
         Source: "calcCurPointsForAcct(msg.sender)"
        FunctionCall
           Type: tuple()
           Source: "calcCurPointsForAcct(msg.sender)"
          Identifier calcCurPointsForAcct
             Type: function (address)
             Source: "calcCurPointsForAcct"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      IfStatement
         Source: "if (holderAccounts[msg.sender].currentPoints == 0) {\r\n                        StatEvent(\"Zero balance\");\r\n                        return false;\r\n                }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 310
           Source: "holderAccounts[msg.sender].currentPoints == 0"
          MemberAccess to member currentPoints
             Type: uint256
             Source: "holderAccounts[msg.sender].currentPoints"
            IndexAccess
               Type: struct E4Lava.tokenAccount storage ref
               Source: "holderAccounts[msg.sender]"
              Identifier holderAccounts
                 Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                 Source: "holderAccounts"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n                        StatEvent(\"Zero balance\");\r\n                        return false;\r\n                }"
          ExpressionStatement
             Gas costs: [???]
             Source: "StatEvent(\"Zero balance\")"
            FunctionCall
               Type: tuple()
               Source: "StatEvent(\"Zero balance\")"
              Identifier StatEvent
                 Type: function (string memory)
                 Source: "StatEvent"
              Literal, token: [no token] value: Zero balance
                 Type: literal_string "Zero balance"
                 Source: "\"Zero balance\""
          Return
             Gas costs: 19
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
      IfStatement
         Source: "if (!holderAccounts[_to].alloced) {\r\n                        addAccount(_to);\r\n                }"
        UnaryOperation (prefix) !
           Type: bool
           Gas costs: 344
           Source: "!holderAccounts[_to].alloced"
          MemberAccess to member alloced
             Type: bool
             Source: "holderAccounts[_to].alloced"
            IndexAccess
               Type: struct E4Lava.tokenAccount storage ref
               Source: "holderAccounts[_to]"
              Identifier holderAccounts
                 Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                 Source: "holderAccounts"
              Identifier _to
                 Type: address
                 Source: "_to"
        Block
           Source: "{\r\n                        addAccount(_to);\r\n                }"
          ExpressionStatement
             Gas costs: 18
             Source: "addAccount(_to)"
            FunctionCall
               Type: tuple()
               Source: "addAccount(_to)"
              Identifier addAccount
                 Type: function (address)
                 Source: "addAccount"
              Identifier _to
                 Type: address
                 Source: "_to"
      ExpressionStatement
         Gas costs: 18
         Source: "calcCurPointsForAcct(_to)"
        FunctionCall
           Type: tuple()
           Source: "calcCurPointsForAcct(_to)"
          Identifier calcCurPointsForAcct
             Type: function (address)
             Source: "calcCurPointsForAcct"
          Identifier _to
             Type: address
             Source: "_to"
      ExpressionStatement
         Gas costs: 20630
         Source: "holderAccounts[_to].currentPoints += holderAccounts[msg.sender].currentPoints"
        Assignment using operator +=
           Type: uint256
           Source: "holderAccounts[_to].currentPoints += holderAccounts[msg.sender].currentPoints"
          MemberAccess to member currentPoints
             Type: uint256
             Source: "holderAccounts[_to].currentPoints"
            IndexAccess
               Type: struct E4Lava.tokenAccount storage ref
               Source: "holderAccounts[_to]"
              Identifier holderAccounts
                 Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                 Source: "holderAccounts"
              Identifier _to
                 Type: address
                 Source: "_to"
          MemberAccess to member currentPoints
             Type: uint256
             Source: "holderAccounts[msg.sender].currentPoints"
            IndexAccess
               Type: struct E4Lava.tokenAccount storage ref
               Source: "holderAccounts[msg.sender]"
              Identifier holderAccounts
                 Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                 Source: "holderAccounts"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
      ExpressionStatement
         Gas costs: 5109
         Source: "holderAccounts[msg.sender].currentPoints = 0"
        Assignment using operator =
           Type: uint256
           Source: "holderAccounts[msg.sender].currentPoints = 0"
          MemberAccess to member currentPoints
             Type: uint256
             Source: "holderAccounts[msg.sender].currentPoints"
            IndexAccess
               Type: struct E4Lava.tokenAccount storage ref
               Source: "holderAccounts[msg.sender]"
              Identifier holderAccounts
                 Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                 Source: "holderAccounts"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: [???]
         Source: "StatEvent(\"Trasnfered Dividends\")"
        FunctionCall
           Type: tuple()
           Source: "StatEvent(\"Trasnfered Dividends\")"
          Identifier StatEvent
             Type: function (string memory)
             Source: "StatEvent"
          Literal, token: [no token] value: Trasnfered Dividends
             Type: literal_string "Trasnfered Dividends"
             Source: "\"Trasnfered Dividends\""
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "setOpGas" - public
     Source: "function setOpGas(uint _rw, uint _optXferGas, uint _optFcnGas)\r\n        {\r\n                if (msg.sender != owner && msg.sender != developers) {\r\n                        //StatEvent(\"only owner calls\");\r\n                        return;\r\n                } else {\r\n                        rwGas = _rw;\r\n                        optInXferGas = _optXferGas;\r\n                        optInFcnMinGas = _optFcnGas;\r\n                }\r\n        }"
    ParameterList
       Gas costs: 0
       Source: "(uint _rw, uint _optXferGas, uint _optFcnGas)"
      VariableDeclaration "_rw"
         Type: uint256
         Source: "uint _rw"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_optXferGas"
         Type: uint256
         Source: "uint _optXferGas"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_optFcnGas"
         Type: uint256
         Source: "uint _optFcnGas"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n                if (msg.sender != owner && msg.sender != developers) {\r\n                        //StatEvent(\"only owner calls\");\r\n                        return;\r\n                } else {\r\n                        rwGas = _rw;\r\n                        optInXferGas = _optXferGas;\r\n                        optInFcnMinGas = _optFcnGas;\r\n                }\r\n        }"
      IfStatement
         Source: "if (msg.sender != owner && msg.sender != developers) {\r\n                        //StatEvent(\"only owner calls\");\r\n                        return;\r\n                } else {\r\n                        rwGas = _rw;\r\n                        optInXferGas = _optXferGas;\r\n                        optInFcnMinGas = _optFcnGas;\r\n                }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 540
           Source: "msg.sender != owner && msg.sender != developers"
          BinaryOperation using operator !=
             Type: bool
             Source: "msg.sender != owner"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier owner
               Type: address
               Source: "owner"
          BinaryOperation using operator !=
             Type: bool
             Source: "msg.sender != developers"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier developers
               Type: address
               Source: "developers"
        Block
           Source: "{\r\n                        //StatEvent(\"only owner calls\");\r\n                        return;\r\n                }"
          Return
             Gas costs: 11
             Source: "return;"
        Block
           Source: "{\r\n                        rwGas = _rw;\r\n                        optInXferGas = _optXferGas;\r\n                        optInFcnMinGas = _optFcnGas;\r\n                }"
          ExpressionStatement
             Gas costs: 20014
             Source: "rwGas = _rw"
            Assignment using operator =
               Type: uint256
               Source: "rwGas = _rw"
              Identifier rwGas
                 Type: uint256
                 Source: "rwGas"
              Identifier _rw
                 Type: uint256
                 Source: "_rw"
          ExpressionStatement
             Gas costs: 20014
             Source: "optInXferGas = _optXferGas"
            Assignment using operator =
               Type: uint256
               Source: "optInXferGas = _optXferGas"
              Identifier optInXferGas
                 Type: uint256
                 Source: "optInXferGas"
              Identifier _optXferGas
                 Type: uint256
                 Source: "_optXferGas"
          ExpressionStatement
             Gas costs: 20014
             Source: "optInFcnMinGas = _optFcnGas"
            Assignment using operator =
               Type: uint256
               Source: "optInFcnMinGas = _optFcnGas"
              Identifier optInFcnMinGas
                 Type: uint256
                 Source: "optInFcnMinGas"
              Identifier _optFcnGas
                 Type: uint256
                 Source: "_optFcnGas"
  FunctionDefinition "checkDividends" - public - const
     Source: "function checkDividends(address _addr) constant returns(uint _amount)\r\n        {\r\n                if (holderAccounts[_addr].alloced) {\r\n                   //don't call calcCurPointsForAcct here, cuz this is a constant fcn\r\n                   uint _currentPoints = holderAccounts[_addr].currentPoints +\r\n                        ((TotalFeesReceived - holderAccounts[_addr].lastSnapshot) * holderAccounts[_addr].tokens);\r\n                   _amount = _currentPoints / NewTokenSupply;\r\n\r\n                // low balance? let him see it -Etansky\r\n                  // if (_amount <= payoutThreshold) {\r\n                  //    _amount = 0;\r\n                  // }\r\n\r\n                }\r\n        }"
    ParameterList
       Gas costs: 0
       Source: "(address _addr)"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint _amount)"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint _amount"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n                if (holderAccounts[_addr].alloced) {\r\n                   //don't call calcCurPointsForAcct here, cuz this is a constant fcn\r\n                   uint _currentPoints = holderAccounts[_addr].currentPoints +\r\n                        ((TotalFeesReceived - holderAccounts[_addr].lastSnapshot) * holderAccounts[_addr].tokens);\r\n                   _amount = _currentPoints / NewTokenSupply;\r\n\r\n                // low balance? let him see it -Etansky\r\n                  // if (_amount <= payoutThreshold) {\r\n                  //    _amount = 0;\r\n                  // }\r\n\r\n                }\r\n        }"
      IfStatement
         Source: "if (holderAccounts[_addr].alloced) {\r\n                   //don't call calcCurPointsForAcct here, cuz this is a constant fcn\r\n                   uint _currentPoints = holderAccounts[_addr].currentPoints +\r\n                        ((TotalFeesReceived - holderAccounts[_addr].lastSnapshot) * holderAccounts[_addr].tokens);\r\n                   _amount = _currentPoints / NewTokenSupply;\r\n\r\n                // low balance? let him see it -Etansky\r\n                  // if (_amount <= payoutThreshold) {\r\n                  //    _amount = 0;\r\n                  // }\r\n\r\n                }"
        MemberAccess to member alloced
           Type: bool
           Gas costs: 341
           Source: "holderAccounts[_addr].alloced"
          IndexAccess
             Type: struct E4Lava.tokenAccount storage ref
             Source: "holderAccounts[_addr]"
            Identifier holderAccounts
               Type: mapping(address => struct E4Lava.tokenAccount storage ref)
               Source: "holderAccounts"
            Identifier _addr
               Type: address
               Source: "_addr"
        Block
           Source: "{\r\n                   //don't call calcCurPointsForAcct here, cuz this is a constant fcn\r\n                   uint _currentPoints = holderAccounts[_addr].currentPoints +\r\n                        ((TotalFeesReceived - holderAccounts[_addr].lastSnapshot) * holderAccounts[_addr].tokens);\r\n                   _amount = _currentPoints / NewTokenSupply;\r\n\r\n                // low balance? let him see it -Etansky\r\n                  // if (_amount <= payoutThreshold) {\r\n                  //    _amount = 0;\r\n                  // }\r\n\r\n                }"
          VariableDeclarationStatement
             Gas costs: 1125
             Source: "uint _currentPoints = holderAccounts[_addr].currentPoints +\r\n                        ((TotalFeesReceived - holderAccounts[_addr].lastSnapshot) * holderAccounts[_addr].tokens)"
            VariableDeclaration "_currentPoints"
               Type: uint256
               Source: "uint _currentPoints"
              ElementaryTypeName uint
                 Source: "uint"
            BinaryOperation using operator +
               Type: uint256
               Source: "holderAccounts[_addr].currentPoints +\r\n                        ((TotalFeesReceived - holderAccounts[_addr].lastSnapshot) * holderAccounts[_addr].tokens)"
              MemberAccess to member currentPoints
                 Type: uint256
                 Source: "holderAccounts[_addr].currentPoints"
                IndexAccess
                   Type: struct E4Lava.tokenAccount storage ref
                   Source: "holderAccounts[_addr]"
                  Identifier holderAccounts
                     Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                     Source: "holderAccounts"
                  Identifier _addr
                     Type: address
                     Source: "_addr"
              TupleExpression
                 Type: uint256
                 Source: "((TotalFeesReceived - holderAccounts[_addr].lastSnapshot) * holderAccounts[_addr].tokens)"
                BinaryOperation using operator *
                   Type: uint256
                   Source: "(TotalFeesReceived - holderAccounts[_addr].lastSnapshot) * holderAccounts[_addr].tokens"
                  TupleExpression
                     Type: uint256
                     Source: "(TotalFeesReceived - holderAccounts[_addr].lastSnapshot)"
                    BinaryOperation using operator -
                       Type: uint256
                       Source: "TotalFeesReceived - holderAccounts[_addr].lastSnapshot"
                      Identifier TotalFeesReceived
                         Type: uint256
                         Source: "TotalFeesReceived"
                      MemberAccess to member lastSnapshot
                         Type: uint256
                         Source: "holderAccounts[_addr].lastSnapshot"
                        IndexAccess
                           Type: struct E4Lava.tokenAccount storage ref
                           Source: "holderAccounts[_addr]"
                          Identifier holderAccounts
                             Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                             Source: "holderAccounts"
                          Identifier _addr
                             Type: address
                             Source: "_addr"
                  MemberAccess to member tokens
                     Type: uint256
                     Source: "holderAccounts[_addr].tokens"
                    IndexAccess
                       Type: struct E4Lava.tokenAccount storage ref
                       Source: "holderAccounts[_addr]"
                      Identifier holderAccounts
                         Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                         Source: "holderAccounts"
                      Identifier _addr
                         Type: address
                         Source: "_addr"
          ExpressionStatement
             Gas costs: 36
             Source: "_amount = _currentPoints / NewTokenSupply"
            Assignment using operator =
               Type: uint256
               Source: "_amount = _currentPoints / NewTokenSupply"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
              BinaryOperation using operator /
                 Type: uint256
                 Source: "_currentPoints / NewTokenSupply"
                Identifier _currentPoints
                   Type: uint256
                   Source: "_currentPoints"
                Identifier NewTokenSupply
                   Type: uint256
                   Source: "NewTokenSupply"
  FunctionDefinition "changeOwner" - public
     Source: "function changeOwner(address _addr)\r\n        {\r\n                if (msg.sender != owner\r\n                        || settingsState == SettingStateValue.lockedRelease)\r\n                         throw;\r\n                owner = _addr;\r\n        }"
    ParameterList
       Gas costs: 0
       Source: "(address _addr)"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n                if (msg.sender != owner\r\n                        || settingsState == SettingStateValue.lockedRelease)\r\n                         throw;\r\n                owner = _addr;\r\n        }"
      IfStatement
         Source: "if (msg.sender != owner\r\n                        || settingsState == SettingStateValue.lockedRelease)\r\n                         throw"
        BinaryOperation using operator ||
           Type: bool
           Gas costs: 575
           Source: "msg.sender != owner\r\n                        || settingsState == SettingStateValue.lockedRelease"
          BinaryOperation using operator !=
             Type: bool
             Source: "msg.sender != owner"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier owner
               Type: address
               Source: "owner"
          BinaryOperation using operator ==
             Type: bool
             Source: "settingsState == SettingStateValue.lockedRelease"
            Identifier settingsState
               Type: enum E4Lava.SettingStateValue
               Source: "settingsState"
            MemberAccess to member lockedRelease
               Type: enum E4Lava.SettingStateValue
               Source: "SettingStateValue.lockedRelease"
              Identifier SettingStateValue
                 Type: type(enum E4Lava.SettingStateValue)
                 Source: "SettingStateValue"
        Throw
           Gas costs: 6
           Source: "throw"
      ExpressionStatement
         Gas costs: 20267
         Source: "owner = _addr"
        Assignment using operator =
           Type: address
           Source: "owner = _addr"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier _addr
             Type: address
             Source: "_addr"
  FunctionDefinition "setDeveloper" - public
     Source: "function setDeveloper(address _addr)\r\n        {\r\n                if (msg.sender != owner\r\n                        || settingsState == SettingStateValue.lockedRelease)\r\n                         throw;\r\n                developers = _addr;\r\n        }"
    ParameterList
       Gas costs: 0
       Source: "(address _addr)"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n                if (msg.sender != owner\r\n                        || settingsState == SettingStateValue.lockedRelease)\r\n                         throw;\r\n                developers = _addr;\r\n        }"
      IfStatement
         Source: "if (msg.sender != owner\r\n                        || settingsState == SettingStateValue.lockedRelease)\r\n                         throw"
        BinaryOperation using operator ||
           Type: bool
           Gas costs: 575
           Source: "msg.sender != owner\r\n                        || settingsState == SettingStateValue.lockedRelease"
          BinaryOperation using operator !=
             Type: bool
             Source: "msg.sender != owner"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier owner
               Type: address
               Source: "owner"
          BinaryOperation using operator ==
             Type: bool
             Source: "settingsState == SettingStateValue.lockedRelease"
            Identifier settingsState
               Type: enum E4Lava.SettingStateValue
               Source: "settingsState"
            MemberAccess to member lockedRelease
               Type: enum E4Lava.SettingStateValue
               Source: "SettingStateValue.lockedRelease"
              Identifier SettingStateValue
                 Type: type(enum E4Lava.SettingStateValue)
                 Source: "SettingStateValue"
        Throw
           Gas costs: 6
           Source: "throw"
      ExpressionStatement
         Gas costs: 20267
         Source: "developers = _addr"
        Assignment using operator =
           Type: address
           Source: "developers = _addr"
          Identifier developers
             Type: address
             Source: "developers"
          Identifier _addr
             Type: address
             Source: "_addr"
  FunctionDefinition "setOldE4" - public
     Source: "function setOldE4(address _oldE4, address _oldE4Recyle)\r\n        {\r\n                if (msg.sender != owner\r\n                        || settingsState == SettingStateValue.lockedRelease)\r\n                         throw;\r\n                oldE4 = _oldE4;\r\n                oldE4RecycleBin = _oldE4Recyle;\r\n        }"
    ParameterList
       Gas costs: 0
       Source: "(address _oldE4, address _oldE4Recyle)"
      VariableDeclaration "_oldE4"
         Type: address
         Source: "address _oldE4"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_oldE4Recyle"
         Type: address
         Source: "address _oldE4Recyle"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n                if (msg.sender != owner\r\n                        || settingsState == SettingStateValue.lockedRelease)\r\n                         throw;\r\n                oldE4 = _oldE4;\r\n                oldE4RecycleBin = _oldE4Recyle;\r\n        }"
      IfStatement
         Source: "if (msg.sender != owner\r\n                        || settingsState == SettingStateValue.lockedRelease)\r\n                         throw"
        BinaryOperation using operator ||
           Type: bool
           Gas costs: 575
           Source: "msg.sender != owner\r\n                        || settingsState == SettingStateValue.lockedRelease"
          BinaryOperation using operator !=
             Type: bool
             Source: "msg.sender != owner"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier owner
               Type: address
               Source: "owner"
          BinaryOperation using operator ==
             Type: bool
             Source: "settingsState == SettingStateValue.lockedRelease"
            Identifier settingsState
               Type: enum E4Lava.SettingStateValue
               Source: "settingsState"
            MemberAccess to member lockedRelease
               Type: enum E4Lava.SettingStateValue
               Source: "SettingStateValue.lockedRelease"
              Identifier SettingStateValue
                 Type: type(enum E4Lava.SettingStateValue)
                 Source: "SettingStateValue"
        Throw
           Gas costs: 6
           Source: "throw"
      ExpressionStatement
         Gas costs: 20267
         Source: "oldE4 = _oldE4"
        Assignment using operator =
           Type: address
           Source: "oldE4 = _oldE4"
          Identifier oldE4
             Type: address
             Source: "oldE4"
          Identifier _oldE4
             Type: address
             Source: "_oldE4"
      ExpressionStatement
         Gas costs: 20267
         Source: "oldE4RecycleBin = _oldE4Recyle"
        Assignment using operator =
           Type: address
           Source: "oldE4RecycleBin = _oldE4Recyle"
          Identifier oldE4RecycleBin
             Type: address
             Source: "oldE4RecycleBin"
          Identifier _oldE4Recyle
             Type: address
             Source: "_oldE4Recyle"
  FunctionDefinition "getAccountInfo" - public - const
     Source: "function getAccountInfo(address _addr) constant returns(uint _tokens, uint _snapshot, uint _points)\r\n        {\r\n                _tokens = holderAccounts[_addr].tokens;\r\n                _snapshot = holderAccounts[_addr].lastSnapshot;\r\n                _points = holderAccounts[_addr].currentPoints;\r\n        }"
    ParameterList
       Gas costs: 0
       Source: "(address _addr)"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 9
       Source: "(uint _tokens, uint _snapshot, uint _points)"
      VariableDeclaration "_tokens"
         Type: uint256
         Source: "uint _tokens"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_snapshot"
         Type: uint256
         Source: "uint _snapshot"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_points"
         Type: uint256
         Source: "uint _points"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n                _tokens = holderAccounts[_addr].tokens;\r\n                _snapshot = holderAccounts[_addr].lastSnapshot;\r\n                _points = holderAccounts[_addr].currentPoints;\r\n        }"
      ExpressionStatement
         Gas costs: 310
         Source: "_tokens = holderAccounts[_addr].tokens"
        Assignment using operator =
           Type: uint256
           Source: "_tokens = holderAccounts[_addr].tokens"
          Identifier _tokens
             Type: uint256
             Source: "_tokens"
          MemberAccess to member tokens
             Type: uint256
             Source: "holderAccounts[_addr].tokens"
            IndexAccess
               Type: struct E4Lava.tokenAccount storage ref
               Source: "holderAccounts[_addr]"
              Identifier holderAccounts
                 Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                 Source: "holderAccounts"
              Identifier _addr
                 Type: address
                 Source: "_addr"
      ExpressionStatement
         Gas costs: 304
         Source: "_snapshot = holderAccounts[_addr].lastSnapshot"
        Assignment using operator =
           Type: uint256
           Source: "_snapshot = holderAccounts[_addr].lastSnapshot"
          Identifier _snapshot
             Type: uint256
             Source: "_snapshot"
          MemberAccess to member lastSnapshot
             Type: uint256
             Source: "holderAccounts[_addr].lastSnapshot"
            IndexAccess
               Type: struct E4Lava.tokenAccount storage ref
               Source: "holderAccounts[_addr]"
              Identifier holderAccounts
                 Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                 Source: "holderAccounts"
              Identifier _addr
                 Type: address
                 Source: "_addr"
      ExpressionStatement
         Gas costs: 304
         Source: "_points = holderAccounts[_addr].currentPoints"
        Assignment using operator =
           Type: uint256
           Source: "_points = holderAccounts[_addr].currentPoints"
          Identifier _points
             Type: uint256
             Source: "_points"
          MemberAccess to member currentPoints
             Type: uint256
             Source: "holderAccounts[_addr].currentPoints"
            IndexAccess
               Type: struct E4Lava.tokenAccount storage ref
               Source: "holderAccounts[_addr]"
              Identifier holderAccounts
                 Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                 Source: "holderAccounts"
              Identifier _addr
                 Type: address
                 Source: "_addr"
  FunctionDefinition "haraKiri" - public
     Source: "function haraKiri()\r\n        {\r\n                if (settingsState != SettingStateValue.debug)\r\n                        throw;\r\n                if (msg.sender != owner)\r\n                         throw;\r\n                suicide(developers);\r\n        }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n                if (settingsState != SettingStateValue.debug)\r\n                        throw;\r\n                if (msg.sender != owner)\r\n                         throw;\r\n                suicide(developers);\r\n        }"
      IfStatement
         Source: "if (settingsState != SettingStateValue.debug)\r\n                        throw"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 300
           Source: "settingsState != SettingStateValue.debug"
          Identifier settingsState
             Type: enum E4Lava.SettingStateValue
             Source: "settingsState"
          MemberAccess to member debug
             Type: enum E4Lava.SettingStateValue
             Source: "SettingStateValue.debug"
            Identifier SettingStateValue
               Type: type(enum E4Lava.SettingStateValue)
               Source: "SettingStateValue"
        Throw
           Gas costs: 6
           Source: "throw"
      IfStatement
         Source: "if (msg.sender != owner)\r\n                         throw"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 259
           Source: "msg.sender != owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier owner
             Type: address
             Source: "owner"
        Throw
           Gas costs: 6
           Source: "throw"
      ExpressionStatement
         Gas costs: 30245
         Source: "suicide(developers)"
        FunctionCall
           Type: tuple()
           Source: "suicide(developers)"
          Identifier suicide
             Type: function (address)
             Source: "suicide"
          Identifier developers
             Type: address
             Source: "developers"
  FunctionDefinition "optInFromClassic" - public
     Source: "function optInFromClassic() public\r\n        {\r\n                if (oldE4 == address(0)) {\r\n                        StatEvent(\"config err\");\r\n                        return;\r\n                }\r\n                // 1. check balance of msg.sender in old contract.\r\n                address nrequester = msg.sender;\r\n\r\n                // 2. make sure account not already allocd (in fact, it's ok if it's allocd, so long\r\n                // as it is empty now. the reason for this check is cuz we are going to credit him with\r\n                // dividends, according to his token count, from the begin of time.\r\n                if (holderAccounts[nrequester].tokens != 0) {\r\n                        StatEvent(\"Account has already has tokens!\");\r\n                        return;\r\n                }\r\n\r\n                // 3. check his tok balance\r\n                Token iclassic = Token(oldE4);\r\n                uint _toks = iclassic.balanceOf(nrequester);\r\n                if (_toks == 0) {\r\n                        StatEvent(\"Nothing to do\");\r\n                        return;\r\n                }\r\n\r\n                // must be 100 percent of holdings\r\n                if (iclassic.allowance(nrequester, address(this)) < _toks) {\r\n                        StatEvent(\"Please approve this contract to transfer\");\r\n                        return;\r\n                }\r\n\r\n                // 4. before we do the transfer, make sure that we have at least enough gas for the\r\n                // transfer plus the remainder of this fcn.\r\n                if (msg.gas < optInXferGas + optInFcnMinGas)\r\n                        throw;\r\n\r\n                // 5. transfer his old toks to recyle bin\r\n                iclassic.transferFrom.gas(optInXferGas)(nrequester, oldE4RecycleBin, _toks);\r\n\r\n                // todo, error check?\r\n                if (iclassic.balanceOf(nrequester) == 0) {\r\n                        // success, add the account, set the tokens, set snapshot to zero\r\n                        if (!holderAccounts[nrequester].alloced)\r\n                                addAccount(nrequester);\r\n                        holderAccounts[nrequester].tokens = _toks * NewTokensPerOrigToken;\r\n                        holderAccounts[nrequester].lastSnapshot = 0;\r\n                        calcCurPointsForAcct(nrequester);\r\n                        numToksSwitchedOver += _toks;\r\n                        // no need to decrement points from a \"holding account\"\r\n                        // b/c there is no need to keep it.\r\n                        StatEvent(\"Success Switched Over\");\r\n                } else\r\n                        StatEvent(\"Transfer Error! please contact Dev team!\");\r\n\r\n\r\n        }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n                if (oldE4 == address(0)) {\r\n                        StatEvent(\"config err\");\r\n                        return;\r\n                }\r\n                // 1. check balance of msg.sender in old contract.\r\n                address nrequester = msg.sender;\r\n\r\n                // 2. make sure account not already allocd (in fact, it's ok if it's allocd, so long\r\n                // as it is empty now. the reason for this check is cuz we are going to credit him with\r\n                // dividends, according to his token count, from the begin of time.\r\n                if (holderAccounts[nrequester].tokens != 0) {\r\n                        StatEvent(\"Account has already has tokens!\");\r\n                        return;\r\n                }\r\n\r\n                // 3. check his tok balance\r\n                Token iclassic = Token(oldE4);\r\n                uint _toks = iclassic.balanceOf(nrequester);\r\n                if (_toks == 0) {\r\n                        StatEvent(\"Nothing to do\");\r\n                        return;\r\n                }\r\n\r\n                // must be 100 percent of holdings\r\n                if (iclassic.allowance(nrequester, address(this)) < _toks) {\r\n                        StatEvent(\"Please approve this contract to transfer\");\r\n                        return;\r\n                }\r\n\r\n                // 4. before we do the transfer, make sure that we have at least enough gas for the\r\n                // transfer plus the remainder of this fcn.\r\n                if (msg.gas < optInXferGas + optInFcnMinGas)\r\n                        throw;\r\n\r\n                // 5. transfer his old toks to recyle bin\r\n                iclassic.transferFrom.gas(optInXferGas)(nrequester, oldE4RecycleBin, _toks);\r\n\r\n                // todo, error check?\r\n                if (iclassic.balanceOf(nrequester) == 0) {\r\n                        // success, add the account, set the tokens, set snapshot to zero\r\n                        if (!holderAccounts[nrequester].alloced)\r\n                                addAccount(nrequester);\r\n                        holderAccounts[nrequester].tokens = _toks * NewTokensPerOrigToken;\r\n                        holderAccounts[nrequester].lastSnapshot = 0;\r\n                        calcCurPointsForAcct(nrequester);\r\n                        numToksSwitchedOver += _toks;\r\n                        // no need to decrement points from a \"holding account\"\r\n                        // b/c there is no need to keep it.\r\n                        StatEvent(\"Success Switched Over\");\r\n                } else\r\n                        StatEvent(\"Transfer Error! please contact Dev team!\");\r\n\r\n\r\n        }"
      IfStatement
         Source: "if (oldE4 == address(0)) {\r\n                        StatEvent(\"config err\");\r\n                        return;\r\n                }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 257
           Source: "oldE4 == address(0)"
          Identifier oldE4
             Type: address
             Source: "oldE4"
          FunctionCall
             Type: address
             Source: "address(0)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
        Block
           Source: "{\r\n                        StatEvent(\"config err\");\r\n                        return;\r\n                }"
          ExpressionStatement
             Gas costs: [???]
             Source: "StatEvent(\"config err\")"
            FunctionCall
               Type: tuple()
               Source: "StatEvent(\"config err\")"
              Identifier StatEvent
                 Type: function (string memory)
                 Source: "StatEvent"
              Literal, token: [no token] value: config err
                 Type: literal_string "config err"
                 Source: "\"config err\""
          Return
             Gas costs: 11
             Source: "return;"
      VariableDeclarationStatement
         Gas costs: 10
         Source: "address nrequester = msg.sender"
        VariableDeclaration "nrequester"
           Type: address
           Source: "address nrequester"
          ElementaryTypeName address
             Source: "address"
        MemberAccess to member sender
           Type: address
           Source: "msg.sender"
          Identifier msg
             Type: msg
             Source: "msg"
      IfStatement
         Source: "if (holderAccounts[nrequester].tokens != 0) {\r\n                        StatEvent(\"Account has already has tokens!\");\r\n                        return;\r\n                }"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 314
           Source: "holderAccounts[nrequester].tokens != 0"
          MemberAccess to member tokens
             Type: uint256
             Source: "holderAccounts[nrequester].tokens"
            IndexAccess
               Type: struct E4Lava.tokenAccount storage ref
               Source: "holderAccounts[nrequester]"
              Identifier holderAccounts
                 Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                 Source: "holderAccounts"
              Identifier nrequester
                 Type: address
                 Source: "nrequester"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n                        StatEvent(\"Account has already has tokens!\");\r\n                        return;\r\n                }"
          ExpressionStatement
             Gas costs: [???]
             Source: "StatEvent(\"Account has already has tokens!\")"
            FunctionCall
               Type: tuple()
               Source: "StatEvent(\"Account has already has tokens!\")"
              Identifier StatEvent
                 Type: function (string memory)
                 Source: "StatEvent"
              Literal, token: [no token] value: Account has already has tokens!
                 Type: literal_string "Account has already has tokens!"
                 Source: "\"Account has already has tokens!\""
          Return
             Gas costs: 11
             Source: "return;"
      VariableDeclarationStatement
         Gas costs: 247
         Source: "Token iclassic = Token(oldE4)"
        VariableDeclaration "iclassic"
           Type: contract Token
           Source: "Token iclassic"
          UserDefinedTypeName "Token"
             Source: "Token"
        FunctionCall
           Type: contract Token
           Source: "Token(oldE4)"
          Identifier Token
             Type: type(contract Token)
             Source: "Token"
          Identifier oldE4
             Type: address
             Source: "oldE4"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "uint _toks = iclassic.balanceOf(nrequester)"
        VariableDeclaration "_toks"
           Type: uint256
           Source: "uint _toks"
          ElementaryTypeName uint
             Source: "uint"
        FunctionCall
           Type: uint256
           Source: "iclassic.balanceOf(nrequester)"
          MemberAccess to member balanceOf
             Type: function (address) view external returns (uint256)
             Source: "iclassic.balanceOf"
            Identifier iclassic
               Type: contract Token
               Source: "iclassic"
          Identifier nrequester
             Type: address
             Source: "nrequester"
      IfStatement
         Source: "if (_toks == 0) {\r\n                        StatEvent(\"Nothing to do\");\r\n                        return;\r\n                }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "_toks == 0"
          Identifier _toks
             Type: uint256
             Source: "_toks"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n                        StatEvent(\"Nothing to do\");\r\n                        return;\r\n                }"
          ExpressionStatement
             Gas costs: [???]
             Source: "StatEvent(\"Nothing to do\")"
            FunctionCall
               Type: tuple()
               Source: "StatEvent(\"Nothing to do\")"
              Identifier StatEvent
                 Type: function (string memory)
                 Source: "StatEvent"
              Literal, token: [no token] value: Nothing to do
                 Type: literal_string "Nothing to do"
                 Source: "\"Nothing to do\""
          Return
             Gas costs: 11
             Source: "return;"
      IfStatement
         Source: "if (iclassic.allowance(nrequester, address(this)) < _toks) {\r\n                        StatEvent(\"Please approve this contract to transfer\");\r\n                        return;\r\n                }"
        BinaryOperation using operator <
           Type: bool
           Gas costs: [???]
           Source: "iclassic.allowance(nrequester, address(this)) < _toks"
          FunctionCall
             Type: uint256
             Source: "iclassic.allowance(nrequester, address(this))"
            MemberAccess to member allowance
               Type: function (address,address) view external returns (uint256)
               Source: "iclassic.allowance"
              Identifier iclassic
                 Type: contract Token
                 Source: "iclassic"
            Identifier nrequester
               Type: address
               Source: "nrequester"
            FunctionCall
               Type: address
               Source: "address(this)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Identifier this
                 Type: contract E4Lava
                 Source: "this"
          Identifier _toks
             Type: uint256
             Source: "_toks"
        Block
           Source: "{\r\n                        StatEvent(\"Please approve this contract to transfer\");\r\n                        return;\r\n                }"
          ExpressionStatement
             Gas costs: [???]
             Source: "StatEvent(\"Please approve this contract to transfer\")"
            FunctionCall
               Type: tuple()
               Source: "StatEvent(\"Please approve this contract to transfer\")"
              Identifier StatEvent
                 Type: function (string memory)
                 Source: "StatEvent"
              Literal, token: [no token] value: Please approve this contract to transfer
                 Type: literal_string "Please approve this contract to transfer"
                 Source: "\"Please approve this contract to transfer\""
          Return
             Gas costs: 11
             Source: "return;"
      IfStatement
         Source: "if (msg.gas < optInXferGas + optInFcnMinGas)\r\n                        throw"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 414
           Source: "msg.gas < optInXferGas + optInFcnMinGas"
          MemberAccess to member gas
             Type: uint256
             Source: "msg.gas"
            Identifier msg
               Type: msg
               Source: "msg"
          BinaryOperation using operator +
             Type: uint256
             Source: "optInXferGas + optInFcnMinGas"
            Identifier optInXferGas
               Type: uint256
               Source: "optInXferGas"
            Identifier optInFcnMinGas
               Type: uint256
               Source: "optInFcnMinGas"
        Throw
           Gas costs: 6
           Source: "throw"
      ExpressionStatement
         Gas costs: [???]
         Source: "iclassic.transferFrom.gas(optInXferGas)(nrequester, oldE4RecycleBin, _toks)"
        FunctionCall
           Type: bool
           Source: "iclassic.transferFrom.gas(optInXferGas)(nrequester, oldE4RecycleBin, _toks)"
          FunctionCall
             Type: function (address,address,uint256) external returns (bool)
             Source: "iclassic.transferFrom.gas(optInXferGas)"
            MemberAccess to member gas
               Type: function (uint256) returns (function (address,address,uint256) external returns (bool))
               Source: "iclassic.transferFrom.gas"
              MemberAccess to member transferFrom
                 Type: function (address,address,uint256) external returns (bool)
                 Source: "iclassic.transferFrom"
                Identifier iclassic
                   Type: contract Token
                   Source: "iclassic"
            Identifier optInXferGas
               Type: uint256
               Source: "optInXferGas"
          Identifier nrequester
             Type: address
             Source: "nrequester"
          Identifier oldE4RecycleBin
             Type: address
             Source: "oldE4RecycleBin"
          Identifier _toks
             Type: uint256
             Source: "_toks"
      IfStatement
         Source: "if (iclassic.balanceOf(nrequester) == 0) {\r\n                        // success, add the account, set the tokens, set snapshot to zero\r\n                        if (!holderAccounts[nrequester].alloced)\r\n                                addAccount(nrequester);\r\n                        holderAccounts[nrequester].tokens = _toks * NewTokensPerOrigToken;\r\n                        holderAccounts[nrequester].lastSnapshot = 0;\r\n                        calcCurPointsForAcct(nrequester);\r\n                        numToksSwitchedOver += _toks;\r\n                        // no need to decrement points from a \"holding account\"\r\n                        // b/c there is no need to keep it.\r\n                        StatEvent(\"Success Switched Over\");\r\n                } else\r\n                        StatEvent(\"Transfer Error! please contact Dev team!\")"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: [???]
           Source: "iclassic.balanceOf(nrequester) == 0"
          FunctionCall
             Type: uint256
             Source: "iclassic.balanceOf(nrequester)"
            MemberAccess to member balanceOf
               Type: function (address) view external returns (uint256)
               Source: "iclassic.balanceOf"
              Identifier iclassic
                 Type: contract Token
                 Source: "iclassic"
            Identifier nrequester
               Type: address
               Source: "nrequester"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n                        // success, add the account, set the tokens, set snapshot to zero\r\n                        if (!holderAccounts[nrequester].alloced)\r\n                                addAccount(nrequester);\r\n                        holderAccounts[nrequester].tokens = _toks * NewTokensPerOrigToken;\r\n                        holderAccounts[nrequester].lastSnapshot = 0;\r\n                        calcCurPointsForAcct(nrequester);\r\n                        numToksSwitchedOver += _toks;\r\n                        // no need to decrement points from a \"holding account\"\r\n                        // b/c there is no need to keep it.\r\n                        StatEvent(\"Success Switched Over\");\r\n                }"
          IfStatement
             Source: "if (!holderAccounts[nrequester].alloced)\r\n                                addAccount(nrequester)"
            UnaryOperation (prefix) !
               Type: bool
               Gas costs: 344
               Source: "!holderAccounts[nrequester].alloced"
              MemberAccess to member alloced
                 Type: bool
                 Source: "holderAccounts[nrequester].alloced"
                IndexAccess
                   Type: struct E4Lava.tokenAccount storage ref
                   Source: "holderAccounts[nrequester]"
                  Identifier holderAccounts
                     Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                     Source: "holderAccounts"
                  Identifier nrequester
                     Type: address
                     Source: "nrequester"
            ExpressionStatement
               Gas costs: 18
               Source: "addAccount(nrequester)"
              FunctionCall
                 Type: tuple()
                 Source: "addAccount(nrequester)"
                Identifier addAccount
                   Type: function (address)
                   Source: "addAccount"
                Identifier nrequester
                   Type: address
                   Source: "nrequester"
          ExpressionStatement
             Gas costs: 20121
             Source: "holderAccounts[nrequester].tokens = _toks * NewTokensPerOrigToken"
            Assignment using operator =
               Type: uint256
               Source: "holderAccounts[nrequester].tokens = _toks * NewTokensPerOrigToken"
              MemberAccess to member tokens
                 Type: uint256
                 Source: "holderAccounts[nrequester].tokens"
                IndexAccess
                   Type: struct E4Lava.tokenAccount storage ref
                   Source: "holderAccounts[nrequester]"
                  Identifier holderAccounts
                     Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                     Source: "holderAccounts"
                  Identifier nrequester
                     Type: address
                     Source: "nrequester"
              BinaryOperation using operator *
                 Type: uint256
                 Source: "_toks * NewTokensPerOrigToken"
                Identifier _toks
                   Type: uint256
                   Source: "_toks"
                Identifier NewTokensPerOrigToken
                   Type: uint256
                   Source: "NewTokensPerOrigToken"
          ExpressionStatement
             Gas costs: 5110
             Source: "holderAccounts[nrequester].lastSnapshot = 0"
            Assignment using operator =
               Type: uint256
               Source: "holderAccounts[nrequester].lastSnapshot = 0"
              MemberAccess to member lastSnapshot
                 Type: uint256
                 Source: "holderAccounts[nrequester].lastSnapshot"
                IndexAccess
                   Type: struct E4Lava.tokenAccount storage ref
                   Source: "holderAccounts[nrequester]"
                  Identifier holderAccounts
                     Type: mapping(address => struct E4Lava.tokenAccount storage ref)
                     Source: "holderAccounts"
                  Identifier nrequester
                     Type: address
                     Source: "nrequester"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
          ExpressionStatement
             Gas costs: 18
             Source: "calcCurPointsForAcct(nrequester)"
            FunctionCall
               Type: tuple()
               Source: "calcCurPointsForAcct(nrequester)"
              Identifier calcCurPointsForAcct
                 Type: function (address)
                 Source: "calcCurPointsForAcct"
              Identifier nrequester
                 Type: address
                 Source: "nrequester"
          ExpressionStatement
             Gas costs: 20233
             Source: "numToksSwitchedOver += _toks"
            Assignment using operator +=
               Type: uint256
               Source: "numToksSwitchedOver += _toks"
              Identifier numToksSwitchedOver
                 Type: uint256
                 Source: "numToksSwitchedOver"
              Identifier _toks
                 Type: uint256
                 Source: "_toks"
          ExpressionStatement
             Gas costs: [???]
             Source: "StatEvent(\"Success Switched Over\")"
            FunctionCall
               Type: tuple()
               Source: "StatEvent(\"Success Switched Over\")"
              Identifier StatEvent
                 Type: function (string memory)
                 Source: "StatEvent"
              Literal, token: [no token] value: Success Switched Over
                 Type: literal_string "Success Switched Over"
                 Source: "\"Success Switched Over\""
        ExpressionStatement
           Gas costs: [???]
           Source: "StatEvent(\"Transfer Error! please contact Dev team!\")"
          FunctionCall
             Type: tuple()
             Source: "StatEvent(\"Transfer Error! please contact Dev team!\")"
            Identifier StatEvent
               Type: function (string memory)
               Source: "StatEvent"
            Literal, token: [no token] value: Transfer Error! please contact Dev team!
               Type: literal_string "Transfer Error! please contact Dev team!"
               Source: "\"Transfer Error! please contact Dev team!\""
