Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0xb340686da996b8b3d486b4d27e38e38500a9e926.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.17;"
ContractDefinition "SafeMath"
   Source: "contract SafeMath {\r\n    function safeAdd(uint x, uint y) pure internal returns(uint) {\r\n      uint z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint x, uint y) pure internal returns(uint) {\r\n      assert(x >= y);\r\n      uint z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint x, uint y) pure internal returns(uint) {\r\n      uint z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n\r\n    function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) constant public returns(uint8) {\r\n        uint256 genNum = uint256(block.blockhash(block.number-1)) + uint256(privateAddress);\r\n        return uint8(genNum % (maxRandom - min + 1)+min);\r\n    }\r\n}"
  FunctionDefinition "safeAdd"
     Source: "function safeAdd(uint x, uint y) pure internal returns(uint) {\r\n      uint z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint x, uint y)"
      VariableDeclaration "x"
         Type: uint256
         Source: "uint x"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "y"
         Type: uint256
         Source: "uint y"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n      uint z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint z = x + y"
        VariableDeclaration "z"
           Type: uint256
           Source: "uint z"
          ElementaryTypeName uint
             Source: "uint"
        BinaryOperation using operator +
           Type: uint256
           Source: "x + y"
          Identifier x
             Type: uint256
             Source: "x"
          Identifier y
             Type: uint256
             Source: "y"
      ExpressionStatement
         Gas costs: 0
         Source: "assert((z >= x) && (z >= y))"
        FunctionCall
           Type: tuple()
           Source: "assert((z >= x) && (z >= y))"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator &&
             Type: bool
             Source: "(z >= x) && (z >= y)"
            TupleExpression
               Type: bool
               Source: "(z >= x)"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "z >= x"
                Identifier z
                   Type: uint256
                   Source: "z"
                Identifier x
                   Type: uint256
                   Source: "x"
            TupleExpression
               Type: bool
               Source: "(z >= y)"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "z >= y"
                Identifier z
                   Type: uint256
                   Source: "z"
                Identifier y
                   Type: uint256
                   Source: "y"
      Return
         Gas costs: 0
         Source: "return z"
        Identifier z
           Type: uint256
           Source: "z"
  FunctionDefinition "safeSubtract"
     Source: "function safeSubtract(uint x, uint y) pure internal returns(uint) {\r\n      assert(x >= y);\r\n      uint z = x - y;\r\n      return z;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint x, uint y)"
      VariableDeclaration "x"
         Type: uint256
         Source: "uint x"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "y"
         Type: uint256
         Source: "uint y"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n      assert(x >= y);\r\n      uint z = x - y;\r\n      return z;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "assert(x >= y)"
        FunctionCall
           Type: tuple()
           Source: "assert(x >= y)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator >=
             Type: bool
             Source: "x >= y"
            Identifier x
               Type: uint256
               Source: "x"
            Identifier y
               Type: uint256
               Source: "y"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint z = x - y"
        VariableDeclaration "z"
           Type: uint256
           Source: "uint z"
          ElementaryTypeName uint
             Source: "uint"
        BinaryOperation using operator -
           Type: uint256
           Source: "x - y"
          Identifier x
             Type: uint256
             Source: "x"
          Identifier y
             Type: uint256
             Source: "y"
      Return
         Gas costs: 0
         Source: "return z"
        Identifier z
           Type: uint256
           Source: "z"
  FunctionDefinition "safeMult"
     Source: "function safeMult(uint x, uint y) pure internal returns(uint) {\r\n      uint z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint x, uint y)"
      VariableDeclaration "x"
         Type: uint256
         Source: "uint x"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "y"
         Type: uint256
         Source: "uint y"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n      uint z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint z = x * y"
        VariableDeclaration "z"
           Type: uint256
           Source: "uint z"
          ElementaryTypeName uint
             Source: "uint"
        BinaryOperation using operator *
           Type: uint256
           Source: "x * y"
          Identifier x
             Type: uint256
             Source: "x"
          Identifier y
             Type: uint256
             Source: "y"
      ExpressionStatement
         Gas costs: 0
         Source: "assert((x == 0)||(z/x == y))"
        FunctionCall
           Type: tuple()
           Source: "assert((x == 0)||(z/x == y))"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator ||
             Type: bool
             Source: "(x == 0)||(z/x == y)"
            TupleExpression
               Type: bool
               Source: "(x == 0)"
              BinaryOperation using operator ==
                 Type: bool
                 Source: "x == 0"
                Identifier x
                   Type: uint256
                   Source: "x"
                Literal, token: [no token] value: 0
                   Type: int_const 0
                   Source: "0"
            TupleExpression
               Type: bool
               Source: "(z/x == y)"
              BinaryOperation using operator ==
                 Type: bool
                 Source: "z/x == y"
                BinaryOperation using operator /
                   Type: uint256
                   Source: "z/x"
                  Identifier z
                     Type: uint256
                     Source: "z"
                  Identifier x
                     Type: uint256
                     Source: "x"
                Identifier y
                   Type: uint256
                   Source: "y"
      Return
         Gas costs: 0
         Source: "return z"
        Identifier z
           Type: uint256
           Source: "z"
  FunctionDefinition "getRandomNumber" - public - const
     Source: "function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) constant public returns(uint8) {\r\n        uint256 genNum = uint256(block.blockhash(block.number-1)) + uint256(privateAddress);\r\n        return uint8(genNum % (maxRandom - min + 1)+min);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint16 maxRandom, uint8 min, address privateAddress)"
      VariableDeclaration "maxRandom"
         Type: uint16
         Source: "uint16 maxRandom"
        ElementaryTypeName uint16
           Source: "uint16"
      VariableDeclaration "min"
         Type: uint8
         Source: "uint8 min"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "privateAddress"
         Type: address
         Source: "address privateAddress"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint8)"
      VariableDeclaration ""
         Type: uint8
         Source: "uint8"
        ElementaryTypeName uint8
           Source: "uint8"
    Block
       Source: "{\r\n        uint256 genNum = uint256(block.blockhash(block.number-1)) + uint256(privateAddress);\r\n        return uint8(genNum % (maxRandom - min + 1)+min);\r\n    }"
      VariableDeclarationStatement
         Gas costs: 59
         Source: "uint256 genNum = uint256(block.blockhash(block.number-1)) + uint256(privateAddress)"
        VariableDeclaration "genNum"
           Type: uint256
           Source: "uint256 genNum"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator +
           Type: uint256
           Source: "uint256(block.blockhash(block.number-1)) + uint256(privateAddress)"
          FunctionCall
             Type: uint256
             Source: "uint256(block.blockhash(block.number-1))"
            ElementaryTypeNameExpression uint256
               Type: type(uint256)
               Source: "uint256"
            FunctionCall
               Type: bytes32
               Source: "block.blockhash(block.number-1)"
              MemberAccess to member blockhash
                 Type: function (uint256) view returns (bytes32)
                 Source: "block.blockhash"
                Identifier block
                   Type: block
                   Source: "block"
              BinaryOperation using operator -
                 Type: uint256
                 Source: "block.number-1"
                MemberAccess to member number
                   Type: uint256
                   Source: "block.number"
                  Identifier block
                     Type: block
                     Source: "block"
                Literal, token: [no token] value: 1
                   Type: int_const 1
                   Source: "1"
          FunctionCall
             Type: uint256
             Source: "uint256(privateAddress)"
            ElementaryTypeNameExpression uint256
               Type: type(uint256)
               Source: "uint256"
            Identifier privateAddress
               Type: address
               Source: "privateAddress"
      Return
         Gas costs: 75
         Source: "return uint8(genNum % (maxRandom - min + 1)+min)"
        FunctionCall
           Type: uint8
           Source: "uint8(genNum % (maxRandom - min + 1)+min)"
          ElementaryTypeNameExpression uint8
             Type: type(uint8)
             Source: "uint8"
          BinaryOperation using operator +
             Type: uint256
             Source: "genNum % (maxRandom - min + 1)+min"
            BinaryOperation using operator %
               Type: uint256
               Source: "genNum % (maxRandom - min + 1)"
              Identifier genNum
                 Type: uint256
                 Source: "genNum"
              TupleExpression
                 Type: uint16
                 Source: "(maxRandom - min + 1)"
                BinaryOperation using operator +
                   Type: uint16
                   Source: "maxRandom - min + 1"
                  BinaryOperation using operator -
                     Type: uint16
                     Source: "maxRandom - min"
                    Identifier maxRandom
                       Type: uint16
                       Source: "maxRandom"
                    Identifier min
                       Type: uint8
                       Source: "min"
                  Literal, token: [no token] value: 1
                     Type: int_const 1
                     Source: "1"
            Identifier min
               Type: uint8
               Source: "min"
ContractDefinition "Enums"
   Gas costs: 0
   Source: "contract Enums {\r\n    enum ResultCode {\r\n        SUCCESS,\r\n        ERROR_CLASS_NOT_FOUND,\r\n        ERROR_LOW_BALANCE,\r\n        ERROR_SEND_FAIL,\r\n        ERROR_NOT_OWNER,\r\n        ERROR_NOT_ENOUGH_MONEY,\r\n        ERROR_INVALID_AMOUNT\r\n    }\r\n\r\n    enum AngelAura { \r\n        Blue, \r\n        Yellow, \r\n        Purple, \r\n        Orange, \r\n        Red, \r\n        Green \r\n    }\r\n}"
  EnumDefinition "ResultCode"
    EnumValue "SUCCESS"
    EnumValue "ERROR_CLASS_NOT_FOUND"
    EnumValue "ERROR_LOW_BALANCE"
    EnumValue "ERROR_SEND_FAIL"
    EnumValue "ERROR_NOT_OWNER"
    EnumValue "ERROR_NOT_ENOUGH_MONEY"
    EnumValue "ERROR_INVALID_AMOUNT"
  EnumDefinition "AngelAura"
    EnumValue "Blue"
    EnumValue "Yellow"
    EnumValue "Purple"
    EnumValue "Orange"
    EnumValue "Red"
    EnumValue "Green"
ContractDefinition "AccessControl"
   Source: "contract AccessControl {\r\n    address public creatorAddress;\r\n    uint16 public totalSeraphims = 0;\r\n    mapping (address => bool) public seraphims;\r\n\r\n    bool public isMaintenanceMode = true;\r\n \r\n    modifier onlyCREATOR() {\r\n        require(msg.sender == creatorAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlySERAPHIM() {\r\n        require(seraphims[msg.sender] == true);\r\n        _;\r\n    }\r\n    \r\n    modifier isContractActive {\r\n        require(!isMaintenanceMode);\r\n        _;\r\n    }\r\n    \r\n    // Constructor\r\n    function AccessControl() public {\r\n        creatorAddress = msg.sender;\r\n    }\r\n    \r\n\r\n    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {\r\n        if (seraphims[_newSeraphim] == false) {\r\n            seraphims[_newSeraphim] = true;\r\n            totalSeraphims += 1;\r\n        }\r\n    }\r\n    \r\n    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {\r\n        if (seraphims[_oldSeraphim] == true) {\r\n            seraphims[_oldSeraphim] = false;\r\n            totalSeraphims -= 1;\r\n        }\r\n    }\r\n\r\n    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {\r\n        isMaintenanceMode = _isMaintaining;\r\n    }\r\n\r\n  \r\n}"
  VariableDeclaration "creatorAddress"
     Type: address
     Gas costs: [???]
     Source: "address public creatorAddress"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "totalSeraphims"
     Type: uint16
     Gas costs: [???]
     Source: "uint16 public totalSeraphims = 0"
    ElementaryTypeName uint16
       Source: "uint16"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "seraphims"
     Type: mapping(address => bool)
     Gas costs: [???]
     Source: "mapping (address => bool) public seraphims"
    Mapping
       Source: "mapping (address => bool)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName bool
         Source: "bool"
  VariableDeclaration "isMaintenanceMode"
     Type: bool
     Gas costs: [???]
     Source: "bool public isMaintenanceMode = true"
    ElementaryTypeName bool
       Source: "bool"
    Literal, token: true value: true
       Type: bool
       Source: "true"
  ModifierDefinition "onlyCREATOR"
     Source: "modifier onlyCREATOR() {\r\n        require(msg.sender == creatorAddress);\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n        require(msg.sender == creatorAddress);\r\n        _;\r\n    }"
      ExpressionStatement
         Gas costs: 1128
         Source: "require(msg.sender == creatorAddress)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == creatorAddress)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == creatorAddress"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier creatorAddress
               Type: address
               Source: "creatorAddress"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "onlySERAPHIM"
     Source: "modifier onlySERAPHIM() {\r\n        require(seraphims[msg.sender] == true);\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n        require(seraphims[msg.sender] == true);\r\n        _;\r\n    }"
      ExpressionStatement
         Gas costs: 1890
         Source: "require(seraphims[msg.sender] == true)"
        FunctionCall
           Type: tuple()
           Source: "require(seraphims[msg.sender] == true)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "seraphims[msg.sender] == true"
            IndexAccess
               Type: bool
               Source: "seraphims[msg.sender]"
              Identifier seraphims
                 Type: mapping(address => bool)
                 Source: "seraphims"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Literal, token: true value: true
               Type: bool
               Source: "true"
      PlaceholderStatement
         Gas costs: 1
         Source: "_"
  ModifierDefinition "isContractActive"
     Source: "modifier isContractActive {\r\n        require(!isMaintenanceMode);\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(!isMaintenanceMode);\r\n        _;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "require(!isMaintenanceMode)"
        FunctionCall
           Type: tuple()
           Source: "require(!isMaintenanceMode)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!isMaintenanceMode"
            Identifier isMaintenanceMode
               Type: bool
               Source: "isMaintenanceMode"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "AccessControl" - public
     Source: "function AccessControl() public {\r\n        creatorAddress = msg.sender;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        creatorAddress = msg.sender;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "creatorAddress = msg.sender"
        Assignment using operator =
           Type: address
           Source: "creatorAddress = msg.sender"
          Identifier creatorAddress
             Type: address
             Source: "creatorAddress"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "addSERAPHIM" - public
     Source: "function addSERAPHIM(address _newSeraphim) onlyCREATOR public {\r\n        if (seraphims[_newSeraphim] == false) {\r\n            seraphims[_newSeraphim] = true;\r\n            totalSeraphims += 1;\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _newSeraphim)"
      VariableDeclaration "_newSeraphim"
         Type: address
         Source: "address _newSeraphim"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyCREATOR"
       Gas costs: 0
       Source: "onlyCREATOR"
      Identifier onlyCREATOR
         Type: modifier ()
         Source: "onlyCREATOR"
    Block
       Source: "{\r\n        if (seraphims[_newSeraphim] == false) {\r\n            seraphims[_newSeraphim] = true;\r\n            totalSeraphims += 1;\r\n        }\r\n    }"
      IfStatement
         Source: "if (seraphims[_newSeraphim] == false) {\r\n            seraphims[_newSeraphim] = true;\r\n            totalSeraphims += 1;\r\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 353
           Source: "seraphims[_newSeraphim] == false"
          IndexAccess
             Type: bool
             Source: "seraphims[_newSeraphim]"
            Identifier seraphims
               Type: mapping(address => bool)
               Source: "seraphims"
            Identifier _newSeraphim
               Type: address
               Source: "_newSeraphim"
          Literal, token: false value: false
             Type: bool
             Source: "false"
        Block
           Source: "{\r\n            seraphims[_newSeraphim] = true;\r\n            totalSeraphims += 1;\r\n        }"
          ExpressionStatement
             Gas costs: 20363
             Source: "seraphims[_newSeraphim] = true"
            Assignment using operator =
               Type: bool
               Source: "seraphims[_newSeraphim] = true"
              IndexAccess
                 Type: bool
                 Source: "seraphims[_newSeraphim]"
                Identifier seraphims
                   Type: mapping(address => bool)
                   Source: "seraphims"
                Identifier _newSeraphim
                   Type: address
                   Source: "_newSeraphim"
              Literal, token: true value: true
                 Type: bool
                 Source: "true"
          ExpressionStatement
             Gas costs: 20617
             Source: "totalSeraphims += 1"
            Assignment using operator +=
               Type: uint16
               Source: "totalSeraphims += 1"
              Identifier totalSeraphims
                 Type: uint16
                 Source: "totalSeraphims"
              Literal, token: [no token] value: 1
                 Type: int_const 1
                 Source: "1"
  FunctionDefinition "removeSERAPHIM" - public
     Source: "function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {\r\n        if (seraphims[_oldSeraphim] == true) {\r\n            seraphims[_oldSeraphim] = false;\r\n            totalSeraphims -= 1;\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _oldSeraphim)"
      VariableDeclaration "_oldSeraphim"
         Type: address
         Source: "address _oldSeraphim"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyCREATOR"
       Gas costs: 0
       Source: "onlyCREATOR"
      Identifier onlyCREATOR
         Type: modifier ()
         Source: "onlyCREATOR"
    Block
       Source: "{\r\n        if (seraphims[_oldSeraphim] == true) {\r\n            seraphims[_oldSeraphim] = false;\r\n            totalSeraphims -= 1;\r\n        }\r\n    }"
      IfStatement
         Source: "if (seraphims[_oldSeraphim] == true) {\r\n            seraphims[_oldSeraphim] = false;\r\n            totalSeraphims -= 1;\r\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 353
           Source: "seraphims[_oldSeraphim] == true"
          IndexAccess
             Type: bool
             Source: "seraphims[_oldSeraphim]"
            Identifier seraphims
               Type: mapping(address => bool)
               Source: "seraphims"
            Identifier _oldSeraphim
               Type: address
               Source: "_oldSeraphim"
          Literal, token: true value: true
             Type: bool
             Source: "true"
        Block
           Source: "{\r\n            seraphims[_oldSeraphim] = false;\r\n            totalSeraphims -= 1;\r\n        }"
          ExpressionStatement
             Gas costs: 20363
             Source: "seraphims[_oldSeraphim] = false"
            Assignment using operator =
               Type: bool
               Source: "seraphims[_oldSeraphim] = false"
              IndexAccess
                 Type: bool
                 Source: "seraphims[_oldSeraphim]"
                Identifier seraphims
                   Type: mapping(address => bool)
                   Source: "seraphims"
                Identifier _oldSeraphim
                   Type: address
                   Source: "_oldSeraphim"
              Literal, token: false value: false
                 Type: bool
                 Source: "false"
          ExpressionStatement
             Gas costs: 20617
             Source: "totalSeraphims -= 1"
            Assignment using operator -=
               Type: uint16
               Source: "totalSeraphims -= 1"
              Identifier totalSeraphims
                 Type: uint16
                 Source: "totalSeraphims"
              Literal, token: [no token] value: 1
                 Type: int_const 1
                 Source: "1"
  FunctionDefinition "updateMaintenanceMode" - public
     Source: "function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {\r\n        isMaintenanceMode = _isMaintaining;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bool _isMaintaining)"
      VariableDeclaration "_isMaintaining"
         Type: bool
         Source: "bool _isMaintaining"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyCREATOR"
       Gas costs: 0
       Source: "onlyCREATOR"
      Identifier onlyCREATOR
         Type: modifier ()
         Source: "onlyCREATOR"
    Block
       Source: "{\r\n        isMaintenanceMode = _isMaintaining;\r\n    }"
      ExpressionStatement
         Gas costs: 20267
         Source: "isMaintenanceMode = _isMaintaining"
        Assignment using operator =
           Type: bool
           Source: "isMaintenanceMode = _isMaintaining"
          Identifier isMaintenanceMode
             Type: bool
             Source: "isMaintenanceMode"
          Identifier _isMaintaining
             Type: bool
             Source: "_isMaintaining"
ContractDefinition "IPetCardData"
   Gas costs: [???]
   Source: "contract IPetCardData is AccessControl, Enums {\r\n    uint8 public totalPetCardSeries;    \r\n    uint64 public totalPets;\r\n    \r\n    // write\r\n    function createPetCardSeries(uint8 _petCardSeriesId, uint32 _maxTotal) onlyCREATOR public returns(uint8);\r\n    function setPet(uint8 _petCardSeriesId, address _owner, string _name, uint8 _luck, uint16 _auraRed, uint16 _auraYellow, uint16 _auraBlue) onlySERAPHIM external returns(uint64);\r\n    function setPetAuras(uint64 _petId, uint8 _auraRed, uint8 _auraBlue, uint8 _auraYellow) onlySERAPHIM external;\r\n    function setPetLastTrainingTime(uint64 _petId) onlySERAPHIM external;\r\n    function setPetLastBreedingTime(uint64 _petId) onlySERAPHIM external;\r\n    function addPetIdMapping(address _owner, uint64 _petId) private;\r\n    function transferPet(address _from, address _to, uint64 _petId) onlySERAPHIM public returns(ResultCode);\r\n    function ownerPetTransfer (address _to, uint64 _petId)  public;\r\n    function setPetName(string _name, uint64 _petId) public;\r\n\r\n    // read\r\n    function getPetCardSeries(uint8 _petCardSeriesId) constant public returns(uint8 petCardSeriesId, uint32 currentPetTotal, uint32 maxPetTotal);\r\n    function getPet(uint _petId) constant public returns(uint petId, uint8 petCardSeriesId, string name, uint8 luck, uint16 auraRed, uint16 auraBlue, uint16 auraYellow, uint64 lastTrainingTime, uint64 lastBreedingTime, address owner);\r\n    function getOwnerPetCount(address _owner) constant public returns(uint);\r\n    function getPetByIndex(address _owner, uint _index) constant public returns(uint);\r\n    function getTotalPetCardSeries() constant public returns (uint8);\r\n    function getTotalPets() constant public returns (uint);\r\n}"
  InheritanceSpecifier
     Source: "AccessControl"
    UserDefinedTypeName "AccessControl"
       Source: "AccessControl"
  InheritanceSpecifier
     Source: "Enums"
    UserDefinedTypeName "Enums"
       Source: "Enums"
  VariableDeclaration "totalPetCardSeries"
     Type: uint8
     Source: "uint8 public totalPetCardSeries"
    ElementaryTypeName uint8
       Source: "uint8"
  VariableDeclaration "totalPets"
     Type: uint64
     Source: "uint64 public totalPets"
    ElementaryTypeName uint64
       Source: "uint64"
  FunctionDefinition "createPetCardSeries" - public
     Source: "function createPetCardSeries(uint8 _petCardSeriesId, uint32 _maxTotal) onlyCREATOR public returns(uint8);"
    ParameterList
       Source: "(uint8 _petCardSeriesId, uint32 _maxTotal)"
      VariableDeclaration "_petCardSeriesId"
         Type: uint8
         Source: "uint8 _petCardSeriesId"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "_maxTotal"
         Type: uint32
         Source: "uint32 _maxTotal"
        ElementaryTypeName uint32
           Source: "uint32"
    ParameterList
       Source: "(uint8)"
      VariableDeclaration ""
         Type: uint8
         Source: "uint8"
        ElementaryTypeName uint8
           Source: "uint8"
    ModifierInvocation "onlyCREATOR"
       Source: "onlyCREATOR"
      Identifier onlyCREATOR
         Type: modifier ()
         Source: "onlyCREATOR"
  FunctionDefinition "setPet" - public
     Source: "function setPet(uint8 _petCardSeriesId, address _owner, string _name, uint8 _luck, uint16 _auraRed, uint16 _auraYellow, uint16 _auraBlue) onlySERAPHIM external returns(uint64);"
    ParameterList
       Source: "(uint8 _petCardSeriesId, address _owner, string _name, uint8 _luck, uint16 _auraRed, uint16 _auraYellow, uint16 _auraBlue)"
      VariableDeclaration "_petCardSeriesId"
         Type: uint8
         Source: "uint8 _petCardSeriesId"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_name"
         Type: string calldata
         Source: "string _name"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "_luck"
         Type: uint8
         Source: "uint8 _luck"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "_auraRed"
         Type: uint16
         Source: "uint16 _auraRed"
        ElementaryTypeName uint16
           Source: "uint16"
      VariableDeclaration "_auraYellow"
         Type: uint16
         Source: "uint16 _auraYellow"
        ElementaryTypeName uint16
           Source: "uint16"
      VariableDeclaration "_auraBlue"
         Type: uint16
         Source: "uint16 _auraBlue"
        ElementaryTypeName uint16
           Source: "uint16"
    ParameterList
       Source: "(uint64)"
      VariableDeclaration ""
         Type: uint64
         Source: "uint64"
        ElementaryTypeName uint64
           Source: "uint64"
    ModifierInvocation "onlySERAPHIM"
       Source: "onlySERAPHIM"
      Identifier onlySERAPHIM
         Type: modifier ()
         Source: "onlySERAPHIM"
  FunctionDefinition "setPetAuras" - public
     Source: "function setPetAuras(uint64 _petId, uint8 _auraRed, uint8 _auraBlue, uint8 _auraYellow) onlySERAPHIM external;"
    ParameterList
       Source: "(uint64 _petId, uint8 _auraRed, uint8 _auraBlue, uint8 _auraYellow)"
      VariableDeclaration "_petId"
         Type: uint64
         Source: "uint64 _petId"
        ElementaryTypeName uint64
           Source: "uint64"
      VariableDeclaration "_auraRed"
         Type: uint8
         Source: "uint8 _auraRed"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "_auraBlue"
         Type: uint8
         Source: "uint8 _auraBlue"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "_auraYellow"
         Type: uint8
         Source: "uint8 _auraYellow"
        ElementaryTypeName uint8
           Source: "uint8"
    ParameterList
       Source: ""
    ModifierInvocation "onlySERAPHIM"
       Source: "onlySERAPHIM"
      Identifier onlySERAPHIM
         Type: modifier ()
         Source: "onlySERAPHIM"
  FunctionDefinition "setPetLastTrainingTime" - public
     Source: "function setPetLastTrainingTime(uint64 _petId) onlySERAPHIM external;"
    ParameterList
       Source: "(uint64 _petId)"
      VariableDeclaration "_petId"
         Type: uint64
         Source: "uint64 _petId"
        ElementaryTypeName uint64
           Source: "uint64"
    ParameterList
       Source: ""
    ModifierInvocation "onlySERAPHIM"
       Source: "onlySERAPHIM"
      Identifier onlySERAPHIM
         Type: modifier ()
         Source: "onlySERAPHIM"
  FunctionDefinition "setPetLastBreedingTime" - public
     Source: "function setPetLastBreedingTime(uint64 _petId) onlySERAPHIM external;"
    ParameterList
       Source: "(uint64 _petId)"
      VariableDeclaration "_petId"
         Type: uint64
         Source: "uint64 _petId"
        ElementaryTypeName uint64
           Source: "uint64"
    ParameterList
       Source: ""
    ModifierInvocation "onlySERAPHIM"
       Source: "onlySERAPHIM"
      Identifier onlySERAPHIM
         Type: modifier ()
         Source: "onlySERAPHIM"
  FunctionDefinition "addPetIdMapping"
     Source: "function addPetIdMapping(address _owner, uint64 _petId) private;"
    ParameterList
       Source: "(address _owner, uint64 _petId)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_petId"
         Type: uint64
         Source: "uint64 _petId"
        ElementaryTypeName uint64
           Source: "uint64"
    ParameterList
       Source: ""
  FunctionDefinition "transferPet" - public
     Source: "function transferPet(address _from, address _to, uint64 _petId) onlySERAPHIM public returns(ResultCode);"
    ParameterList
       Source: "(address _from, address _to, uint64 _petId)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_petId"
         Type: uint64
         Source: "uint64 _petId"
        ElementaryTypeName uint64
           Source: "uint64"
    ParameterList
       Source: "(ResultCode)"
      VariableDeclaration ""
         Type: enum Enums.ResultCode
         Source: "ResultCode"
        UserDefinedTypeName "ResultCode"
           Source: "ResultCode"
    ModifierInvocation "onlySERAPHIM"
       Source: "onlySERAPHIM"
      Identifier onlySERAPHIM
         Type: modifier ()
         Source: "onlySERAPHIM"
  FunctionDefinition "ownerPetTransfer" - public
     Source: "function ownerPetTransfer (address _to, uint64 _petId)  public;"
    ParameterList
       Source: "(address _to, uint64 _petId)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_petId"
         Type: uint64
         Source: "uint64 _petId"
        ElementaryTypeName uint64
           Source: "uint64"
    ParameterList
       Source: ""
  FunctionDefinition "setPetName" - public
     Source: "function setPetName(string _name, uint64 _petId) public;"
    ParameterList
       Source: "(string _name, uint64 _petId)"
      VariableDeclaration "_name"
         Type: string memory
         Source: "string _name"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "_petId"
         Type: uint64
         Source: "uint64 _petId"
        ElementaryTypeName uint64
           Source: "uint64"
    ParameterList
       Source: ""
  FunctionDefinition "getPetCardSeries" - public - const
     Source: "function getPetCardSeries(uint8 _petCardSeriesId) constant public returns(uint8 petCardSeriesId, uint32 currentPetTotal, uint32 maxPetTotal);"
    ParameterList
       Source: "(uint8 _petCardSeriesId)"
      VariableDeclaration "_petCardSeriesId"
         Type: uint8
         Source: "uint8 _petCardSeriesId"
        ElementaryTypeName uint8
           Source: "uint8"
    ParameterList
       Source: "(uint8 petCardSeriesId, uint32 currentPetTotal, uint32 maxPetTotal)"
      VariableDeclaration "petCardSeriesId"
         Type: uint8
         Source: "uint8 petCardSeriesId"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "currentPetTotal"
         Type: uint32
         Source: "uint32 currentPetTotal"
        ElementaryTypeName uint32
           Source: "uint32"
      VariableDeclaration "maxPetTotal"
         Type: uint32
         Source: "uint32 maxPetTotal"
        ElementaryTypeName uint32
           Source: "uint32"
  FunctionDefinition "getPet" - public - const
     Source: "function getPet(uint _petId) constant public returns(uint petId, uint8 petCardSeriesId, string name, uint8 luck, uint16 auraRed, uint16 auraBlue, uint16 auraYellow, uint64 lastTrainingTime, uint64 lastBreedingTime, address owner);"
    ParameterList
       Source: "(uint _petId)"
      VariableDeclaration "_petId"
         Type: uint256
         Source: "uint _petId"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(uint petId, uint8 petCardSeriesId, string name, uint8 luck, uint16 auraRed, uint16 auraBlue, uint16 auraYellow, uint64 lastTrainingTime, uint64 lastBreedingTime, address owner)"
      VariableDeclaration "petId"
         Type: uint256
         Source: "uint petId"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "petCardSeriesId"
         Type: uint8
         Source: "uint8 petCardSeriesId"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "name"
         Type: string memory
         Source: "string name"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "luck"
         Type: uint8
         Source: "uint8 luck"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "auraRed"
         Type: uint16
         Source: "uint16 auraRed"
        ElementaryTypeName uint16
           Source: "uint16"
      VariableDeclaration "auraBlue"
         Type: uint16
         Source: "uint16 auraBlue"
        ElementaryTypeName uint16
           Source: "uint16"
      VariableDeclaration "auraYellow"
         Type: uint16
         Source: "uint16 auraYellow"
        ElementaryTypeName uint16
           Source: "uint16"
      VariableDeclaration "lastTrainingTime"
         Type: uint64
         Source: "uint64 lastTrainingTime"
        ElementaryTypeName uint64
           Source: "uint64"
      VariableDeclaration "lastBreedingTime"
         Type: uint64
         Source: "uint64 lastBreedingTime"
        ElementaryTypeName uint64
           Source: "uint64"
      VariableDeclaration "owner"
         Type: address
         Source: "address owner"
        ElementaryTypeName address
           Source: "address"
  FunctionDefinition "getOwnerPetCount" - public - const
     Source: "function getOwnerPetCount(address _owner) constant public returns(uint);"
    ParameterList
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
  FunctionDefinition "getPetByIndex" - public - const
     Source: "function getPetByIndex(address _owner, uint _index) constant public returns(uint);"
    ParameterList
       Source: "(address _owner, uint _index)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_index"
         Type: uint256
         Source: "uint _index"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
  FunctionDefinition "getTotalPetCardSeries" - public - const
     Source: "function getTotalPetCardSeries() constant public returns (uint8);"
    ParameterList
       Source: "()"
    ParameterList
       Source: "(uint8)"
      VariableDeclaration ""
         Type: uint8
         Source: "uint8"
        ElementaryTypeName uint8
           Source: "uint8"
  FunctionDefinition "getTotalPets" - public - const
     Source: "function getTotalPets() constant public returns (uint);"
    ParameterList
       Source: "()"
    ParameterList
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
ContractDefinition "PetCardData"
   Source: "contract PetCardData is IPetCardData, SafeMath {\r\n    /*** EVENTS ***/\r\n    event CreatedPet(uint64 petId);\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /*** DATA TYPES ***/\r\n    struct PetCardSeries {\r\n        uint8 petCardSeriesId;\r\n        uint32 currentPetTotal;\r\n        uint32 maxPetTotal;\r\n    }\r\n\r\n    struct Pet {\r\n        uint64 petId;\r\n        uint8 petCardSeriesId;\r\n        address owner;\r\n        string name;\r\n        uint8 luck;\r\n        uint16 auraRed;\r\n        uint16 auraYellow;\r\n        uint16 auraBlue;\r\n        uint64 lastTrainingTime;\r\n        uint64 lastBreedingTime;\r\n        uint price; \r\n    }\r\n\r\n\r\n    /*** STORAGE ***/\r\n  \r\n    mapping(uint8 => PetCardSeries) public petCardSeriesCollection;\r\n    mapping(uint => Pet) public petCollection;\r\n    mapping(address => uint64[]) public ownerPetCollection;\r\n    \r\n    /*** FUNCTIONS ***/\r\n    //*** Write Access ***//\r\n    function PetCardData() public {\r\n        \r\n    }\r\n\r\n    //*** Pets ***/\r\n    function createPetCardSeries(uint8 _petCardSeriesId, uint32 _maxTotal) onlyCREATOR public returns(uint8) {\r\n     if ((now > 1516642200) || (totalPetCardSeries >= 19)) {revert();}\r\n        //This confirms that no one, even the develoopers, can create any angel series after JAN/22/2018 @ 0530pm (UTC) or more than the original 24 series.\r\n      \r\n       PetCardSeries storage petCardSeries = petCardSeriesCollection[_petCardSeriesId];\r\n        petCardSeries.petCardSeriesId = _petCardSeriesId;\r\n        petCardSeries.maxPetTotal = _maxTotal;\r\n        totalPetCardSeries += 1;\r\n        return totalPetCardSeries;\r\n    }\r\n\t\r\n\tfunction setPet(uint8 _petCardSeriesId, address _owner, string _name, uint8 _luck, uint16 _auraRed, uint16 _auraYellow, uint16 _auraBlue) onlySERAPHIM external returns(uint64) { \r\n        PetCardSeries storage series = petCardSeriesCollection[_petCardSeriesId];\r\n\r\n        if (series.currentPetTotal >= series.maxPetTotal) {\r\n            revert();\r\n        }\r\n        else {\r\n        totalPets += 1;\r\n        series.currentPetTotal +=1;\r\n        Pet storage pet = petCollection[totalPets];\r\n        pet.petId = totalPets;\r\n        pet.petCardSeriesId = _petCardSeriesId;\r\n        pet.owner = _owner;\r\n        pet.name = _name;\r\n        pet.luck = _luck;\r\n        pet.auraRed = _auraRed;\r\n        pet.auraYellow = _auraYellow;\r\n        pet.auraBlue = _auraBlue;\r\n        pet.lastTrainingTime = 0;\r\n        pet.lastBreedingTime = 0;\r\n        addPetIdMapping(_owner, pet.petId);\r\n        }\r\n    }\r\n\r\n    function setPetAuras(uint64 _petId, uint8 _auraRed, uint8 _auraBlue, uint8 _auraYellow) onlySERAPHIM external {\r\n        Pet storage pet = petCollection[_petId];\r\n        if (pet.petId == _petId) {\r\n            pet.auraRed = _auraRed;\r\n            pet.auraBlue = _auraBlue;\r\n            pet.auraYellow = _auraYellow;\r\n        }\r\n    }\r\n\r\n    function setPetName(string _name, uint64 _petId) public {\r\n        Pet storage pet = petCollection[_petId];\r\n        if ((pet.petId == _petId) && (msg.sender == pet.owner)) {\r\n            pet.name = _name;\r\n        }\r\n    }\r\n\r\n\r\n    function setPetLastTrainingTime(uint64 _petId) onlySERAPHIM external {\r\n        Pet storage pet = petCollection[_petId];\r\n        if (pet.petId == _petId) {\r\n            pet.lastTrainingTime = uint64(now);\r\n        }\r\n    }\r\n\r\n    function setPetLastBreedingTime(uint64 _petId) onlySERAPHIM external {\r\n        Pet storage pet = petCollection[_petId];\r\n        if (pet.petId == _petId) {\r\n            pet.lastBreedingTime = uint64(now);\r\n        }\r\n    }\r\n    \r\n    function addPetIdMapping(address _owner, uint64 _petId) private {\r\n            uint64[] storage owners = ownerPetCollection[_owner];\r\n            owners.push(_petId);\r\n            Pet storage pet = petCollection[_petId];\r\n            pet.owner = _owner;\r\n            //this is a map of ALL the pets an address has EVER owned. \r\n            //We check that they are still the current owner in javascrpit and other places on chain. \r\n        \r\n    }\r\n\t\r\n\tfunction transferPet(address _from, address _to, uint64 _petId) onlySERAPHIM public returns(ResultCode) {\r\n        Pet storage pet = petCollection[_petId];\r\n        if (pet.owner != _from) {\r\n            return ResultCode.ERROR_NOT_OWNER;\r\n        }\r\n        if (_from == _to) {revert();}\r\n        addPetIdMapping(_to, _petId);\r\n        pet.owner = _to;\r\n        return ResultCode.SUCCESS;\r\n    }\r\n    \r\n    //Anyone can transfer a pet they own by calling this function. \r\n    \r\n  function ownerPetTransfer (address _to, uint64 _petId)  public  {\r\n     \r\n        if ((_petId > totalPets) || (_petId == 0)) {revert();}\r\n       if (msg.sender == _to) {revert();} //can't send to yourself. \r\n        if (pet.owner != msg.sender) {\r\n            revert();\r\n        }\r\n        else {\r\n      Pet storage pet = petCollection[_petId];\r\n        pet.owner = _to;\r\n        addPetIdMapping(_to, _petId);\r\n        }\r\n    }\r\n\r\n    //*** Read Access ***//\r\n    function getPetCardSeries(uint8 _petCardSeriesId) constant public returns(uint8 petCardSeriesId, uint32 currentPetTotal, uint32 maxPetTotal) {\r\n        PetCardSeries memory series = petCardSeriesCollection[_petCardSeriesId];\r\n        petCardSeriesId = series.petCardSeriesId;\r\n        currentPetTotal = series.currentPetTotal;\r\n        maxPetTotal = series.maxPetTotal;\r\n    }\r\n\t\r\n\tfunction getPet(uint _petId) constant public returns(uint petId, uint8 petCardSeriesId, string name, uint8 luck, uint16 auraRed, uint16 auraBlue, uint16 auraYellow, uint64 lastTrainingTime, uint64 lastBreedingTime, address owner) {\r\n        Pet memory pet = petCollection[_petId];\r\n        petId = pet.petId;\r\n        petCardSeriesId = pet.petCardSeriesId;\r\n        name = pet.name;\r\n        luck = pet.luck;\r\n        auraRed = pet.auraRed;\r\n        auraBlue = pet.auraBlue;\r\n        auraYellow = pet.auraYellow;\r\n        lastTrainingTime = pet.lastTrainingTime;\r\n        lastBreedingTime = pet.lastBreedingTime;\r\n        owner = pet.owner;\r\n    }\r\n\t\r\n\tfunction getOwnerPetCount(address _owner) constant public returns(uint) {\r\n        return ownerPetCollection[_owner].length;\r\n    }\r\n\t\r\n\tfunction getPetByIndex(address _owner, uint _index) constant public returns(uint) {\r\n        if (_index >= ownerPetCollection[_owner].length)\r\n            return 0;\r\n        return ownerPetCollection[_owner][_index];\r\n    }\r\n\r\n    function getTotalPetCardSeries() constant public returns (uint8) {\r\n        return totalPetCardSeries;\r\n    }\r\n\r\n    function getTotalPets() constant public returns (uint) {\r\n        return totalPets;\r\n    }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "IPetCardData"
    UserDefinedTypeName "IPetCardData"
       Source: "IPetCardData"
  InheritanceSpecifier
     Gas costs: 0
     Source: "SafeMath"
    UserDefinedTypeName "SafeMath"
       Source: "SafeMath"
  EventDefinition "CreatedPet"
     Gas costs: 0
     Source: "event CreatedPet(uint64 petId);"
    ParameterList
       Source: "(uint64 petId)"
      VariableDeclaration "petId"
         Type: uint64
         Source: "uint64 petId"
        ElementaryTypeName uint64
           Source: "uint64"
  EventDefinition "Transfer"
     Gas costs: 0
     Source: "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);"
    ParameterList
       Source: "(address indexed from, address indexed to, uint256 indexed tokenId)"
      VariableDeclaration "from"
         Type: address
         Source: "address indexed from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "to"
         Type: address
         Source: "address indexed to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "tokenId"
         Type: uint256
         Source: "uint256 indexed tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
  StructDefinition "PetCardSeries"
     Gas costs: 0
     Source: "struct PetCardSeries {\r\n        uint8 petCardSeriesId;\r\n        uint32 currentPetTotal;\r\n        uint32 maxPetTotal;\r\n    }"
    VariableDeclaration "petCardSeriesId"
       Type: uint8
       Source: "uint8 petCardSeriesId"
      ElementaryTypeName uint8
         Source: "uint8"
    VariableDeclaration "currentPetTotal"
       Type: uint32
       Source: "uint32 currentPetTotal"
      ElementaryTypeName uint32
         Source: "uint32"
    VariableDeclaration "maxPetTotal"
       Type: uint32
       Source: "uint32 maxPetTotal"
      ElementaryTypeName uint32
         Source: "uint32"
  StructDefinition "Pet"
     Gas costs: 0
     Source: "struct Pet {\r\n        uint64 petId;\r\n        uint8 petCardSeriesId;\r\n        address owner;\r\n        string name;\r\n        uint8 luck;\r\n        uint16 auraRed;\r\n        uint16 auraYellow;\r\n        uint16 auraBlue;\r\n        uint64 lastTrainingTime;\r\n        uint64 lastBreedingTime;\r\n        uint price; \r\n    }"
    VariableDeclaration "petId"
       Type: uint64
       Source: "uint64 petId"
      ElementaryTypeName uint64
         Source: "uint64"
    VariableDeclaration "petCardSeriesId"
       Type: uint8
       Source: "uint8 petCardSeriesId"
      ElementaryTypeName uint8
         Source: "uint8"
    VariableDeclaration "owner"
       Type: address
       Source: "address owner"
      ElementaryTypeName address
         Source: "address"
    VariableDeclaration "name"
       Type: string storage pointer
       Source: "string name"
      ElementaryTypeName string
         Source: "string"
    VariableDeclaration "luck"
       Type: uint8
       Source: "uint8 luck"
      ElementaryTypeName uint8
         Source: "uint8"
    VariableDeclaration "auraRed"
       Type: uint16
       Source: "uint16 auraRed"
      ElementaryTypeName uint16
         Source: "uint16"
    VariableDeclaration "auraYellow"
       Type: uint16
       Source: "uint16 auraYellow"
      ElementaryTypeName uint16
         Source: "uint16"
    VariableDeclaration "auraBlue"
       Type: uint16
       Source: "uint16 auraBlue"
      ElementaryTypeName uint16
         Source: "uint16"
    VariableDeclaration "lastTrainingTime"
       Type: uint64
       Source: "uint64 lastTrainingTime"
      ElementaryTypeName uint64
         Source: "uint64"
    VariableDeclaration "lastBreedingTime"
       Type: uint64
       Source: "uint64 lastBreedingTime"
      ElementaryTypeName uint64
         Source: "uint64"
    VariableDeclaration "price"
       Type: uint256
       Source: "uint price"
      ElementaryTypeName uint
         Source: "uint"
  VariableDeclaration "petCardSeriesCollection"
     Type: mapping(uint8 => struct PetCardData.PetCardSeries storage ref)
     Gas costs: [???]
     Source: "mapping(uint8 => PetCardSeries) public petCardSeriesCollection"
    Mapping
       Source: "mapping(uint8 => PetCardSeries)"
      ElementaryTypeName uint8
         Source: "uint8"
      UserDefinedTypeName "PetCardSeries"
         Source: "PetCardSeries"
  VariableDeclaration "petCollection"
     Type: mapping(uint256 => struct PetCardData.Pet storage ref)
     Gas costs: [???]
     Source: "mapping(uint => Pet) public petCollection"
    Mapping
       Source: "mapping(uint => Pet)"
      ElementaryTypeName uint
         Source: "uint"
      UserDefinedTypeName "Pet"
         Source: "Pet"
  VariableDeclaration "ownerPetCollection"
     Type: mapping(address => uint64[] storage ref)
     Gas costs: [???]
     Source: "mapping(address => uint64[]) public ownerPetCollection"
    Mapping
       Source: "mapping(address => uint64[])"
      ElementaryTypeName address
         Source: "address"
      ArrayTypeName
         Source: "uint64[]"
        ElementaryTypeName uint64
           Source: "uint64"
  FunctionDefinition "PetCardData" - public
     Source: "function PetCardData() public {\r\n        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Gas costs: 0
       Source: "{\r\n        \r\n    }"
  FunctionDefinition "createPetCardSeries" - public
     Source: "function createPetCardSeries(uint8 _petCardSeriesId, uint32 _maxTotal) onlyCREATOR public returns(uint8) {\r\n     if ((now > 1516642200) || (totalPetCardSeries >= 19)) {revert();}\r\n        //This confirms that no one, even the develoopers, can create any angel series after JAN/22/2018 @ 0530pm (UTC) or more than the original 24 series.\r\n      \r\n       PetCardSeries storage petCardSeries = petCardSeriesCollection[_petCardSeriesId];\r\n        petCardSeries.petCardSeriesId = _petCardSeriesId;\r\n        petCardSeries.maxPetTotal = _maxTotal;\r\n        totalPetCardSeries += 1;\r\n        return totalPetCardSeries;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint8 _petCardSeriesId, uint32 _maxTotal)"
      VariableDeclaration "_petCardSeriesId"
         Type: uint8
         Source: "uint8 _petCardSeriesId"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "_maxTotal"
         Type: uint32
         Source: "uint32 _maxTotal"
        ElementaryTypeName uint32
           Source: "uint32"
    ParameterList
       Gas costs: 3
       Source: "(uint8)"
      VariableDeclaration ""
         Type: uint8
         Source: "uint8"
        ElementaryTypeName uint8
           Source: "uint8"
    ModifierInvocation "onlyCREATOR"
       Gas costs: 0
       Source: "onlyCREATOR"
      Identifier onlyCREATOR
         Type: modifier ()
         Source: "onlyCREATOR"
    Block
       Source: "{\r\n     if ((now > 1516642200) || (totalPetCardSeries >= 19)) {revert();}\r\n        //This confirms that no one, even the develoopers, can create any angel series after JAN/22/2018 @ 0530pm (UTC) or more than the original 24 series.\r\n      \r\n       PetCardSeries storage petCardSeries = petCardSeriesCollection[_petCardSeriesId];\r\n        petCardSeries.petCardSeriesId = _petCardSeriesId;\r\n        petCardSeries.maxPetTotal = _maxTotal;\r\n        totalPetCardSeries += 1;\r\n        return totalPetCardSeries;\r\n    }"
      IfStatement
         Source: "if ((now > 1516642200) || (totalPetCardSeries >= 19)) {revert();}"
        BinaryOperation using operator ||
           Type: bool
           Gas costs: 331
           Source: "(now > 1516642200) || (totalPetCardSeries >= 19)"
          TupleExpression
             Type: bool
             Source: "(now > 1516642200)"
            BinaryOperation using operator >
               Type: bool
               Source: "now > 1516642200"
              Identifier now
                 Type: uint256
                 Source: "now"
              Literal, token: [no token] value: 1516642200
                 Type: int_const 1516642200
                 Source: "1516642200"
          TupleExpression
             Type: bool
             Source: "(totalPetCardSeries >= 19)"
            BinaryOperation using operator >=
               Type: bool
               Source: "totalPetCardSeries >= 19"
              Identifier totalPetCardSeries
                 Type: uint8
                 Source: "totalPetCardSeries"
              Literal, token: [no token] value: 19
                 Type: int_const 19
                 Source: "19"
        Block
           Source: "{revert();}"
          ExpressionStatement
             Gas costs: 6
             Source: "revert()"
            FunctionCall
               Type: tuple()
               Source: "revert()"
              Identifier revert
                 Type: function () pure
                 Source: "revert"
      VariableDeclarationStatement
         Gas costs: 107
         Source: "PetCardSeries storage petCardSeries = petCardSeriesCollection[_petCardSeriesId]"
        VariableDeclaration "petCardSeries"
           Type: struct PetCardData.PetCardSeries storage pointer
           Source: "PetCardSeries storage petCardSeries"
          UserDefinedTypeName "PetCardSeries"
             Source: "PetCardSeries"
        IndexAccess
           Type: struct PetCardData.PetCardSeries storage ref
           Source: "petCardSeriesCollection[_petCardSeriesId]"
          Identifier petCardSeriesCollection
             Type: mapping(uint8 => struct PetCardData.PetCardSeries storage ref)
             Source: "petCardSeriesCollection"
          Identifier _petCardSeriesId
             Type: uint8
             Source: "_petCardSeriesId"
      ExpressionStatement
         Gas costs: 20273
         Source: "petCardSeries.petCardSeriesId = _petCardSeriesId"
        Assignment using operator =
           Type: uint8
           Source: "petCardSeries.petCardSeriesId = _petCardSeriesId"
          MemberAccess to member petCardSeriesId
             Type: uint8
             Source: "petCardSeries.petCardSeriesId"
            Identifier petCardSeries
               Type: struct PetCardData.PetCardSeries storage pointer
               Source: "petCardSeries"
          Identifier _petCardSeriesId
             Type: uint8
             Source: "_petCardSeriesId"
      ExpressionStatement
         Gas costs: 20323
         Source: "petCardSeries.maxPetTotal = _maxTotal"
        Assignment using operator =
           Type: uint32
           Source: "petCardSeries.maxPetTotal = _maxTotal"
          MemberAccess to member maxPetTotal
             Type: uint32
             Source: "petCardSeries.maxPetTotal"
            Identifier petCardSeries
               Type: struct PetCardData.PetCardSeries storage pointer
               Source: "petCardSeries"
          Identifier _maxTotal
             Type: uint32
             Source: "_maxTotal"
      ExpressionStatement
         Gas costs: 20617
         Source: "totalPetCardSeries += 1"
        Assignment using operator +=
           Type: uint8
           Source: "totalPetCardSeries += 1"
          Identifier totalPetCardSeries
             Type: uint8
             Source: "totalPetCardSeries"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
      Return
         Gas costs: 294
         Source: "return totalPetCardSeries"
        Identifier totalPetCardSeries
           Type: uint8
           Source: "totalPetCardSeries"
  FunctionDefinition "setPet" - public
     Source: "function setPet(uint8 _petCardSeriesId, address _owner, string _name, uint8 _luck, uint16 _auraRed, uint16 _auraYellow, uint16 _auraBlue) onlySERAPHIM external returns(uint64) { \r\n        PetCardSeries storage series = petCardSeriesCollection[_petCardSeriesId];\r\n\r\n        if (series.currentPetTotal >= series.maxPetTotal) {\r\n            revert();\r\n        }\r\n        else {\r\n        totalPets += 1;\r\n        series.currentPetTotal +=1;\r\n        Pet storage pet = petCollection[totalPets];\r\n        pet.petId = totalPets;\r\n        pet.petCardSeriesId = _petCardSeriesId;\r\n        pet.owner = _owner;\r\n        pet.name = _name;\r\n        pet.luck = _luck;\r\n        pet.auraRed = _auraRed;\r\n        pet.auraYellow = _auraYellow;\r\n        pet.auraBlue = _auraBlue;\r\n        pet.lastTrainingTime = 0;\r\n        pet.lastBreedingTime = 0;\r\n        addPetIdMapping(_owner, pet.petId);\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint8 _petCardSeriesId, address _owner, string _name, uint8 _luck, uint16 _auraRed, uint16 _auraYellow, uint16 _auraBlue)"
      VariableDeclaration "_petCardSeriesId"
         Type: uint8
         Source: "uint8 _petCardSeriesId"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_name"
         Type: string calldata
         Source: "string _name"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "_luck"
         Type: uint8
         Source: "uint8 _luck"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "_auraRed"
         Type: uint16
         Source: "uint16 _auraRed"
        ElementaryTypeName uint16
           Source: "uint16"
      VariableDeclaration "_auraYellow"
         Type: uint16
         Source: "uint16 _auraYellow"
        ElementaryTypeName uint16
           Source: "uint16"
      VariableDeclaration "_auraBlue"
         Type: uint16
         Source: "uint16 _auraBlue"
        ElementaryTypeName uint16
           Source: "uint16"
    ParameterList
       Gas costs: 3
       Source: "(uint64)"
      VariableDeclaration ""
         Type: uint64
         Source: "uint64"
        ElementaryTypeName uint64
           Source: "uint64"
    ModifierInvocation "onlySERAPHIM"
       Gas costs: 0
       Source: "onlySERAPHIM"
      Identifier onlySERAPHIM
         Type: modifier ()
         Source: "onlySERAPHIM"
    Block
       Source: "{ \r\n        PetCardSeries storage series = petCardSeriesCollection[_petCardSeriesId];\r\n\r\n        if (series.currentPetTotal >= series.maxPetTotal) {\r\n            revert();\r\n        }\r\n        else {\r\n        totalPets += 1;\r\n        series.currentPetTotal +=1;\r\n        Pet storage pet = petCollection[totalPets];\r\n        pet.petId = totalPets;\r\n        pet.petCardSeriesId = _petCardSeriesId;\r\n        pet.owner = _owner;\r\n        pet.name = _name;\r\n        pet.luck = _luck;\r\n        pet.auraRed = _auraRed;\r\n        pet.auraYellow = _auraYellow;\r\n        pet.auraBlue = _auraBlue;\r\n        pet.lastTrainingTime = 0;\r\n        pet.lastBreedingTime = 0;\r\n        addPetIdMapping(_owner, pet.petId);\r\n        }\r\n    }"
      VariableDeclarationStatement
         Gas costs: 107
         Source: "PetCardSeries storage series = petCardSeriesCollection[_petCardSeriesId]"
        VariableDeclaration "series"
           Type: struct PetCardData.PetCardSeries storage pointer
           Source: "PetCardSeries storage series"
          UserDefinedTypeName "PetCardSeries"
             Source: "PetCardSeries"
        IndexAccess
           Type: struct PetCardData.PetCardSeries storage ref
           Source: "petCardSeriesCollection[_petCardSeriesId]"
          Identifier petCardSeriesCollection
             Type: mapping(uint8 => struct PetCardData.PetCardSeries storage ref)
             Source: "petCardSeriesCollection"
          Identifier _petCardSeriesId
             Type: uint8
             Source: "_petCardSeriesId"
      IfStatement
         Source: "if (series.currentPetTotal >= series.maxPetTotal) {\r\n            revert();\r\n        }\r\n        else {\r\n        totalPets += 1;\r\n        series.currentPetTotal +=1;\r\n        Pet storage pet = petCollection[totalPets];\r\n        pet.petId = totalPets;\r\n        pet.petCardSeriesId = _petCardSeriesId;\r\n        pet.owner = _owner;\r\n        pet.name = _name;\r\n        pet.luck = _luck;\r\n        pet.auraRed = _auraRed;\r\n        pet.auraYellow = _auraYellow;\r\n        pet.auraBlue = _auraBlue;\r\n        pet.lastTrainingTime = 0;\r\n        pet.lastBreedingTime = 0;\r\n        addPetIdMapping(_owner, pet.petId);\r\n        }"
        BinaryOperation using operator >=
           Type: bool
           Gas costs: 608
           Source: "series.currentPetTotal >= series.maxPetTotal"
          MemberAccess to member currentPetTotal
             Type: uint32
             Source: "series.currentPetTotal"
            Identifier series
               Type: struct PetCardData.PetCardSeries storage pointer
               Source: "series"
          MemberAccess to member maxPetTotal
             Type: uint32
             Source: "series.maxPetTotal"
            Identifier series
               Type: struct PetCardData.PetCardSeries storage pointer
               Source: "series"
        Block
           Source: "{\r\n            revert();\r\n        }"
          ExpressionStatement
             Gas costs: 6
             Source: "revert()"
            FunctionCall
               Type: tuple()
               Source: "revert()"
              Identifier revert
                 Type: function () pure
                 Source: "revert"
        Block
           Source: "{\r\n        totalPets += 1;\r\n        series.currentPetTotal +=1;\r\n        Pet storage pet = petCollection[totalPets];\r\n        pet.petId = totalPets;\r\n        pet.petCardSeriesId = _petCardSeriesId;\r\n        pet.owner = _owner;\r\n        pet.name = _name;\r\n        pet.luck = _luck;\r\n        pet.auraRed = _auraRed;\r\n        pet.auraYellow = _auraYellow;\r\n        pet.auraBlue = _auraBlue;\r\n        pet.lastTrainingTime = 0;\r\n        pet.lastBreedingTime = 0;\r\n        addPetIdMapping(_owner, pet.petId);\r\n        }"
          ExpressionStatement
             Gas costs: 20617
             Source: "totalPets += 1"
            Assignment using operator +=
               Type: uint64
               Source: "totalPets += 1"
              Identifier totalPets
                 Type: uint64
                 Source: "totalPets"
              Literal, token: [no token] value: 1
                 Type: int_const 1
                 Source: "1"
          ExpressionStatement
             Gas costs: 20623
             Source: "series.currentPetTotal +=1"
            Assignment using operator +=
               Type: uint32
               Source: "series.currentPetTotal +=1"
              MemberAccess to member currentPetTotal
                 Type: uint32
                 Source: "series.currentPetTotal"
                Identifier series
                   Type: struct PetCardData.PetCardSeries storage pointer
                   Source: "series"
              Literal, token: [no token] value: 1
                 Type: int_const 1
                 Source: "1"
          VariableDeclarationStatement
             Gas costs: 387
             Source: "Pet storage pet = petCollection[totalPets]"
            VariableDeclaration "pet"
               Type: struct PetCardData.Pet storage pointer
               Source: "Pet storage pet"
              UserDefinedTypeName "Pet"
                 Source: "Pet"
            IndexAccess
               Type: struct PetCardData.Pet storage ref
               Source: "petCollection[totalPets]"
              Identifier petCollection
                 Type: mapping(uint256 => struct PetCardData.Pet storage ref)
                 Source: "petCollection"
              Identifier totalPets
                 Type: uint64
                 Source: "totalPets"
          ExpressionStatement
             Gas costs: 20559
             Source: "pet.petId = totalPets"
            Assignment using operator =
               Type: uint64
               Source: "pet.petId = totalPets"
              MemberAccess to member petId
                 Type: uint64
                 Source: "pet.petId"
                Identifier pet
                   Type: struct PetCardData.Pet storage pointer
                   Source: "pet"
              Identifier totalPets
                 Type: uint64
                 Source: "totalPets"
          ExpressionStatement
             Gas costs: 20323
             Source: "pet.petCardSeriesId = _petCardSeriesId"
            Assignment using operator =
               Type: uint8
               Source: "pet.petCardSeriesId = _petCardSeriesId"
              MemberAccess to member petCardSeriesId
                 Type: uint8
                 Source: "pet.petCardSeriesId"
                Identifier pet
                   Type: struct PetCardData.Pet storage pointer
                   Source: "pet"
              Identifier _petCardSeriesId
                 Type: uint8
                 Source: "_petCardSeriesId"
          ExpressionStatement
             Gas costs: 20323
             Source: "pet.owner = _owner"
            Assignment using operator =
               Type: address
               Source: "pet.owner = _owner"
              MemberAccess to member owner
                 Type: address
                 Source: "pet.owner"
                Identifier pet
                   Type: struct PetCardData.Pet storage pointer
                   Source: "pet"
              Identifier _owner
                 Type: address
                 Source: "_owner"
          ExpressionStatement
             Gas costs: 36
             Source: "pet.name = _name"
            Assignment using operator =
               Type: string storage ref
               Source: "pet.name = _name"
              MemberAccess to member name
                 Type: string storage ref
                 Source: "pet.name"
                Identifier pet
                   Type: struct PetCardData.Pet storage pointer
                   Source: "pet"
              Identifier _name
                 Type: string calldata
                 Source: "_name"
          ExpressionStatement
             Gas costs: 20273
             Source: "pet.luck = _luck"
            Assignment using operator =
               Type: uint8
               Source: "pet.luck = _luck"
              MemberAccess to member luck
                 Type: uint8
                 Source: "pet.luck"
                Identifier pet
                   Type: struct PetCardData.Pet storage pointer
                   Source: "pet"
              Identifier _luck
                 Type: uint8
                 Source: "_luck"
          ExpressionStatement
             Gas costs: 20323
             Source: "pet.auraRed = _auraRed"
            Assignment using operator =
               Type: uint16
               Source: "pet.auraRed = _auraRed"
              MemberAccess to member auraRed
                 Type: uint16
                 Source: "pet.auraRed"
                Identifier pet
                   Type: struct PetCardData.Pet storage pointer
                   Source: "pet"
              Identifier _auraRed
                 Type: uint16
                 Source: "_auraRed"
          ExpressionStatement
             Gas costs: 20323
             Source: "pet.auraYellow = _auraYellow"
            Assignment using operator =
               Type: uint16
               Source: "pet.auraYellow = _auraYellow"
              MemberAccess to member auraYellow
                 Type: uint16
                 Source: "pet.auraYellow"
                Identifier pet
                   Type: struct PetCardData.Pet storage pointer
                   Source: "pet"
              Identifier _auraYellow
                 Type: uint16
                 Source: "_auraYellow"
          ExpressionStatement
             Gas costs: 20323
             Source: "pet.auraBlue = _auraBlue"
            Assignment using operator =
               Type: uint16
               Source: "pet.auraBlue = _auraBlue"
              MemberAccess to member auraBlue
                 Type: uint16
                 Source: "pet.auraBlue"
                Identifier pet
                   Type: struct PetCardData.Pet storage pointer
                   Source: "pet"
              Identifier _auraBlue
                 Type: uint16
                 Source: "_auraBlue"
          ExpressionStatement
             Gas costs: 20323
             Source: "pet.lastTrainingTime = 0"
            Assignment using operator =
               Type: uint64
               Source: "pet.lastTrainingTime = 0"
              MemberAccess to member lastTrainingTime
                 Type: uint64
                 Source: "pet.lastTrainingTime"
                Identifier pet
                   Type: struct PetCardData.Pet storage pointer
                   Source: "pet"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
          ExpressionStatement
             Gas costs: 20323
             Source: "pet.lastBreedingTime = 0"
            Assignment using operator =
               Type: uint64
               Source: "pet.lastBreedingTime = 0"
              MemberAccess to member lastBreedingTime
                 Type: uint64
                 Source: "pet.lastBreedingTime"
                Identifier pet
                   Type: struct PetCardData.Pet storage pointer
                   Source: "pet"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
          ExpressionStatement
             Gas costs: 263
             Source: "addPetIdMapping(_owner, pet.petId)"
            FunctionCall
               Type: tuple()
               Source: "addPetIdMapping(_owner, pet.petId)"
              Identifier addPetIdMapping
                 Type: function (address,uint64)
                 Source: "addPetIdMapping"
              Identifier _owner
                 Type: address
                 Source: "_owner"
              MemberAccess to member petId
                 Type: uint64
                 Source: "pet.petId"
                Identifier pet
                   Type: struct PetCardData.Pet storage pointer
                   Source: "pet"
  FunctionDefinition "setPetAuras" - public
     Source: "function setPetAuras(uint64 _petId, uint8 _auraRed, uint8 _auraBlue, uint8 _auraYellow) onlySERAPHIM external {\r\n        Pet storage pet = petCollection[_petId];\r\n        if (pet.petId == _petId) {\r\n            pet.auraRed = _auraRed;\r\n            pet.auraBlue = _auraBlue;\r\n            pet.auraYellow = _auraYellow;\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint64 _petId, uint8 _auraRed, uint8 _auraBlue, uint8 _auraYellow)"
      VariableDeclaration "_petId"
         Type: uint64
         Source: "uint64 _petId"
        ElementaryTypeName uint64
           Source: "uint64"
      VariableDeclaration "_auraRed"
         Type: uint8
         Source: "uint8 _auraRed"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "_auraBlue"
         Type: uint8
         Source: "uint8 _auraBlue"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "_auraYellow"
         Type: uint8
         Source: "uint8 _auraYellow"
        ElementaryTypeName uint8
           Source: "uint8"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlySERAPHIM"
       Gas costs: 0
       Source: "onlySERAPHIM"
      Identifier onlySERAPHIM
         Type: modifier ()
         Source: "onlySERAPHIM"
    Block
       Source: "{\r\n        Pet storage pet = petCollection[_petId];\r\n        if (pet.petId == _petId) {\r\n            pet.auraRed = _auraRed;\r\n            pet.auraBlue = _auraBlue;\r\n            pet.auraYellow = _auraYellow;\r\n        }\r\n    }"
      VariableDeclarationStatement
         Gas costs: 101
         Source: "Pet storage pet = petCollection[_petId]"
        VariableDeclaration "pet"
           Type: struct PetCardData.Pet storage pointer
           Source: "Pet storage pet"
          UserDefinedTypeName "Pet"
             Source: "Pet"
        IndexAccess
           Type: struct PetCardData.Pet storage ref
           Source: "petCollection[_petId]"
          Identifier petCollection
             Type: mapping(uint256 => struct PetCardData.Pet storage ref)
             Source: "petCollection"
          Identifier _petId
             Type: uint64
             Source: "_petId"
      IfStatement
         Source: "if (pet.petId == _petId) {\r\n            pet.auraRed = _auraRed;\r\n            pet.auraBlue = _auraBlue;\r\n            pet.auraYellow = _auraYellow;\r\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 263
           Source: "pet.petId == _petId"
          MemberAccess to member petId
             Type: uint64
             Source: "pet.petId"
            Identifier pet
               Type: struct PetCardData.Pet storage pointer
               Source: "pet"
          Identifier _petId
             Type: uint64
             Source: "_petId"
        Block
           Source: "{\r\n            pet.auraRed = _auraRed;\r\n            pet.auraBlue = _auraBlue;\r\n            pet.auraYellow = _auraYellow;\r\n        }"
          ExpressionStatement
             Gas costs: 20329
             Source: "pet.auraRed = _auraRed"
            Assignment using operator =
               Type: uint16
               Source: "pet.auraRed = _auraRed"
              MemberAccess to member auraRed
                 Type: uint16
                 Source: "pet.auraRed"
                Identifier pet
                   Type: struct PetCardData.Pet storage pointer
                   Source: "pet"
              Identifier _auraRed
                 Type: uint8
                 Source: "_auraRed"
          ExpressionStatement
             Gas costs: 20329
             Source: "pet.auraBlue = _auraBlue"
            Assignment using operator =
               Type: uint16
               Source: "pet.auraBlue = _auraBlue"
              MemberAccess to member auraBlue
                 Type: uint16
                 Source: "pet.auraBlue"
                Identifier pet
                   Type: struct PetCardData.Pet storage pointer
                   Source: "pet"
              Identifier _auraBlue
                 Type: uint8
                 Source: "_auraBlue"
          ExpressionStatement
             Gas costs: 20329
             Source: "pet.auraYellow = _auraYellow"
            Assignment using operator =
               Type: uint16
               Source: "pet.auraYellow = _auraYellow"
              MemberAccess to member auraYellow
                 Type: uint16
                 Source: "pet.auraYellow"
                Identifier pet
                   Type: struct PetCardData.Pet storage pointer
                   Source: "pet"
              Identifier _auraYellow
                 Type: uint8
                 Source: "_auraYellow"
  FunctionDefinition "setPetName" - public
     Source: "function setPetName(string _name, uint64 _petId) public {\r\n        Pet storage pet = petCollection[_petId];\r\n        if ((pet.petId == _petId) && (msg.sender == pet.owner)) {\r\n            pet.name = _name;\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(string _name, uint64 _petId)"
      VariableDeclaration "_name"
         Type: string memory
         Source: "string _name"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "_petId"
         Type: uint64
         Source: "uint64 _petId"
        ElementaryTypeName uint64
           Source: "uint64"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        Pet storage pet = petCollection[_petId];\r\n        if ((pet.petId == _petId) && (msg.sender == pet.owner)) {\r\n            pet.name = _name;\r\n        }\r\n    }"
      VariableDeclarationStatement
         Gas costs: 101
         Source: "Pet storage pet = petCollection[_petId]"
        VariableDeclaration "pet"
           Type: struct PetCardData.Pet storage pointer
           Source: "Pet storage pet"
          UserDefinedTypeName "Pet"
             Source: "Pet"
        IndexAccess
           Type: struct PetCardData.Pet storage ref
           Source: "petCollection[_petId]"
          Identifier petCollection
             Type: mapping(uint256 => struct PetCardData.Pet storage ref)
             Source: "petCollection"
          Identifier _petId
             Type: uint64
             Source: "_petId"
      IfStatement
         Source: "if ((pet.petId == _petId) && (msg.sender == pet.owner)) {\r\n            pet.name = _name;\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 597
           Source: "(pet.petId == _petId) && (msg.sender == pet.owner)"
          TupleExpression
             Type: bool
             Source: "(pet.petId == _petId)"
            BinaryOperation using operator ==
               Type: bool
               Source: "pet.petId == _petId"
              MemberAccess to member petId
                 Type: uint64
                 Source: "pet.petId"
                Identifier pet
                   Type: struct PetCardData.Pet storage pointer
                   Source: "pet"
              Identifier _petId
                 Type: uint64
                 Source: "_petId"
          TupleExpression
             Type: bool
             Source: "(msg.sender == pet.owner)"
            BinaryOperation using operator ==
               Type: bool
               Source: "msg.sender == pet.owner"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              MemberAccess to member owner
                 Type: address
                 Source: "pet.owner"
                Identifier pet
                   Type: struct PetCardData.Pet storage pointer
                   Source: "pet"
        Block
           Source: "{\r\n            pet.name = _name;\r\n        }"
          ExpressionStatement
             Gas costs: [???]
             Source: "pet.name = _name"
            Assignment using operator =
               Type: string storage ref
               Source: "pet.name = _name"
              MemberAccess to member name
                 Type: string storage ref
                 Source: "pet.name"
                Identifier pet
                   Type: struct PetCardData.Pet storage pointer
                   Source: "pet"
              Identifier _name
                 Type: string memory
                 Source: "_name"
  FunctionDefinition "setPetLastTrainingTime" - public
     Source: "function setPetLastTrainingTime(uint64 _petId) onlySERAPHIM external {\r\n        Pet storage pet = petCollection[_petId];\r\n        if (pet.petId == _petId) {\r\n            pet.lastTrainingTime = uint64(now);\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint64 _petId)"
      VariableDeclaration "_petId"
         Type: uint64
         Source: "uint64 _petId"
        ElementaryTypeName uint64
           Source: "uint64"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlySERAPHIM"
       Gas costs: 0
       Source: "onlySERAPHIM"
      Identifier onlySERAPHIM
         Type: modifier ()
         Source: "onlySERAPHIM"
    Block
       Source: "{\r\n        Pet storage pet = petCollection[_petId];\r\n        if (pet.petId == _petId) {\r\n            pet.lastTrainingTime = uint64(now);\r\n        }\r\n    }"
      VariableDeclarationStatement
         Gas costs: 101
         Source: "Pet storage pet = petCollection[_petId]"
        VariableDeclaration "pet"
           Type: struct PetCardData.Pet storage pointer
           Source: "Pet storage pet"
          UserDefinedTypeName "Pet"
             Source: "Pet"
        IndexAccess
           Type: struct PetCardData.Pet storage ref
           Source: "petCollection[_petId]"
          Identifier petCollection
             Type: mapping(uint256 => struct PetCardData.Pet storage ref)
             Source: "petCollection"
          Identifier _petId
             Type: uint64
             Source: "_petId"
      IfStatement
         Source: "if (pet.petId == _petId) {\r\n            pet.lastTrainingTime = uint64(now);\r\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 263
           Source: "pet.petId == _petId"
          MemberAccess to member petId
             Type: uint64
             Source: "pet.petId"
            Identifier pet
               Type: struct PetCardData.Pet storage pointer
               Source: "pet"
          Identifier _petId
             Type: uint64
             Source: "_petId"
        Block
           Source: "{\r\n            pet.lastTrainingTime = uint64(now);\r\n        }"
          ExpressionStatement
             Gas costs: 20322
             Source: "pet.lastTrainingTime = uint64(now)"
            Assignment using operator =
               Type: uint64
               Source: "pet.lastTrainingTime = uint64(now)"
              MemberAccess to member lastTrainingTime
                 Type: uint64
                 Source: "pet.lastTrainingTime"
                Identifier pet
                   Type: struct PetCardData.Pet storage pointer
                   Source: "pet"
              FunctionCall
                 Type: uint64
                 Source: "uint64(now)"
                ElementaryTypeNameExpression uint64
                   Type: type(uint64)
                   Source: "uint64"
                Identifier now
                   Type: uint256
                   Source: "now"
  FunctionDefinition "setPetLastBreedingTime" - public
     Source: "function setPetLastBreedingTime(uint64 _petId) onlySERAPHIM external {\r\n        Pet storage pet = petCollection[_petId];\r\n        if (pet.petId == _petId) {\r\n            pet.lastBreedingTime = uint64(now);\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint64 _petId)"
      VariableDeclaration "_petId"
         Type: uint64
         Source: "uint64 _petId"
        ElementaryTypeName uint64
           Source: "uint64"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlySERAPHIM"
       Gas costs: 0
       Source: "onlySERAPHIM"
      Identifier onlySERAPHIM
         Type: modifier ()
         Source: "onlySERAPHIM"
    Block
       Source: "{\r\n        Pet storage pet = petCollection[_petId];\r\n        if (pet.petId == _petId) {\r\n            pet.lastBreedingTime = uint64(now);\r\n        }\r\n    }"
      VariableDeclarationStatement
         Gas costs: 101
         Source: "Pet storage pet = petCollection[_petId]"
        VariableDeclaration "pet"
           Type: struct PetCardData.Pet storage pointer
           Source: "Pet storage pet"
          UserDefinedTypeName "Pet"
             Source: "Pet"
        IndexAccess
           Type: struct PetCardData.Pet storage ref
           Source: "petCollection[_petId]"
          Identifier petCollection
             Type: mapping(uint256 => struct PetCardData.Pet storage ref)
             Source: "petCollection"
          Identifier _petId
             Type: uint64
             Source: "_petId"
      IfStatement
         Source: "if (pet.petId == _petId) {\r\n            pet.lastBreedingTime = uint64(now);\r\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 263
           Source: "pet.petId == _petId"
          MemberAccess to member petId
             Type: uint64
             Source: "pet.petId"
            Identifier pet
               Type: struct PetCardData.Pet storage pointer
               Source: "pet"
          Identifier _petId
             Type: uint64
             Source: "_petId"
        Block
           Source: "{\r\n            pet.lastBreedingTime = uint64(now);\r\n        }"
          ExpressionStatement
             Gas costs: 20322
             Source: "pet.lastBreedingTime = uint64(now)"
            Assignment using operator =
               Type: uint64
               Source: "pet.lastBreedingTime = uint64(now)"
              MemberAccess to member lastBreedingTime
                 Type: uint64
                 Source: "pet.lastBreedingTime"
                Identifier pet
                   Type: struct PetCardData.Pet storage pointer
                   Source: "pet"
              FunctionCall
                 Type: uint64
                 Source: "uint64(now)"
                ElementaryTypeNameExpression uint64
                   Type: type(uint64)
                   Source: "uint64"
                Identifier now
                   Type: uint256
                   Source: "now"
  FunctionDefinition "addPetIdMapping"
     Source: "function addPetIdMapping(address _owner, uint64 _petId) private {\r\n            uint64[] storage owners = ownerPetCollection[_owner];\r\n            owners.push(_petId);\r\n            Pet storage pet = petCollection[_petId];\r\n            pet.owner = _owner;\r\n            //this is a map of ALL the pets an address has EVER owned. \r\n            //We check that they are still the current owner in javascrpit and other places on chain. \r\n        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, uint64 _petId)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_petId"
         Type: uint64
         Source: "uint64 _petId"
        ElementaryTypeName uint64
           Source: "uint64"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n            uint64[] storage owners = ownerPetCollection[_owner];\r\n            owners.push(_petId);\r\n            Pet storage pet = petCollection[_petId];\r\n            pet.owner = _owner;\r\n            //this is a map of ALL the pets an address has EVER owned. \r\n            //We check that they are still the current owner in javascrpit and other places on chain. \r\n        \r\n    }"
      VariableDeclarationStatement
         Gas costs: 107
         Source: "uint64[] storage owners = ownerPetCollection[_owner]"
        VariableDeclaration "owners"
           Type: uint64[] storage pointer
           Source: "uint64[] storage owners"
          ArrayTypeName
             Source: "uint64[]"
            ElementaryTypeName uint64
               Source: "uint64"
        IndexAccess
           Type: uint64[] storage ref
           Source: "ownerPetCollection[_owner]"
          Identifier ownerPetCollection
             Type: mapping(address => uint64[] storage ref)
             Source: "ownerPetCollection"
          Identifier _owner
             Type: address
             Source: "_owner"
      ExpressionStatement
         Gas costs: 21998
         Source: "owners.push(_petId)"
        FunctionCall
           Type: uint256
           Source: "owners.push(_petId)"
          MemberAccess to member push
             Type: function (uint64) returns (uint256)
             Source: "owners.push"
            Identifier owners
               Type: uint64[] storage pointer
               Source: "owners"
          Identifier _petId
             Type: uint64
             Source: "_petId"
      VariableDeclarationStatement
         Gas costs: 95
         Source: "Pet storage pet = petCollection[_petId]"
        VariableDeclaration "pet"
           Type: struct PetCardData.Pet storage pointer
           Source: "Pet storage pet"
          UserDefinedTypeName "Pet"
             Source: "Pet"
        IndexAccess
           Type: struct PetCardData.Pet storage ref
           Source: "petCollection[_petId]"
          Identifier petCollection
             Type: mapping(uint256 => struct PetCardData.Pet storage ref)
             Source: "petCollection"
          Identifier _petId
             Type: uint64
             Source: "_petId"
      ExpressionStatement
         Gas costs: 20323
         Source: "pet.owner = _owner"
        Assignment using operator =
           Type: address
           Source: "pet.owner = _owner"
          MemberAccess to member owner
             Type: address
             Source: "pet.owner"
            Identifier pet
               Type: struct PetCardData.Pet storage pointer
               Source: "pet"
          Identifier _owner
             Type: address
             Source: "_owner"
  FunctionDefinition "transferPet" - public
     Source: "function transferPet(address _from, address _to, uint64 _petId) onlySERAPHIM public returns(ResultCode) {\r\n        Pet storage pet = petCollection[_petId];\r\n        if (pet.owner != _from) {\r\n            return ResultCode.ERROR_NOT_OWNER;\r\n        }\r\n        if (_from == _to) {revert();}\r\n        addPetIdMapping(_to, _petId);\r\n        pet.owner = _to;\r\n        return ResultCode.SUCCESS;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint64 _petId)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_petId"
         Type: uint64
         Source: "uint64 _petId"
        ElementaryTypeName uint64
           Source: "uint64"
    ParameterList
       Gas costs: 3
       Source: "(ResultCode)"
      VariableDeclaration ""
         Type: enum Enums.ResultCode
         Source: "ResultCode"
        UserDefinedTypeName "ResultCode"
           Source: "ResultCode"
    ModifierInvocation "onlySERAPHIM"
       Gas costs: 0
       Source: "onlySERAPHIM"
      Identifier onlySERAPHIM
         Type: modifier ()
         Source: "onlySERAPHIM"
    Block
       Source: "{\r\n        Pet storage pet = petCollection[_petId];\r\n        if (pet.owner != _from) {\r\n            return ResultCode.ERROR_NOT_OWNER;\r\n        }\r\n        if (_from == _to) {revert();}\r\n        addPetIdMapping(_to, _petId);\r\n        pet.owner = _to;\r\n        return ResultCode.SUCCESS;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 101
         Source: "Pet storage pet = petCollection[_petId]"
        VariableDeclaration "pet"
           Type: struct PetCardData.Pet storage pointer
           Source: "Pet storage pet"
          UserDefinedTypeName "Pet"
             Source: "Pet"
        IndexAccess
           Type: struct PetCardData.Pet storage ref
           Source: "petCollection[_petId]"
          Identifier petCollection
             Type: mapping(uint256 => struct PetCardData.Pet storage ref)
             Source: "petCollection"
          Identifier _petId
             Type: uint64
             Source: "_petId"
      IfStatement
         Source: "if (pet.owner != _from) {\r\n            return ResultCode.ERROR_NOT_OWNER;\r\n        }"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 316
           Source: "pet.owner != _from"
          MemberAccess to member owner
             Type: address
             Source: "pet.owner"
            Identifier pet
               Type: struct PetCardData.Pet storage pointer
               Source: "pet"
          Identifier _from
             Type: address
             Source: "_from"
        Block
           Source: "{\r\n            return ResultCode.ERROR_NOT_OWNER;\r\n        }"
          Return
             Gas costs: 19
             Source: "return ResultCode.ERROR_NOT_OWNER"
            MemberAccess to member ERROR_NOT_OWNER
               Type: enum Enums.ResultCode
               Source: "ResultCode.ERROR_NOT_OWNER"
              Identifier ResultCode
                 Type: type(enum Enums.ResultCode)
                 Source: "ResultCode"
      IfStatement
         Source: "if (_from == _to) {revert();}"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 21
           Source: "_from == _to"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _to
             Type: address
             Source: "_to"
        Block
           Source: "{revert();}"
          ExpressionStatement
             Gas costs: 6
             Source: "revert()"
            FunctionCall
               Type: tuple()
               Source: "revert()"
              Identifier revert
                 Type: function () pure
                 Source: "revert"
      ExpressionStatement
         Gas costs: 21
         Source: "addPetIdMapping(_to, _petId)"
        FunctionCall
           Type: tuple()
           Source: "addPetIdMapping(_to, _petId)"
          Identifier addPetIdMapping
             Type: function (address,uint64)
             Source: "addPetIdMapping"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _petId
             Type: uint64
             Source: "_petId"
      ExpressionStatement
         Gas costs: 20323
         Source: "pet.owner = _to"
        Assignment using operator =
           Type: address
           Source: "pet.owner = _to"
          MemberAccess to member owner
             Type: address
             Source: "pet.owner"
            Identifier pet
               Type: struct PetCardData.Pet storage pointer
               Source: "pet"
          Identifier _to
             Type: address
             Source: "_to"
      Return
         Gas costs: 8
         Source: "return ResultCode.SUCCESS"
        MemberAccess to member SUCCESS
           Type: enum Enums.ResultCode
           Source: "ResultCode.SUCCESS"
          Identifier ResultCode
             Type: type(enum Enums.ResultCode)
             Source: "ResultCode"
  FunctionDefinition "ownerPetTransfer" - public
     Source: "function ownerPetTransfer (address _to, uint64 _petId)  public  {\r\n     \r\n        if ((_petId > totalPets) || (_petId == 0)) {revert();}\r\n       if (msg.sender == _to) {revert();} //can't send to yourself. \r\n        if (pet.owner != msg.sender) {\r\n            revert();\r\n        }\r\n        else {\r\n      Pet storage pet = petCollection[_petId];\r\n        pet.owner = _to;\r\n        addPetIdMapping(_to, _petId);\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint64 _petId)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_petId"
         Type: uint64
         Source: "uint64 _petId"
        ElementaryTypeName uint64
           Source: "uint64"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n     \r\n        if ((_petId > totalPets) || (_petId == 0)) {revert();}\r\n       if (msg.sender == _to) {revert();} //can't send to yourself. \r\n        if (pet.owner != msg.sender) {\r\n            revert();\r\n        }\r\n        else {\r\n      Pet storage pet = petCollection[_petId];\r\n        pet.owner = _to;\r\n        addPetIdMapping(_to, _petId);\r\n        }\r\n    }"
      IfStatement
         Source: "if ((_petId > totalPets) || (_petId == 0)) {revert();}"
        BinaryOperation using operator ||
           Type: bool
           Gas costs: 341
           Source: "(_petId > totalPets) || (_petId == 0)"
          TupleExpression
             Type: bool
             Source: "(_petId > totalPets)"
            BinaryOperation using operator >
               Type: bool
               Source: "_petId > totalPets"
              Identifier _petId
                 Type: uint64
                 Source: "_petId"
              Identifier totalPets
                 Type: uint64
                 Source: "totalPets"
          TupleExpression
             Type: bool
             Source: "(_petId == 0)"
            BinaryOperation using operator ==
               Type: bool
               Source: "_petId == 0"
              Identifier _petId
                 Type: uint64
                 Source: "_petId"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
        Block
           Source: "{revert();}"
          ExpressionStatement
             Gas costs: 6
             Source: "revert()"
            FunctionCall
               Type: tuple()
               Source: "revert()"
              Identifier revert
                 Type: function () pure
                 Source: "revert"
      IfStatement
         Source: "if (msg.sender == _to) {revert();}"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 20
           Source: "msg.sender == _to"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _to
             Type: address
             Source: "_to"
        Block
           Source: "{revert();}"
          ExpressionStatement
             Gas costs: 6
             Source: "revert()"
            FunctionCall
               Type: tuple()
               Source: "revert()"
              Identifier revert
                 Type: function () pure
                 Source: "revert"
      IfStatement
         Source: "if (pet.owner != msg.sender) {\r\n            revert();\r\n        }\r\n        else {\r\n      Pet storage pet = petCollection[_petId];\r\n        pet.owner = _to;\r\n        addPetIdMapping(_to, _petId);\r\n        }"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 315
           Source: "pet.owner != msg.sender"
          MemberAccess to member owner
             Type: address
             Source: "pet.owner"
            Identifier pet
               Type: struct PetCardData.Pet storage pointer
               Source: "pet"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
        Block
           Source: "{\r\n            revert();\r\n        }"
          ExpressionStatement
             Gas costs: 6
             Source: "revert()"
            FunctionCall
               Type: tuple()
               Source: "revert()"
              Identifier revert
                 Type: function () pure
                 Source: "revert"
        Block
           Source: "{\r\n      Pet storage pet = petCollection[_petId];\r\n        pet.owner = _to;\r\n        addPetIdMapping(_to, _petId);\r\n        }"
          VariableDeclarationStatement
             Gas costs: 101
             Source: "Pet storage pet = petCollection[_petId]"
            VariableDeclaration "pet"
               Type: struct PetCardData.Pet storage pointer
               Source: "Pet storage pet"
              UserDefinedTypeName "Pet"
                 Source: "Pet"
            IndexAccess
               Type: struct PetCardData.Pet storage ref
               Source: "petCollection[_petId]"
              Identifier petCollection
                 Type: mapping(uint256 => struct PetCardData.Pet storage ref)
                 Source: "petCollection"
              Identifier _petId
                 Type: uint64
                 Source: "_petId"
          ExpressionStatement
             Gas costs: 20323
             Source: "pet.owner = _to"
            Assignment using operator =
               Type: address
               Source: "pet.owner = _to"
              MemberAccess to member owner
                 Type: address
                 Source: "pet.owner"
                Identifier pet
                   Type: struct PetCardData.Pet storage pointer
                   Source: "pet"
              Identifier _to
                 Type: address
                 Source: "_to"
          ExpressionStatement
             Gas costs: 10
             Source: "addPetIdMapping(_to, _petId)"
            FunctionCall
               Type: tuple()
               Source: "addPetIdMapping(_to, _petId)"
              Identifier addPetIdMapping
                 Type: function (address,uint64)
                 Source: "addPetIdMapping"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _petId
                 Type: uint64
                 Source: "_petId"
  FunctionDefinition "getPetCardSeries" - public - const
     Source: "function getPetCardSeries(uint8 _petCardSeriesId) constant public returns(uint8 petCardSeriesId, uint32 currentPetTotal, uint32 maxPetTotal) {\r\n        PetCardSeries memory series = petCardSeriesCollection[_petCardSeriesId];\r\n        petCardSeriesId = series.petCardSeriesId;\r\n        currentPetTotal = series.currentPetTotal;\r\n        maxPetTotal = series.maxPetTotal;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint8 _petCardSeriesId)"
      VariableDeclaration "_petCardSeriesId"
         Type: uint8
         Source: "uint8 _petCardSeriesId"
        ElementaryTypeName uint8
           Source: "uint8"
    ParameterList
       Gas costs: 9
       Source: "(uint8 petCardSeriesId, uint32 currentPetTotal, uint32 maxPetTotal)"
      VariableDeclaration "petCardSeriesId"
         Type: uint8
         Source: "uint8 petCardSeriesId"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "currentPetTotal"
         Type: uint32
         Source: "uint32 currentPetTotal"
        ElementaryTypeName uint32
           Source: "uint32"
      VariableDeclaration "maxPetTotal"
         Type: uint32
         Source: "uint32 maxPetTotal"
        ElementaryTypeName uint32
           Source: "uint32"
    Block
       Source: "{\r\n        PetCardSeries memory series = petCardSeriesCollection[_petCardSeriesId];\r\n        petCardSeriesId = series.petCardSeriesId;\r\n        currentPetTotal = series.currentPetTotal;\r\n        maxPetTotal = series.maxPetTotal;\r\n    }"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "PetCardSeries memory series = petCardSeriesCollection[_petCardSeriesId]"
        VariableDeclaration "series"
           Type: struct PetCardData.PetCardSeries memory
           Source: "PetCardSeries memory series"
          UserDefinedTypeName "PetCardSeries"
             Source: "PetCardSeries"
        IndexAccess
           Type: struct PetCardData.PetCardSeries storage ref
           Source: "petCardSeriesCollection[_petCardSeriesId]"
          Identifier petCardSeriesCollection
             Type: mapping(uint8 => struct PetCardData.PetCardSeries storage ref)
             Source: "petCardSeriesCollection"
          Identifier _petCardSeriesId
             Type: uint8
             Source: "_petCardSeriesId"
      ExpressionStatement
         Gas costs: [???]
         Source: "petCardSeriesId = series.petCardSeriesId"
        Assignment using operator =
           Type: uint8
           Source: "petCardSeriesId = series.petCardSeriesId"
          Identifier petCardSeriesId
             Type: uint8
             Source: "petCardSeriesId"
          MemberAccess to member petCardSeriesId
             Type: uint8
             Source: "series.petCardSeriesId"
            Identifier series
               Type: struct PetCardData.PetCardSeries memory
               Source: "series"
      ExpressionStatement
         Gas costs: [???]
         Source: "currentPetTotal = series.currentPetTotal"
        Assignment using operator =
           Type: uint32
           Source: "currentPetTotal = series.currentPetTotal"
          Identifier currentPetTotal
             Type: uint32
             Source: "currentPetTotal"
          MemberAccess to member currentPetTotal
             Type: uint32
             Source: "series.currentPetTotal"
            Identifier series
               Type: struct PetCardData.PetCardSeries memory
               Source: "series"
      ExpressionStatement
         Gas costs: [???]
         Source: "maxPetTotal = series.maxPetTotal"
        Assignment using operator =
           Type: uint32
           Source: "maxPetTotal = series.maxPetTotal"
          Identifier maxPetTotal
             Type: uint32
             Source: "maxPetTotal"
          MemberAccess to member maxPetTotal
             Type: uint32
             Source: "series.maxPetTotal"
            Identifier series
               Type: struct PetCardData.PetCardSeries memory
               Source: "series"
  FunctionDefinition "getPet" - public - const
     Source: "function getPet(uint _petId) constant public returns(uint petId, uint8 petCardSeriesId, string name, uint8 luck, uint16 auraRed, uint16 auraBlue, uint16 auraYellow, uint64 lastTrainingTime, uint64 lastBreedingTime, address owner) {\r\n        Pet memory pet = petCollection[_petId];\r\n        petId = pet.petId;\r\n        petCardSeriesId = pet.petCardSeriesId;\r\n        name = pet.name;\r\n        luck = pet.luck;\r\n        auraRed = pet.auraRed;\r\n        auraBlue = pet.auraBlue;\r\n        auraYellow = pet.auraYellow;\r\n        lastTrainingTime = pet.lastTrainingTime;\r\n        lastBreedingTime = pet.lastBreedingTime;\r\n        owner = pet.owner;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint _petId)"
      VariableDeclaration "_petId"
         Type: uint256
         Source: "uint _petId"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 30
       Source: "(uint petId, uint8 petCardSeriesId, string name, uint8 luck, uint16 auraRed, uint16 auraBlue, uint16 auraYellow, uint64 lastTrainingTime, uint64 lastBreedingTime, address owner)"
      VariableDeclaration "petId"
         Type: uint256
         Source: "uint petId"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "petCardSeriesId"
         Type: uint8
         Source: "uint8 petCardSeriesId"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "name"
         Type: string memory
         Source: "string name"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "luck"
         Type: uint8
         Source: "uint8 luck"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "auraRed"
         Type: uint16
         Source: "uint16 auraRed"
        ElementaryTypeName uint16
           Source: "uint16"
      VariableDeclaration "auraBlue"
         Type: uint16
         Source: "uint16 auraBlue"
        ElementaryTypeName uint16
           Source: "uint16"
      VariableDeclaration "auraYellow"
         Type: uint16
         Source: "uint16 auraYellow"
        ElementaryTypeName uint16
           Source: "uint16"
      VariableDeclaration "lastTrainingTime"
         Type: uint64
         Source: "uint64 lastTrainingTime"
        ElementaryTypeName uint64
           Source: "uint64"
      VariableDeclaration "lastBreedingTime"
         Type: uint64
         Source: "uint64 lastBreedingTime"
        ElementaryTypeName uint64
           Source: "uint64"
      VariableDeclaration "owner"
         Type: address
         Source: "address owner"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\r\n        Pet memory pet = petCollection[_petId];\r\n        petId = pet.petId;\r\n        petCardSeriesId = pet.petCardSeriesId;\r\n        name = pet.name;\r\n        luck = pet.luck;\r\n        auraRed = pet.auraRed;\r\n        auraBlue = pet.auraBlue;\r\n        auraYellow = pet.auraYellow;\r\n        lastTrainingTime = pet.lastTrainingTime;\r\n        lastBreedingTime = pet.lastBreedingTime;\r\n        owner = pet.owner;\r\n    }"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "Pet memory pet = petCollection[_petId]"
        VariableDeclaration "pet"
           Type: struct PetCardData.Pet memory
           Source: "Pet memory pet"
          UserDefinedTypeName "Pet"
             Source: "Pet"
        IndexAccess
           Type: struct PetCardData.Pet storage ref
           Source: "petCollection[_petId]"
          Identifier petCollection
             Type: mapping(uint256 => struct PetCardData.Pet storage ref)
             Source: "petCollection"
          Identifier _petId
             Type: uint256
             Source: "_petId"
      ExpressionStatement
         Gas costs: [???]
         Source: "petId = pet.petId"
        Assignment using operator =
           Type: uint256
           Source: "petId = pet.petId"
          Identifier petId
             Type: uint256
             Source: "petId"
          MemberAccess to member petId
             Type: uint64
             Source: "pet.petId"
            Identifier pet
               Type: struct PetCardData.Pet memory
               Source: "pet"
      ExpressionStatement
         Gas costs: [???]
         Source: "petCardSeriesId = pet.petCardSeriesId"
        Assignment using operator =
           Type: uint8
           Source: "petCardSeriesId = pet.petCardSeriesId"
          Identifier petCardSeriesId
             Type: uint8
             Source: "petCardSeriesId"
          MemberAccess to member petCardSeriesId
             Type: uint8
             Source: "pet.petCardSeriesId"
            Identifier pet
               Type: struct PetCardData.Pet memory
               Source: "pet"
      ExpressionStatement
         Gas costs: [???]
         Source: "name = pet.name"
        Assignment using operator =
           Type: string memory
           Source: "name = pet.name"
          Identifier name
             Type: string memory
             Source: "name"
          MemberAccess to member name
             Type: string memory
             Source: "pet.name"
            Identifier pet
               Type: struct PetCardData.Pet memory
               Source: "pet"
      ExpressionStatement
         Gas costs: [???]
         Source: "luck = pet.luck"
        Assignment using operator =
           Type: uint8
           Source: "luck = pet.luck"
          Identifier luck
             Type: uint8
             Source: "luck"
          MemberAccess to member luck
             Type: uint8
             Source: "pet.luck"
            Identifier pet
               Type: struct PetCardData.Pet memory
               Source: "pet"
      ExpressionStatement
         Gas costs: [???]
         Source: "auraRed = pet.auraRed"
        Assignment using operator =
           Type: uint16
           Source: "auraRed = pet.auraRed"
          Identifier auraRed
             Type: uint16
             Source: "auraRed"
          MemberAccess to member auraRed
             Type: uint16
             Source: "pet.auraRed"
            Identifier pet
               Type: struct PetCardData.Pet memory
               Source: "pet"
      ExpressionStatement
         Gas costs: [???]
         Source: "auraBlue = pet.auraBlue"
        Assignment using operator =
           Type: uint16
           Source: "auraBlue = pet.auraBlue"
          Identifier auraBlue
             Type: uint16
             Source: "auraBlue"
          MemberAccess to member auraBlue
             Type: uint16
             Source: "pet.auraBlue"
            Identifier pet
               Type: struct PetCardData.Pet memory
               Source: "pet"
      ExpressionStatement
         Gas costs: [???]
         Source: "auraYellow = pet.auraYellow"
        Assignment using operator =
           Type: uint16
           Source: "auraYellow = pet.auraYellow"
          Identifier auraYellow
             Type: uint16
             Source: "auraYellow"
          MemberAccess to member auraYellow
             Type: uint16
             Source: "pet.auraYellow"
            Identifier pet
               Type: struct PetCardData.Pet memory
               Source: "pet"
      ExpressionStatement
         Gas costs: [???]
         Source: "lastTrainingTime = pet.lastTrainingTime"
        Assignment using operator =
           Type: uint64
           Source: "lastTrainingTime = pet.lastTrainingTime"
          Identifier lastTrainingTime
             Type: uint64
             Source: "lastTrainingTime"
          MemberAccess to member lastTrainingTime
             Type: uint64
             Source: "pet.lastTrainingTime"
            Identifier pet
               Type: struct PetCardData.Pet memory
               Source: "pet"
      ExpressionStatement
         Gas costs: [???]
         Source: "lastBreedingTime = pet.lastBreedingTime"
        Assignment using operator =
           Type: uint64
           Source: "lastBreedingTime = pet.lastBreedingTime"
          Identifier lastBreedingTime
             Type: uint64
             Source: "lastBreedingTime"
          MemberAccess to member lastBreedingTime
             Type: uint64
             Source: "pet.lastBreedingTime"
            Identifier pet
               Type: struct PetCardData.Pet memory
               Source: "pet"
      ExpressionStatement
         Gas costs: [???]
         Source: "owner = pet.owner"
        Assignment using operator =
           Type: address
           Source: "owner = pet.owner"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member owner
             Type: address
             Source: "pet.owner"
            Identifier pet
               Type: struct PetCardData.Pet memory
               Source: "pet"
  FunctionDefinition "getOwnerPetCount" - public - const
     Source: "function getOwnerPetCount(address _owner) constant public returns(uint) {\r\n        return ownerPetCollection[_owner].length;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        return ownerPetCollection[_owner].length;\r\n    }"
      Return
         Gas costs: 312
         Source: "return ownerPetCollection[_owner].length"
        MemberAccess to member length
           Type: uint256
           Source: "ownerPetCollection[_owner].length"
          IndexAccess
             Type: uint64[] storage ref
             Source: "ownerPetCollection[_owner]"
            Identifier ownerPetCollection
               Type: mapping(address => uint64[] storage ref)
               Source: "ownerPetCollection"
            Identifier _owner
               Type: address
               Source: "_owner"
  FunctionDefinition "getPetByIndex" - public - const
     Source: "function getPetByIndex(address _owner, uint _index) constant public returns(uint) {\r\n        if (_index >= ownerPetCollection[_owner].length)\r\n            return 0;\r\n        return ownerPetCollection[_owner][_index];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, uint _index)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_index"
         Type: uint256
         Source: "uint _index"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        if (_index >= ownerPetCollection[_owner].length)\r\n            return 0;\r\n        return ownerPetCollection[_owner][_index];\r\n    }"
      IfStatement
         Source: "if (_index >= ownerPetCollection[_owner].length)\r\n            return 0"
        BinaryOperation using operator >=
           Type: bool
           Gas costs: 316
           Source: "_index >= ownerPetCollection[_owner].length"
          Identifier _index
             Type: uint256
             Source: "_index"
          MemberAccess to member length
             Type: uint256
             Source: "ownerPetCollection[_owner].length"
            IndexAccess
               Type: uint64[] storage ref
               Source: "ownerPetCollection[_owner]"
              Identifier ownerPetCollection
                 Type: mapping(address => uint64[] storage ref)
                 Source: "ownerPetCollection"
              Identifier _owner
                 Type: address
                 Source: "_owner"
        Return
           Gas costs: 19
           Source: "return 0"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      Return
         Gas costs: 2271
         Source: "return ownerPetCollection[_owner][_index]"
        IndexAccess
           Type: uint64
           Source: "ownerPetCollection[_owner][_index]"
          IndexAccess
             Type: uint64[] storage ref
             Source: "ownerPetCollection[_owner]"
            Identifier ownerPetCollection
               Type: mapping(address => uint64[] storage ref)
               Source: "ownerPetCollection"
            Identifier _owner
               Type: address
               Source: "_owner"
          Identifier _index
             Type: uint256
             Source: "_index"
  FunctionDefinition "getTotalPetCardSeries" - public - const
     Source: "function getTotalPetCardSeries() constant public returns (uint8) {\r\n        return totalPetCardSeries;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint8)"
      VariableDeclaration ""
         Type: uint8
         Source: "uint8"
        ElementaryTypeName uint8
           Source: "uint8"
    Block
       Source: "{\r\n        return totalPetCardSeries;\r\n    }"
      Return
         Gas costs: 294
         Source: "return totalPetCardSeries"
        Identifier totalPetCardSeries
           Type: uint8
           Source: "totalPetCardSeries"
  FunctionDefinition "getTotalPets" - public - const
     Source: "function getTotalPets() constant public returns (uint) {\r\n        return totalPets;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        return totalPets;\r\n    }"
      Return
         Gas costs: 300
         Source: "return totalPets"
        Identifier totalPets
           Type: uint64
           Source: "totalPets"
