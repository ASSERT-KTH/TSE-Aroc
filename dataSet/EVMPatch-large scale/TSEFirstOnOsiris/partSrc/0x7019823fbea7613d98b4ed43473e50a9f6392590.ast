Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0x7019823fbea7613d98b4ed43473e50a9f6392590.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.11;"
ContractDefinition "FlightDelayAccessControllerInterface"
   Gas costs: 0
   Source: "contract FlightDelayAccessControllerInterface {\r\n\r\n    function setPermissionById(uint8 _perm, bytes32 _id) public;\r\n\r\n    function setPermissionById(uint8 _perm, bytes32 _id, bool _access) public;\r\n\r\n    function setPermissionByAddress(uint8 _perm, address _addr) public;\r\n\r\n    function setPermissionByAddress(uint8 _perm, address _addr, bool _access) public;\r\n\r\n    function checkPermission(uint8 _perm, address _addr) public returns (bool _success);\r\n}"
  FunctionDefinition "setPermissionById" - public
     Source: "function setPermissionById(uint8 _perm, bytes32 _id) public;"
    ParameterList
       Source: "(uint8 _perm, bytes32 _id)"
      VariableDeclaration "_perm"
         Type: uint8
         Source: "uint8 _perm"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "_id"
         Type: bytes32
         Source: "bytes32 _id"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Source: ""
  FunctionDefinition "setPermissionById" - public
     Source: "function setPermissionById(uint8 _perm, bytes32 _id, bool _access) public;"
    ParameterList
       Source: "(uint8 _perm, bytes32 _id, bool _access)"
      VariableDeclaration "_perm"
         Type: uint8
         Source: "uint8 _perm"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "_id"
         Type: bytes32
         Source: "bytes32 _id"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "_access"
         Type: bool
         Source: "bool _access"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
  FunctionDefinition "setPermissionByAddress" - public
     Source: "function setPermissionByAddress(uint8 _perm, address _addr) public;"
    ParameterList
       Source: "(uint8 _perm, address _addr)"
      VariableDeclaration "_perm"
         Type: uint8
         Source: "uint8 _perm"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
  FunctionDefinition "setPermissionByAddress" - public
     Source: "function setPermissionByAddress(uint8 _perm, address _addr, bool _access) public;"
    ParameterList
       Source: "(uint8 _perm, address _addr, bool _access)"
      VariableDeclaration "_perm"
         Type: uint8
         Source: "uint8 _perm"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_access"
         Type: bool
         Source: "bool _access"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
  FunctionDefinition "checkPermission" - public
     Source: "function checkPermission(uint8 _perm, address _addr) public returns (bool _success);"
    ParameterList
       Source: "(uint8 _perm, address _addr)"
      VariableDeclaration "_perm"
         Type: uint8
         Source: "uint8 _perm"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(bool _success)"
      VariableDeclaration "_success"
         Type: bool
         Source: "bool _success"
        ElementaryTypeName bool
           Source: "bool"
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.11;"
ContractDefinition "FlightDelayConstants"
   Gas costs: 0
   Source: "contract FlightDelayConstants {\r\n\r\n    /*\r\n    * General events\r\n    */\r\n\r\n// --> test-mode\r\n//        event LogUint(string _message, uint _uint);\r\n//        event LogUintEth(string _message, uint ethUint);\r\n//        event LogUintTime(string _message, uint timeUint);\r\n//        event LogInt(string _message, int _int);\r\n//        event LogAddress(string _message, address _address);\r\n//        event LogBytes32(string _message, bytes32 hexBytes32);\r\n//        event LogBytes(string _message, bytes hexBytes);\r\n//        event LogBytes32Str(string _message, bytes32 strBytes32);\r\n//        event LogString(string _message, string _string);\r\n//        event LogBool(string _message, bool _bool);\r\n//        event Log(address);\r\n// <-- test-mode\r\n\r\n    event LogPolicyApplied(\r\n        uint _policyId,\r\n        address _customer,\r\n        bytes32 strCarrierFlightNumber,\r\n        uint ethPremium\r\n    );\r\n    event LogPolicyAccepted(\r\n        uint _policyId,\r\n        uint _statistics0,\r\n        uint _statistics1,\r\n        uint _statistics2,\r\n        uint _statistics3,\r\n        uint _statistics4,\r\n        uint _statistics5\r\n    );\r\n    event LogPolicyPaidOut(\r\n        uint _policyId,\r\n        uint ethAmount\r\n    );\r\n    event LogPolicyExpired(\r\n        uint _policyId\r\n    );\r\n    event LogPolicyDeclined(\r\n        uint _policyId,\r\n        bytes32 strReason\r\n    );\r\n    event LogPolicyManualPayout(\r\n        uint _policyId,\r\n        bytes32 strReason\r\n    );\r\n    event LogSendFunds(\r\n        address _recipient,\r\n        uint8 _from,\r\n        uint ethAmount\r\n    );\r\n    event LogReceiveFunds(\r\n        address _sender,\r\n        uint8 _to,\r\n        uint ethAmount\r\n    );\r\n    event LogSendFail(\r\n        uint _policyId,\r\n        bytes32 strReason\r\n    );\r\n    event LogOraclizeCall(\r\n        uint _policyId,\r\n        bytes32 hexQueryId,\r\n        string _oraclizeUrl,\r\n        uint256 _oraclizeTime\r\n    );\r\n    event LogOraclizeCallback(\r\n        uint _policyId,\r\n        bytes32 hexQueryId,\r\n        string _result,\r\n        bytes hexProof\r\n    );\r\n    event LogSetState(\r\n        uint _policyId,\r\n        uint8 _policyState,\r\n        uint _stateTime,\r\n        bytes32 _stateMessage\r\n    );\r\n    event LogExternal(\r\n        uint256 _policyId,\r\n        address _address,\r\n        bytes32 _externalId\r\n    );\r\n\r\n    /*\r\n    * General constants\r\n    */\r\n\r\n    // minimum observations for valid prediction\r\n    uint constant MIN_OBSERVATIONS = 10;\r\n    // minimum premium to cover costs\r\n    uint constant MIN_PREMIUM = 50 finney;\r\n    // maximum premium\r\n    uint constant MAX_PREMIUM = 1 ether;\r\n    // maximum payout\r\n    uint constant MAX_PAYOUT = 1100 finney;\r\n\r\n    uint constant MIN_PREMIUM_EUR = 1500 wei;\r\n    uint constant MAX_PREMIUM_EUR = 29000 wei;\r\n    uint constant MAX_PAYOUT_EUR = 30000 wei;\r\n\r\n    uint constant MIN_PREMIUM_USD = 1700 wei;\r\n    uint constant MAX_PREMIUM_USD = 34000 wei;\r\n    uint constant MAX_PAYOUT_USD = 35000 wei;\r\n\r\n    uint constant MIN_PREMIUM_GBP = 1300 wei;\r\n    uint constant MAX_PREMIUM_GBP = 25000 wei;\r\n    uint constant MAX_PAYOUT_GBP = 270 wei;\r\n\r\n    // maximum cumulated weighted premium per risk\r\n    uint constant MAX_CUMULATED_WEIGHTED_PREMIUM = 60 ether;\r\n    // 1 percent for DAO, 1 percent for maintainer\r\n    uint8 constant REWARD_PERCENT = 2;\r\n    // reserve for tail risks\r\n    uint8 constant RESERVE_PERCENT = 1;\r\n    // the weight pattern; in future versions this may become part of the policy struct.\r\n    // currently can't be constant because of compiler restrictions\r\n    // WEIGHT_PATTERN[0] is not used, just to be consistent\r\n    uint8[6] WEIGHT_PATTERN = [\r\n        0,\r\n        10,\r\n        20,\r\n        30,\r\n        50,\r\n        50\r\n    ];\r\n\r\n// --> prod-mode\r\n    // DEFINITIONS FOR ROPSTEN AND MAINNET\r\n    // minimum time before departure for applying\r\n    uint constant MIN_TIME_BEFORE_DEPARTURE\t= 24 hours; // for production\r\n    // check for delay after .. minutes after scheduled arrival\r\n    uint constant CHECK_PAYOUT_OFFSET = 15 minutes; // for production\r\n// <-- prod-mode\r\n\r\n// --> test-mode\r\n//        // DEFINITIONS FOR LOCAL TESTNET\r\n//        // minimum time before departure for applying\r\n//        uint constant MIN_TIME_BEFORE_DEPARTURE = 1 seconds; // for testing\r\n//        // check for delay after .. minutes after scheduled arrival\r\n//        uint constant CHECK_PAYOUT_OFFSET = 1 seconds; // for testing\r\n// <-- test-mode\r\n\r\n    // maximum duration of flight\r\n    uint constant MAX_FLIGHT_DURATION = 2 days;\r\n    // Deadline for acceptance of policies: 31.12.2030 (Testnet)\r\n    uint constant CONTRACT_DEAD_LINE = 1922396399;\r\n\r\n    // gas Constants for oraclize\r\n    uint constant ORACLIZE_GAS = 700000;\r\n    uint constant ORACLIZE_GASPRICE = 4000000000;\r\n\r\n\r\n    /*\r\n    * URLs and query strings for oraclize\r\n    */\r\n\r\n// --> prod-mode\r\n    // DEFINITIONS FOR ROPSTEN AND MAINNET\r\n    string constant ORACLIZE_RATINGS_BASE_URL =\r\n        // ratings api is v1, see https://developer.flightstats.com/api-docs/ratings/v1\r\n        \"[URL] json(https://api.flightstats.com/flex/ratings/rest/v1/json/flight/\";\r\n    string constant ORACLIZE_RATINGS_QUERY =\r\n        \"?${[decrypt] BAr6Z9QolM2PQimF/pNC6zXldOvZ2qquOSKm/qJkJWnSGgAeRw21wBGnBbXiamr/ISC5SlcJB6wEPKthdc6F+IpqM/iXavKsalRUrGNuBsGfaMXr8fRQw6gLzqk0ecOFNeCa48/yqBvC/kas+jTKHiYxA3wTJrVZCq76Y03lZI2xxLaoniRk}).ratings[0]['observations','late15','late30','late45','cancelled','diverted','arrivalAirportFsCode','departureAirportFsCode']\";\r\n    string constant ORACLIZE_STATUS_BASE_URL =\r\n        // flight status api is v2, see https://developer.flightstats.com/api-docs/flightstatus/v2/flight\r\n        \"[URL] json(https://api.flightstats.com/flex/flightstatus/rest/v2/json/flight/status/\";\r\n    string constant ORACLIZE_STATUS_QUERY =\r\n        // pattern:\r\n        \"?${[decrypt] BJxpwRaHujYTT98qI5slQJplj/VbfV7vYkMOp/Mr5D/5+gkgJQKZb0gVSCa6aKx2Wogo/cG7yaWINR6vnuYzccQE5yVJSr7RQilRawxnAtZXt6JB70YpX4xlfvpipit4R+OmQTurJGGwb8Pgnr4LvotydCjup6wv2Bk/z3UdGA7Sl+FU5a+0}&utc=true).flightStatuses[0]['status','delays','operationalTimes']\";\r\n// <-- prod-mode\r\n\r\n// --> test-mode\r\n//        // DEFINITIONS FOR LOCAL TESTNET\r\n//        string constant ORACLIZE_RATINGS_BASE_URL =\r\n//            // ratings api is v1, see https://developer.flightstats.com/api-docs/ratings/v1\r\n//            \"[URL] json(https://api-test.etherisc.com/flex/ratings/rest/v1/json/flight/\";\r\n//        string constant ORACLIZE_RATINGS_QUERY =\r\n//            // for testrpc:\r\n//            \").ratings[0]['observations','late15','late30','late45','cancelled','diverted','arrivalAirportFsCode','departureAirportFsCode']\";\r\n//        string constant ORACLIZE_STATUS_BASE_URL =\r\n//            // flight status api is v2, see https://developer.flightstats.com/api-docs/flightstatus/v2/flight\r\n//            \"[URL] json(https://api-test.etherisc.com/flex/flightstatus/rest/v2/json/flight/status/\";\r\n//        string constant ORACLIZE_STATUS_QUERY =\r\n//            // for testrpc:\r\n//            \"?utc=true).flightStatuses[0]['status','delays','operationalTimes']\";\r\n// <-- test-mode\r\n}"
  EventDefinition "LogPolicyApplied"
     Source: "event LogPolicyApplied(\r\n        uint _policyId,\r\n        address _customer,\r\n        bytes32 strCarrierFlightNumber,\r\n        uint ethPremium\r\n    );"
    ParameterList
       Source: "(\r\n        uint _policyId,\r\n        address _customer,\r\n        bytes32 strCarrierFlightNumber,\r\n        uint ethPremium\r\n    )"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_customer"
         Type: address
         Source: "address _customer"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "strCarrierFlightNumber"
         Type: bytes32
         Source: "bytes32 strCarrierFlightNumber"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "ethPremium"
         Type: uint256
         Source: "uint ethPremium"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "LogPolicyAccepted"
     Source: "event LogPolicyAccepted(\r\n        uint _policyId,\r\n        uint _statistics0,\r\n        uint _statistics1,\r\n        uint _statistics2,\r\n        uint _statistics3,\r\n        uint _statistics4,\r\n        uint _statistics5\r\n    );"
    ParameterList
       Source: "(\r\n        uint _policyId,\r\n        uint _statistics0,\r\n        uint _statistics1,\r\n        uint _statistics2,\r\n        uint _statistics3,\r\n        uint _statistics4,\r\n        uint _statistics5\r\n    )"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_statistics0"
         Type: uint256
         Source: "uint _statistics0"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_statistics1"
         Type: uint256
         Source: "uint _statistics1"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_statistics2"
         Type: uint256
         Source: "uint _statistics2"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_statistics3"
         Type: uint256
         Source: "uint _statistics3"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_statistics4"
         Type: uint256
         Source: "uint _statistics4"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_statistics5"
         Type: uint256
         Source: "uint _statistics5"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "LogPolicyPaidOut"
     Source: "event LogPolicyPaidOut(\r\n        uint _policyId,\r\n        uint ethAmount\r\n    );"
    ParameterList
       Source: "(\r\n        uint _policyId,\r\n        uint ethAmount\r\n    )"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "ethAmount"
         Type: uint256
         Source: "uint ethAmount"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "LogPolicyExpired"
     Source: "event LogPolicyExpired(\r\n        uint _policyId\r\n    );"
    ParameterList
       Source: "(\r\n        uint _policyId\r\n    )"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "LogPolicyDeclined"
     Source: "event LogPolicyDeclined(\r\n        uint _policyId,\r\n        bytes32 strReason\r\n    );"
    ParameterList
       Source: "(\r\n        uint _policyId,\r\n        bytes32 strReason\r\n    )"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "strReason"
         Type: bytes32
         Source: "bytes32 strReason"
        ElementaryTypeName bytes32
           Source: "bytes32"
  EventDefinition "LogPolicyManualPayout"
     Source: "event LogPolicyManualPayout(\r\n        uint _policyId,\r\n        bytes32 strReason\r\n    );"
    ParameterList
       Source: "(\r\n        uint _policyId,\r\n        bytes32 strReason\r\n    )"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "strReason"
         Type: bytes32
         Source: "bytes32 strReason"
        ElementaryTypeName bytes32
           Source: "bytes32"
  EventDefinition "LogSendFunds"
     Source: "event LogSendFunds(\r\n        address _recipient,\r\n        uint8 _from,\r\n        uint ethAmount\r\n    );"
    ParameterList
       Source: "(\r\n        address _recipient,\r\n        uint8 _from,\r\n        uint ethAmount\r\n    )"
      VariableDeclaration "_recipient"
         Type: address
         Source: "address _recipient"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_from"
         Type: uint8
         Source: "uint8 _from"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "ethAmount"
         Type: uint256
         Source: "uint ethAmount"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "LogReceiveFunds"
     Source: "event LogReceiveFunds(\r\n        address _sender,\r\n        uint8 _to,\r\n        uint ethAmount\r\n    );"
    ParameterList
       Source: "(\r\n        address _sender,\r\n        uint8 _to,\r\n        uint ethAmount\r\n    )"
      VariableDeclaration "_sender"
         Type: address
         Source: "address _sender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: uint8
         Source: "uint8 _to"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "ethAmount"
         Type: uint256
         Source: "uint ethAmount"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "LogSendFail"
     Source: "event LogSendFail(\r\n        uint _policyId,\r\n        bytes32 strReason\r\n    );"
    ParameterList
       Source: "(\r\n        uint _policyId,\r\n        bytes32 strReason\r\n    )"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "strReason"
         Type: bytes32
         Source: "bytes32 strReason"
        ElementaryTypeName bytes32
           Source: "bytes32"
  EventDefinition "LogOraclizeCall"
     Source: "event LogOraclizeCall(\r\n        uint _policyId,\r\n        bytes32 hexQueryId,\r\n        string _oraclizeUrl,\r\n        uint256 _oraclizeTime\r\n    );"
    ParameterList
       Source: "(\r\n        uint _policyId,\r\n        bytes32 hexQueryId,\r\n        string _oraclizeUrl,\r\n        uint256 _oraclizeTime\r\n    )"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "hexQueryId"
         Type: bytes32
         Source: "bytes32 hexQueryId"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "_oraclizeUrl"
         Type: string memory
         Source: "string _oraclizeUrl"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "_oraclizeTime"
         Type: uint256
         Source: "uint256 _oraclizeTime"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "LogOraclizeCallback"
     Source: "event LogOraclizeCallback(\r\n        uint _policyId,\r\n        bytes32 hexQueryId,\r\n        string _result,\r\n        bytes hexProof\r\n    );"
    ParameterList
       Source: "(\r\n        uint _policyId,\r\n        bytes32 hexQueryId,\r\n        string _result,\r\n        bytes hexProof\r\n    )"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "hexQueryId"
         Type: bytes32
         Source: "bytes32 hexQueryId"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "_result"
         Type: string memory
         Source: "string _result"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "hexProof"
         Type: bytes memory
         Source: "bytes hexProof"
        ElementaryTypeName bytes
           Source: "bytes"
  EventDefinition "LogSetState"
     Source: "event LogSetState(\r\n        uint _policyId,\r\n        uint8 _policyState,\r\n        uint _stateTime,\r\n        bytes32 _stateMessage\r\n    );"
    ParameterList
       Source: "(\r\n        uint _policyId,\r\n        uint8 _policyState,\r\n        uint _stateTime,\r\n        bytes32 _stateMessage\r\n    )"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_policyState"
         Type: uint8
         Source: "uint8 _policyState"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "_stateTime"
         Type: uint256
         Source: "uint _stateTime"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_stateMessage"
         Type: bytes32
         Source: "bytes32 _stateMessage"
        ElementaryTypeName bytes32
           Source: "bytes32"
  EventDefinition "LogExternal"
     Source: "event LogExternal(\r\n        uint256 _policyId,\r\n        address _address,\r\n        bytes32 _externalId\r\n    );"
    ParameterList
       Source: "(\r\n        uint256 _policyId,\r\n        address _address,\r\n        bytes32 _externalId\r\n    )"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint256 _policyId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_externalId"
         Type: bytes32
         Source: "bytes32 _externalId"
        ElementaryTypeName bytes32
           Source: "bytes32"
  VariableDeclaration "MIN_OBSERVATIONS"
     Type: uint256
     Source: "uint constant MIN_OBSERVATIONS = 10"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 10
       Type: int_const 10
       Source: "10"
  VariableDeclaration "MIN_PREMIUM"
     Type: uint256
     Source: "uint constant MIN_PREMIUM = 50 finney"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 50
       Type: int_const 50000000000000000
       Source: "50 finney"
  VariableDeclaration "MAX_PREMIUM"
     Type: uint256
     Source: "uint constant MAX_PREMIUM = 1 ether"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 1
       Type: int_const 1000000000000000000
       Source: "1 ether"
  VariableDeclaration "MAX_PAYOUT"
     Type: uint256
     Source: "uint constant MAX_PAYOUT = 1100 finney"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 1100
       Type: int_const 1100000000000000000
       Source: "1100 finney"
  VariableDeclaration "MIN_PREMIUM_EUR"
     Type: uint256
     Source: "uint constant MIN_PREMIUM_EUR = 1500 wei"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 1500
       Type: int_const 1500
       Source: "1500 wei"
  VariableDeclaration "MAX_PREMIUM_EUR"
     Type: uint256
     Source: "uint constant MAX_PREMIUM_EUR = 29000 wei"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 29000
       Type: int_const 29000
       Source: "29000 wei"
  VariableDeclaration "MAX_PAYOUT_EUR"
     Type: uint256
     Source: "uint constant MAX_PAYOUT_EUR = 30000 wei"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 30000
       Type: int_const 30000
       Source: "30000 wei"
  VariableDeclaration "MIN_PREMIUM_USD"
     Type: uint256
     Source: "uint constant MIN_PREMIUM_USD = 1700 wei"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 1700
       Type: int_const 1700
       Source: "1700 wei"
  VariableDeclaration "MAX_PREMIUM_USD"
     Type: uint256
     Source: "uint constant MAX_PREMIUM_USD = 34000 wei"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 34000
       Type: int_const 34000
       Source: "34000 wei"
  VariableDeclaration "MAX_PAYOUT_USD"
     Type: uint256
     Source: "uint constant MAX_PAYOUT_USD = 35000 wei"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 35000
       Type: int_const 35000
       Source: "35000 wei"
  VariableDeclaration "MIN_PREMIUM_GBP"
     Type: uint256
     Source: "uint constant MIN_PREMIUM_GBP = 1300 wei"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 1300
       Type: int_const 1300
       Source: "1300 wei"
  VariableDeclaration "MAX_PREMIUM_GBP"
     Type: uint256
     Source: "uint constant MAX_PREMIUM_GBP = 25000 wei"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 25000
       Type: int_const 25000
       Source: "25000 wei"
  VariableDeclaration "MAX_PAYOUT_GBP"
     Type: uint256
     Source: "uint constant MAX_PAYOUT_GBP = 270 wei"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 270
       Type: int_const 270
       Source: "270 wei"
  VariableDeclaration "MAX_CUMULATED_WEIGHTED_PREMIUM"
     Type: uint256
     Source: "uint constant MAX_CUMULATED_WEIGHTED_PREMIUM = 60 ether"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 60
       Type: int_const 60000000000000000000
       Source: "60 ether"
  VariableDeclaration "REWARD_PERCENT"
     Type: uint8
     Source: "uint8 constant REWARD_PERCENT = 2"
    ElementaryTypeName uint8
       Source: "uint8"
    Literal, token: [no token] value: 2
       Type: int_const 2
       Source: "2"
  VariableDeclaration "RESERVE_PERCENT"
     Type: uint8
     Source: "uint8 constant RESERVE_PERCENT = 1"
    ElementaryTypeName uint8
       Source: "uint8"
    Literal, token: [no token] value: 1
       Type: int_const 1
       Source: "1"
  VariableDeclaration "WEIGHT_PATTERN"
     Type: uint8[6] storage ref
     Source: "uint8[6] WEIGHT_PATTERN = [\r\n        0,\r\n        10,\r\n        20,\r\n        30,\r\n        50,\r\n        50\r\n    ]"
    ArrayTypeName
       Source: "uint8[6]"
      ElementaryTypeName uint8
         Source: "uint8"
      Literal, token: [no token] value: 6
         Type unknown.
         Source: "6"
    TupleExpression
       Type: uint8[6] memory
       Source: "[\r\n        0,\r\n        10,\r\n        20,\r\n        30,\r\n        50,\r\n        50\r\n    ]"
      Literal, token: [no token] value: 0
         Type: int_const 0
         Source: "0"
      Literal, token: [no token] value: 10
         Type: int_const 10
         Source: "10"
      Literal, token: [no token] value: 20
         Type: int_const 20
         Source: "20"
      Literal, token: [no token] value: 30
         Type: int_const 30
         Source: "30"
      Literal, token: [no token] value: 50
         Type: int_const 50
         Source: "50"
      Literal, token: [no token] value: 50
         Type: int_const 50
         Source: "50"
  VariableDeclaration "MIN_TIME_BEFORE_DEPARTURE"
     Type: uint256
     Source: "uint constant MIN_TIME_BEFORE_DEPARTURE\t= 24 hours"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 24
       Type: int_const 86400
       Source: "24 hours"
  VariableDeclaration "CHECK_PAYOUT_OFFSET"
     Type: uint256
     Source: "uint constant CHECK_PAYOUT_OFFSET = 15 minutes"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 15
       Type: int_const 900
       Source: "15 minutes"
  VariableDeclaration "MAX_FLIGHT_DURATION"
     Type: uint256
     Source: "uint constant MAX_FLIGHT_DURATION = 2 days"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 2
       Type: int_const 172800
       Source: "2 days"
  VariableDeclaration "CONTRACT_DEAD_LINE"
     Type: uint256
     Source: "uint constant CONTRACT_DEAD_LINE = 1922396399"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 1922396399
       Type: int_const 1922396399
       Source: "1922396399"
  VariableDeclaration "ORACLIZE_GAS"
     Type: uint256
     Source: "uint constant ORACLIZE_GAS = 700000"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 700000
       Type: int_const 700000
       Source: "700000"
  VariableDeclaration "ORACLIZE_GASPRICE"
     Type: uint256
     Source: "uint constant ORACLIZE_GASPRICE = 4000000000"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 4000000000
       Type: int_const 4000000000
       Source: "4000000000"
  VariableDeclaration "ORACLIZE_RATINGS_BASE_URL"
     Type: string memory
     Source: "string constant ORACLIZE_RATINGS_BASE_URL =\r\n        // ratings api is v1, see https://developer.flightstats.com/api-docs/ratings/v1\r\n        \"[URL] json(https://api.flightstats.com/flex/ratings/rest/v1/json/flight/\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: [URL] json(https://api.flightstats.com/flex/ratings/rest/v1/json/flight/
       Type: literal_string "[URL] json(https://api.flightstats.com/flex/ratings/rest/v1/json/flight/"
       Source: "\"[URL] json(https://api.flightstats.com/flex/ratings/rest/v1/json/flight/\""
  VariableDeclaration "ORACLIZE_RATINGS_QUERY"
     Type: string memory
     Source: "string constant ORACLIZE_RATINGS_QUERY =\r\n        \"?${[decrypt] BAr6Z9QolM2PQimF/pNC6zXldOvZ2qquOSKm/qJkJWnSGgAeRw21wBGnBbXiamr/ISC5SlcJB6wEPKthdc6F+IpqM/iXavKsalRUrGNuBsGfaMXr8fRQw6gLzqk0ecOFNeCa48/yqBvC/kas+jTKHiYxA3wTJrVZCq76Y03lZI2xxLaoniRk}).ratings[0]['observations','late15','late30','late45','cancelled','diverted','arrivalAirportFsCode','departureAirportFsCode']\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: ?${[decrypt] BAr6Z9QolM2PQimF/pNC6zXldOvZ2qquOSKm/qJkJWnSGgAeRw21wBGnBbXiamr/ISC5SlcJB6wEPKthdc6F+IpqM/iXavKsalRUrGNuBsGfaMXr8fRQw6gLzqk0ecOFNeCa48/yqBvC/kas+jTKHiYxA3wTJrVZCq76Y03lZI2xxLaoniRk}).ratings[0]['observations','late15','late30','late45','cancelled','diverted','arrivalAirportFsCode','departureAirportFsCode']
       Type: literal_string "?${[decrypt] BAr6Z9QolM2PQimF/pNC6zXldOvZ2qquOSKm/qJkJWnSGgAeRw21wBGnBbXiamr/ISC5SlcJB6wEPKthdc6F+IpqM/iXavKsalRUrGNuBsGfaMXr8fRQw6gLzqk0ecOFNeCa48/yqBvC/kas+jTKHiYxA3wTJrVZCq76Y03lZI2xxLaoniRk}).ratings[0]['observations','late15','late30','late45','cancelled','diverted','arrivalAirportFsCode','departureAirportFsCode']"
       Source: "\"?${[decrypt] BAr6Z9QolM2PQimF/pNC6zXldOvZ2qquOSKm/qJkJWnSGgAeRw21wBGnBbXiamr/ISC5SlcJB6wEPKthdc6F+IpqM/iXavKsalRUrGNuBsGfaMXr8fRQw6gLzqk0ecOFNeCa48/yqBvC/kas+jTKHiYxA3wTJrVZCq76Y03lZI2xxLaoniRk}).ratings[0]['observations','late15','late30','late45','cancelled','diverted','arrivalAirportFsCode','departureAirportFsCode']\""
  VariableDeclaration "ORACLIZE_STATUS_BASE_URL"
     Type: string memory
     Source: "string constant ORACLIZE_STATUS_BASE_URL =\r\n        // flight status api is v2, see https://developer.flightstats.com/api-docs/flightstatus/v2/flight\r\n        \"[URL] json(https://api.flightstats.com/flex/flightstatus/rest/v2/json/flight/status/\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: [URL] json(https://api.flightstats.com/flex/flightstatus/rest/v2/json/flight/status/
       Type: literal_string "[URL] json(https://api.flightstats.com/flex/flightstatus/rest/v2/json/flight/status/"
       Source: "\"[URL] json(https://api.flightstats.com/flex/flightstatus/rest/v2/json/flight/status/\""
  VariableDeclaration "ORACLIZE_STATUS_QUERY"
     Type: string memory
     Source: "string constant ORACLIZE_STATUS_QUERY =\r\n        // pattern:\r\n        \"?${[decrypt] BJxpwRaHujYTT98qI5slQJplj/VbfV7vYkMOp/Mr5D/5+gkgJQKZb0gVSCa6aKx2Wogo/cG7yaWINR6vnuYzccQE5yVJSr7RQilRawxnAtZXt6JB70YpX4xlfvpipit4R+OmQTurJGGwb8Pgnr4LvotydCjup6wv2Bk/z3UdGA7Sl+FU5a+0}&utc=true).flightStatuses[0]['status','delays','operationalTimes']\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: ?${[decrypt] BJxpwRaHujYTT98qI5slQJplj/VbfV7vYkMOp/Mr5D/5+gkgJQKZb0gVSCa6aKx2Wogo/cG7yaWINR6vnuYzccQE5yVJSr7RQilRawxnAtZXt6JB70YpX4xlfvpipit4R+OmQTurJGGwb8Pgnr4LvotydCjup6wv2Bk/z3UdGA7Sl+FU5a+0}&utc=true).flightStatuses[0]['status','delays','operationalTimes']
       Type: literal_string "?${[decrypt] BJxpwRaHujYTT98qI5slQJplj/VbfV7vYkMOp/Mr5D/5+gkgJQKZb0gVSCa6aKx2Wogo/cG7yaWINR6vnuYzccQE5yVJSr7RQilRawxnAtZXt6JB70YpX4xlfvpipit4R+OmQTurJGGwb8Pgnr4LvotydCjup6wv2Bk/z3UdGA7Sl+FU5a+0}&utc=true).flightStatuses[0]['status','delays','operationalTimes']"
       Source: "\"?${[decrypt] BJxpwRaHujYTT98qI5slQJplj/VbfV7vYkMOp/Mr5D/5+gkgJQKZb0gVSCa6aKx2Wogo/cG7yaWINR6vnuYzccQE5yVJSr7RQilRawxnAtZXt6JB70YpX4xlfvpipit4R+OmQTurJGGwb8Pgnr4LvotydCjup6wv2Bk/z3UdGA7Sl+FU5a+0}&utc=true).flightStatuses[0]['status','delays','operationalTimes']\""
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.11;"
ContractDefinition "FlightDelayControllerInterface"
   Gas costs: 0
   Source: "contract FlightDelayControllerInterface {\r\n\r\n    function isOwner(address _addr) public returns (bool _isOwner);\r\n\r\n    function selfRegister(bytes32 _id) public returns (bool result);\r\n\r\n    function getContract(bytes32 _id) public returns (address _addr);\r\n}"
  FunctionDefinition "isOwner" - public
     Source: "function isOwner(address _addr) public returns (bool _isOwner);"
    ParameterList
       Source: "(address _addr)"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(bool _isOwner)"
      VariableDeclaration "_isOwner"
         Type: bool
         Source: "bool _isOwner"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "selfRegister" - public
     Source: "function selfRegister(bytes32 _id) public returns (bool result);"
    ParameterList
       Source: "(bytes32 _id)"
      VariableDeclaration "_id"
         Type: bytes32
         Source: "bytes32 _id"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Source: "(bool result)"
      VariableDeclaration "result"
         Type: bool
         Source: "bool result"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "getContract" - public
     Source: "function getContract(bytes32 _id) public returns (address _addr);"
    ParameterList
       Source: "(bytes32 _id)"
      VariableDeclaration "_id"
         Type: bytes32
         Source: "bytes32 _id"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Source: "(address _addr)"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.11;"
ContractDefinition "FlightDelayDatabaseModel"
   Gas costs: 0
   Source: "contract FlightDelayDatabaseModel {\r\n\r\n    // Ledger accounts.\r\n    enum Acc {\r\n        Premium,      // 0\r\n        RiskFund,     // 1\r\n        Payout,       // 2\r\n        Balance,      // 3\r\n        Reward,       // 4\r\n        OraclizeCosts // 5\r\n    }\r\n\r\n    // policy Status Codes and meaning:\r\n    //\r\n    // 00 = Applied:\t  the customer has payed a premium, but the oracle has\r\n    //\t\t\t\t\t        not yet checked and confirmed.\r\n    //\t\t\t\t\t        The customer can still revoke the policy.\r\n    // 01 = Accepted:\t  the oracle has checked and confirmed.\r\n    //\t\t\t\t\t        The customer can still revoke the policy.\r\n    // 02 = Revoked:\t  The customer has revoked the policy.\r\n    //\t\t\t\t\t        The premium minus cancellation fee is payed back to the\r\n    //\t\t\t\t\t        customer by the oracle.\r\n    // 03 = PaidOut:\t  The flight has ended with delay.\r\n    //\t\t\t\t\t        The oracle has checked and payed out.\r\n    // 04 = Expired:\t  The flight has endet with <15min. delay.\r\n    //\t\t\t\t\t        No payout.\r\n    // 05 = Declined:\t  The application was invalid.\r\n    //\t\t\t\t\t        The premium minus cancellation fee is payed back to the\r\n    //\t\t\t\t\t        customer by the oracle.\r\n    // 06 = SendFailed:\tDuring Revoke, Decline or Payout, sending ether failed\r\n    //\t\t\t\t\t        for unknown reasons.\r\n    //\t\t\t\t\t        The funds remain in the contracts RiskFund.\r\n\r\n\r\n    //                   00       01        02       03        04      05           06\r\n    enum policyState { Applied, Accepted, Revoked, PaidOut, Expired, Declined, SendFailed }\r\n\r\n    // oraclize callback types:\r\n    enum oraclizeState { ForUnderwriting, ForPayout }\r\n\r\n    //               00   01   02   03\r\n    enum Currency { ETH, EUR, USD, GBP }\r\n\r\n    // the policy structure: this structure keeps track of the individual parameters of a policy.\r\n    // typically customer address, premium and some status information.\r\n    struct Policy {\r\n        // 0 - the customer\r\n        address customer;\r\n\r\n        // 1 - premium\r\n        uint premium;\r\n        // risk specific parameters:\r\n        // 2 - pointer to the risk in the risks mapping\r\n        bytes32 riskId;\r\n        // custom payout pattern\r\n        // in future versions, customer will be able to tamper with this array.\r\n        // to keep things simple, we have decided to hard-code the array for all policies.\r\n        // uint8[5] pattern;\r\n        // 3 - probability weight. this is the central parameter\r\n        uint weight;\r\n        // 4 - calculated Payout\r\n        uint calculatedPayout;\r\n        // 5 - actual Payout\r\n        uint actualPayout;\r\n\r\n        // status fields:\r\n        // 6 - the state of the policy\r\n        policyState state;\r\n        // 7 - time of last state change\r\n        uint stateTime;\r\n        // 8 - state change message/reason\r\n        bytes32 stateMessage;\r\n        // 9 - TLSNotary Proof\r\n        bytes proof;\r\n        // 10 - Currency\r\n        Currency currency;\r\n        // 10 - External customer id\r\n        bytes32 customerExternalId;\r\n    }\r\n\r\n    // the risk structure; this structure keeps track of the risk-\r\n    // specific parameters.\r\n    // several policies can share the same risk structure (typically\r\n    // some people flying with the same plane)\r\n    struct Risk {\r\n        // 0 - Airline Code + FlightNumber\r\n        bytes32 carrierFlightNumber;\r\n        // 1 - scheduled departure and arrival time in the format /dep/YYYY/MM/DD\r\n        bytes32 departureYearMonthDay;\r\n        // 2 - the inital arrival time\r\n        uint arrivalTime;\r\n        // 3 - the final delay in minutes\r\n        uint delayInMinutes;\r\n        // 4 - the determined delay category (0-5)\r\n        uint8 delay;\r\n        // 5 - we limit the cumulated weighted premium to avoid cluster risks\r\n        uint cumulatedWeightedPremium;\r\n        // 6 - max cumulated Payout for this risk\r\n        uint premiumMultiplier;\r\n    }\r\n\r\n    // the oraclize callback structure: we use several oraclize calls.\r\n    // all oraclize calls will result in a common callback to __callback(...).\r\n    // to keep track of the different querys we have to introduce this struct.\r\n    struct OraclizeCallback {\r\n        // for which policy have we called?\r\n        uint policyId;\r\n        // for which purpose did we call? {ForUnderwrite | ForPayout}\r\n        oraclizeState oState;\r\n        // time\r\n        uint oraclizeTime;\r\n    }\r\n\r\n    struct Customer {\r\n        bytes32 customerExternalId;\r\n        bool identityConfirmed;\r\n    }\r\n}"
  EnumDefinition "Acc"
    EnumValue "Premium"
    EnumValue "RiskFund"
    EnumValue "Payout"
    EnumValue "Balance"
    EnumValue "Reward"
    EnumValue "OraclizeCosts"
  EnumDefinition "policyState"
    EnumValue "Applied"
    EnumValue "Accepted"
    EnumValue "Revoked"
    EnumValue "PaidOut"
    EnumValue "Expired"
    EnumValue "Declined"
    EnumValue "SendFailed"
  EnumDefinition "oraclizeState"
    EnumValue "ForUnderwriting"
    EnumValue "ForPayout"
  EnumDefinition "Currency"
    EnumValue "ETH"
    EnumValue "EUR"
    EnumValue "USD"
    EnumValue "GBP"
  StructDefinition "Policy"
     Source: "struct Policy {\r\n        // 0 - the customer\r\n        address customer;\r\n\r\n        // 1 - premium\r\n        uint premium;\r\n        // risk specific parameters:\r\n        // 2 - pointer to the risk in the risks mapping\r\n        bytes32 riskId;\r\n        // custom payout pattern\r\n        // in future versions, customer will be able to tamper with this array.\r\n        // to keep things simple, we have decided to hard-code the array for all policies.\r\n        // uint8[5] pattern;\r\n        // 3 - probability weight. this is the central parameter\r\n        uint weight;\r\n        // 4 - calculated Payout\r\n        uint calculatedPayout;\r\n        // 5 - actual Payout\r\n        uint actualPayout;\r\n\r\n        // status fields:\r\n        // 6 - the state of the policy\r\n        policyState state;\r\n        // 7 - time of last state change\r\n        uint stateTime;\r\n        // 8 - state change message/reason\r\n        bytes32 stateMessage;\r\n        // 9 - TLSNotary Proof\r\n        bytes proof;\r\n        // 10 - Currency\r\n        Currency currency;\r\n        // 10 - External customer id\r\n        bytes32 customerExternalId;\r\n    }"
    VariableDeclaration "customer"
       Type: address
       Source: "address customer"
      ElementaryTypeName address
         Source: "address"
    VariableDeclaration "premium"
       Type: uint256
       Source: "uint premium"
      ElementaryTypeName uint
         Source: "uint"
    VariableDeclaration "riskId"
       Type: bytes32
       Source: "bytes32 riskId"
      ElementaryTypeName bytes32
         Source: "bytes32"
    VariableDeclaration "weight"
       Type: uint256
       Source: "uint weight"
      ElementaryTypeName uint
         Source: "uint"
    VariableDeclaration "calculatedPayout"
       Type: uint256
       Source: "uint calculatedPayout"
      ElementaryTypeName uint
         Source: "uint"
    VariableDeclaration "actualPayout"
       Type: uint256
       Source: "uint actualPayout"
      ElementaryTypeName uint
         Source: "uint"
    VariableDeclaration "state"
       Type: enum FlightDelayDatabaseModel.policyState
       Source: "policyState state"
      UserDefinedTypeName "policyState"
         Source: "policyState"
    VariableDeclaration "stateTime"
       Type: uint256
       Source: "uint stateTime"
      ElementaryTypeName uint
         Source: "uint"
    VariableDeclaration "stateMessage"
       Type: bytes32
       Source: "bytes32 stateMessage"
      ElementaryTypeName bytes32
         Source: "bytes32"
    VariableDeclaration "proof"
       Type: bytes storage pointer
       Source: "bytes proof"
      ElementaryTypeName bytes
         Source: "bytes"
    VariableDeclaration "currency"
       Type: enum FlightDelayDatabaseModel.Currency
       Source: "Currency currency"
      UserDefinedTypeName "Currency"
         Source: "Currency"
    VariableDeclaration "customerExternalId"
       Type: bytes32
       Source: "bytes32 customerExternalId"
      ElementaryTypeName bytes32
         Source: "bytes32"
  StructDefinition "Risk"
     Source: "struct Risk {\r\n        // 0 - Airline Code + FlightNumber\r\n        bytes32 carrierFlightNumber;\r\n        // 1 - scheduled departure and arrival time in the format /dep/YYYY/MM/DD\r\n        bytes32 departureYearMonthDay;\r\n        // 2 - the inital arrival time\r\n        uint arrivalTime;\r\n        // 3 - the final delay in minutes\r\n        uint delayInMinutes;\r\n        // 4 - the determined delay category (0-5)\r\n        uint8 delay;\r\n        // 5 - we limit the cumulated weighted premium to avoid cluster risks\r\n        uint cumulatedWeightedPremium;\r\n        // 6 - max cumulated Payout for this risk\r\n        uint premiumMultiplier;\r\n    }"
    VariableDeclaration "carrierFlightNumber"
       Type: bytes32
       Source: "bytes32 carrierFlightNumber"
      ElementaryTypeName bytes32
         Source: "bytes32"
    VariableDeclaration "departureYearMonthDay"
       Type: bytes32
       Source: "bytes32 departureYearMonthDay"
      ElementaryTypeName bytes32
         Source: "bytes32"
    VariableDeclaration "arrivalTime"
       Type: uint256
       Source: "uint arrivalTime"
      ElementaryTypeName uint
         Source: "uint"
    VariableDeclaration "delayInMinutes"
       Type: uint256
       Source: "uint delayInMinutes"
      ElementaryTypeName uint
         Source: "uint"
    VariableDeclaration "delay"
       Type: uint8
       Source: "uint8 delay"
      ElementaryTypeName uint8
         Source: "uint8"
    VariableDeclaration "cumulatedWeightedPremium"
       Type: uint256
       Source: "uint cumulatedWeightedPremium"
      ElementaryTypeName uint
         Source: "uint"
    VariableDeclaration "premiumMultiplier"
       Type: uint256
       Source: "uint premiumMultiplier"
      ElementaryTypeName uint
         Source: "uint"
  StructDefinition "OraclizeCallback"
     Source: "struct OraclizeCallback {\r\n        // for which policy have we called?\r\n        uint policyId;\r\n        // for which purpose did we call? {ForUnderwrite | ForPayout}\r\n        oraclizeState oState;\r\n        // time\r\n        uint oraclizeTime;\r\n    }"
    VariableDeclaration "policyId"
       Type: uint256
       Source: "uint policyId"
      ElementaryTypeName uint
         Source: "uint"
    VariableDeclaration "oState"
       Type: enum FlightDelayDatabaseModel.oraclizeState
       Source: "oraclizeState oState"
      UserDefinedTypeName "oraclizeState"
         Source: "oraclizeState"
    VariableDeclaration "oraclizeTime"
       Type: uint256
       Source: "uint oraclizeTime"
      ElementaryTypeName uint
         Source: "uint"
  StructDefinition "Customer"
     Source: "struct Customer {\r\n        bytes32 customerExternalId;\r\n        bool identityConfirmed;\r\n    }"
    VariableDeclaration "customerExternalId"
       Type: bytes32
       Source: "bytes32 customerExternalId"
      ElementaryTypeName bytes32
         Source: "bytes32"
    VariableDeclaration "identityConfirmed"
       Type: bool
       Source: "bool identityConfirmed"
      ElementaryTypeName bool
         Source: "bool"
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.11;"
ContractDefinition "FlightDelayControlledContract"
   Source: "contract FlightDelayControlledContract is FlightDelayDatabaseModel {\r\n\r\n    address public controller;\r\n    FlightDelayControllerInterface FD_CI;\r\n\r\n    modifier onlyController() {\r\n        require(msg.sender == controller);\r\n        _;\r\n    }\r\n\r\n    function setController(address _controller) internal returns (bool _result) {\r\n        controller = _controller;\r\n        FD_CI = FlightDelayControllerInterface(_controller);\r\n        _result = true;\r\n    }\r\n\r\n    function destruct() public onlyController {\r\n        selfdestruct(controller);\r\n    }\r\n\r\n    function setContracts() public onlyController {}\r\n\r\n    function getContract(bytes32 _id) internal returns (address _addr) {\r\n        _addr = FD_CI.getContract(_id);\r\n    }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "FlightDelayDatabaseModel"
    UserDefinedTypeName "FlightDelayDatabaseModel"
       Source: "FlightDelayDatabaseModel"
  VariableDeclaration "controller"
     Type: address
     Gas costs: [???]
     Source: "address public controller"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "FD_CI"
     Type: contract FlightDelayControllerInterface
     Gas costs: 0
     Source: "FlightDelayControllerInterface FD_CI"
    UserDefinedTypeName "FlightDelayControllerInterface"
       Source: "FlightDelayControllerInterface"
  ModifierDefinition "onlyController"
     Source: "modifier onlyController() {\r\n        require(msg.sender == controller);\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n        require(msg.sender == controller);\r\n        _;\r\n    }"
      ExpressionStatement
         Gas costs: 564
         Source: "require(msg.sender == controller)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == controller)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == controller"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier controller
               Type: address
               Source: "controller"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "setController"
     Source: "function setController(address _controller) internal returns (bool _result) {\r\n        controller = _controller;\r\n        FD_CI = FlightDelayControllerInterface(_controller);\r\n        _result = true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _controller)"
      VariableDeclaration "_controller"
         Type: address
         Source: "address _controller"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: "(bool _result)"
      VariableDeclaration "_result"
         Type: bool
         Source: "bool _result"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        controller = _controller;\r\n        FD_CI = FlightDelayControllerInterface(_controller);\r\n        _result = true;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "controller = _controller"
        Assignment using operator =
           Type: address
           Source: "controller = _controller"
          Identifier controller
             Type: address
             Source: "controller"
          Identifier _controller
             Type: address
             Source: "_controller"
      ExpressionStatement
         Gas costs: 0
         Source: "FD_CI = FlightDelayControllerInterface(_controller)"
        Assignment using operator =
           Type: contract FlightDelayControllerInterface
           Source: "FD_CI = FlightDelayControllerInterface(_controller)"
          Identifier FD_CI
             Type: contract FlightDelayControllerInterface
             Source: "FD_CI"
          FunctionCall
             Type: contract FlightDelayControllerInterface
             Source: "FlightDelayControllerInterface(_controller)"
            Identifier FlightDelayControllerInterface
               Type: type(contract FlightDelayControllerInterface)
               Source: "FlightDelayControllerInterface"
            Identifier _controller
               Type: address
               Source: "_controller"
      ExpressionStatement
         Gas costs: 0
         Source: "_result = true"
        Assignment using operator =
           Type: bool
           Source: "_result = true"
          Identifier _result
             Type: bool
             Source: "_result"
          Literal, token: true value: true
             Type: bool
             Source: "true"
  FunctionDefinition "destruct" - public
     Source: "function destruct() public onlyController {\r\n        selfdestruct(controller);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyController"
       Gas costs: 0
       Source: "onlyController"
      Identifier onlyController
         Type: modifier ()
         Source: "onlyController"
    Block
       Source: "{\r\n        selfdestruct(controller);\r\n    }"
      ExpressionStatement
         Gas costs: 30245
         Source: "selfdestruct(controller)"
        FunctionCall
           Type: tuple()
           Source: "selfdestruct(controller)"
          Identifier selfdestruct
             Type: function (address)
             Source: "selfdestruct"
          Identifier controller
             Type: address
             Source: "controller"
  FunctionDefinition "setContracts" - public
     Source: "function setContracts() public onlyController {}"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyController"
       Gas costs: 0
       Source: "onlyController"
      Identifier onlyController
         Type: modifier ()
         Source: "onlyController"
    Block
       Gas costs: 0
       Source: "{}"
  FunctionDefinition "getContract"
     Source: "function getContract(bytes32 _id) internal returns (address _addr) {\r\n        _addr = FD_CI.getContract(_id);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32 _id)"
      VariableDeclaration "_id"
         Type: bytes32
         Source: "bytes32 _id"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Gas costs: 3
       Source: "(address _addr)"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\r\n        _addr = FD_CI.getContract(_id);\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "_addr = FD_CI.getContract(_id)"
        Assignment using operator =
           Type: address
           Source: "_addr = FD_CI.getContract(_id)"
          Identifier _addr
             Type: address
             Source: "_addr"
          FunctionCall
             Type: address
             Source: "FD_CI.getContract(_id)"
            MemberAccess to member getContract
               Type: function (bytes32) external returns (address)
               Source: "FD_CI.getContract"
              Identifier FD_CI
                 Type: contract FlightDelayControllerInterface
                 Source: "FD_CI"
            Identifier _id
               Type: bytes32
               Source: "_id"
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.11;"
ContractDefinition "FlightDelayDatabaseInterface"
   Gas costs: 0
   Source: "contract FlightDelayDatabaseInterface is FlightDelayDatabaseModel {\r\n\r\n    uint public MIN_DEPARTURE_LIM;\r\n\r\n    uint public MAX_DEPARTURE_LIM;\r\n\r\n    bytes32[] public validOrigins;\r\n\r\n    bytes32[] public validDestinations;\r\n\r\n    function countOrigins() public constant returns (uint256 _length);\r\n\r\n    function getOriginByIndex(uint256 _i) public constant returns (bytes32 _origin);\r\n\r\n    function countDestinations() public constant returns (uint256 _length);\r\n\r\n    function getDestinationByIndex(uint256 _i) public constant returns (bytes32 _destination);\r\n\r\n    function setAccessControl(address _contract, address _caller, uint8 _perm) public;\r\n\r\n    function setAccessControl(\r\n        address _contract,\r\n        address _caller,\r\n        uint8 _perm,\r\n        bool _access\r\n    ) public;\r\n\r\n    function getAccessControl(address _contract, address _caller, uint8 _perm) public returns (bool _allowed) ;\r\n\r\n    function setLedger(uint8 _index, int _value) public;\r\n\r\n    function getLedger(uint8 _index) public returns (int _value) ;\r\n\r\n    function getCustomerPremium(uint _policyId) public returns (address _customer, uint _premium) ;\r\n\r\n    function getPolicyData(uint _policyId) public returns (address _customer, uint _premium, uint _weight) ;\r\n\r\n    function getPolicyState(uint _policyId) public returns (policyState _state) ;\r\n\r\n    function getRiskId(uint _policyId) public returns (bytes32 _riskId);\r\n\r\n    function createPolicy(address _customer, uint _premium, Currency _currency, bytes32 _customerExternalId, bytes32 _riskId) public returns (uint _policyId) ;\r\n\r\n    function setState(\r\n        uint _policyId,\r\n        policyState _state,\r\n        uint _stateTime,\r\n        bytes32 _stateMessage\r\n    ) public;\r\n\r\n    function setWeight(uint _policyId, uint _weight, bytes _proof) public;\r\n\r\n    function setPayouts(uint _policyId, uint _calculatedPayout, uint _actualPayout) public;\r\n\r\n    function setDelay(uint _policyId, uint8 _delay, uint _delayInMinutes) public;\r\n\r\n    function getRiskParameters(bytes32 _riskId)\r\n        public returns (bytes32 _carrierFlightNumber, bytes32 _departureYearMonthDay, uint _arrivalTime) ;\r\n\r\n    function getPremiumFactors(bytes32 _riskId)\r\n        public returns (uint _cumulatedWeightedPremium, uint _premiumMultiplier);\r\n\r\n    function createUpdateRisk(bytes32 _carrierFlightNumber, bytes32 _departureYearMonthDay, uint _arrivalTime)\r\n        public returns (bytes32 _riskId);\r\n\r\n    function setPremiumFactors(bytes32 _riskId, uint _cumulatedWeightedPremium, uint _premiumMultiplier) public;\r\n\r\n    function getOraclizeCallback(bytes32 _queryId)\r\n        public returns (uint _policyId, uint _oraclizeTime) ;\r\n\r\n    function getOraclizePolicyId(bytes32 _queryId)\r\n        public returns (uint _policyId) ;\r\n\r\n    function createOraclizeCallback(\r\n        bytes32 _queryId,\r\n        uint _policyId,\r\n        oraclizeState _oraclizeState,\r\n        uint _oraclizeTime\r\n    ) public;\r\n\r\n    function checkTime(bytes32 _queryId, bytes32 _riskId, uint _offset)\r\n        public returns (bool _result) ;\r\n}"
  InheritanceSpecifier
     Source: "FlightDelayDatabaseModel"
    UserDefinedTypeName "FlightDelayDatabaseModel"
       Source: "FlightDelayDatabaseModel"
  VariableDeclaration "MIN_DEPARTURE_LIM"
     Type: uint256
     Source: "uint public MIN_DEPARTURE_LIM"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "MAX_DEPARTURE_LIM"
     Type: uint256
     Source: "uint public MAX_DEPARTURE_LIM"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "validOrigins"
     Type: bytes32[] storage ref
     Source: "bytes32[] public validOrigins"
    ArrayTypeName
       Source: "bytes32[]"
      ElementaryTypeName bytes32
         Source: "bytes32"
  VariableDeclaration "validDestinations"
     Type: bytes32[] storage ref
     Source: "bytes32[] public validDestinations"
    ArrayTypeName
       Source: "bytes32[]"
      ElementaryTypeName bytes32
         Source: "bytes32"
  FunctionDefinition "countOrigins" - public - const
     Source: "function countOrigins() public constant returns (uint256 _length);"
    ParameterList
       Source: "()"
    ParameterList
       Source: "(uint256 _length)"
      VariableDeclaration "_length"
         Type: uint256
         Source: "uint256 _length"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "getOriginByIndex" - public - const
     Source: "function getOriginByIndex(uint256 _i) public constant returns (bytes32 _origin);"
    ParameterList
       Source: "(uint256 _i)"
      VariableDeclaration "_i"
         Type: uint256
         Source: "uint256 _i"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bytes32 _origin)"
      VariableDeclaration "_origin"
         Type: bytes32
         Source: "bytes32 _origin"
        ElementaryTypeName bytes32
           Source: "bytes32"
  FunctionDefinition "countDestinations" - public - const
     Source: "function countDestinations() public constant returns (uint256 _length);"
    ParameterList
       Source: "()"
    ParameterList
       Source: "(uint256 _length)"
      VariableDeclaration "_length"
         Type: uint256
         Source: "uint256 _length"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "getDestinationByIndex" - public - const
     Source: "function getDestinationByIndex(uint256 _i) public constant returns (bytes32 _destination);"
    ParameterList
       Source: "(uint256 _i)"
      VariableDeclaration "_i"
         Type: uint256
         Source: "uint256 _i"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bytes32 _destination)"
      VariableDeclaration "_destination"
         Type: bytes32
         Source: "bytes32 _destination"
        ElementaryTypeName bytes32
           Source: "bytes32"
  FunctionDefinition "setAccessControl" - public
     Source: "function setAccessControl(address _contract, address _caller, uint8 _perm) public;"
    ParameterList
       Source: "(address _contract, address _caller, uint8 _perm)"
      VariableDeclaration "_contract"
         Type: address
         Source: "address _contract"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_caller"
         Type: address
         Source: "address _caller"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_perm"
         Type: uint8
         Source: "uint8 _perm"
        ElementaryTypeName uint8
           Source: "uint8"
    ParameterList
       Source: ""
  FunctionDefinition "setAccessControl" - public
     Source: "function setAccessControl(\r\n        address _contract,\r\n        address _caller,\r\n        uint8 _perm,\r\n        bool _access\r\n    ) public;"
    ParameterList
       Source: "(\r\n        address _contract,\r\n        address _caller,\r\n        uint8 _perm,\r\n        bool _access\r\n    )"
      VariableDeclaration "_contract"
         Type: address
         Source: "address _contract"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_caller"
         Type: address
         Source: "address _caller"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_perm"
         Type: uint8
         Source: "uint8 _perm"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "_access"
         Type: bool
         Source: "bool _access"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
  FunctionDefinition "getAccessControl" - public
     Source: "function getAccessControl(address _contract, address _caller, uint8 _perm) public returns (bool _allowed) ;"
    ParameterList
       Source: "(address _contract, address _caller, uint8 _perm)"
      VariableDeclaration "_contract"
         Type: address
         Source: "address _contract"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_caller"
         Type: address
         Source: "address _caller"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_perm"
         Type: uint8
         Source: "uint8 _perm"
        ElementaryTypeName uint8
           Source: "uint8"
    ParameterList
       Source: "(bool _allowed)"
      VariableDeclaration "_allowed"
         Type: bool
         Source: "bool _allowed"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "setLedger" - public
     Source: "function setLedger(uint8 _index, int _value) public;"
    ParameterList
       Source: "(uint8 _index, int _value)"
      VariableDeclaration "_index"
         Type: uint8
         Source: "uint8 _index"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "_value"
         Type: int256
         Source: "int _value"
        ElementaryTypeName int
           Source: "int"
    ParameterList
       Source: ""
  FunctionDefinition "getLedger" - public
     Source: "function getLedger(uint8 _index) public returns (int _value) ;"
    ParameterList
       Source: "(uint8 _index)"
      VariableDeclaration "_index"
         Type: uint8
         Source: "uint8 _index"
        ElementaryTypeName uint8
           Source: "uint8"
    ParameterList
       Source: "(int _value)"
      VariableDeclaration "_value"
         Type: int256
         Source: "int _value"
        ElementaryTypeName int
           Source: "int"
  FunctionDefinition "getCustomerPremium" - public
     Source: "function getCustomerPremium(uint _policyId) public returns (address _customer, uint _premium) ;"
    ParameterList
       Source: "(uint _policyId)"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(address _customer, uint _premium)"
      VariableDeclaration "_customer"
         Type: address
         Source: "address _customer"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_premium"
         Type: uint256
         Source: "uint _premium"
        ElementaryTypeName uint
           Source: "uint"
  FunctionDefinition "getPolicyData" - public
     Source: "function getPolicyData(uint _policyId) public returns (address _customer, uint _premium, uint _weight) ;"
    ParameterList
       Source: "(uint _policyId)"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(address _customer, uint _premium, uint _weight)"
      VariableDeclaration "_customer"
         Type: address
         Source: "address _customer"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_premium"
         Type: uint256
         Source: "uint _premium"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_weight"
         Type: uint256
         Source: "uint _weight"
        ElementaryTypeName uint
           Source: "uint"
  FunctionDefinition "getPolicyState" - public
     Source: "function getPolicyState(uint _policyId) public returns (policyState _state) ;"
    ParameterList
       Source: "(uint _policyId)"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(policyState _state)"
      VariableDeclaration "_state"
         Type: enum FlightDelayDatabaseModel.policyState
         Source: "policyState _state"
        UserDefinedTypeName "policyState"
           Source: "policyState"
  FunctionDefinition "getRiskId" - public
     Source: "function getRiskId(uint _policyId) public returns (bytes32 _riskId);"
    ParameterList
       Source: "(uint _policyId)"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(bytes32 _riskId)"
      VariableDeclaration "_riskId"
         Type: bytes32
         Source: "bytes32 _riskId"
        ElementaryTypeName bytes32
           Source: "bytes32"
  FunctionDefinition "createPolicy" - public
     Source: "function createPolicy(address _customer, uint _premium, Currency _currency, bytes32 _customerExternalId, bytes32 _riskId) public returns (uint _policyId) ;"
    ParameterList
       Source: "(address _customer, uint _premium, Currency _currency, bytes32 _customerExternalId, bytes32 _riskId)"
      VariableDeclaration "_customer"
         Type: address
         Source: "address _customer"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_premium"
         Type: uint256
         Source: "uint _premium"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_currency"
         Type: enum FlightDelayDatabaseModel.Currency
         Source: "Currency _currency"
        UserDefinedTypeName "Currency"
           Source: "Currency"
      VariableDeclaration "_customerExternalId"
         Type: bytes32
         Source: "bytes32 _customerExternalId"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "_riskId"
         Type: bytes32
         Source: "bytes32 _riskId"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Source: "(uint _policyId)"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
  FunctionDefinition "setState" - public
     Source: "function setState(\r\n        uint _policyId,\r\n        policyState _state,\r\n        uint _stateTime,\r\n        bytes32 _stateMessage\r\n    ) public;"
    ParameterList
       Source: "(\r\n        uint _policyId,\r\n        policyState _state,\r\n        uint _stateTime,\r\n        bytes32 _stateMessage\r\n    )"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_state"
         Type: enum FlightDelayDatabaseModel.policyState
         Source: "policyState _state"
        UserDefinedTypeName "policyState"
           Source: "policyState"
      VariableDeclaration "_stateTime"
         Type: uint256
         Source: "uint _stateTime"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_stateMessage"
         Type: bytes32
         Source: "bytes32 _stateMessage"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Source: ""
  FunctionDefinition "setWeight" - public
     Source: "function setWeight(uint _policyId, uint _weight, bytes _proof) public;"
    ParameterList
       Source: "(uint _policyId, uint _weight, bytes _proof)"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_weight"
         Type: uint256
         Source: "uint _weight"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_proof"
         Type: bytes memory
         Source: "bytes _proof"
        ElementaryTypeName bytes
           Source: "bytes"
    ParameterList
       Source: ""
  FunctionDefinition "setPayouts" - public
     Source: "function setPayouts(uint _policyId, uint _calculatedPayout, uint _actualPayout) public;"
    ParameterList
       Source: "(uint _policyId, uint _calculatedPayout, uint _actualPayout)"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_calculatedPayout"
         Type: uint256
         Source: "uint _calculatedPayout"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_actualPayout"
         Type: uint256
         Source: "uint _actualPayout"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: ""
  FunctionDefinition "setDelay" - public
     Source: "function setDelay(uint _policyId, uint8 _delay, uint _delayInMinutes) public;"
    ParameterList
       Source: "(uint _policyId, uint8 _delay, uint _delayInMinutes)"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_delay"
         Type: uint8
         Source: "uint8 _delay"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "_delayInMinutes"
         Type: uint256
         Source: "uint _delayInMinutes"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: ""
  FunctionDefinition "getRiskParameters" - public
     Source: "function getRiskParameters(bytes32 _riskId)\r\n        public returns (bytes32 _carrierFlightNumber, bytes32 _departureYearMonthDay, uint _arrivalTime) ;"
    ParameterList
       Source: "(bytes32 _riskId)"
      VariableDeclaration "_riskId"
         Type: bytes32
         Source: "bytes32 _riskId"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Source: "(bytes32 _carrierFlightNumber, bytes32 _departureYearMonthDay, uint _arrivalTime)"
      VariableDeclaration "_carrierFlightNumber"
         Type: bytes32
         Source: "bytes32 _carrierFlightNumber"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "_departureYearMonthDay"
         Type: bytes32
         Source: "bytes32 _departureYearMonthDay"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "_arrivalTime"
         Type: uint256
         Source: "uint _arrivalTime"
        ElementaryTypeName uint
           Source: "uint"
  FunctionDefinition "getPremiumFactors" - public
     Source: "function getPremiumFactors(bytes32 _riskId)\r\n        public returns (uint _cumulatedWeightedPremium, uint _premiumMultiplier);"
    ParameterList
       Source: "(bytes32 _riskId)"
      VariableDeclaration "_riskId"
         Type: bytes32
         Source: "bytes32 _riskId"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Source: "(uint _cumulatedWeightedPremium, uint _premiumMultiplier)"
      VariableDeclaration "_cumulatedWeightedPremium"
         Type: uint256
         Source: "uint _cumulatedWeightedPremium"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_premiumMultiplier"
         Type: uint256
         Source: "uint _premiumMultiplier"
        ElementaryTypeName uint
           Source: "uint"
  FunctionDefinition "createUpdateRisk" - public
     Source: "function createUpdateRisk(bytes32 _carrierFlightNumber, bytes32 _departureYearMonthDay, uint _arrivalTime)\r\n        public returns (bytes32 _riskId);"
    ParameterList
       Source: "(bytes32 _carrierFlightNumber, bytes32 _departureYearMonthDay, uint _arrivalTime)"
      VariableDeclaration "_carrierFlightNumber"
         Type: bytes32
         Source: "bytes32 _carrierFlightNumber"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "_departureYearMonthDay"
         Type: bytes32
         Source: "bytes32 _departureYearMonthDay"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "_arrivalTime"
         Type: uint256
         Source: "uint _arrivalTime"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(bytes32 _riskId)"
      VariableDeclaration "_riskId"
         Type: bytes32
         Source: "bytes32 _riskId"
        ElementaryTypeName bytes32
           Source: "bytes32"
  FunctionDefinition "setPremiumFactors" - public
     Source: "function setPremiumFactors(bytes32 _riskId, uint _cumulatedWeightedPremium, uint _premiumMultiplier) public;"
    ParameterList
       Source: "(bytes32 _riskId, uint _cumulatedWeightedPremium, uint _premiumMultiplier)"
      VariableDeclaration "_riskId"
         Type: bytes32
         Source: "bytes32 _riskId"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "_cumulatedWeightedPremium"
         Type: uint256
         Source: "uint _cumulatedWeightedPremium"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_premiumMultiplier"
         Type: uint256
         Source: "uint _premiumMultiplier"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: ""
  FunctionDefinition "getOraclizeCallback" - public
     Source: "function getOraclizeCallback(bytes32 _queryId)\r\n        public returns (uint _policyId, uint _oraclizeTime) ;"
    ParameterList
       Source: "(bytes32 _queryId)"
      VariableDeclaration "_queryId"
         Type: bytes32
         Source: "bytes32 _queryId"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Source: "(uint _policyId, uint _oraclizeTime)"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_oraclizeTime"
         Type: uint256
         Source: "uint _oraclizeTime"
        ElementaryTypeName uint
           Source: "uint"
  FunctionDefinition "getOraclizePolicyId" - public
     Source: "function getOraclizePolicyId(bytes32 _queryId)\r\n        public returns (uint _policyId) ;"
    ParameterList
       Source: "(bytes32 _queryId)"
      VariableDeclaration "_queryId"
         Type: bytes32
         Source: "bytes32 _queryId"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Source: "(uint _policyId)"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
  FunctionDefinition "createOraclizeCallback" - public
     Source: "function createOraclizeCallback(\r\n        bytes32 _queryId,\r\n        uint _policyId,\r\n        oraclizeState _oraclizeState,\r\n        uint _oraclizeTime\r\n    ) public;"
    ParameterList
       Source: "(\r\n        bytes32 _queryId,\r\n        uint _policyId,\r\n        oraclizeState _oraclizeState,\r\n        uint _oraclizeTime\r\n    )"
      VariableDeclaration "_queryId"
         Type: bytes32
         Source: "bytes32 _queryId"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_oraclizeState"
         Type: enum FlightDelayDatabaseModel.oraclizeState
         Source: "oraclizeState _oraclizeState"
        UserDefinedTypeName "oraclizeState"
           Source: "oraclizeState"
      VariableDeclaration "_oraclizeTime"
         Type: uint256
         Source: "uint _oraclizeTime"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: ""
  FunctionDefinition "checkTime" - public
     Source: "function checkTime(bytes32 _queryId, bytes32 _riskId, uint _offset)\r\n        public returns (bool _result) ;"
    ParameterList
       Source: "(bytes32 _queryId, bytes32 _riskId, uint _offset)"
      VariableDeclaration "_queryId"
         Type: bytes32
         Source: "bytes32 _queryId"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "_riskId"
         Type: bytes32
         Source: "bytes32 _riskId"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "_offset"
         Type: uint256
         Source: "uint _offset"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(bool _result)"
      VariableDeclaration "_result"
         Type: bool
         Source: "bool _result"
        ElementaryTypeName bool
           Source: "bool"
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.11;"
ContractDefinition "FlightDelayDatabase"
   Source: "contract FlightDelayDatabase is FlightDelayControlledContract, FlightDelayDatabaseInterface, FlightDelayConstants {\r\n\r\n    uint public MIN_DEPARTURE_LIM;\r\n\r\n    uint public MAX_DEPARTURE_LIM;\r\n\r\n    bytes32[] public validOrigins;\r\n    bytes32[] public validDestinations;\r\n\r\n    // Table of policies\r\n    Policy[] public policies;\r\n\r\n    mapping (bytes32 => uint[]) public extCustomerPolicies;\r\n\r\n    mapping (address => Customer) public customers;\r\n\r\n    // Lookup policyIds from customer addresses\r\n    mapping (address => uint[]) public customerPolicies;\r\n\r\n    // Lookup policy Ids from queryIds\r\n    mapping (bytes32 => OraclizeCallback) public oraclizeCallbacks;\r\n\r\n    // Lookup risks from risk IDs\r\n    mapping (bytes32 => Risk) public risks;\r\n\r\n    // Lookup AccessControl\r\n    mapping(address => mapping(address => mapping(uint8 => bool))) public accessControl;\r\n\r\n    // Lookup accounts of internal ledger\r\n    int[6] public ledger;\r\n\r\n    FlightDelayAccessControllerInterface FD_AC;\r\n\r\n    function FlightDelayDatabase (address _controller) public {\r\n        setController(_controller);\r\n    }\r\n\r\n    function setContracts() public onlyController {\r\n        FD_AC = FlightDelayAccessControllerInterface(getContract(\"FD.AccessController\"));\r\n\r\n        FD_AC.setPermissionById(101, \"FD.NewPolicy\");\r\n        FD_AC.setPermissionById(101, \"FD.Underwrite\");\r\n\r\n        FD_AC.setPermissionById(101, \"FD.Payout\");\r\n        FD_AC.setPermissionById(101, \"FD.Ledger\");\r\n\r\n        FD_AC.setPermissionById(102, \"FD.Owner\");\r\n    }\r\n\r\n    function setMinDepartureLim(uint _timestamp) returns (bool _success) {\r\n        require(FD_AC.checkPermission(102, msg.sender));\r\n\r\n        MIN_DEPARTURE_LIM = _timestamp;\r\n        _success = true;\r\n    }\r\n\r\n    function setMaxDepartureLim(uint _timestamp) returns (bool _success) {\r\n        require(FD_AC.checkPermission(102, msg.sender));\r\n\r\n        MAX_DEPARTURE_LIM = _timestamp;\r\n        _success = true;\r\n    }\r\n\r\n    function addOrigin(bytes32 _origin) returns (uint256 _index) {\r\n        require(FD_AC.checkPermission(102, msg.sender));\r\n\r\n        validOrigins.push(_origin);\r\n        _index = validOrigins.length - 1;\r\n    }\r\n\r\n    function removeOriginByIndex(uint256 _index) returns (bool _success) {\r\n        require(FD_AC.checkPermission(102, msg.sender));\r\n\r\n        if (validOrigins.length == 0) {\r\n            return false;\r\n        } else {\r\n            bytes32 lastElement = validOrigins[validOrigins.length - 1];\r\n            validOrigins[_index] = lastElement;\r\n            validOrigins.length--;\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function countOrigins() public constant returns (uint256 _length) {\r\n        _length = validOrigins.length;\r\n    }\r\n\r\n    function getOriginByIndex(uint256 _i) public constant returns (bytes32 _origin) {\r\n        _origin = validOrigins[_i];\r\n    }\r\n\r\n    function addDestination(bytes32 _origin) returns (uint256 _index) {\r\n        require(FD_AC.checkPermission(102, msg.sender));\r\n\r\n        validDestinations.push(_origin);\r\n        _index = validDestinations.length - 1;\r\n    }\r\n\r\n    function removeDestinationByIndex(uint256 _index) returns (bool _success) {\r\n        require(FD_AC.checkPermission(102, msg.sender));\r\n\r\n        if (validDestinations.length == 0) {\r\n            return false;\r\n        } else {\r\n            bytes32 lastElement = validDestinations[validDestinations.length - 1];\r\n            validDestinations[_index] = lastElement;\r\n            validDestinations.length--;\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function countDestinations() public constant returns (uint256 _length) {\r\n        _length = validDestinations.length;\r\n    }\r\n\r\n    function getDestinationByIndex(uint256 _i) public constant returns (bytes32 _destination) {\r\n        _destination = validDestinations[_i];\r\n    }\r\n\r\n\r\n    // Getter and Setter for AccessControl\r\n    function setAccessControl (\r\n        address _contract,\r\n        address _caller,\r\n        uint8 _perm,\r\n        bool _access\r\n    ) public {\r\n        // one and only hardcoded accessControl\r\n        require(msg.sender == FD_CI.getContract(\"FD.AccessController\"));\r\n        accessControl[_contract][_caller][_perm] = _access;\r\n    }\r\n\r\n// --> test-mode\r\n//        function setAccessControlTestOnly (\r\n//            address _contract,\r\n//            address _caller,\r\n//            uint8 _perm,\r\n//            bool _access\r\n//        ) public {\r\n//            accessControl[_contract][_caller][_perm] = _access;\r\n//        }\r\n// <-- test-mode\r\n\r\n    function setAccessControl(address _contract, address _caller, uint8 _perm) public {\r\n        setAccessControl(\r\n            _contract,\r\n            _caller,\r\n            _perm,\r\n            true\r\n        );\r\n    }\r\n\r\n    function getAccessControl(address _contract, address _caller, uint8 _perm) public returns (bool _allowed) {\r\n        _allowed = accessControl[_contract][_caller][_perm];\r\n    }\r\n\r\n    // Getter and Setter for ledger\r\n    function setLedger(uint8 _index, int _value) public {\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        int previous = ledger[_index];\r\n        ledger[_index] += _value;\r\n\r\n// --> debug-mode\r\n//            LogInt(\"previous\", previous);\r\n//            LogInt(\"ledger[_index]\", ledger[_index]);\r\n//            LogInt(\"_value\", _value);\r\n// <-- debug-mode\r\n\r\n        // check for int overflow\r\n        if (_value < 0) {\r\n            assert(ledger[_index] < previous);\r\n        } else if (_value > 0) {\r\n            assert(ledger[_index] > previous);\r\n        }\r\n    }\r\n\r\n    function getLedger(uint8 _index) public returns (int _value) {\r\n        _value = ledger[_index];\r\n    }\r\n\r\n    // Getter and Setter for policies\r\n    function getCustomerPremium(uint _policyId) public returns (address _customer, uint _premium) {\r\n        Policy storage p = policies[_policyId];\r\n        _customer = p.customer;\r\n        _premium = p.premium;\r\n    }\r\n\r\n    function getPolicyData(uint _policyId) public returns (address _customer, uint _weight, uint _premium) {\r\n        Policy storage p = policies[_policyId];\r\n        _customer = p.customer;\r\n        _weight = p.weight;\r\n        _premium = p.premium;\r\n    }\r\n\r\n    function getPolicyState(uint _policyId) public returns (policyState _state) {\r\n        Policy storage p = policies[_policyId];\r\n        _state = p.state;\r\n    }\r\n\r\n    function getRiskId(uint _policyId) public returns (bytes32 _riskId) {\r\n        Policy storage p = policies[_policyId];\r\n        _riskId = p.riskId;\r\n    }\r\n\r\n    function createPolicy(address _customer, uint _premium, Currency _currency, bytes32 _customerExternalId, bytes32 _riskId) public returns (uint _policyId) {\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        _policyId = policies.length++;\r\n\r\n        //todo: check for ovewflows\r\n\r\n// --> test-mode\r\n//            LogUint(\"_policyId\", _policyId);\r\n// <-- test-mode\r\n\r\n        customerPolicies[_customer].push(_policyId);\r\n        extCustomerPolicies[_customerExternalId].push(_policyId);\r\n\r\n        Policy storage p = policies[_policyId];\r\n\r\n        p.customer = _customer;\r\n        p.currency = _currency;\r\n        p.customerExternalId = _customerExternalId;\r\n        p.premium = _premium;\r\n        p.riskId = _riskId;\r\n    }\r\n\r\n    function setState(\r\n        uint _policyId,\r\n        policyState _state,\r\n        uint _stateTime,\r\n        bytes32 _stateMessage\r\n    ) public {\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        LogSetState(\r\n            _policyId,\r\n            uint8(_state),\r\n            _stateTime,\r\n            _stateMessage\r\n        );\r\n\r\n        Policy storage p = policies[_policyId];\r\n\r\n        p.state = _state;\r\n        p.stateTime = _stateTime;\r\n        p.stateMessage = _stateMessage;\r\n    }\r\n\r\n    function setWeight(uint _policyId, uint _weight, bytes _proof) public {\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        Policy storage p = policies[_policyId];\r\n\r\n        p.weight = _weight;\r\n        p.proof = _proof;\r\n    }\r\n\r\n    function setPayouts(uint _policyId, uint _calculatedPayout, uint _actualPayout) public {\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        Policy storage p = policies[_policyId];\r\n\r\n        p.calculatedPayout = _calculatedPayout;\r\n        p.actualPayout = _actualPayout;\r\n    }\r\n\r\n    function setDelay(uint _policyId, uint8 _delay, uint _delayInMinutes) public {\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        Risk storage r = risks[policies[_policyId].riskId];\r\n\r\n        r.delay = _delay;\r\n        r.delayInMinutes = _delayInMinutes;\r\n    }\r\n\r\n    // Getter and Setter for risks\r\n    function getRiskParameters(bytes32 _riskId) public returns (bytes32 _carrierFlightNumber, bytes32 _departureYearMonthDay, uint _arrivalTime) {\r\n        Risk storage r = risks[_riskId];\r\n        _carrierFlightNumber = r.carrierFlightNumber;\r\n        _departureYearMonthDay = r.departureYearMonthDay;\r\n        _arrivalTime = r.arrivalTime;\r\n    }\r\n\r\n    function getPremiumFactors(bytes32 _riskId) public returns (uint _cumulatedWeightedPremium, uint _premiumMultiplier) {\r\n        Risk storage r = risks[_riskId];\r\n        _cumulatedWeightedPremium = r.cumulatedWeightedPremium;\r\n        _premiumMultiplier = r.premiumMultiplier;\r\n    }\r\n\r\n    function createUpdateRisk(bytes32 _carrierFlightNumber, bytes32 _departureYearMonthDay, uint _arrivalTime) returns (bytes32 _riskId) {\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        _riskId = sha3(\r\n            _carrierFlightNumber,\r\n            _departureYearMonthDay,\r\n            _arrivalTime\r\n        );\r\n\r\n// --> test-mode\r\n//            LogBytes32(\"riskId\", _riskId);\r\n// <-- test-mode\r\n\r\n        Risk storage r = risks[_riskId];\r\n\r\n        if (r.premiumMultiplier == 0) {\r\n            r.carrierFlightNumber = _carrierFlightNumber;\r\n            r.departureYearMonthDay = _departureYearMonthDay;\r\n            r.arrivalTime = _arrivalTime;\r\n        }\r\n    }\r\n\r\n    function setPremiumFactors(bytes32 _riskId, uint _cumulatedWeightedPremium, uint _premiumMultiplier) public {\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        Risk storage r = risks[_riskId];\r\n        r.cumulatedWeightedPremium = _cumulatedWeightedPremium;\r\n        r.premiumMultiplier = _premiumMultiplier;\r\n    }\r\n\r\n    // Getter and Setter for oraclizeCallbacks\r\n    function getOraclizeCallback(bytes32 _queryId) public returns (uint _policyId, uint _oraclizeTime) {\r\n        OraclizeCallback storage o = oraclizeCallbacks[_queryId];\r\n        _policyId = o.policyId;\r\n        _oraclizeTime = o.oraclizeTime;\r\n    }\r\n\r\n    function getOraclizePolicyId(bytes32 _queryId) public returns (uint _policyId) {\r\n        OraclizeCallback storage o = oraclizeCallbacks[_queryId];\r\n        _policyId = o.policyId;\r\n    }\r\n\r\n    function createOraclizeCallback(\r\n        bytes32 _queryId,\r\n        uint _policyId,\r\n        oraclizeState _oraclizeState,\r\n        uint _oraclizeTime) public {\r\n\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        oraclizeCallbacks[_queryId] = OraclizeCallback(_policyId, _oraclizeState, _oraclizeTime);\r\n    }\r\n\r\n    // mixed\r\n    function checkTime(bytes32 _queryId, bytes32 _riskId, uint _offset) public returns (bool _result) {\r\n        OraclizeCallback storage o = oraclizeCallbacks[_queryId];\r\n        Risk storage r = risks[_riskId];\r\n\r\n        _result = o.oraclizeTime > r.arrivalTime + _offset;\r\n    }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "FlightDelayControlledContract"
    UserDefinedTypeName "FlightDelayControlledContract"
       Source: "FlightDelayControlledContract"
  InheritanceSpecifier
     Gas costs: 0
     Source: "FlightDelayDatabaseInterface"
    UserDefinedTypeName "FlightDelayDatabaseInterface"
       Source: "FlightDelayDatabaseInterface"
  InheritanceSpecifier
     Gas costs: 0
     Source: "FlightDelayConstants"
    UserDefinedTypeName "FlightDelayConstants"
       Source: "FlightDelayConstants"
  VariableDeclaration "MIN_DEPARTURE_LIM"
     Type: uint256
     Gas costs: [???]
     Source: "uint public MIN_DEPARTURE_LIM"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "MAX_DEPARTURE_LIM"
     Type: uint256
     Gas costs: [???]
     Source: "uint public MAX_DEPARTURE_LIM"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "validOrigins"
     Type: bytes32[] storage ref
     Gas costs: [???]
     Source: "bytes32[] public validOrigins"
    ArrayTypeName
       Source: "bytes32[]"
      ElementaryTypeName bytes32
         Source: "bytes32"
  VariableDeclaration "validDestinations"
     Type: bytes32[] storage ref
     Gas costs: [???]
     Source: "bytes32[] public validDestinations"
    ArrayTypeName
       Source: "bytes32[]"
      ElementaryTypeName bytes32
         Source: "bytes32"
  VariableDeclaration "policies"
     Type: struct FlightDelayDatabaseModel.Policy storage ref[] storage ref
     Gas costs: [???]
     Source: "Policy[] public policies"
    ArrayTypeName
       Source: "Policy[]"
      UserDefinedTypeName "Policy"
         Source: "Policy"
  VariableDeclaration "extCustomerPolicies"
     Type: mapping(bytes32 => uint256[] storage ref)
     Gas costs: [???]
     Source: "mapping (bytes32 => uint[]) public extCustomerPolicies"
    Mapping
       Source: "mapping (bytes32 => uint[])"
      ElementaryTypeName bytes32
         Source: "bytes32"
      ArrayTypeName
         Source: "uint[]"
        ElementaryTypeName uint
           Source: "uint"
  VariableDeclaration "customers"
     Type: mapping(address => struct FlightDelayDatabaseModel.Customer storage ref)
     Gas costs: [???]
     Source: "mapping (address => Customer) public customers"
    Mapping
       Source: "mapping (address => Customer)"
      ElementaryTypeName address
         Source: "address"
      UserDefinedTypeName "Customer"
         Source: "Customer"
  VariableDeclaration "customerPolicies"
     Type: mapping(address => uint256[] storage ref)
     Gas costs: [???]
     Source: "mapping (address => uint[]) public customerPolicies"
    Mapping
       Source: "mapping (address => uint[])"
      ElementaryTypeName address
         Source: "address"
      ArrayTypeName
         Source: "uint[]"
        ElementaryTypeName uint
           Source: "uint"
  VariableDeclaration "oraclizeCallbacks"
     Type: mapping(bytes32 => struct FlightDelayDatabaseModel.OraclizeCallback storage ref)
     Gas costs: [???]
     Source: "mapping (bytes32 => OraclizeCallback) public oraclizeCallbacks"
    Mapping
       Source: "mapping (bytes32 => OraclizeCallback)"
      ElementaryTypeName bytes32
         Source: "bytes32"
      UserDefinedTypeName "OraclizeCallback"
         Source: "OraclizeCallback"
  VariableDeclaration "risks"
     Type: mapping(bytes32 => struct FlightDelayDatabaseModel.Risk storage ref)
     Gas costs: [???]
     Source: "mapping (bytes32 => Risk) public risks"
    Mapping
       Source: "mapping (bytes32 => Risk)"
      ElementaryTypeName bytes32
         Source: "bytes32"
      UserDefinedTypeName "Risk"
         Source: "Risk"
  VariableDeclaration "accessControl"
     Type: mapping(address => mapping(address => mapping(uint8 => bool)))
     Gas costs: [???]
     Source: "mapping(address => mapping(address => mapping(uint8 => bool))) public accessControl"
    Mapping
       Source: "mapping(address => mapping(address => mapping(uint8 => bool)))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping(address => mapping(uint8 => bool))"
        ElementaryTypeName address
           Source: "address"
        Mapping
           Source: "mapping(uint8 => bool)"
          ElementaryTypeName uint8
             Source: "uint8"
          ElementaryTypeName bool
             Source: "bool"
  VariableDeclaration "ledger"
     Type: int256[6] storage ref
     Gas costs: [???]
     Source: "int[6] public ledger"
    ArrayTypeName
       Source: "int[6]"
      ElementaryTypeName int
         Source: "int"
      Literal, token: [no token] value: 6
         Type unknown.
         Source: "6"
  VariableDeclaration "FD_AC"
     Type: contract FlightDelayAccessControllerInterface
     Gas costs: 0
     Source: "FlightDelayAccessControllerInterface FD_AC"
    UserDefinedTypeName "FlightDelayAccessControllerInterface"
       Source: "FlightDelayAccessControllerInterface"
  FunctionDefinition "FlightDelayDatabase" - public
     Source: "function FlightDelayDatabase (address _controller) public {\r\n        setController(_controller);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _controller)"
      VariableDeclaration "_controller"
         Type: address
         Source: "address _controller"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        setController(_controller);\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "setController(_controller)"
        FunctionCall
           Type: bool
           Source: "setController(_controller)"
          Identifier setController
             Type: function (address) returns (bool)
             Source: "setController"
          Identifier _controller
             Type: address
             Source: "_controller"
  FunctionDefinition "setContracts" - public
     Source: "function setContracts() public onlyController {\r\n        FD_AC = FlightDelayAccessControllerInterface(getContract(\"FD.AccessController\"));\r\n\r\n        FD_AC.setPermissionById(101, \"FD.NewPolicy\");\r\n        FD_AC.setPermissionById(101, \"FD.Underwrite\");\r\n\r\n        FD_AC.setPermissionById(101, \"FD.Payout\");\r\n        FD_AC.setPermissionById(101, \"FD.Ledger\");\r\n\r\n        FD_AC.setPermissionById(102, \"FD.Owner\");\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyController"
       Gas costs: 0
       Source: "onlyController"
      Identifier onlyController
         Type: modifier ()
         Source: "onlyController"
    Block
       Source: "{\r\n        FD_AC = FlightDelayAccessControllerInterface(getContract(\"FD.AccessController\"));\r\n\r\n        FD_AC.setPermissionById(101, \"FD.NewPolicy\");\r\n        FD_AC.setPermissionById(101, \"FD.Underwrite\");\r\n\r\n        FD_AC.setPermissionById(101, \"FD.Payout\");\r\n        FD_AC.setPermissionById(101, \"FD.Ledger\");\r\n\r\n        FD_AC.setPermissionById(102, \"FD.Owner\");\r\n    }"
      ExpressionStatement
         Gas costs: 20271
         Source: "FD_AC = FlightDelayAccessControllerInterface(getContract(\"FD.AccessController\"))"
        Assignment using operator =
           Type: contract FlightDelayAccessControllerInterface
           Source: "FD_AC = FlightDelayAccessControllerInterface(getContract(\"FD.AccessController\"))"
          Identifier FD_AC
             Type: contract FlightDelayAccessControllerInterface
             Source: "FD_AC"
          FunctionCall
             Type: contract FlightDelayAccessControllerInterface
             Source: "FlightDelayAccessControllerInterface(getContract(\"FD.AccessController\"))"
            Identifier FlightDelayAccessControllerInterface
               Type: type(contract FlightDelayAccessControllerInterface)
               Source: "FlightDelayAccessControllerInterface"
            FunctionCall
               Type: address
               Source: "getContract(\"FD.AccessController\")"
              Identifier getContract
                 Type: function (bytes32) returns (address)
                 Source: "getContract"
              Literal, token: [no token] value: FD.AccessController
                 Type: literal_string "FD.AccessController"
                 Source: "\"FD.AccessController\""
      ExpressionStatement
         Gas costs: [???]
         Source: "FD_AC.setPermissionById(101, \"FD.NewPolicy\")"
        FunctionCall
           Type: tuple()
           Source: "FD_AC.setPermissionById(101, \"FD.NewPolicy\")"
          MemberAccess to member setPermissionById
             Type: function (uint8,bytes32) external
             Source: "FD_AC.setPermissionById"
            Identifier FD_AC
               Type: contract FlightDelayAccessControllerInterface
               Source: "FD_AC"
          Literal, token: [no token] value: 101
             Type: int_const 101
             Source: "101"
          Literal, token: [no token] value: FD.NewPolicy
             Type: literal_string "FD.NewPolicy"
             Source: "\"FD.NewPolicy\""
      ExpressionStatement
         Gas costs: [???]
         Source: "FD_AC.setPermissionById(101, \"FD.Underwrite\")"
        FunctionCall
           Type: tuple()
           Source: "FD_AC.setPermissionById(101, \"FD.Underwrite\")"
          MemberAccess to member setPermissionById
             Type: function (uint8,bytes32) external
             Source: "FD_AC.setPermissionById"
            Identifier FD_AC
               Type: contract FlightDelayAccessControllerInterface
               Source: "FD_AC"
          Literal, token: [no token] value: 101
             Type: int_const 101
             Source: "101"
          Literal, token: [no token] value: FD.Underwrite
             Type: literal_string "FD.Underwrite"
             Source: "\"FD.Underwrite\""
      ExpressionStatement
         Gas costs: [???]
         Source: "FD_AC.setPermissionById(101, \"FD.Payout\")"
        FunctionCall
           Type: tuple()
           Source: "FD_AC.setPermissionById(101, \"FD.Payout\")"
          MemberAccess to member setPermissionById
             Type: function (uint8,bytes32) external
             Source: "FD_AC.setPermissionById"
            Identifier FD_AC
               Type: contract FlightDelayAccessControllerInterface
               Source: "FD_AC"
          Literal, token: [no token] value: 101
             Type: int_const 101
             Source: "101"
          Literal, token: [no token] value: FD.Payout
             Type: literal_string "FD.Payout"
             Source: "\"FD.Payout\""
      ExpressionStatement
         Gas costs: [???]
         Source: "FD_AC.setPermissionById(101, \"FD.Ledger\")"
        FunctionCall
           Type: tuple()
           Source: "FD_AC.setPermissionById(101, \"FD.Ledger\")"
          MemberAccess to member setPermissionById
             Type: function (uint8,bytes32) external
             Source: "FD_AC.setPermissionById"
            Identifier FD_AC
               Type: contract FlightDelayAccessControllerInterface
               Source: "FD_AC"
          Literal, token: [no token] value: 101
             Type: int_const 101
             Source: "101"
          Literal, token: [no token] value: FD.Ledger
             Type: literal_string "FD.Ledger"
             Source: "\"FD.Ledger\""
      ExpressionStatement
         Gas costs: [???]
         Source: "FD_AC.setPermissionById(102, \"FD.Owner\")"
        FunctionCall
           Type: tuple()
           Source: "FD_AC.setPermissionById(102, \"FD.Owner\")"
          MemberAccess to member setPermissionById
             Type: function (uint8,bytes32) external
             Source: "FD_AC.setPermissionById"
            Identifier FD_AC
               Type: contract FlightDelayAccessControllerInterface
               Source: "FD_AC"
          Literal, token: [no token] value: 102
             Type: int_const 102
             Source: "102"
          Literal, token: [no token] value: FD.Owner
             Type: literal_string "FD.Owner"
             Source: "\"FD.Owner\""
  FunctionDefinition "setMinDepartureLim" - public
     Source: "function setMinDepartureLim(uint _timestamp) returns (bool _success) {\r\n        require(FD_AC.checkPermission(102, msg.sender));\r\n\r\n        MIN_DEPARTURE_LIM = _timestamp;\r\n        _success = true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint _timestamp)"
      VariableDeclaration "_timestamp"
         Type: uint256
         Source: "uint _timestamp"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(bool _success)"
      VariableDeclaration "_success"
         Type: bool
         Source: "bool _success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        require(FD_AC.checkPermission(102, msg.sender));\r\n\r\n        MIN_DEPARTURE_LIM = _timestamp;\r\n        _success = true;\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(FD_AC.checkPermission(102, msg.sender))"
        FunctionCall
           Type: tuple()
           Source: "require(FD_AC.checkPermission(102, msg.sender))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "FD_AC.checkPermission(102, msg.sender)"
            MemberAccess to member checkPermission
               Type: function (uint8,address) external returns (bool)
               Source: "FD_AC.checkPermission"
              Identifier FD_AC
                 Type: contract FlightDelayAccessControllerInterface
                 Source: "FD_AC"
            Literal, token: [no token] value: 102
               Type: int_const 102
               Source: "102"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
      ExpressionStatement
         Gas costs: 20014
         Source: "MIN_DEPARTURE_LIM = _timestamp"
        Assignment using operator =
           Type: uint256
           Source: "MIN_DEPARTURE_LIM = _timestamp"
          Identifier MIN_DEPARTURE_LIM
             Type: uint256
             Source: "MIN_DEPARTURE_LIM"
          Identifier _timestamp
             Type: uint256
             Source: "_timestamp"
      ExpressionStatement
         Gas costs: 8
         Source: "_success = true"
        Assignment using operator =
           Type: bool
           Source: "_success = true"
          Identifier _success
             Type: bool
             Source: "_success"
          Literal, token: true value: true
             Type: bool
             Source: "true"
  FunctionDefinition "setMaxDepartureLim" - public
     Source: "function setMaxDepartureLim(uint _timestamp) returns (bool _success) {\r\n        require(FD_AC.checkPermission(102, msg.sender));\r\n\r\n        MAX_DEPARTURE_LIM = _timestamp;\r\n        _success = true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint _timestamp)"
      VariableDeclaration "_timestamp"
         Type: uint256
         Source: "uint _timestamp"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(bool _success)"
      VariableDeclaration "_success"
         Type: bool
         Source: "bool _success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        require(FD_AC.checkPermission(102, msg.sender));\r\n\r\n        MAX_DEPARTURE_LIM = _timestamp;\r\n        _success = true;\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(FD_AC.checkPermission(102, msg.sender))"
        FunctionCall
           Type: tuple()
           Source: "require(FD_AC.checkPermission(102, msg.sender))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "FD_AC.checkPermission(102, msg.sender)"
            MemberAccess to member checkPermission
               Type: function (uint8,address) external returns (bool)
               Source: "FD_AC.checkPermission"
              Identifier FD_AC
                 Type: contract FlightDelayAccessControllerInterface
                 Source: "FD_AC"
            Literal, token: [no token] value: 102
               Type: int_const 102
               Source: "102"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
      ExpressionStatement
         Gas costs: 20014
         Source: "MAX_DEPARTURE_LIM = _timestamp"
        Assignment using operator =
           Type: uint256
           Source: "MAX_DEPARTURE_LIM = _timestamp"
          Identifier MAX_DEPARTURE_LIM
             Type: uint256
             Source: "MAX_DEPARTURE_LIM"
          Identifier _timestamp
             Type: uint256
             Source: "_timestamp"
      ExpressionStatement
         Gas costs: 8
         Source: "_success = true"
        Assignment using operator =
           Type: bool
           Source: "_success = true"
          Identifier _success
             Type: bool
             Source: "_success"
          Literal, token: true value: true
             Type: bool
             Source: "true"
  FunctionDefinition "addOrigin" - public
     Source: "function addOrigin(bytes32 _origin) returns (uint256 _index) {\r\n        require(FD_AC.checkPermission(102, msg.sender));\r\n\r\n        validOrigins.push(_origin);\r\n        _index = validOrigins.length - 1;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32 _origin)"
      VariableDeclaration "_origin"
         Type: bytes32
         Source: "bytes32 _origin"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Gas costs: 3
       Source: "(uint256 _index)"
      VariableDeclaration "_index"
         Type: uint256
         Source: "uint256 _index"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        require(FD_AC.checkPermission(102, msg.sender));\r\n\r\n        validOrigins.push(_origin);\r\n        _index = validOrigins.length - 1;\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(FD_AC.checkPermission(102, msg.sender))"
        FunctionCall
           Type: tuple()
           Source: "require(FD_AC.checkPermission(102, msg.sender))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "FD_AC.checkPermission(102, msg.sender)"
            MemberAccess to member checkPermission
               Type: function (uint8,address) external returns (bool)
               Source: "FD_AC.checkPermission"
              Identifier FD_AC
                 Type: contract FlightDelayAccessControllerInterface
                 Source: "FD_AC"
            Literal, token: [no token] value: 102
               Type: int_const 102
               Source: "102"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
      ExpressionStatement
         Gas costs: 20124
         Source: "validOrigins.push(_origin)"
        FunctionCall
           Type: uint256
           Source: "validOrigins.push(_origin)"
          MemberAccess to member push
             Type: function (bytes32) returns (uint256)
             Source: "validOrigins.push"
            Identifier validOrigins
               Type: bytes32[] storage ref
               Source: "validOrigins"
          Identifier _origin
             Type: bytes32
             Source: "_origin"
      ExpressionStatement
         Gas costs: 222
         Source: "_index = validOrigins.length - 1"
        Assignment using operator =
           Type: uint256
           Source: "_index = validOrigins.length - 1"
          Identifier _index
             Type: uint256
             Source: "_index"
          BinaryOperation using operator -
             Type: uint256
             Source: "validOrigins.length - 1"
            MemberAccess to member length
               Type: uint256
               Source: "validOrigins.length"
              Identifier validOrigins
                 Type: bytes32[] storage ref
                 Source: "validOrigins"
            Literal, token: [no token] value: 1
               Type: int_const 1
               Source: "1"
  FunctionDefinition "removeOriginByIndex" - public
     Source: "function removeOriginByIndex(uint256 _index) returns (bool _success) {\r\n        require(FD_AC.checkPermission(102, msg.sender));\r\n\r\n        if (validOrigins.length == 0) {\r\n            return false;\r\n        } else {\r\n            bytes32 lastElement = validOrigins[validOrigins.length - 1];\r\n            validOrigins[_index] = lastElement;\r\n            validOrigins.length--;\r\n            return true;\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _index)"
      VariableDeclaration "_index"
         Type: uint256
         Source: "uint256 _index"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool _success)"
      VariableDeclaration "_success"
         Type: bool
         Source: "bool _success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        require(FD_AC.checkPermission(102, msg.sender));\r\n\r\n        if (validOrigins.length == 0) {\r\n            return false;\r\n        } else {\r\n            bytes32 lastElement = validOrigins[validOrigins.length - 1];\r\n            validOrigins[_index] = lastElement;\r\n            validOrigins.length--;\r\n            return true;\r\n        }\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(FD_AC.checkPermission(102, msg.sender))"
        FunctionCall
           Type: tuple()
           Source: "require(FD_AC.checkPermission(102, msg.sender))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "FD_AC.checkPermission(102, msg.sender)"
            MemberAccess to member checkPermission
               Type: function (uint8,address) external returns (bool)
               Source: "FD_AC.checkPermission"
              Identifier FD_AC
                 Type: contract FlightDelayAccessControllerInterface
                 Source: "FD_AC"
            Literal, token: [no token] value: 102
               Type: int_const 102
               Source: "102"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
      IfStatement
         Source: "if (validOrigins.length == 0) {\r\n            return false;\r\n        } else {\r\n            bytes32 lastElement = validOrigins[validOrigins.length - 1];\r\n            validOrigins[_index] = lastElement;\r\n            validOrigins.length--;\r\n            return true;\r\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 217
           Source: "validOrigins.length == 0"
          MemberAccess to member length
             Type: uint256
             Source: "validOrigins.length"
            Identifier validOrigins
               Type: bytes32[] storage ref
               Source: "validOrigins"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n            return false;\r\n        }"
          Return
             Gas costs: 19
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
        Block
           Source: "{\r\n            bytes32 lastElement = validOrigins[validOrigins.length - 1];\r\n            validOrigins[_index] = lastElement;\r\n            validOrigins.length--;\r\n            return true;\r\n        }"
          VariableDeclarationStatement
             Gas costs: 714
             Source: "bytes32 lastElement = validOrigins[validOrigins.length - 1]"
            VariableDeclaration "lastElement"
               Type: bytes32
               Source: "bytes32 lastElement"
              ElementaryTypeName bytes32
                 Source: "bytes32"
            IndexAccess
               Type: bytes32
               Source: "validOrigins[validOrigins.length - 1]"
              Identifier validOrigins
                 Type: bytes32[] storage ref
                 Source: "validOrigins"
              BinaryOperation using operator -
                 Type: uint256
                 Source: "validOrigins.length - 1"
                MemberAccess to member length
                   Type: uint256
                   Source: "validOrigins.length"
                  Identifier validOrigins
                     Type: bytes32[] storage ref
                     Source: "validOrigins"
                Literal, token: [no token] value: 1
                   Type: int_const 1
                   Source: "1"
          ExpressionStatement
             Gas costs: 20312
             Source: "validOrigins[_index] = lastElement"
            Assignment using operator =
               Type: bytes32
               Source: "validOrigins[_index] = lastElement"
              IndexAccess
                 Type: bytes32
                 Source: "validOrigins[_index]"
                Identifier validOrigins
                   Type: bytes32[] storage ref
                   Source: "validOrigins"
                Identifier _index
                   Type: uint256
                   Source: "_index"
              Identifier lastElement
                 Type: bytes32
                 Source: "lastElement"
          ExpressionStatement
             Gas costs: 236
             Source: "validOrigins.length--"
            UnaryOperation (postfix) --
               Type: uint256
               Source: "validOrigins.length--"
              MemberAccess to member length
                 Type: uint256
                 Source: "validOrigins.length"
                Identifier validOrigins
                   Type: bytes32[] storage ref
                   Source: "validOrigins"
          Return
             Gas costs: 8
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
  FunctionDefinition "countOrigins" - public - const
     Source: "function countOrigins() public constant returns (uint256 _length) {\r\n        _length = validOrigins.length;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256 _length)"
      VariableDeclaration "_length"
         Type: uint256
         Source: "uint256 _length"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        _length = validOrigins.length;\r\n    }"
      ExpressionStatement
         Gas costs: 216
         Source: "_length = validOrigins.length"
        Assignment using operator =
           Type: uint256
           Source: "_length = validOrigins.length"
          Identifier _length
             Type: uint256
             Source: "_length"
          MemberAccess to member length
             Type: uint256
             Source: "validOrigins.length"
            Identifier validOrigins
               Type: bytes32[] storage ref
               Source: "validOrigins"
  FunctionDefinition "getOriginByIndex" - public - const
     Source: "function getOriginByIndex(uint256 _i) public constant returns (bytes32 _origin) {\r\n        _origin = validOrigins[_i];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _i)"
      VariableDeclaration "_i"
         Type: uint256
         Source: "uint256 _i"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bytes32 _origin)"
      VariableDeclaration "_origin"
         Type: bytes32
         Source: "bytes32 _origin"
        ElementaryTypeName bytes32
           Source: "bytes32"
    Block
       Source: "{\r\n        _origin = validOrigins[_i];\r\n    }"
      ExpressionStatement
         Gas costs: 497
         Source: "_origin = validOrigins[_i]"
        Assignment using operator =
           Type: bytes32
           Source: "_origin = validOrigins[_i]"
          Identifier _origin
             Type: bytes32
             Source: "_origin"
          IndexAccess
             Type: bytes32
             Source: "validOrigins[_i]"
            Identifier validOrigins
               Type: bytes32[] storage ref
               Source: "validOrigins"
            Identifier _i
               Type: uint256
               Source: "_i"
  FunctionDefinition "addDestination" - public
     Source: "function addDestination(bytes32 _origin) returns (uint256 _index) {\r\n        require(FD_AC.checkPermission(102, msg.sender));\r\n\r\n        validDestinations.push(_origin);\r\n        _index = validDestinations.length - 1;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32 _origin)"
      VariableDeclaration "_origin"
         Type: bytes32
         Source: "bytes32 _origin"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Gas costs: 3
       Source: "(uint256 _index)"
      VariableDeclaration "_index"
         Type: uint256
         Source: "uint256 _index"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        require(FD_AC.checkPermission(102, msg.sender));\r\n\r\n        validDestinations.push(_origin);\r\n        _index = validDestinations.length - 1;\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(FD_AC.checkPermission(102, msg.sender))"
        FunctionCall
           Type: tuple()
           Source: "require(FD_AC.checkPermission(102, msg.sender))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "FD_AC.checkPermission(102, msg.sender)"
            MemberAccess to member checkPermission
               Type: function (uint8,address) external returns (bool)
               Source: "FD_AC.checkPermission"
              Identifier FD_AC
                 Type: contract FlightDelayAccessControllerInterface
                 Source: "FD_AC"
            Literal, token: [no token] value: 102
               Type: int_const 102
               Source: "102"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
      ExpressionStatement
         Gas costs: 20124
         Source: "validDestinations.push(_origin)"
        FunctionCall
           Type: uint256
           Source: "validDestinations.push(_origin)"
          MemberAccess to member push
             Type: function (bytes32) returns (uint256)
             Source: "validDestinations.push"
            Identifier validDestinations
               Type: bytes32[] storage ref
               Source: "validDestinations"
          Identifier _origin
             Type: bytes32
             Source: "_origin"
      ExpressionStatement
         Gas costs: 222
         Source: "_index = validDestinations.length - 1"
        Assignment using operator =
           Type: uint256
           Source: "_index = validDestinations.length - 1"
          Identifier _index
             Type: uint256
             Source: "_index"
          BinaryOperation using operator -
             Type: uint256
             Source: "validDestinations.length - 1"
            MemberAccess to member length
               Type: uint256
               Source: "validDestinations.length"
              Identifier validDestinations
                 Type: bytes32[] storage ref
                 Source: "validDestinations"
            Literal, token: [no token] value: 1
               Type: int_const 1
               Source: "1"
  FunctionDefinition "removeDestinationByIndex" - public
     Source: "function removeDestinationByIndex(uint256 _index) returns (bool _success) {\r\n        require(FD_AC.checkPermission(102, msg.sender));\r\n\r\n        if (validDestinations.length == 0) {\r\n            return false;\r\n        } else {\r\n            bytes32 lastElement = validDestinations[validDestinations.length - 1];\r\n            validDestinations[_index] = lastElement;\r\n            validDestinations.length--;\r\n            return true;\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _index)"
      VariableDeclaration "_index"
         Type: uint256
         Source: "uint256 _index"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool _success)"
      VariableDeclaration "_success"
         Type: bool
         Source: "bool _success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        require(FD_AC.checkPermission(102, msg.sender));\r\n\r\n        if (validDestinations.length == 0) {\r\n            return false;\r\n        } else {\r\n            bytes32 lastElement = validDestinations[validDestinations.length - 1];\r\n            validDestinations[_index] = lastElement;\r\n            validDestinations.length--;\r\n            return true;\r\n        }\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(FD_AC.checkPermission(102, msg.sender))"
        FunctionCall
           Type: tuple()
           Source: "require(FD_AC.checkPermission(102, msg.sender))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "FD_AC.checkPermission(102, msg.sender)"
            MemberAccess to member checkPermission
               Type: function (uint8,address) external returns (bool)
               Source: "FD_AC.checkPermission"
              Identifier FD_AC
                 Type: contract FlightDelayAccessControllerInterface
                 Source: "FD_AC"
            Literal, token: [no token] value: 102
               Type: int_const 102
               Source: "102"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
      IfStatement
         Source: "if (validDestinations.length == 0) {\r\n            return false;\r\n        } else {\r\n            bytes32 lastElement = validDestinations[validDestinations.length - 1];\r\n            validDestinations[_index] = lastElement;\r\n            validDestinations.length--;\r\n            return true;\r\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 217
           Source: "validDestinations.length == 0"
          MemberAccess to member length
             Type: uint256
             Source: "validDestinations.length"
            Identifier validDestinations
               Type: bytes32[] storage ref
               Source: "validDestinations"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n            return false;\r\n        }"
          Return
             Gas costs: 19
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
        Block
           Source: "{\r\n            bytes32 lastElement = validDestinations[validDestinations.length - 1];\r\n            validDestinations[_index] = lastElement;\r\n            validDestinations.length--;\r\n            return true;\r\n        }"
          VariableDeclarationStatement
             Gas costs: 714
             Source: "bytes32 lastElement = validDestinations[validDestinations.length - 1]"
            VariableDeclaration "lastElement"
               Type: bytes32
               Source: "bytes32 lastElement"
              ElementaryTypeName bytes32
                 Source: "bytes32"
            IndexAccess
               Type: bytes32
               Source: "validDestinations[validDestinations.length - 1]"
              Identifier validDestinations
                 Type: bytes32[] storage ref
                 Source: "validDestinations"
              BinaryOperation using operator -
                 Type: uint256
                 Source: "validDestinations.length - 1"
                MemberAccess to member length
                   Type: uint256
                   Source: "validDestinations.length"
                  Identifier validDestinations
                     Type: bytes32[] storage ref
                     Source: "validDestinations"
                Literal, token: [no token] value: 1
                   Type: int_const 1
                   Source: "1"
          ExpressionStatement
             Gas costs: 20312
             Source: "validDestinations[_index] = lastElement"
            Assignment using operator =
               Type: bytes32
               Source: "validDestinations[_index] = lastElement"
              IndexAccess
                 Type: bytes32
                 Source: "validDestinations[_index]"
                Identifier validDestinations
                   Type: bytes32[] storage ref
                   Source: "validDestinations"
                Identifier _index
                   Type: uint256
                   Source: "_index"
              Identifier lastElement
                 Type: bytes32
                 Source: "lastElement"
          ExpressionStatement
             Gas costs: 247
             Source: "validDestinations.length--"
            UnaryOperation (postfix) --
               Type: uint256
               Source: "validDestinations.length--"
              MemberAccess to member length
                 Type: uint256
                 Source: "validDestinations.length"
                Identifier validDestinations
                   Type: bytes32[] storage ref
                   Source: "validDestinations"
          Return
             Gas costs: 8
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
  FunctionDefinition "countDestinations" - public - const
     Source: "function countDestinations() public constant returns (uint256 _length) {\r\n        _length = validDestinations.length;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256 _length)"
      VariableDeclaration "_length"
         Type: uint256
         Source: "uint256 _length"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        _length = validDestinations.length;\r\n    }"
      ExpressionStatement
         Gas costs: 216
         Source: "_length = validDestinations.length"
        Assignment using operator =
           Type: uint256
           Source: "_length = validDestinations.length"
          Identifier _length
             Type: uint256
             Source: "_length"
          MemberAccess to member length
             Type: uint256
             Source: "validDestinations.length"
            Identifier validDestinations
               Type: bytes32[] storage ref
               Source: "validDestinations"
  FunctionDefinition "getDestinationByIndex" - public - const
     Source: "function getDestinationByIndex(uint256 _i) public constant returns (bytes32 _destination) {\r\n        _destination = validDestinations[_i];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _i)"
      VariableDeclaration "_i"
         Type: uint256
         Source: "uint256 _i"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bytes32 _destination)"
      VariableDeclaration "_destination"
         Type: bytes32
         Source: "bytes32 _destination"
        ElementaryTypeName bytes32
           Source: "bytes32"
    Block
       Source: "{\r\n        _destination = validDestinations[_i];\r\n    }"
      ExpressionStatement
         Gas costs: 497
         Source: "_destination = validDestinations[_i]"
        Assignment using operator =
           Type: bytes32
           Source: "_destination = validDestinations[_i]"
          Identifier _destination
             Type: bytes32
             Source: "_destination"
          IndexAccess
             Type: bytes32
             Source: "validDestinations[_i]"
            Identifier validDestinations
               Type: bytes32[] storage ref
               Source: "validDestinations"
            Identifier _i
               Type: uint256
               Source: "_i"
  FunctionDefinition "setAccessControl" - public
     Source: "function setAccessControl (\r\n        address _contract,\r\n        address _caller,\r\n        uint8 _perm,\r\n        bool _access\r\n    ) public {\r\n        // one and only hardcoded accessControl\r\n        require(msg.sender == FD_CI.getContract(\"FD.AccessController\"));\r\n        accessControl[_contract][_caller][_perm] = _access;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(\r\n        address _contract,\r\n        address _caller,\r\n        uint8 _perm,\r\n        bool _access\r\n    )"
      VariableDeclaration "_contract"
         Type: address
         Source: "address _contract"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_caller"
         Type: address
         Source: "address _caller"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_perm"
         Type: uint8
         Source: "uint8 _perm"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "_access"
         Type: bool
         Source: "bool _access"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        // one and only hardcoded accessControl\r\n        require(msg.sender == FD_CI.getContract(\"FD.AccessController\"));\r\n        accessControl[_contract][_caller][_perm] = _access;\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(msg.sender == FD_CI.getContract(\"FD.AccessController\"))"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == FD_CI.getContract(\"FD.AccessController\"))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == FD_CI.getContract(\"FD.AccessController\")"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            FunctionCall
               Type: address
               Source: "FD_CI.getContract(\"FD.AccessController\")"
              MemberAccess to member getContract
                 Type: function (bytes32) external returns (address)
                 Source: "FD_CI.getContract"
                Identifier FD_CI
                   Type: contract FlightDelayControllerInterface
                   Source: "FD_CI"
              Literal, token: [no token] value: FD.AccessController
                 Type: literal_string "FD.AccessController"
                 Source: "\"FD.AccessController\""
      ExpressionStatement
         Gas costs: 20543
         Source: "accessControl[_contract][_caller][_perm] = _access"
        Assignment using operator =
           Type: bool
           Source: "accessControl[_contract][_caller][_perm] = _access"
          IndexAccess
             Type: bool
             Source: "accessControl[_contract][_caller][_perm]"
            IndexAccess
               Type: mapping(uint8 => bool)
               Source: "accessControl[_contract][_caller]"
              IndexAccess
                 Type: mapping(address => mapping(uint8 => bool))
                 Source: "accessControl[_contract]"
                Identifier accessControl
                   Type: mapping(address => mapping(address => mapping(uint8 => bool)))
                   Source: "accessControl"
                Identifier _contract
                   Type: address
                   Source: "_contract"
              Identifier _caller
                 Type: address
                 Source: "_caller"
            Identifier _perm
               Type: uint8
               Source: "_perm"
          Identifier _access
             Type: bool
             Source: "_access"
  FunctionDefinition "setAccessControl" - public
     Source: "function setAccessControl(address _contract, address _caller, uint8 _perm) public {\r\n        setAccessControl(\r\n            _contract,\r\n            _caller,\r\n            _perm,\r\n            true\r\n        );\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _contract, address _caller, uint8 _perm)"
      VariableDeclaration "_contract"
         Type: address
         Source: "address _contract"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_caller"
         Type: address
         Source: "address _caller"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_perm"
         Type: uint8
         Source: "uint8 _perm"
        ElementaryTypeName uint8
           Source: "uint8"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        setAccessControl(\r\n            _contract,\r\n            _caller,\r\n            _perm,\r\n            true\r\n        );\r\n    }"
      ExpressionStatement
         Gas costs: 27
         Source: "setAccessControl(\r\n            _contract,\r\n            _caller,\r\n            _perm,\r\n            true\r\n        )"
        FunctionCall
           Type: tuple()
           Source: "setAccessControl(\r\n            _contract,\r\n            _caller,\r\n            _perm,\r\n            true\r\n        )"
          Identifier setAccessControl
             Type: function (address,address,uint8,bool)
             Source: "setAccessControl"
          Identifier _contract
             Type: address
             Source: "_contract"
          Identifier _caller
             Type: address
             Source: "_caller"
          Identifier _perm
             Type: uint8
             Source: "_perm"
          Literal, token: true value: true
             Type: bool
             Source: "true"
  FunctionDefinition "getAccessControl" - public
     Source: "function getAccessControl(address _contract, address _caller, uint8 _perm) public returns (bool _allowed) {\r\n        _allowed = accessControl[_contract][_caller][_perm];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _contract, address _caller, uint8 _perm)"
      VariableDeclaration "_contract"
         Type: address
         Source: "address _contract"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_caller"
         Type: address
         Source: "address _caller"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_perm"
         Type: uint8
         Source: "uint8 _perm"
        ElementaryTypeName uint8
           Source: "uint8"
    ParameterList
       Gas costs: 3
       Source: "(bool _allowed)"
      VariableDeclaration "_allowed"
         Type: bool
         Source: "bool _allowed"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        _allowed = accessControl[_contract][_caller][_perm];\r\n    }"
      ExpressionStatement
         Gas costs: 520
         Source: "_allowed = accessControl[_contract][_caller][_perm]"
        Assignment using operator =
           Type: bool
           Source: "_allowed = accessControl[_contract][_caller][_perm]"
          Identifier _allowed
             Type: bool
             Source: "_allowed"
          IndexAccess
             Type: bool
             Source: "accessControl[_contract][_caller][_perm]"
            IndexAccess
               Type: mapping(uint8 => bool)
               Source: "accessControl[_contract][_caller]"
              IndexAccess
                 Type: mapping(address => mapping(uint8 => bool))
                 Source: "accessControl[_contract]"
                Identifier accessControl
                   Type: mapping(address => mapping(address => mapping(uint8 => bool)))
                   Source: "accessControl"
                Identifier _contract
                   Type: address
                   Source: "_contract"
              Identifier _caller
                 Type: address
                 Source: "_caller"
            Identifier _perm
               Type: uint8
               Source: "_perm"
  FunctionDefinition "setLedger" - public
     Source: "function setLedger(uint8 _index, int _value) public {\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        int previous = ledger[_index];\r\n        ledger[_index] += _value;\r\n\r\n// --> debug-mode\r\n//            LogInt(\"previous\", previous);\r\n//            LogInt(\"ledger[_index]\", ledger[_index]);\r\n//            LogInt(\"_value\", _value);\r\n// <-- debug-mode\r\n\r\n        // check for int overflow\r\n        if (_value < 0) {\r\n            assert(ledger[_index] < previous);\r\n        } else if (_value > 0) {\r\n            assert(ledger[_index] > previous);\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint8 _index, int _value)"
      VariableDeclaration "_index"
         Type: uint8
         Source: "uint8 _index"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "_value"
         Type: int256
         Source: "int _value"
        ElementaryTypeName int
           Source: "int"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        int previous = ledger[_index];\r\n        ledger[_index] += _value;\r\n\r\n// --> debug-mode\r\n//            LogInt(\"previous\", previous);\r\n//            LogInt(\"ledger[_index]\", ledger[_index]);\r\n//            LogInt(\"_value\", _value);\r\n// <-- debug-mode\r\n\r\n        // check for int overflow\r\n        if (_value < 0) {\r\n            assert(ledger[_index] < previous);\r\n        } else if (_value > 0) {\r\n            assert(ledger[_index] > previous);\r\n        }\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(FD_AC.checkPermission(101, msg.sender))"
        FunctionCall
           Type: tuple()
           Source: "require(FD_AC.checkPermission(101, msg.sender))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "FD_AC.checkPermission(101, msg.sender)"
            MemberAccess to member checkPermission
               Type: function (uint8,address) external returns (bool)
               Source: "FD_AC.checkPermission"
              Identifier FD_AC
                 Type: contract FlightDelayAccessControllerInterface
                 Source: "FD_AC"
            Literal, token: [no token] value: 101
               Type: int_const 101
               Source: "101"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
      VariableDeclarationStatement
         Gas costs: 252
         Source: "int previous = ledger[_index]"
        VariableDeclaration "previous"
           Type: int256
           Source: "int previous"
          ElementaryTypeName int
             Source: "int"
        IndexAccess
           Type: int256
           Source: "ledger[_index]"
          Identifier ledger
             Type: int256[6] storage ref
             Source: "ledger"
          Identifier _index
             Type: uint8
             Source: "_index"
      ExpressionStatement
         Gas costs: 20274
         Source: "ledger[_index] += _value"
        Assignment using operator +=
           Type: int256
           Source: "ledger[_index] += _value"
          IndexAccess
             Type: int256
             Source: "ledger[_index]"
            Identifier ledger
               Type: int256[6] storage ref
               Source: "ledger"
            Identifier _index
               Type: uint8
               Source: "_index"
          Identifier _value
             Type: int256
             Source: "_value"
      IfStatement
         Source: "if (_value < 0) {\r\n            assert(ledger[_index] < previous);\r\n        } else if (_value > 0) {\r\n            assert(ledger[_index] > previous);\r\n        }"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 9
           Source: "_value < 0"
          Identifier _value
             Type: int256
             Source: "_value"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n            assert(ledger[_index] < previous);\r\n        }"
          ExpressionStatement
             Gas costs: 270
             Source: "assert(ledger[_index] < previous)"
            FunctionCall
               Type: tuple()
               Source: "assert(ledger[_index] < previous)"
              Identifier assert
                 Type: function (bool) pure
                 Source: "assert"
              BinaryOperation using operator <
                 Type: bool
                 Source: "ledger[_index] < previous"
                IndexAccess
                   Type: int256
                   Source: "ledger[_index]"
                  Identifier ledger
                     Type: int256[6] storage ref
                     Source: "ledger"
                  Identifier _index
                     Type: uint8
                     Source: "_index"
                Identifier previous
                   Type: int256
                   Source: "previous"
        IfStatement
           Source: "if (_value > 0) {\r\n            assert(ledger[_index] > previous);\r\n        }"
          BinaryOperation using operator >
             Type: bool
             Gas costs: 9
             Source: "_value > 0"
            Identifier _value
               Type: int256
               Source: "_value"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
          Block
             Source: "{\r\n            assert(ledger[_index] > previous);\r\n        }"
            ExpressionStatement
               Gas costs: 270
               Source: "assert(ledger[_index] > previous)"
              FunctionCall
                 Type: tuple()
                 Source: "assert(ledger[_index] > previous)"
                Identifier assert
                   Type: function (bool) pure
                   Source: "assert"
                BinaryOperation using operator >
                   Type: bool
                   Source: "ledger[_index] > previous"
                  IndexAccess
                     Type: int256
                     Source: "ledger[_index]"
                    Identifier ledger
                       Type: int256[6] storage ref
                       Source: "ledger"
                    Identifier _index
                       Type: uint8
                       Source: "_index"
                  Identifier previous
                     Type: int256
                     Source: "previous"
  FunctionDefinition "getLedger" - public
     Source: "function getLedger(uint8 _index) public returns (int _value) {\r\n        _value = ledger[_index];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint8 _index)"
      VariableDeclaration "_index"
         Type: uint8
         Source: "uint8 _index"
        ElementaryTypeName uint8
           Source: "uint8"
    ParameterList
       Gas costs: 3
       Source: "(int _value)"
      VariableDeclaration "_value"
         Type: int256
         Source: "int _value"
        ElementaryTypeName int
           Source: "int"
    Block
       Source: "{\r\n        _value = ledger[_index];\r\n    }"
      ExpressionStatement
         Gas costs: 249
         Source: "_value = ledger[_index]"
        Assignment using operator =
           Type: int256
           Source: "_value = ledger[_index]"
          Identifier _value
             Type: int256
             Source: "_value"
          IndexAccess
             Type: int256
             Source: "ledger[_index]"
            Identifier ledger
               Type: int256[6] storage ref
               Source: "ledger"
            Identifier _index
               Type: uint8
               Source: "_index"
  FunctionDefinition "getCustomerPremium" - public
     Source: "function getCustomerPremium(uint _policyId) public returns (address _customer, uint _premium) {\r\n        Policy storage p = policies[_policyId];\r\n        _customer = p.customer;\r\n        _premium = p.premium;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint _policyId)"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 6
       Source: "(address _customer, uint _premium)"
      VariableDeclaration "_customer"
         Type: address
         Source: "address _customer"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_premium"
         Type: uint256
         Source: "uint _premium"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        Policy storage p = policies[_policyId];\r\n        _customer = p.customer;\r\n        _premium = p.premium;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 311
         Source: "Policy storage p = policies[_policyId]"
        VariableDeclaration "p"
           Type: struct FlightDelayDatabaseModel.Policy storage pointer
           Source: "Policy storage p"
          UserDefinedTypeName "Policy"
             Source: "Policy"
        IndexAccess
           Type: struct FlightDelayDatabaseModel.Policy storage ref
           Source: "policies[_policyId]"
          Identifier policies
             Type: struct FlightDelayDatabaseModel.Policy storage ref[] storage ref
             Source: "policies"
          Identifier _policyId
             Type: uint256
             Source: "_policyId"
      ExpressionStatement
         Gas costs: 250
         Source: "_customer = p.customer"
        Assignment using operator =
           Type: address
           Source: "_customer = p.customer"
          Identifier _customer
             Type: address
             Source: "_customer"
          MemberAccess to member customer
             Type: address
             Source: "p.customer"
            Identifier p
               Type: struct FlightDelayDatabaseModel.Policy storage pointer
               Source: "p"
      ExpressionStatement
         Gas costs: 214
         Source: "_premium = p.premium"
        Assignment using operator =
           Type: uint256
           Source: "_premium = p.premium"
          Identifier _premium
             Type: uint256
             Source: "_premium"
          MemberAccess to member premium
             Type: uint256
             Source: "p.premium"
            Identifier p
               Type: struct FlightDelayDatabaseModel.Policy storage pointer
               Source: "p"
  FunctionDefinition "getPolicyData" - public
     Source: "function getPolicyData(uint _policyId) public returns (address _customer, uint _weight, uint _premium) {\r\n        Policy storage p = policies[_policyId];\r\n        _customer = p.customer;\r\n        _weight = p.weight;\r\n        _premium = p.premium;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint _policyId)"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 9
       Source: "(address _customer, uint _weight, uint _premium)"
      VariableDeclaration "_customer"
         Type: address
         Source: "address _customer"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_weight"
         Type: uint256
         Source: "uint _weight"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_premium"
         Type: uint256
         Source: "uint _premium"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        Policy storage p = policies[_policyId];\r\n        _customer = p.customer;\r\n        _weight = p.weight;\r\n        _premium = p.premium;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 311
         Source: "Policy storage p = policies[_policyId]"
        VariableDeclaration "p"
           Type: struct FlightDelayDatabaseModel.Policy storage pointer
           Source: "Policy storage p"
          UserDefinedTypeName "Policy"
             Source: "Policy"
        IndexAccess
           Type: struct FlightDelayDatabaseModel.Policy storage ref
           Source: "policies[_policyId]"
          Identifier policies
             Type: struct FlightDelayDatabaseModel.Policy storage ref[] storage ref
             Source: "policies"
          Identifier _policyId
             Type: uint256
             Source: "_policyId"
      ExpressionStatement
         Gas costs: 250
         Source: "_customer = p.customer"
        Assignment using operator =
           Type: address
           Source: "_customer = p.customer"
          Identifier _customer
             Type: address
             Source: "_customer"
          MemberAccess to member customer
             Type: address
             Source: "p.customer"
            Identifier p
               Type: struct FlightDelayDatabaseModel.Policy storage pointer
               Source: "p"
      ExpressionStatement
         Gas costs: 214
         Source: "_weight = p.weight"
        Assignment using operator =
           Type: uint256
           Source: "_weight = p.weight"
          Identifier _weight
             Type: uint256
             Source: "_weight"
          MemberAccess to member weight
             Type: uint256
             Source: "p.weight"
            Identifier p
               Type: struct FlightDelayDatabaseModel.Policy storage pointer
               Source: "p"
      ExpressionStatement
         Gas costs: 214
         Source: "_premium = p.premium"
        Assignment using operator =
           Type: uint256
           Source: "_premium = p.premium"
          Identifier _premium
             Type: uint256
             Source: "_premium"
          MemberAccess to member premium
             Type: uint256
             Source: "p.premium"
            Identifier p
               Type: struct FlightDelayDatabaseModel.Policy storage pointer
               Source: "p"
  FunctionDefinition "getPolicyState" - public
     Source: "function getPolicyState(uint _policyId) public returns (policyState _state) {\r\n        Policy storage p = policies[_policyId];\r\n        _state = p.state;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint _policyId)"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(policyState _state)"
      VariableDeclaration "_state"
         Type: enum FlightDelayDatabaseModel.policyState
         Source: "policyState _state"
        UserDefinedTypeName "policyState"
           Source: "policyState"
    Block
       Source: "{\r\n        Policy storage p = policies[_policyId];\r\n        _state = p.state;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 311
         Source: "Policy storage p = policies[_policyId]"
        VariableDeclaration "p"
           Type: struct FlightDelayDatabaseModel.Policy storage pointer
           Source: "Policy storage p"
          UserDefinedTypeName "Policy"
             Source: "Policy"
        IndexAccess
           Type: struct FlightDelayDatabaseModel.Policy storage ref
           Source: "policies[_policyId]"
          Identifier policies
             Type: struct FlightDelayDatabaseModel.Policy storage ref[] storage ref
             Source: "policies"
          Identifier _policyId
             Type: uint256
             Source: "_policyId"
      ExpressionStatement
         Gas costs: 250
         Source: "_state = p.state"
        Assignment using operator =
           Type: enum FlightDelayDatabaseModel.policyState
           Source: "_state = p.state"
          Identifier _state
             Type: enum FlightDelayDatabaseModel.policyState
             Source: "_state"
          MemberAccess to member state
             Type: enum FlightDelayDatabaseModel.policyState
             Source: "p.state"
            Identifier p
               Type: struct FlightDelayDatabaseModel.Policy storage pointer
               Source: "p"
  FunctionDefinition "getRiskId" - public
     Source: "function getRiskId(uint _policyId) public returns (bytes32 _riskId) {\r\n        Policy storage p = policies[_policyId];\r\n        _riskId = p.riskId;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint _policyId)"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(bytes32 _riskId)"
      VariableDeclaration "_riskId"
         Type: bytes32
         Source: "bytes32 _riskId"
        ElementaryTypeName bytes32
           Source: "bytes32"
    Block
       Source: "{\r\n        Policy storage p = policies[_policyId];\r\n        _riskId = p.riskId;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 311
         Source: "Policy storage p = policies[_policyId]"
        VariableDeclaration "p"
           Type: struct FlightDelayDatabaseModel.Policy storage pointer
           Source: "Policy storage p"
          UserDefinedTypeName "Policy"
             Source: "Policy"
        IndexAccess
           Type: struct FlightDelayDatabaseModel.Policy storage ref
           Source: "policies[_policyId]"
          Identifier policies
             Type: struct FlightDelayDatabaseModel.Policy storage ref[] storage ref
             Source: "policies"
          Identifier _policyId
             Type: uint256
             Source: "_policyId"
      ExpressionStatement
         Gas costs: 214
         Source: "_riskId = p.riskId"
        Assignment using operator =
           Type: bytes32
           Source: "_riskId = p.riskId"
          Identifier _riskId
             Type: bytes32
             Source: "_riskId"
          MemberAccess to member riskId
             Type: bytes32
             Source: "p.riskId"
            Identifier p
               Type: struct FlightDelayDatabaseModel.Policy storage pointer
               Source: "p"
  FunctionDefinition "createPolicy" - public
     Source: "function createPolicy(address _customer, uint _premium, Currency _currency, bytes32 _customerExternalId, bytes32 _riskId) public returns (uint _policyId) {\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        _policyId = policies.length++;\r\n\r\n        //todo: check for ovewflows\r\n\r\n// --> test-mode\r\n//            LogUint(\"_policyId\", _policyId);\r\n// <-- test-mode\r\n\r\n        customerPolicies[_customer].push(_policyId);\r\n        extCustomerPolicies[_customerExternalId].push(_policyId);\r\n\r\n        Policy storage p = policies[_policyId];\r\n\r\n        p.customer = _customer;\r\n        p.currency = _currency;\r\n        p.customerExternalId = _customerExternalId;\r\n        p.premium = _premium;\r\n        p.riskId = _riskId;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _customer, uint _premium, Currency _currency, bytes32 _customerExternalId, bytes32 _riskId)"
      VariableDeclaration "_customer"
         Type: address
         Source: "address _customer"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_premium"
         Type: uint256
         Source: "uint _premium"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_currency"
         Type: enum FlightDelayDatabaseModel.Currency
         Source: "Currency _currency"
        UserDefinedTypeName "Currency"
           Source: "Currency"
      VariableDeclaration "_customerExternalId"
         Type: bytes32
         Source: "bytes32 _customerExternalId"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "_riskId"
         Type: bytes32
         Source: "bytes32 _riskId"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Gas costs: 3
       Source: "(uint _policyId)"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        _policyId = policies.length++;\r\n\r\n        //todo: check for ovewflows\r\n\r\n// --> test-mode\r\n//            LogUint(\"_policyId\", _policyId);\r\n// <-- test-mode\r\n\r\n        customerPolicies[_customer].push(_policyId);\r\n        extCustomerPolicies[_customerExternalId].push(_policyId);\r\n\r\n        Policy storage p = policies[_policyId];\r\n\r\n        p.customer = _customer;\r\n        p.currency = _currency;\r\n        p.customerExternalId = _customerExternalId;\r\n        p.premium = _premium;\r\n        p.riskId = _riskId;\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(FD_AC.checkPermission(101, msg.sender))"
        FunctionCall
           Type: tuple()
           Source: "require(FD_AC.checkPermission(101, msg.sender))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "FD_AC.checkPermission(101, msg.sender)"
            MemberAccess to member checkPermission
               Type: function (uint8,address) external returns (bool)
               Source: "FD_AC.checkPermission"
              Identifier FD_AC
                 Type: contract FlightDelayAccessControllerInterface
                 Source: "FD_AC"
            Literal, token: [no token] value: 101
               Type: int_const 101
               Source: "101"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
      ExpressionStatement
         Gas costs: 236
         Source: "_policyId = policies.length++"
        Assignment using operator =
           Type: uint256
           Source: "_policyId = policies.length++"
          Identifier _policyId
             Type: uint256
             Source: "_policyId"
          UnaryOperation (postfix) ++
             Type: uint256
             Source: "policies.length++"
            MemberAccess to member length
               Type: uint256
               Source: "policies.length"
              Identifier policies
                 Type: struct FlightDelayDatabaseModel.Policy storage ref[] storage ref
                 Source: "policies"
      ExpressionStatement
         Gas costs: 20202
         Source: "customerPolicies[_customer].push(_policyId)"
        FunctionCall
           Type: uint256
           Source: "customerPolicies[_customer].push(_policyId)"
          MemberAccess to member push
             Type: function (uint256) returns (uint256)
             Source: "customerPolicies[_customer].push"
            IndexAccess
               Type: uint256[] storage ref
               Source: "customerPolicies[_customer]"
              Identifier customerPolicies
                 Type: mapping(address => uint256[] storage ref)
                 Source: "customerPolicies"
              Identifier _customer
                 Type: address
                 Source: "_customer"
          Identifier _policyId
             Type: uint256
             Source: "_policyId"
      ExpressionStatement
         Gas costs: 20202
         Source: "extCustomerPolicies[_customerExternalId].push(_policyId)"
        FunctionCall
           Type: uint256
           Source: "extCustomerPolicies[_customerExternalId].push(_policyId)"
          MemberAccess to member push
             Type: function (uint256) returns (uint256)
             Source: "extCustomerPolicies[_customerExternalId].push"
            IndexAccess
               Type: uint256[] storage ref
               Source: "extCustomerPolicies[_customerExternalId]"
              Identifier extCustomerPolicies
                 Type: mapping(bytes32 => uint256[] storage ref)
                 Source: "extCustomerPolicies"
              Identifier _customerExternalId
                 Type: bytes32
                 Source: "_customerExternalId"
          Identifier _policyId
             Type: uint256
             Source: "_policyId"
      VariableDeclarationStatement
         Gas costs: 311
         Source: "Policy storage p = policies[_policyId]"
        VariableDeclaration "p"
           Type: struct FlightDelayDatabaseModel.Policy storage pointer
           Source: "Policy storage p"
          UserDefinedTypeName "Policy"
             Source: "Policy"
        IndexAccess
           Type: struct FlightDelayDatabaseModel.Policy storage ref
           Source: "policies[_policyId]"
          Identifier policies
             Type: struct FlightDelayDatabaseModel.Policy storage ref[] storage ref
             Source: "policies"
          Identifier _policyId
             Type: uint256
             Source: "_policyId"
      ExpressionStatement
         Gas costs: 20273
         Source: "p.customer = _customer"
        Assignment using operator =
           Type: address
           Source: "p.customer = _customer"
          MemberAccess to member customer
             Type: address
             Source: "p.customer"
            Identifier p
               Type: struct FlightDelayDatabaseModel.Policy storage pointer
               Source: "p"
          Identifier _customer
             Type: address
             Source: "_customer"
      ExpressionStatement
         Gas costs: 20293
         Source: "p.currency = _currency"
        Assignment using operator =
           Type: enum FlightDelayDatabaseModel.Currency
           Source: "p.currency = _currency"
          MemberAccess to member currency
             Type: enum FlightDelayDatabaseModel.Currency
             Source: "p.currency"
            Identifier p
               Type: struct FlightDelayDatabaseModel.Policy storage pointer
               Source: "p"
          Identifier _currency
             Type: enum FlightDelayDatabaseModel.Currency
             Source: "_currency"
      ExpressionStatement
         Gas costs: 20029
         Source: "p.customerExternalId = _customerExternalId"
        Assignment using operator =
           Type: bytes32
           Source: "p.customerExternalId = _customerExternalId"
          MemberAccess to member customerExternalId
             Type: bytes32
             Source: "p.customerExternalId"
            Identifier p
               Type: struct FlightDelayDatabaseModel.Policy storage pointer
               Source: "p"
          Identifier _customerExternalId
             Type: bytes32
             Source: "_customerExternalId"
      ExpressionStatement
         Gas costs: 20020
         Source: "p.premium = _premium"
        Assignment using operator =
           Type: uint256
           Source: "p.premium = _premium"
          MemberAccess to member premium
             Type: uint256
             Source: "p.premium"
            Identifier p
               Type: struct FlightDelayDatabaseModel.Policy storage pointer
               Source: "p"
          Identifier _premium
             Type: uint256
             Source: "_premium"
      ExpressionStatement
         Gas costs: 20029
         Source: "p.riskId = _riskId"
        Assignment using operator =
           Type: bytes32
           Source: "p.riskId = _riskId"
          MemberAccess to member riskId
             Type: bytes32
             Source: "p.riskId"
            Identifier p
               Type: struct FlightDelayDatabaseModel.Policy storage pointer
               Source: "p"
          Identifier _riskId
             Type: bytes32
             Source: "_riskId"
  FunctionDefinition "setState" - public
     Source: "function setState(\r\n        uint _policyId,\r\n        policyState _state,\r\n        uint _stateTime,\r\n        bytes32 _stateMessage\r\n    ) public {\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        LogSetState(\r\n            _policyId,\r\n            uint8(_state),\r\n            _stateTime,\r\n            _stateMessage\r\n        );\r\n\r\n        Policy storage p = policies[_policyId];\r\n\r\n        p.state = _state;\r\n        p.stateTime = _stateTime;\r\n        p.stateMessage = _stateMessage;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(\r\n        uint _policyId,\r\n        policyState _state,\r\n        uint _stateTime,\r\n        bytes32 _stateMessage\r\n    )"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_state"
         Type: enum FlightDelayDatabaseModel.policyState
         Source: "policyState _state"
        UserDefinedTypeName "policyState"
           Source: "policyState"
      VariableDeclaration "_stateTime"
         Type: uint256
         Source: "uint _stateTime"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_stateMessage"
         Type: bytes32
         Source: "bytes32 _stateMessage"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        LogSetState(\r\n            _policyId,\r\n            uint8(_state),\r\n            _stateTime,\r\n            _stateMessage\r\n        );\r\n\r\n        Policy storage p = policies[_policyId];\r\n\r\n        p.state = _state;\r\n        p.stateTime = _stateTime;\r\n        p.stateMessage = _stateMessage;\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(FD_AC.checkPermission(101, msg.sender))"
        FunctionCall
           Type: tuple()
           Source: "require(FD_AC.checkPermission(101, msg.sender))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "FD_AC.checkPermission(101, msg.sender)"
            MemberAccess to member checkPermission
               Type: function (uint8,address) external returns (bool)
               Source: "FD_AC.checkPermission"
              Identifier FD_AC
                 Type: contract FlightDelayAccessControllerInterface
                 Source: "FD_AC"
            Literal, token: [no token] value: 101
               Type: int_const 101
               Source: "101"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
      ExpressionStatement
         Gas costs: [???]
         Source: "LogSetState(\r\n            _policyId,\r\n            uint8(_state),\r\n            _stateTime,\r\n            _stateMessage\r\n        )"
        FunctionCall
           Type: tuple()
           Source: "LogSetState(\r\n            _policyId,\r\n            uint8(_state),\r\n            _stateTime,\r\n            _stateMessage\r\n        )"
          Identifier LogSetState
             Type: function (uint256,uint8,uint256,bytes32)
             Source: "LogSetState"
          Identifier _policyId
             Type: uint256
             Source: "_policyId"
          FunctionCall
             Type: uint8
             Source: "uint8(_state)"
            ElementaryTypeNameExpression uint8
               Type: type(uint8)
               Source: "uint8"
            Identifier _state
               Type: enum FlightDelayDatabaseModel.policyState
               Source: "_state"
          Identifier _stateTime
             Type: uint256
             Source: "_stateTime"
          Identifier _stateMessage
             Type: bytes32
             Source: "_stateMessage"
      VariableDeclarationStatement
         Gas costs: 311
         Source: "Policy storage p = policies[_policyId]"
        VariableDeclaration "p"
           Type: struct FlightDelayDatabaseModel.Policy storage pointer
           Source: "Policy storage p"
          UserDefinedTypeName "Policy"
             Source: "Policy"
        IndexAccess
           Type: struct FlightDelayDatabaseModel.Policy storage ref
           Source: "policies[_policyId]"
          Identifier policies
             Type: struct FlightDelayDatabaseModel.Policy storage ref[] storage ref
             Source: "policies"
          Identifier _policyId
             Type: uint256
             Source: "_policyId"
      ExpressionStatement
         Gas costs: 20293
         Source: "p.state = _state"
        Assignment using operator =
           Type: enum FlightDelayDatabaseModel.policyState
           Source: "p.state = _state"
          MemberAccess to member state
             Type: enum FlightDelayDatabaseModel.policyState
             Source: "p.state"
            Identifier p
               Type: struct FlightDelayDatabaseModel.Policy storage pointer
               Source: "p"
          Identifier _state
             Type: enum FlightDelayDatabaseModel.policyState
             Source: "_state"
      ExpressionStatement
         Gas costs: 20020
         Source: "p.stateTime = _stateTime"
        Assignment using operator =
           Type: uint256
           Source: "p.stateTime = _stateTime"
          MemberAccess to member stateTime
             Type: uint256
             Source: "p.stateTime"
            Identifier p
               Type: struct FlightDelayDatabaseModel.Policy storage pointer
               Source: "p"
          Identifier _stateTime
             Type: uint256
             Source: "_stateTime"
      ExpressionStatement
         Gas costs: 20029
         Source: "p.stateMessage = _stateMessage"
        Assignment using operator =
           Type: bytes32
           Source: "p.stateMessage = _stateMessage"
          MemberAccess to member stateMessage
             Type: bytes32
             Source: "p.stateMessage"
            Identifier p
               Type: struct FlightDelayDatabaseModel.Policy storage pointer
               Source: "p"
          Identifier _stateMessage
             Type: bytes32
             Source: "_stateMessage"
  FunctionDefinition "setWeight" - public
     Source: "function setWeight(uint _policyId, uint _weight, bytes _proof) public {\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        Policy storage p = policies[_policyId];\r\n\r\n        p.weight = _weight;\r\n        p.proof = _proof;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint _policyId, uint _weight, bytes _proof)"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_weight"
         Type: uint256
         Source: "uint _weight"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_proof"
         Type: bytes memory
         Source: "bytes _proof"
        ElementaryTypeName bytes
           Source: "bytes"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        Policy storage p = policies[_policyId];\r\n\r\n        p.weight = _weight;\r\n        p.proof = _proof;\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(FD_AC.checkPermission(101, msg.sender))"
        FunctionCall
           Type: tuple()
           Source: "require(FD_AC.checkPermission(101, msg.sender))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "FD_AC.checkPermission(101, msg.sender)"
            MemberAccess to member checkPermission
               Type: function (uint8,address) external returns (bool)
               Source: "FD_AC.checkPermission"
              Identifier FD_AC
                 Type: contract FlightDelayAccessControllerInterface
                 Source: "FD_AC"
            Literal, token: [no token] value: 101
               Type: int_const 101
               Source: "101"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
      VariableDeclarationStatement
         Gas costs: 311
         Source: "Policy storage p = policies[_policyId]"
        VariableDeclaration "p"
           Type: struct FlightDelayDatabaseModel.Policy storage pointer
           Source: "Policy storage p"
          UserDefinedTypeName "Policy"
             Source: "Policy"
        IndexAccess
           Type: struct FlightDelayDatabaseModel.Policy storage ref
           Source: "policies[_policyId]"
          Identifier policies
             Type: struct FlightDelayDatabaseModel.Policy storage ref[] storage ref
             Source: "policies"
          Identifier _policyId
             Type: uint256
             Source: "_policyId"
      ExpressionStatement
         Gas costs: 20020
         Source: "p.weight = _weight"
        Assignment using operator =
           Type: uint256
           Source: "p.weight = _weight"
          MemberAccess to member weight
             Type: uint256
             Source: "p.weight"
            Identifier p
               Type: struct FlightDelayDatabaseModel.Policy storage pointer
               Source: "p"
          Identifier _weight
             Type: uint256
             Source: "_weight"
      ExpressionStatement
         Gas costs: [???]
         Source: "p.proof = _proof"
        Assignment using operator =
           Type: bytes storage ref
           Source: "p.proof = _proof"
          MemberAccess to member proof
             Type: bytes storage ref
             Source: "p.proof"
            Identifier p
               Type: struct FlightDelayDatabaseModel.Policy storage pointer
               Source: "p"
          Identifier _proof
             Type: bytes memory
             Source: "_proof"
  FunctionDefinition "setPayouts" - public
     Source: "function setPayouts(uint _policyId, uint _calculatedPayout, uint _actualPayout) public {\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        Policy storage p = policies[_policyId];\r\n\r\n        p.calculatedPayout = _calculatedPayout;\r\n        p.actualPayout = _actualPayout;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint _policyId, uint _calculatedPayout, uint _actualPayout)"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_calculatedPayout"
         Type: uint256
         Source: "uint _calculatedPayout"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_actualPayout"
         Type: uint256
         Source: "uint _actualPayout"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        Policy storage p = policies[_policyId];\r\n\r\n        p.calculatedPayout = _calculatedPayout;\r\n        p.actualPayout = _actualPayout;\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(FD_AC.checkPermission(101, msg.sender))"
        FunctionCall
           Type: tuple()
           Source: "require(FD_AC.checkPermission(101, msg.sender))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "FD_AC.checkPermission(101, msg.sender)"
            MemberAccess to member checkPermission
               Type: function (uint8,address) external returns (bool)
               Source: "FD_AC.checkPermission"
              Identifier FD_AC
                 Type: contract FlightDelayAccessControllerInterface
                 Source: "FD_AC"
            Literal, token: [no token] value: 101
               Type: int_const 101
               Source: "101"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
      VariableDeclarationStatement
         Gas costs: 311
         Source: "Policy storage p = policies[_policyId]"
        VariableDeclaration "p"
           Type: struct FlightDelayDatabaseModel.Policy storage pointer
           Source: "Policy storage p"
          UserDefinedTypeName "Policy"
             Source: "Policy"
        IndexAccess
           Type: struct FlightDelayDatabaseModel.Policy storage ref
           Source: "policies[_policyId]"
          Identifier policies
             Type: struct FlightDelayDatabaseModel.Policy storage ref[] storage ref
             Source: "policies"
          Identifier _policyId
             Type: uint256
             Source: "_policyId"
      ExpressionStatement
         Gas costs: 20020
         Source: "p.calculatedPayout = _calculatedPayout"
        Assignment using operator =
           Type: uint256
           Source: "p.calculatedPayout = _calculatedPayout"
          MemberAccess to member calculatedPayout
             Type: uint256
             Source: "p.calculatedPayout"
            Identifier p
               Type: struct FlightDelayDatabaseModel.Policy storage pointer
               Source: "p"
          Identifier _calculatedPayout
             Type: uint256
             Source: "_calculatedPayout"
      ExpressionStatement
         Gas costs: 20020
         Source: "p.actualPayout = _actualPayout"
        Assignment using operator =
           Type: uint256
           Source: "p.actualPayout = _actualPayout"
          MemberAccess to member actualPayout
             Type: uint256
             Source: "p.actualPayout"
            Identifier p
               Type: struct FlightDelayDatabaseModel.Policy storage pointer
               Source: "p"
          Identifier _actualPayout
             Type: uint256
             Source: "_actualPayout"
  FunctionDefinition "setDelay" - public
     Source: "function setDelay(uint _policyId, uint8 _delay, uint _delayInMinutes) public {\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        Risk storage r = risks[policies[_policyId].riskId];\r\n\r\n        r.delay = _delay;\r\n        r.delayInMinutes = _delayInMinutes;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint _policyId, uint8 _delay, uint _delayInMinutes)"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_delay"
         Type: uint8
         Source: "uint8 _delay"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "_delayInMinutes"
         Type: uint256
         Source: "uint _delayInMinutes"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        Risk storage r = risks[policies[_policyId].riskId];\r\n\r\n        r.delay = _delay;\r\n        r.delayInMinutes = _delayInMinutes;\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(FD_AC.checkPermission(101, msg.sender))"
        FunctionCall
           Type: tuple()
           Source: "require(FD_AC.checkPermission(101, msg.sender))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "FD_AC.checkPermission(101, msg.sender)"
            MemberAccess to member checkPermission
               Type: function (uint8,address) external returns (bool)
               Source: "FD_AC.checkPermission"
              Identifier FD_AC
                 Type: contract FlightDelayAccessControllerInterface
                 Source: "FD_AC"
            Literal, token: [no token] value: 101
               Type: int_const 101
               Source: "101"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "Risk storage r = risks[policies[_policyId].riskId]"
        VariableDeclaration "r"
           Type: struct FlightDelayDatabaseModel.Risk storage pointer
           Source: "Risk storage r"
          UserDefinedTypeName "Risk"
             Source: "Risk"
        IndexAccess
           Type: struct FlightDelayDatabaseModel.Risk storage ref
           Source: "risks[policies[_policyId].riskId]"
          Identifier risks
             Type: mapping(bytes32 => struct FlightDelayDatabaseModel.Risk storage ref)
             Source: "risks"
          MemberAccess to member riskId
             Type: bytes32
             Source: "policies[_policyId].riskId"
            IndexAccess
               Type: struct FlightDelayDatabaseModel.Policy storage ref
               Source: "policies[_policyId]"
              Identifier policies
                 Type: struct FlightDelayDatabaseModel.Policy storage ref[] storage ref
                 Source: "policies"
              Identifier _policyId
                 Type: uint256
                 Source: "_policyId"
      ExpressionStatement
         Gas costs: 20273
         Source: "r.delay = _delay"
        Assignment using operator =
           Type: uint8
           Source: "r.delay = _delay"
          MemberAccess to member delay
             Type: uint8
             Source: "r.delay"
            Identifier r
               Type: struct FlightDelayDatabaseModel.Risk storage pointer
               Source: "r"
          Identifier _delay
             Type: uint8
             Source: "_delay"
      ExpressionStatement
         Gas costs: 20020
         Source: "r.delayInMinutes = _delayInMinutes"
        Assignment using operator =
           Type: uint256
           Source: "r.delayInMinutes = _delayInMinutes"
          MemberAccess to member delayInMinutes
             Type: uint256
             Source: "r.delayInMinutes"
            Identifier r
               Type: struct FlightDelayDatabaseModel.Risk storage pointer
               Source: "r"
          Identifier _delayInMinutes
             Type: uint256
             Source: "_delayInMinutes"
  FunctionDefinition "getRiskParameters" - public
     Source: "function getRiskParameters(bytes32 _riskId) public returns (bytes32 _carrierFlightNumber, bytes32 _departureYearMonthDay, uint _arrivalTime) {\r\n        Risk storage r = risks[_riskId];\r\n        _carrierFlightNumber = r.carrierFlightNumber;\r\n        _departureYearMonthDay = r.departureYearMonthDay;\r\n        _arrivalTime = r.arrivalTime;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32 _riskId)"
      VariableDeclaration "_riskId"
         Type: bytes32
         Source: "bytes32 _riskId"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Gas costs: 9
       Source: "(bytes32 _carrierFlightNumber, bytes32 _departureYearMonthDay, uint _arrivalTime)"
      VariableDeclaration "_carrierFlightNumber"
         Type: bytes32
         Source: "bytes32 _carrierFlightNumber"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "_departureYearMonthDay"
         Type: bytes32
         Source: "bytes32 _departureYearMonthDay"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "_arrivalTime"
         Type: uint256
         Source: "uint _arrivalTime"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        Risk storage r = risks[_riskId];\r\n        _carrierFlightNumber = r.carrierFlightNumber;\r\n        _departureYearMonthDay = r.departureYearMonthDay;\r\n        _arrivalTime = r.arrivalTime;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 113
         Source: "Risk storage r = risks[_riskId]"
        VariableDeclaration "r"
           Type: struct FlightDelayDatabaseModel.Risk storage pointer
           Source: "Risk storage r"
          UserDefinedTypeName "Risk"
             Source: "Risk"
        IndexAccess
           Type: struct FlightDelayDatabaseModel.Risk storage ref
           Source: "risks[_riskId]"
          Identifier risks
             Type: mapping(bytes32 => struct FlightDelayDatabaseModel.Risk storage ref)
             Source: "risks"
          Identifier _riskId
             Type: bytes32
             Source: "_riskId"
      ExpressionStatement
         Gas costs: 214
         Source: "_carrierFlightNumber = r.carrierFlightNumber"
        Assignment using operator =
           Type: bytes32
           Source: "_carrierFlightNumber = r.carrierFlightNumber"
          Identifier _carrierFlightNumber
             Type: bytes32
             Source: "_carrierFlightNumber"
          MemberAccess to member carrierFlightNumber
             Type: bytes32
             Source: "r.carrierFlightNumber"
            Identifier r
               Type: struct FlightDelayDatabaseModel.Risk storage pointer
               Source: "r"
      ExpressionStatement
         Gas costs: 214
         Source: "_departureYearMonthDay = r.departureYearMonthDay"
        Assignment using operator =
           Type: bytes32
           Source: "_departureYearMonthDay = r.departureYearMonthDay"
          Identifier _departureYearMonthDay
             Type: bytes32
             Source: "_departureYearMonthDay"
          MemberAccess to member departureYearMonthDay
             Type: bytes32
             Source: "r.departureYearMonthDay"
            Identifier r
               Type: struct FlightDelayDatabaseModel.Risk storage pointer
               Source: "r"
      ExpressionStatement
         Gas costs: 214
         Source: "_arrivalTime = r.arrivalTime"
        Assignment using operator =
           Type: uint256
           Source: "_arrivalTime = r.arrivalTime"
          Identifier _arrivalTime
             Type: uint256
             Source: "_arrivalTime"
          MemberAccess to member arrivalTime
             Type: uint256
             Source: "r.arrivalTime"
            Identifier r
               Type: struct FlightDelayDatabaseModel.Risk storage pointer
               Source: "r"
  FunctionDefinition "getPremiumFactors" - public
     Source: "function getPremiumFactors(bytes32 _riskId) public returns (uint _cumulatedWeightedPremium, uint _premiumMultiplier) {\r\n        Risk storage r = risks[_riskId];\r\n        _cumulatedWeightedPremium = r.cumulatedWeightedPremium;\r\n        _premiumMultiplier = r.premiumMultiplier;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32 _riskId)"
      VariableDeclaration "_riskId"
         Type: bytes32
         Source: "bytes32 _riskId"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Gas costs: 6
       Source: "(uint _cumulatedWeightedPremium, uint _premiumMultiplier)"
      VariableDeclaration "_cumulatedWeightedPremium"
         Type: uint256
         Source: "uint _cumulatedWeightedPremium"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_premiumMultiplier"
         Type: uint256
         Source: "uint _premiumMultiplier"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        Risk storage r = risks[_riskId];\r\n        _cumulatedWeightedPremium = r.cumulatedWeightedPremium;\r\n        _premiumMultiplier = r.premiumMultiplier;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 113
         Source: "Risk storage r = risks[_riskId]"
        VariableDeclaration "r"
           Type: struct FlightDelayDatabaseModel.Risk storage pointer
           Source: "Risk storage r"
          UserDefinedTypeName "Risk"
             Source: "Risk"
        IndexAccess
           Type: struct FlightDelayDatabaseModel.Risk storage ref
           Source: "risks[_riskId]"
          Identifier risks
             Type: mapping(bytes32 => struct FlightDelayDatabaseModel.Risk storage ref)
             Source: "risks"
          Identifier _riskId
             Type: bytes32
             Source: "_riskId"
      ExpressionStatement
         Gas costs: 214
         Source: "_cumulatedWeightedPremium = r.cumulatedWeightedPremium"
        Assignment using operator =
           Type: uint256
           Source: "_cumulatedWeightedPremium = r.cumulatedWeightedPremium"
          Identifier _cumulatedWeightedPremium
             Type: uint256
             Source: "_cumulatedWeightedPremium"
          MemberAccess to member cumulatedWeightedPremium
             Type: uint256
             Source: "r.cumulatedWeightedPremium"
            Identifier r
               Type: struct FlightDelayDatabaseModel.Risk storage pointer
               Source: "r"
      ExpressionStatement
         Gas costs: 214
         Source: "_premiumMultiplier = r.premiumMultiplier"
        Assignment using operator =
           Type: uint256
           Source: "_premiumMultiplier = r.premiumMultiplier"
          Identifier _premiumMultiplier
             Type: uint256
             Source: "_premiumMultiplier"
          MemberAccess to member premiumMultiplier
             Type: uint256
             Source: "r.premiumMultiplier"
            Identifier r
               Type: struct FlightDelayDatabaseModel.Risk storage pointer
               Source: "r"
  FunctionDefinition "createUpdateRisk" - public
     Source: "function createUpdateRisk(bytes32 _carrierFlightNumber, bytes32 _departureYearMonthDay, uint _arrivalTime) returns (bytes32 _riskId) {\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        _riskId = sha3(\r\n            _carrierFlightNumber,\r\n            _departureYearMonthDay,\r\n            _arrivalTime\r\n        );\r\n\r\n// --> test-mode\r\n//            LogBytes32(\"riskId\", _riskId);\r\n// <-- test-mode\r\n\r\n        Risk storage r = risks[_riskId];\r\n\r\n        if (r.premiumMultiplier == 0) {\r\n            r.carrierFlightNumber = _carrierFlightNumber;\r\n            r.departureYearMonthDay = _departureYearMonthDay;\r\n            r.arrivalTime = _arrivalTime;\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32 _carrierFlightNumber, bytes32 _departureYearMonthDay, uint _arrivalTime)"
      VariableDeclaration "_carrierFlightNumber"
         Type: bytes32
         Source: "bytes32 _carrierFlightNumber"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "_departureYearMonthDay"
         Type: bytes32
         Source: "bytes32 _departureYearMonthDay"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "_arrivalTime"
         Type: uint256
         Source: "uint _arrivalTime"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(bytes32 _riskId)"
      VariableDeclaration "_riskId"
         Type: bytes32
         Source: "bytes32 _riskId"
        ElementaryTypeName bytes32
           Source: "bytes32"
    Block
       Source: "{\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        _riskId = sha3(\r\n            _carrierFlightNumber,\r\n            _departureYearMonthDay,\r\n            _arrivalTime\r\n        );\r\n\r\n// --> test-mode\r\n//            LogBytes32(\"riskId\", _riskId);\r\n// <-- test-mode\r\n\r\n        Risk storage r = risks[_riskId];\r\n\r\n        if (r.premiumMultiplier == 0) {\r\n            r.carrierFlightNumber = _carrierFlightNumber;\r\n            r.departureYearMonthDay = _departureYearMonthDay;\r\n            r.arrivalTime = _arrivalTime;\r\n        }\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(FD_AC.checkPermission(101, msg.sender))"
        FunctionCall
           Type: tuple()
           Source: "require(FD_AC.checkPermission(101, msg.sender))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "FD_AC.checkPermission(101, msg.sender)"
            MemberAccess to member checkPermission
               Type: function (uint8,address) external returns (bool)
               Source: "FD_AC.checkPermission"
              Identifier FD_AC
                 Type: contract FlightDelayAccessControllerInterface
                 Source: "FD_AC"
            Literal, token: [no token] value: 101
               Type: int_const 101
               Source: "101"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
      ExpressionStatement
         Gas costs: [???]
         Source: "_riskId = sha3(\r\n            _carrierFlightNumber,\r\n            _departureYearMonthDay,\r\n            _arrivalTime\r\n        )"
        Assignment using operator =
           Type: bytes32
           Source: "_riskId = sha3(\r\n            _carrierFlightNumber,\r\n            _departureYearMonthDay,\r\n            _arrivalTime\r\n        )"
          Identifier _riskId
             Type: bytes32
             Source: "_riskId"
          FunctionCall
             Type: bytes32
             Source: "sha3(\r\n            _carrierFlightNumber,\r\n            _departureYearMonthDay,\r\n            _arrivalTime\r\n        )"
            Identifier sha3
               Type: function () pure returns (bytes32)
               Source: "sha3"
            Identifier _carrierFlightNumber
               Type: bytes32
               Source: "_carrierFlightNumber"
            Identifier _departureYearMonthDay
               Type: bytes32
               Source: "_departureYearMonthDay"
            Identifier _arrivalTime
               Type: uint256
               Source: "_arrivalTime"
      VariableDeclarationStatement
         Gas costs: 107
         Source: "Risk storage r = risks[_riskId]"
        VariableDeclaration "r"
           Type: struct FlightDelayDatabaseModel.Risk storage pointer
           Source: "Risk storage r"
          UserDefinedTypeName "Risk"
             Source: "Risk"
        IndexAccess
           Type: struct FlightDelayDatabaseModel.Risk storage ref
           Source: "risks[_riskId]"
          Identifier risks
             Type: mapping(bytes32 => struct FlightDelayDatabaseModel.Risk storage ref)
             Source: "risks"
          Identifier _riskId
             Type: bytes32
             Source: "_riskId"
      IfStatement
         Source: "if (r.premiumMultiplier == 0) {\r\n            r.carrierFlightNumber = _carrierFlightNumber;\r\n            r.departureYearMonthDay = _departureYearMonthDay;\r\n            r.arrivalTime = _arrivalTime;\r\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 215
           Source: "r.premiumMultiplier == 0"
          MemberAccess to member premiumMultiplier
             Type: uint256
             Source: "r.premiumMultiplier"
            Identifier r
               Type: struct FlightDelayDatabaseModel.Risk storage pointer
               Source: "r"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n            r.carrierFlightNumber = _carrierFlightNumber;\r\n            r.departureYearMonthDay = _departureYearMonthDay;\r\n            r.arrivalTime = _arrivalTime;\r\n        }"
          ExpressionStatement
             Gas costs: 20029
             Source: "r.carrierFlightNumber = _carrierFlightNumber"
            Assignment using operator =
               Type: bytes32
               Source: "r.carrierFlightNumber = _carrierFlightNumber"
              MemberAccess to member carrierFlightNumber
                 Type: bytes32
                 Source: "r.carrierFlightNumber"
                Identifier r
                   Type: struct FlightDelayDatabaseModel.Risk storage pointer
                   Source: "r"
              Identifier _carrierFlightNumber
                 Type: bytes32
                 Source: "_carrierFlightNumber"
          ExpressionStatement
             Gas costs: 20029
             Source: "r.departureYearMonthDay = _departureYearMonthDay"
            Assignment using operator =
               Type: bytes32
               Source: "r.departureYearMonthDay = _departureYearMonthDay"
              MemberAccess to member departureYearMonthDay
                 Type: bytes32
                 Source: "r.departureYearMonthDay"
                Identifier r
                   Type: struct FlightDelayDatabaseModel.Risk storage pointer
                   Source: "r"
              Identifier _departureYearMonthDay
                 Type: bytes32
                 Source: "_departureYearMonthDay"
          ExpressionStatement
             Gas costs: 20020
             Source: "r.arrivalTime = _arrivalTime"
            Assignment using operator =
               Type: uint256
               Source: "r.arrivalTime = _arrivalTime"
              MemberAccess to member arrivalTime
                 Type: uint256
                 Source: "r.arrivalTime"
                Identifier r
                   Type: struct FlightDelayDatabaseModel.Risk storage pointer
                   Source: "r"
              Identifier _arrivalTime
                 Type: uint256
                 Source: "_arrivalTime"
  FunctionDefinition "setPremiumFactors" - public
     Source: "function setPremiumFactors(bytes32 _riskId, uint _cumulatedWeightedPremium, uint _premiumMultiplier) public {\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        Risk storage r = risks[_riskId];\r\n        r.cumulatedWeightedPremium = _cumulatedWeightedPremium;\r\n        r.premiumMultiplier = _premiumMultiplier;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32 _riskId, uint _cumulatedWeightedPremium, uint _premiumMultiplier)"
      VariableDeclaration "_riskId"
         Type: bytes32
         Source: "bytes32 _riskId"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "_cumulatedWeightedPremium"
         Type: uint256
         Source: "uint _cumulatedWeightedPremium"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_premiumMultiplier"
         Type: uint256
         Source: "uint _premiumMultiplier"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        Risk storage r = risks[_riskId];\r\n        r.cumulatedWeightedPremium = _cumulatedWeightedPremium;\r\n        r.premiumMultiplier = _premiumMultiplier;\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(FD_AC.checkPermission(101, msg.sender))"
        FunctionCall
           Type: tuple()
           Source: "require(FD_AC.checkPermission(101, msg.sender))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "FD_AC.checkPermission(101, msg.sender)"
            MemberAccess to member checkPermission
               Type: function (uint8,address) external returns (bool)
               Source: "FD_AC.checkPermission"
              Identifier FD_AC
                 Type: contract FlightDelayAccessControllerInterface
                 Source: "FD_AC"
            Literal, token: [no token] value: 101
               Type: int_const 101
               Source: "101"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
      VariableDeclarationStatement
         Gas costs: 113
         Source: "Risk storage r = risks[_riskId]"
        VariableDeclaration "r"
           Type: struct FlightDelayDatabaseModel.Risk storage pointer
           Source: "Risk storage r"
          UserDefinedTypeName "Risk"
             Source: "Risk"
        IndexAccess
           Type: struct FlightDelayDatabaseModel.Risk storage ref
           Source: "risks[_riskId]"
          Identifier risks
             Type: mapping(bytes32 => struct FlightDelayDatabaseModel.Risk storage ref)
             Source: "risks"
          Identifier _riskId
             Type: bytes32
             Source: "_riskId"
      ExpressionStatement
         Gas costs: 20020
         Source: "r.cumulatedWeightedPremium = _cumulatedWeightedPremium"
        Assignment using operator =
           Type: uint256
           Source: "r.cumulatedWeightedPremium = _cumulatedWeightedPremium"
          MemberAccess to member cumulatedWeightedPremium
             Type: uint256
             Source: "r.cumulatedWeightedPremium"
            Identifier r
               Type: struct FlightDelayDatabaseModel.Risk storage pointer
               Source: "r"
          Identifier _cumulatedWeightedPremium
             Type: uint256
             Source: "_cumulatedWeightedPremium"
      ExpressionStatement
         Gas costs: 20020
         Source: "r.premiumMultiplier = _premiumMultiplier"
        Assignment using operator =
           Type: uint256
           Source: "r.premiumMultiplier = _premiumMultiplier"
          MemberAccess to member premiumMultiplier
             Type: uint256
             Source: "r.premiumMultiplier"
            Identifier r
               Type: struct FlightDelayDatabaseModel.Risk storage pointer
               Source: "r"
          Identifier _premiumMultiplier
             Type: uint256
             Source: "_premiumMultiplier"
  FunctionDefinition "getOraclizeCallback" - public
     Source: "function getOraclizeCallback(bytes32 _queryId) public returns (uint _policyId, uint _oraclizeTime) {\r\n        OraclizeCallback storage o = oraclizeCallbacks[_queryId];\r\n        _policyId = o.policyId;\r\n        _oraclizeTime = o.oraclizeTime;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32 _queryId)"
      VariableDeclaration "_queryId"
         Type: bytes32
         Source: "bytes32 _queryId"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Gas costs: 6
       Source: "(uint _policyId, uint _oraclizeTime)"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_oraclizeTime"
         Type: uint256
         Source: "uint _oraclizeTime"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        OraclizeCallback storage o = oraclizeCallbacks[_queryId];\r\n        _policyId = o.policyId;\r\n        _oraclizeTime = o.oraclizeTime;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 113
         Source: "OraclizeCallback storage o = oraclizeCallbacks[_queryId]"
        VariableDeclaration "o"
           Type: struct FlightDelayDatabaseModel.OraclizeCallback storage pointer
           Source: "OraclizeCallback storage o"
          UserDefinedTypeName "OraclizeCallback"
             Source: "OraclizeCallback"
        IndexAccess
           Type: struct FlightDelayDatabaseModel.OraclizeCallback storage ref
           Source: "oraclizeCallbacks[_queryId]"
          Identifier oraclizeCallbacks
             Type: mapping(bytes32 => struct FlightDelayDatabaseModel.OraclizeCallback storage ref)
             Source: "oraclizeCallbacks"
          Identifier _queryId
             Type: bytes32
             Source: "_queryId"
      ExpressionStatement
         Gas costs: 214
         Source: "_policyId = o.policyId"
        Assignment using operator =
           Type: uint256
           Source: "_policyId = o.policyId"
          Identifier _policyId
             Type: uint256
             Source: "_policyId"
          MemberAccess to member policyId
             Type: uint256
             Source: "o.policyId"
            Identifier o
               Type: struct FlightDelayDatabaseModel.OraclizeCallback storage pointer
               Source: "o"
      ExpressionStatement
         Gas costs: 214
         Source: "_oraclizeTime = o.oraclizeTime"
        Assignment using operator =
           Type: uint256
           Source: "_oraclizeTime = o.oraclizeTime"
          Identifier _oraclizeTime
             Type: uint256
             Source: "_oraclizeTime"
          MemberAccess to member oraclizeTime
             Type: uint256
             Source: "o.oraclizeTime"
            Identifier o
               Type: struct FlightDelayDatabaseModel.OraclizeCallback storage pointer
               Source: "o"
  FunctionDefinition "getOraclizePolicyId" - public
     Source: "function getOraclizePolicyId(bytes32 _queryId) public returns (uint _policyId) {\r\n        OraclizeCallback storage o = oraclizeCallbacks[_queryId];\r\n        _policyId = o.policyId;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32 _queryId)"
      VariableDeclaration "_queryId"
         Type: bytes32
         Source: "bytes32 _queryId"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Gas costs: 3
       Source: "(uint _policyId)"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        OraclizeCallback storage o = oraclizeCallbacks[_queryId];\r\n        _policyId = o.policyId;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 113
         Source: "OraclizeCallback storage o = oraclizeCallbacks[_queryId]"
        VariableDeclaration "o"
           Type: struct FlightDelayDatabaseModel.OraclizeCallback storage pointer
           Source: "OraclizeCallback storage o"
          UserDefinedTypeName "OraclizeCallback"
             Source: "OraclizeCallback"
        IndexAccess
           Type: struct FlightDelayDatabaseModel.OraclizeCallback storage ref
           Source: "oraclizeCallbacks[_queryId]"
          Identifier oraclizeCallbacks
             Type: mapping(bytes32 => struct FlightDelayDatabaseModel.OraclizeCallback storage ref)
             Source: "oraclizeCallbacks"
          Identifier _queryId
             Type: bytes32
             Source: "_queryId"
      ExpressionStatement
         Gas costs: 214
         Source: "_policyId = o.policyId"
        Assignment using operator =
           Type: uint256
           Source: "_policyId = o.policyId"
          Identifier _policyId
             Type: uint256
             Source: "_policyId"
          MemberAccess to member policyId
             Type: uint256
             Source: "o.policyId"
            Identifier o
               Type: struct FlightDelayDatabaseModel.OraclizeCallback storage pointer
               Source: "o"
  FunctionDefinition "createOraclizeCallback" - public
     Source: "function createOraclizeCallback(\r\n        bytes32 _queryId,\r\n        uint _policyId,\r\n        oraclizeState _oraclizeState,\r\n        uint _oraclizeTime) public {\r\n\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        oraclizeCallbacks[_queryId] = OraclizeCallback(_policyId, _oraclizeState, _oraclizeTime);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(\r\n        bytes32 _queryId,\r\n        uint _policyId,\r\n        oraclizeState _oraclizeState,\r\n        uint _oraclizeTime)"
      VariableDeclaration "_queryId"
         Type: bytes32
         Source: "bytes32 _queryId"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "_policyId"
         Type: uint256
         Source: "uint _policyId"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_oraclizeState"
         Type: enum FlightDelayDatabaseModel.oraclizeState
         Source: "oraclizeState _oraclizeState"
        UserDefinedTypeName "oraclizeState"
           Source: "oraclizeState"
      VariableDeclaration "_oraclizeTime"
         Type: uint256
         Source: "uint _oraclizeTime"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        oraclizeCallbacks[_queryId] = OraclizeCallback(_policyId, _oraclizeState, _oraclizeTime);\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(FD_AC.checkPermission(101, msg.sender))"
        FunctionCall
           Type: tuple()
           Source: "require(FD_AC.checkPermission(101, msg.sender))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "FD_AC.checkPermission(101, msg.sender)"
            MemberAccess to member checkPermission
               Type: function (uint8,address) external returns (bool)
               Source: "FD_AC.checkPermission"
              Identifier FD_AC
                 Type: contract FlightDelayAccessControllerInterface
                 Source: "FD_AC"
            Literal, token: [no token] value: 101
               Type: int_const 101
               Source: "101"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
      ExpressionStatement
         Gas costs: [???]
         Source: "oraclizeCallbacks[_queryId] = OraclizeCallback(_policyId, _oraclizeState, _oraclizeTime)"
        Assignment using operator =
           Type: struct FlightDelayDatabaseModel.OraclizeCallback storage ref
           Source: "oraclizeCallbacks[_queryId] = OraclizeCallback(_policyId, _oraclizeState, _oraclizeTime)"
          IndexAccess
             Type: struct FlightDelayDatabaseModel.OraclizeCallback storage ref
             Source: "oraclizeCallbacks[_queryId]"
            Identifier oraclizeCallbacks
               Type: mapping(bytes32 => struct FlightDelayDatabaseModel.OraclizeCallback storage ref)
               Source: "oraclizeCallbacks"
            Identifier _queryId
               Type: bytes32
               Source: "_queryId"
          FunctionCall
             Type: struct FlightDelayDatabaseModel.OraclizeCallback memory
             Source: "OraclizeCallback(_policyId, _oraclizeState, _oraclizeTime)"
            Identifier OraclizeCallback
               Type: type(struct FlightDelayDatabaseModel.OraclizeCallback storage pointer)
               Source: "OraclizeCallback"
            Identifier _policyId
               Type: uint256
               Source: "_policyId"
            Identifier _oraclizeState
               Type: enum FlightDelayDatabaseModel.oraclizeState
               Source: "_oraclizeState"
            Identifier _oraclizeTime
               Type: uint256
               Source: "_oraclizeTime"
  FunctionDefinition "checkTime" - public
     Source: "function checkTime(bytes32 _queryId, bytes32 _riskId, uint _offset) public returns (bool _result) {\r\n        OraclizeCallback storage o = oraclizeCallbacks[_queryId];\r\n        Risk storage r = risks[_riskId];\r\n\r\n        _result = o.oraclizeTime > r.arrivalTime + _offset;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32 _queryId, bytes32 _riskId, uint _offset)"
      VariableDeclaration "_queryId"
         Type: bytes32
         Source: "bytes32 _queryId"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "_riskId"
         Type: bytes32
         Source: "bytes32 _riskId"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "_offset"
         Type: uint256
         Source: "uint _offset"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(bool _result)"
      VariableDeclaration "_result"
         Type: bool
         Source: "bool _result"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        OraclizeCallback storage o = oraclizeCallbacks[_queryId];\r\n        Risk storage r = risks[_riskId];\r\n\r\n        _result = o.oraclizeTime > r.arrivalTime + _offset;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 113
         Source: "OraclizeCallback storage o = oraclizeCallbacks[_queryId]"
        VariableDeclaration "o"
           Type: struct FlightDelayDatabaseModel.OraclizeCallback storage pointer
           Source: "OraclizeCallback storage o"
          UserDefinedTypeName "OraclizeCallback"
             Source: "OraclizeCallback"
        IndexAccess
           Type: struct FlightDelayDatabaseModel.OraclizeCallback storage ref
           Source: "oraclizeCallbacks[_queryId]"
          Identifier oraclizeCallbacks
             Type: mapping(bytes32 => struct FlightDelayDatabaseModel.OraclizeCallback storage ref)
             Source: "oraclizeCallbacks"
          Identifier _queryId
             Type: bytes32
             Source: "_queryId"
      VariableDeclarationStatement
         Gas costs: 107
         Source: "Risk storage r = risks[_riskId]"
        VariableDeclaration "r"
           Type: struct FlightDelayDatabaseModel.Risk storage pointer
           Source: "Risk storage r"
          UserDefinedTypeName "Risk"
             Source: "Risk"
        IndexAccess
           Type: struct FlightDelayDatabaseModel.Risk storage ref
           Source: "risks[_riskId]"
          Identifier risks
             Type: mapping(bytes32 => struct FlightDelayDatabaseModel.Risk storage ref)
             Source: "risks"
          Identifier _riskId
             Type: bytes32
             Source: "_riskId"
      ExpressionStatement
         Gas costs: 432
         Source: "_result = o.oraclizeTime > r.arrivalTime + _offset"
        Assignment using operator =
           Type: bool
           Source: "_result = o.oraclizeTime > r.arrivalTime + _offset"
          Identifier _result
             Type: bool
             Source: "_result"
          BinaryOperation using operator >
             Type: bool
             Source: "o.oraclizeTime > r.arrivalTime + _offset"
            MemberAccess to member oraclizeTime
               Type: uint256
               Source: "o.oraclizeTime"
              Identifier o
                 Type: struct FlightDelayDatabaseModel.OraclizeCallback storage pointer
                 Source: "o"
            BinaryOperation using operator +
               Type: uint256
               Source: "r.arrivalTime + _offset"
              MemberAccess to member arrivalTime
                 Type: uint256
                 Source: "r.arrivalTime"
                Identifier r
                   Type: struct FlightDelayDatabaseModel.Risk storage pointer
                   Source: "r"
              Identifier _offset
                 Type: uint256
                 Source: "_offset"
