Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0xad7e9b5b9d15f2b26464ecbe76065f033b126a6c.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.18;"
ContractDefinition "Random"
   Source: "contract Random {\r\n\r\n    uint public ticketsNum = 0;\r\n    \r\n    mapping(uint => uint) internal tickets;  // tickets for the current draw\r\n    mapping(uint => bool) internal payed_back; // ticket payment refunding identifier\r\n    \r\n    address[] public addr; // addresses of all the draw participants\r\n    \r\n    uint32 public random_num = 0; // draw serial number\r\n \r\n    uint public liveBlocksNumber = 5760; // amount of blocks untill the lottery ending\r\n    uint public startBlockNumber = 0; // initial block of the current lottery\r\n    uint public endBlockNumber = 0; // final block of the current lottery\r\n\r\n    uint public constant onePotWei = 10000000000000000; // 1 ticket cost is 0.01 ETH\r\n\r\n    address public inv_contract = 0x5192c55B1064D920C15dB125eF2E69a17558E65a; // investing contract\r\n    address public rtm_contract = 0x7E08c0468CBe9F48d8A4D246095dEb8bC1EB2e7e; // team contract\r\n    address public mrk_contract = 0xc01c08B2b451328947bFb7Ba5ffA3af96Cfc3430; // marketing contract\r\n    \r\n    address manager; // lottery manager address\r\n    \r\n    uint public winners_count = 0; // amount of winners in the current draw\r\n    uint last_winner = 0; // amount of winners already received rewards\r\n    uint public others_prize = 0; // prize fund less jack pots\r\n    \r\n    uint public fee_balance = 0; // current balance available for commiting payment to investing, team and marketing contracts\r\n\r\n    \r\n    // Events\r\n    // This generates a publics event on the blockchain that will notify clients\r\n    \r\n    event Buy(address indexed sender, uint eth); // tickets purchase\r\n    event Withdraw(address indexed sender, address to, uint eth); // reward accruing\r\n    event Transfer(address indexed from, address indexed to, uint value); // event: sending ticket to another address\r\n    event TransferError(address indexed to, uint value); // event (error): sending ETH from the contract was failed\r\n    \r\n\r\n    // methods with following modifier can only be called by the manager\r\n    modifier onlyManager() {\r\n        require(msg.sender == manager);\r\n        _;\r\n    }\r\n    \r\n\r\n    // constructor\r\n    function Random() public {\r\n        manager = msg.sender;\r\n        startBlockNumber = block.number - 1;\r\n        endBlockNumber = startBlockNumber + liveBlocksNumber;\r\n    }\r\n\r\n\r\n    /// function for straight tickets purchase (sending ETH to the contract address)\r\n    function() public payable {\r\n        require(block.number < endBlockNumber || msg.value < 1000000000000000000);\r\n        if (msg.value > 0 && last_winner == 0) {\r\n            uint val =  msg.value / onePotWei;\r\n            uint i = 0;\r\n            uint ix = checkAddress(msg.sender);\r\n            for(i; i < val; i++) { tickets[ticketsNum+i] = ix; }\r\n            ticketsNum += i;\r\n            Buy(msg.sender, msg.value);\r\n        }\r\n        if (block.number >= endBlockNumber) { \r\n            EndLottery(); \r\n        }\r\n    }\r\n\r\n\r\n    /// function for ticket sending from owner's address to designated address\r\n    function transfer(address _to, uint _ticketNum) public {\r\n        if (msg.sender == getAddress(tickets[_ticketNum]) && _to != address(0)) {\r\n            uint ix = checkAddress(_to);\r\n            tickets[_ticketNum] = ix;\r\n            Transfer(msg.sender, _to, _ticketNum);\r\n        }\r\n    }\r\n\r\n\r\n    /// manager's opportunity to write off ETH from the contract, in a case of unforseen contract blocking (possible in only case of more than 24 hours from the moment of lottery ending had passed and a new one has not started)\r\n    function manager_withdraw() onlyManager public {\r\n        require(block.number >= endBlockNumber + liveBlocksNumber);\r\n        msg.sender.transfer(this.balance);\r\n    }\r\n    \r\n    /// lottery ending\r\n    function EndLottery() public payable returns (bool success) {\r\n        require(block.number >= endBlockNumber); \r\n        uint tn = ticketsNum;\r\n        if(tn < 3) { \r\n            tn = 0;\r\n            if(msg.value > 0) { msg.sender.transfer(msg.value); }\r\n            startNewDraw(msg.value);\r\n            return false;\r\n        }\r\n        uint pf = prizeFund();\r\n        uint jp1 = percent(pf, 10);\r\n        uint jp2 = percent(pf, 4);\r\n        uint jp3 = percent(pf, 1);\r\n        uint lastbet_prize = onePotWei*10;\r\n        \r\n        if(last_winner == 0) {\r\n            \r\n            winners_count = percent(tn, 4) + 3; \r\n            \r\n            uint prizes = jp1 + jp2 + jp3 + lastbet_prize*2;\r\n            uint full_prizes = jp1 + jp2 + jp3 + (lastbet_prize * ( (winners_count+1)/10 ) );\r\n\r\n            if(winners_count < 10) {\r\n                if(prizes > pf) {\r\n                    others_prize = 0;\r\n                } else {\r\n                    others_prize = pf - prizes;    \r\n                }\r\n            } else {\r\n                if(full_prizes > pf) {\r\n                    others_prize = 0;\r\n                } else {\r\n                    others_prize = pf - full_prizes;    \r\n                }\r\n            }\r\n\r\n            sendEth(getAddress(tickets[getWinningNumber(1)]), jp1);\r\n            sendEth(getAddress(tickets[getWinningNumber(2)]), jp2);\r\n            sendEth(getAddress(tickets[getWinningNumber(3)]), jp3);\r\n            last_winner += 1;\r\n            \r\n            sendEth(msg.sender, lastbet_prize + msg.value); \r\n            return true;\r\n        } \r\n        \r\n        if(last_winner < winners_count + 1 && others_prize > 0) {\r\n            \r\n            uint val = others_prize / winners_count;\r\n            uint i;\r\n            uint8 cnt = 0;\r\n            for(i = last_winner; i < winners_count + 1; i++) {\r\n                sendEth(getAddress(tickets[getWinningNumber(i+3)]), val);\r\n                cnt++;\r\n                if(cnt > 9) {\r\n                    last_winner = i;\r\n                    return true;\r\n                }\r\n            }\r\n            last_winner = i;\r\n            sendEth(msg.sender, lastbet_prize + msg.value);\r\n            return true;\r\n            \r\n        } else {\r\n\r\n            startNewDraw(lastbet_prize + msg.value);   \r\n        }\r\n        \r\n        sendEth(msg.sender, lastbet_prize + msg.value);\r\n        return true;\r\n    }\r\n    \r\n    /// new draw start\r\n    function startNewDraw(uint _msg_value) internal {\r\n        ticketsNum = 0;\r\n        startBlockNumber = block.number - 1;\r\n        endBlockNumber = startBlockNumber + liveBlocksNumber;\r\n        random_num += 1;\r\n        winners_count = 0;\r\n        last_winner = 0;\r\n        fee_balance += (this.balance - _msg_value);\r\n    }\r\n    \r\n    /// sending rewards to the investing, team and marketing contracts \r\n    function payfee() public {\r\n        require(fee_balance > 0);\r\n        uint val = fee_balance;\r\n        inv_contract.transfer( percent(val, 20) );\r\n        rtm_contract.transfer( percent(val, 49) );\r\n        mrk_contract.transfer( percent(val, 30) );\r\n        fee_balance = 0;\r\n    }\r\n    \r\n    /// function for sending ETH with balance check (does not interrupt the program if balance is not sufficient)\r\n    function sendEth(address _to, uint _val) internal returns(bool) {\r\n        if(this.balance < _val) {\r\n            TransferError(_to, _val);\r\n            return false;\r\n        }\r\n        _to.transfer(_val);\r\n        Withdraw(address(this), _to, _val);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    /// get winning ticket number basing on block hasg (block number is being calculated basing on specified displacement)\r\n    function getWinningNumber(uint _blockshift) internal constant returns (uint) {\r\n        return uint(block.blockhash(block.number - _blockshift)) % ticketsNum + 1;\r\n    }\r\n    \r\n\r\n    /// current amount of jack pot 1\r\n    function jackPotA() public view returns (uint) {\r\n        return percent(prizeFund(), 10);\r\n    }\r\n    \r\n    /// current amount of jack pot 2\r\n    function jackPotB() public view returns (uint) {\r\n        return percent(prizeFund(), 4);\r\n    }\r\n    \r\n    /// current amount of jack pot 3\r\n    function jackPotC() public view returns (uint) {\r\n        return percent(prizeFund(), 1);\r\n    }\r\n\r\n    /// current amount of prize fund\r\n    function prizeFund() public view returns (uint) {\r\n        return ( (ticketsNum * onePotWei) / 100 ) * 90;\r\n    }\r\n\r\n    /// function for calculating definite percent of a number\r\n    function percent(uint _val, uint8 _percent) public pure returns (uint) {\r\n        return ( _val / 100 ) * _percent;\r\n    }\r\n\r\n\r\n    /// returns owner address using ticket number\r\n    function getTicketOwner(uint _num) public view returns (address) {\r\n        if(ticketsNum == 0) {\r\n            return 0;\r\n        }\r\n        return getAddress(tickets[_num]);\r\n    }\r\n\r\n    /// returns amount of tickets for the current draw in the possession of specified address\r\n    function getTicketsCount(address _addr) public view returns (uint) {\r\n        if(ticketsNum == 0) {\r\n            return 0;\r\n        }\r\n        uint num = 0;\r\n        for(uint i = 0; i < ticketsNum; i++) {\r\n            if(tickets[i] == readAddress(_addr)) {\r\n                num++;\r\n            }\r\n        }\r\n        return num;\r\n    }\r\n    \r\n    /// returns tickets numbers for the current draw in the possession of specified address\r\n    function getTicketsAtAdress(address _address) public view returns(uint[]) {\r\n        uint[] memory result = new uint[](getTicketsCount(_address));\r\n        uint num = 0;\r\n        for(uint i = 0; i < ticketsNum; i++) {\r\n            if(getAddress(tickets[i]) == _address) {\r\n                result[num] = i;\r\n                num++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    /// returns amount of paid rewards for the current draw\r\n    function getLastWinner() public view returns(uint) {\r\n        return last_winner+1;\r\n    }\r\n\r\n\r\n    /// investing contract address change\r\n    function setInvContract(address _addr) onlyManager public {\r\n        inv_contract = _addr;\r\n    }\r\n\r\n    /// team contract address change\r\n    function setRtmContract(address _addr) onlyManager public {\r\n        rtm_contract = _addr;\r\n    }\r\n\r\n    /// marketing contract address change\r\n    function setMrkContract(address _addr) onlyManager public {\r\n        mrk_contract = _addr;\r\n    }\r\n\r\n\r\n    /// returns number of participant (in the list of participants) by belonging address and adding to the list, if not found\r\n    function checkAddress(address _addr) public returns (uint addr_num)\r\n    {\r\n        for(uint i=0; i<addr.length; i++) {\r\n            if(addr[i] == _addr) {\r\n                return i;\r\n            }\r\n        }\r\n        return addr.push(_addr) - 1;\r\n    }\r\n    \r\n    /// returns participants number (in the list of participants) be belonging address (read only)\r\n    function readAddress(address _addr) public view returns (uint addr_num)\r\n    {\r\n        for(uint i=0; i<addr.length; i++) {\r\n            if(addr[i] == _addr) {\r\n                return i;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /// returns address by the number in the list of participants\r\n    function getAddress(uint _index) public view returns (address) {\r\n        return addr[_index];\r\n    }\r\n\r\n\r\n    /// method for direct contract replenishment with ETH\r\n    function deposit() public payable {\r\n        require(msg.value > 0);\r\n    }\r\n    \r\n\r\n}"
  VariableDeclaration "ticketsNum"
     Type: uint256
     Gas costs: [???]
     Source: "uint public ticketsNum = 0"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "tickets"
     Type: mapping(uint256 => uint256)
     Gas costs: 0
     Source: "mapping(uint => uint) internal tickets"
    Mapping
       Source: "mapping(uint => uint)"
      ElementaryTypeName uint
         Source: "uint"
      ElementaryTypeName uint
         Source: "uint"
  VariableDeclaration "payed_back"
     Type: mapping(uint256 => bool)
     Gas costs: 0
     Source: "mapping(uint => bool) internal payed_back"
    Mapping
       Source: "mapping(uint => bool)"
      ElementaryTypeName uint
         Source: "uint"
      ElementaryTypeName bool
         Source: "bool"
  VariableDeclaration "addr"
     Type: address[] storage ref
     Gas costs: [???]
     Source: "address[] public addr"
    ArrayTypeName
       Source: "address[]"
      ElementaryTypeName address
         Source: "address"
  VariableDeclaration "random_num"
     Type: uint32
     Gas costs: [???]
     Source: "uint32 public random_num = 0"
    ElementaryTypeName uint32
       Source: "uint32"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "liveBlocksNumber"
     Type: uint256
     Gas costs: [???]
     Source: "uint public liveBlocksNumber = 5760"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 5760
       Type: int_const 5760
       Source: "5760"
  VariableDeclaration "startBlockNumber"
     Type: uint256
     Gas costs: [???]
     Source: "uint public startBlockNumber = 0"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "endBlockNumber"
     Type: uint256
     Gas costs: [???]
     Source: "uint public endBlockNumber = 0"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "onePotWei"
     Type: uint256
     Gas costs: [???]
     Source: "uint public constant onePotWei = 10000000000000000"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 10000000000000000
       Type: int_const 10000000000000000
       Source: "10000000000000000"
  VariableDeclaration "inv_contract"
     Type: address
     Gas costs: [???]
     Source: "address public inv_contract = 0x5192c55B1064D920C15dB125eF2E69a17558E65a"
    ElementaryTypeName address
       Source: "address"
    Literal, token: [no token] value: 0x5192c55B1064D920C15dB125eF2E69a17558E65a
       Type: address
       Source: "0x5192c55B1064D920C15dB125eF2E69a17558E65a"
  VariableDeclaration "rtm_contract"
     Type: address
     Gas costs: [???]
     Source: "address public rtm_contract = 0x7E08c0468CBe9F48d8A4D246095dEb8bC1EB2e7e"
    ElementaryTypeName address
       Source: "address"
    Literal, token: [no token] value: 0x7E08c0468CBe9F48d8A4D246095dEb8bC1EB2e7e
       Type: address
       Source: "0x7E08c0468CBe9F48d8A4D246095dEb8bC1EB2e7e"
  VariableDeclaration "mrk_contract"
     Type: address
     Gas costs: [???]
     Source: "address public mrk_contract = 0xc01c08B2b451328947bFb7Ba5ffA3af96Cfc3430"
    ElementaryTypeName address
       Source: "address"
    Literal, token: [no token] value: 0xc01c08B2b451328947bFb7Ba5ffA3af96Cfc3430
       Type: address
       Source: "0xc01c08B2b451328947bFb7Ba5ffA3af96Cfc3430"
  VariableDeclaration "manager"
     Type: address
     Gas costs: 0
     Source: "address manager"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "winners_count"
     Type: uint256
     Gas costs: [???]
     Source: "uint public winners_count = 0"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "last_winner"
     Type: uint256
     Gas costs: 0
     Source: "uint last_winner = 0"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "others_prize"
     Type: uint256
     Gas costs: [???]
     Source: "uint public others_prize = 0"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "fee_balance"
     Type: uint256
     Gas costs: [???]
     Source: "uint public fee_balance = 0"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  EventDefinition "Buy"
     Gas costs: 0
     Source: "event Buy(address indexed sender, uint eth);"
    ParameterList
       Source: "(address indexed sender, uint eth)"
      VariableDeclaration "sender"
         Type: address
         Source: "address indexed sender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "eth"
         Type: uint256
         Source: "uint eth"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "Withdraw"
     Gas costs: 0
     Source: "event Withdraw(address indexed sender, address to, uint eth);"
    ParameterList
       Source: "(address indexed sender, address to, uint eth)"
      VariableDeclaration "sender"
         Type: address
         Source: "address indexed sender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "eth"
         Type: uint256
         Source: "uint eth"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "Transfer"
     Gas costs: 0
     Source: "event Transfer(address indexed from, address indexed to, uint value);"
    ParameterList
       Source: "(address indexed from, address indexed to, uint value)"
      VariableDeclaration "from"
         Type: address
         Source: "address indexed from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "to"
         Type: address
         Source: "address indexed to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "TransferError"
     Gas costs: 0
     Source: "event TransferError(address indexed to, uint value);"
    ParameterList
       Source: "(address indexed to, uint value)"
      VariableDeclaration "to"
         Type: address
         Source: "address indexed to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
  ModifierDefinition "onlyManager"
     Source: "modifier onlyManager() {\r\n        require(msg.sender == manager);\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n        require(msg.sender == manager);\r\n        _;\r\n    }"
      ExpressionStatement
         Gas costs: 1128
         Source: "require(msg.sender == manager)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == manager)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == manager"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier manager
               Type: address
               Source: "manager"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "Random" - public
     Source: "function Random() public {\r\n        manager = msg.sender;\r\n        startBlockNumber = block.number - 1;\r\n        endBlockNumber = startBlockNumber + liveBlocksNumber;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        manager = msg.sender;\r\n        startBlockNumber = block.number - 1;\r\n        endBlockNumber = startBlockNumber + liveBlocksNumber;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "manager = msg.sender"
        Assignment using operator =
           Type: address
           Source: "manager = msg.sender"
          Identifier manager
             Type: address
             Source: "manager"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 0
         Source: "startBlockNumber = block.number - 1"
        Assignment using operator =
           Type: uint256
           Source: "startBlockNumber = block.number - 1"
          Identifier startBlockNumber
             Type: uint256
             Source: "startBlockNumber"
          BinaryOperation using operator -
             Type: uint256
             Source: "block.number - 1"
            MemberAccess to member number
               Type: uint256
               Source: "block.number"
              Identifier block
                 Type: block
                 Source: "block"
            Literal, token: [no token] value: 1
               Type: int_const 1
               Source: "1"
      ExpressionStatement
         Gas costs: 0
         Source: "endBlockNumber = startBlockNumber + liveBlocksNumber"
        Assignment using operator =
           Type: uint256
           Source: "endBlockNumber = startBlockNumber + liveBlocksNumber"
          Identifier endBlockNumber
             Type: uint256
             Source: "endBlockNumber"
          BinaryOperation using operator +
             Type: uint256
             Source: "startBlockNumber + liveBlocksNumber"
            Identifier startBlockNumber
               Type: uint256
               Source: "startBlockNumber"
            Identifier liveBlocksNumber
               Type: uint256
               Source: "liveBlocksNumber"
  FunctionDefinition "" - public
     Source: "function() public payable {\r\n        require(block.number < endBlockNumber || msg.value < 1000000000000000000);\r\n        if (msg.value > 0 && last_winner == 0) {\r\n            uint val =  msg.value / onePotWei;\r\n            uint i = 0;\r\n            uint ix = checkAddress(msg.sender);\r\n            for(i; i < val; i++) { tickets[ticketsNum+i] = ix; }\r\n            ticketsNum += i;\r\n            Buy(msg.sender, msg.value);\r\n        }\r\n        if (block.number >= endBlockNumber) { \r\n            EndLottery(); \r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(block.number < endBlockNumber || msg.value < 1000000000000000000);\r\n        if (msg.value > 0 && last_winner == 0) {\r\n            uint val =  msg.value / onePotWei;\r\n            uint i = 0;\r\n            uint ix = checkAddress(msg.sender);\r\n            for(i; i < val; i++) { tickets[ticketsNum+i] = ix; }\r\n            ticketsNum += i;\r\n            Buy(msg.sender, msg.value);\r\n        }\r\n        if (block.number >= endBlockNumber) { \r\n            EndLottery(); \r\n        }\r\n    }"
      ExpressionStatement
         Gas costs: 261
         Source: "require(block.number < endBlockNumber || msg.value < 1000000000000000000)"
        FunctionCall
           Type: tuple()
           Source: "require(block.number < endBlockNumber || msg.value < 1000000000000000000)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ||
             Type: bool
             Source: "block.number < endBlockNumber || msg.value < 1000000000000000000"
            BinaryOperation using operator <
               Type: bool
               Source: "block.number < endBlockNumber"
              MemberAccess to member number
                 Type: uint256
                 Source: "block.number"
                Identifier block
                   Type: block
                   Source: "block"
              Identifier endBlockNumber
                 Type: uint256
                 Source: "endBlockNumber"
            BinaryOperation using operator <
               Type: bool
               Source: "msg.value < 1000000000000000000"
              MemberAccess to member value
                 Type: uint256
                 Source: "msg.value"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Literal, token: [no token] value: 1000000000000000000
                 Type: int_const 1000000000000000000
                 Source: "1000000000000000000"
      IfStatement
         Source: "if (msg.value > 0 && last_winner == 0) {\r\n            uint val =  msg.value / onePotWei;\r\n            uint i = 0;\r\n            uint ix = checkAddress(msg.sender);\r\n            for(i; i < val; i++) { tickets[ticketsNum+i] = ix; }\r\n            ticketsNum += i;\r\n            Buy(msg.sender, msg.value);\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 239
           Source: "msg.value > 0 && last_winner == 0"
          BinaryOperation using operator >
             Type: bool
             Source: "msg.value > 0"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
          BinaryOperation using operator ==
             Type: bool
             Source: "last_winner == 0"
            Identifier last_winner
               Type: uint256
               Source: "last_winner"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
        Block
           Source: "{\r\n            uint val =  msg.value / onePotWei;\r\n            uint i = 0;\r\n            uint ix = checkAddress(msg.sender);\r\n            for(i; i < val; i++) { tickets[ticketsNum+i] = ix; }\r\n            ticketsNum += i;\r\n            Buy(msg.sender, msg.value);\r\n        }"
          VariableDeclarationStatement
             Gas costs: 38
             Source: "uint val =  msg.value / onePotWei"
            VariableDeclaration "val"
               Type: uint256
               Source: "uint val"
              ElementaryTypeName uint
                 Source: "uint"
            BinaryOperation using operator /
               Type: uint256
               Source: "msg.value / onePotWei"
              MemberAccess to member value
                 Type: uint256
                 Source: "msg.value"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier onePotWei
                 Type: uint256
                 Source: "onePotWei"
          VariableDeclarationStatement
             Gas costs: 11
             Source: "uint i = 0"
            VariableDeclaration "i"
               Type: uint256
               Source: "uint i"
              ElementaryTypeName uint
                 Source: "uint"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
          VariableDeclarationStatement
             Gas costs: 14
             Source: "uint ix = checkAddress(msg.sender)"
            VariableDeclaration "ix"
               Type: uint256
               Source: "uint ix"
              ElementaryTypeName uint
                 Source: "uint"
            FunctionCall
               Type: uint256
               Source: "checkAddress(msg.sender)"
              Identifier checkAddress
                 Type: function (address) returns (uint256)
                 Source: "checkAddress"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
          ForStatement
             Source: "for(i; i < val; i++) { tickets[ticketsNum+i] = ix; }"
            ExpressionStatement
               Gas costs: 0
               Source: "i"
              Identifier i
                 Type: uint256
                 Source: "i"
            BinaryOperation using operator <
               Type: bool
               Gas costs: 9
               Source: "i < val"
              Identifier i
                 Type: uint256
                 Source: "i"
              Identifier val
                 Type: uint256
                 Source: "val"
            ExpressionStatement
               Gas costs: 19
               Source: "i++"
              UnaryOperation (postfix) ++
                 Type: uint256
                 Source: "i++"
                Identifier i
                   Type: uint256
                   Source: "i"
            Block
               Source: "{ tickets[ticketsNum+i] = ix; }"
              ExpressionStatement
                 Gas costs: 20304
                 Source: "tickets[ticketsNum+i] = ix"
                Assignment using operator =
                   Type: uint256
                   Source: "tickets[ticketsNum+i] = ix"
                  IndexAccess
                     Type: uint256
                     Source: "tickets[ticketsNum+i]"
                    Identifier tickets
                       Type: mapping(uint256 => uint256)
                       Source: "tickets"
                    BinaryOperation using operator +
                       Type: uint256
                       Source: "ticketsNum+i"
                      Identifier ticketsNum
                         Type: uint256
                         Source: "ticketsNum"
                      Identifier i
                         Type: uint256
                         Source: "i"
                  Identifier ix
                     Type: uint256
                     Source: "ix"
          ExpressionStatement
             Gas costs: 20233
             Source: "ticketsNum += i"
            Assignment using operator +=
               Type: uint256
               Source: "ticketsNum += i"
              Identifier ticketsNum
                 Type: uint256
                 Source: "ticketsNum"
              Identifier i
                 Type: uint256
                 Source: "i"
          ExpressionStatement
             Gas costs: [???]
             Source: "Buy(msg.sender, msg.value)"
            FunctionCall
               Type: tuple()
               Source: "Buy(msg.sender, msg.value)"
              Identifier Buy
                 Type: function (address,uint256)
                 Source: "Buy"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              MemberAccess to member value
                 Type: uint256
                 Source: "msg.value"
                Identifier msg
                   Type: msg
                   Source: "msg"
      IfStatement
         Source: "if (block.number >= endBlockNumber) { \r\n            EndLottery(); \r\n        }"
        BinaryOperation using operator >=
           Type: bool
           Gas costs: 211
           Source: "block.number >= endBlockNumber"
          MemberAccess to member number
             Type: uint256
             Source: "block.number"
            Identifier block
               Type: block
               Source: "block"
          Identifier endBlockNumber
             Type: uint256
             Source: "endBlockNumber"
        Block
           Source: "{ \r\n            EndLottery(); \r\n        }"
          ExpressionStatement
             Gas costs: 17
             Source: "EndLottery()"
            FunctionCall
               Type: bool
               Source: "EndLottery()"
              Identifier EndLottery
                 Type: function () returns (bool)
                 Source: "EndLottery"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint _ticketNum) public {\r\n        if (msg.sender == getAddress(tickets[_ticketNum]) && _to != address(0)) {\r\n            uint ix = checkAddress(_to);\r\n            tickets[_ticketNum] = ix;\r\n            Transfer(msg.sender, _to, _ticketNum);\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint _ticketNum)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_ticketNum"
         Type: uint256
         Source: "uint _ticketNum"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if (msg.sender == getAddress(tickets[_ticketNum]) && _to != address(0)) {\r\n            uint ix = checkAddress(_to);\r\n            tickets[_ticketNum] = ix;\r\n            Transfer(msg.sender, _to, _ticketNum);\r\n        }\r\n    }"
      IfStatement
         Source: "if (msg.sender == getAddress(tickets[_ticketNum]) && _to != address(0)) {\r\n            uint ix = checkAddress(_to);\r\n            tickets[_ticketNum] = ix;\r\n            Transfer(msg.sender, _to, _ticketNum);\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 354
           Source: "msg.sender == getAddress(tickets[_ticketNum]) && _to != address(0)"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == getAddress(tickets[_ticketNum])"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            FunctionCall
               Type: address
               Source: "getAddress(tickets[_ticketNum])"
              Identifier getAddress
                 Type: function (uint256) view returns (address)
                 Source: "getAddress"
              IndexAccess
                 Type: uint256
                 Source: "tickets[_ticketNum]"
                Identifier tickets
                   Type: mapping(uint256 => uint256)
                   Source: "tickets"
                Identifier _ticketNum
                   Type: uint256
                   Source: "_ticketNum"
          BinaryOperation using operator !=
             Type: bool
             Source: "_to != address(0)"
            Identifier _to
               Type: address
               Source: "_to"
            FunctionCall
               Type: address
               Source: "address(0)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
        Block
           Source: "{\r\n            uint ix = checkAddress(_to);\r\n            tickets[_ticketNum] = ix;\r\n            Transfer(msg.sender, _to, _ticketNum);\r\n        }"
          VariableDeclarationStatement
             Gas costs: 26
             Source: "uint ix = checkAddress(_to)"
            VariableDeclaration "ix"
               Type: uint256
               Source: "uint ix"
              ElementaryTypeName uint
                 Source: "uint"
            FunctionCall
               Type: uint256
               Source: "checkAddress(_to)"
              Identifier checkAddress
                 Type: function (address) returns (uint256)
                 Source: "checkAddress"
              Identifier _to
                 Type: address
                 Source: "_to"
          ExpressionStatement
             Gas costs: 20098
             Source: "tickets[_ticketNum] = ix"
            Assignment using operator =
               Type: uint256
               Source: "tickets[_ticketNum] = ix"
              IndexAccess
                 Type: uint256
                 Source: "tickets[_ticketNum]"
                Identifier tickets
                   Type: mapping(uint256 => uint256)
                   Source: "tickets"
                Identifier _ticketNum
                   Type: uint256
                   Source: "_ticketNum"
              Identifier ix
                 Type: uint256
                 Source: "ix"
          ExpressionStatement
             Gas costs: [???]
             Source: "Transfer(msg.sender, _to, _ticketNum)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(msg.sender, _to, _ticketNum)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _ticketNum
                 Type: uint256
                 Source: "_ticketNum"
  FunctionDefinition "manager_withdraw" - public
     Source: "function manager_withdraw() onlyManager public {\r\n        require(block.number >= endBlockNumber + liveBlocksNumber);\r\n        msg.sender.transfer(this.balance);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyManager"
       Gas costs: 0
       Source: "onlyManager"
      Identifier onlyManager
         Type: modifier ()
         Source: "onlyManager"
    Block
       Source: "{\r\n        require(block.number >= endBlockNumber + liveBlocksNumber);\r\n        msg.sender.transfer(this.balance);\r\n    }"
      ExpressionStatement
         Gas costs: 443
         Source: "require(block.number >= endBlockNumber + liveBlocksNumber)"
        FunctionCall
           Type: tuple()
           Source: "require(block.number >= endBlockNumber + liveBlocksNumber)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "block.number >= endBlockNumber + liveBlocksNumber"
            MemberAccess to member number
               Type: uint256
               Source: "block.number"
              Identifier block
                 Type: block
                 Source: "block"
            BinaryOperation using operator +
               Type: uint256
               Source: "endBlockNumber + liveBlocksNumber"
              Identifier endBlockNumber
                 Type: uint256
                 Source: "endBlockNumber"
              Identifier liveBlocksNumber
                 Type: uint256
                 Source: "liveBlocksNumber"
      ExpressionStatement
         Gas costs: [???]
         Source: "msg.sender.transfer(this.balance)"
        FunctionCall
           Type: tuple()
           Source: "msg.sender.transfer(this.balance)"
          MemberAccess to member transfer
             Type: function (uint256)
             Source: "msg.sender.transfer"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          MemberAccess to member balance
             Type: uint256
             Source: "this.balance"
            Identifier this
               Type: contract Random
               Source: "this"
  FunctionDefinition "EndLottery" - public
     Source: "function EndLottery() public payable returns (bool success) {\r\n        require(block.number >= endBlockNumber); \r\n        uint tn = ticketsNum;\r\n        if(tn < 3) { \r\n            tn = 0;\r\n            if(msg.value > 0) { msg.sender.transfer(msg.value); }\r\n            startNewDraw(msg.value);\r\n            return false;\r\n        }\r\n        uint pf = prizeFund();\r\n        uint jp1 = percent(pf, 10);\r\n        uint jp2 = percent(pf, 4);\r\n        uint jp3 = percent(pf, 1);\r\n        uint lastbet_prize = onePotWei*10;\r\n        \r\n        if(last_winner == 0) {\r\n            \r\n            winners_count = percent(tn, 4) + 3; \r\n            \r\n            uint prizes = jp1 + jp2 + jp3 + lastbet_prize*2;\r\n            uint full_prizes = jp1 + jp2 + jp3 + (lastbet_prize * ( (winners_count+1)/10 ) );\r\n\r\n            if(winners_count < 10) {\r\n                if(prizes > pf) {\r\n                    others_prize = 0;\r\n                } else {\r\n                    others_prize = pf - prizes;    \r\n                }\r\n            } else {\r\n                if(full_prizes > pf) {\r\n                    others_prize = 0;\r\n                } else {\r\n                    others_prize = pf - full_prizes;    \r\n                }\r\n            }\r\n\r\n            sendEth(getAddress(tickets[getWinningNumber(1)]), jp1);\r\n            sendEth(getAddress(tickets[getWinningNumber(2)]), jp2);\r\n            sendEth(getAddress(tickets[getWinningNumber(3)]), jp3);\r\n            last_winner += 1;\r\n            \r\n            sendEth(msg.sender, lastbet_prize + msg.value); \r\n            return true;\r\n        } \r\n        \r\n        if(last_winner < winners_count + 1 && others_prize > 0) {\r\n            \r\n            uint val = others_prize / winners_count;\r\n            uint i;\r\n            uint8 cnt = 0;\r\n            for(i = last_winner; i < winners_count + 1; i++) {\r\n                sendEth(getAddress(tickets[getWinningNumber(i+3)]), val);\r\n                cnt++;\r\n                if(cnt > 9) {\r\n                    last_winner = i;\r\n                    return true;\r\n                }\r\n            }\r\n            last_winner = i;\r\n            sendEth(msg.sender, lastbet_prize + msg.value);\r\n            return true;\r\n            \r\n        } else {\r\n\r\n            startNewDraw(lastbet_prize + msg.value);   \r\n        }\r\n        \r\n        sendEth(msg.sender, lastbet_prize + msg.value);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        require(block.number >= endBlockNumber); \r\n        uint tn = ticketsNum;\r\n        if(tn < 3) { \r\n            tn = 0;\r\n            if(msg.value > 0) { msg.sender.transfer(msg.value); }\r\n            startNewDraw(msg.value);\r\n            return false;\r\n        }\r\n        uint pf = prizeFund();\r\n        uint jp1 = percent(pf, 10);\r\n        uint jp2 = percent(pf, 4);\r\n        uint jp3 = percent(pf, 1);\r\n        uint lastbet_prize = onePotWei*10;\r\n        \r\n        if(last_winner == 0) {\r\n            \r\n            winners_count = percent(tn, 4) + 3; \r\n            \r\n            uint prizes = jp1 + jp2 + jp3 + lastbet_prize*2;\r\n            uint full_prizes = jp1 + jp2 + jp3 + (lastbet_prize * ( (winners_count+1)/10 ) );\r\n\r\n            if(winners_count < 10) {\r\n                if(prizes > pf) {\r\n                    others_prize = 0;\r\n                } else {\r\n                    others_prize = pf - prizes;    \r\n                }\r\n            } else {\r\n                if(full_prizes > pf) {\r\n                    others_prize = 0;\r\n                } else {\r\n                    others_prize = pf - full_prizes;    \r\n                }\r\n            }\r\n\r\n            sendEth(getAddress(tickets[getWinningNumber(1)]), jp1);\r\n            sendEth(getAddress(tickets[getWinningNumber(2)]), jp2);\r\n            sendEth(getAddress(tickets[getWinningNumber(3)]), jp3);\r\n            last_winner += 1;\r\n            \r\n            sendEth(msg.sender, lastbet_prize + msg.value); \r\n            return true;\r\n        } \r\n        \r\n        if(last_winner < winners_count + 1 && others_prize > 0) {\r\n            \r\n            uint val = others_prize / winners_count;\r\n            uint i;\r\n            uint8 cnt = 0;\r\n            for(i = last_winner; i < winners_count + 1; i++) {\r\n                sendEth(getAddress(tickets[getWinningNumber(i+3)]), val);\r\n                cnt++;\r\n                if(cnt > 9) {\r\n                    last_winner = i;\r\n                    return true;\r\n                }\r\n            }\r\n            last_winner = i;\r\n            sendEth(msg.sender, lastbet_prize + msg.value);\r\n            return true;\r\n            \r\n        } else {\r\n\r\n            startNewDraw(lastbet_prize + msg.value);   \r\n        }\r\n        \r\n        sendEth(msg.sender, lastbet_prize + msg.value);\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 237
         Source: "require(block.number >= endBlockNumber)"
        FunctionCall
           Type: tuple()
           Source: "require(block.number >= endBlockNumber)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "block.number >= endBlockNumber"
            MemberAccess to member number
               Type: uint256
               Source: "block.number"
              Identifier block
                 Type: block
                 Source: "block"
            Identifier endBlockNumber
               Type: uint256
               Source: "endBlockNumber"
      VariableDeclarationStatement
         Gas costs: 211
         Source: "uint tn = ticketsNum"
        VariableDeclaration "tn"
           Type: uint256
           Source: "uint tn"
          ElementaryTypeName uint
             Source: "uint"
        Identifier ticketsNum
           Type: uint256
           Source: "ticketsNum"
      IfStatement
         Source: "if(tn < 3) { \r\n            tn = 0;\r\n            if(msg.value > 0) { msg.sender.transfer(msg.value); }\r\n            startNewDraw(msg.value);\r\n            return false;\r\n        }"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 9
           Source: "tn < 3"
          Identifier tn
             Type: uint256
             Source: "tn"
          Literal, token: [no token] value: 3
             Type: int_const 3
             Source: "3"
        Block
           Source: "{ \r\n            tn = 0;\r\n            if(msg.value > 0) { msg.sender.transfer(msg.value); }\r\n            startNewDraw(msg.value);\r\n            return false;\r\n        }"
          ExpressionStatement
             Gas costs: 8
             Source: "tn = 0"
            Assignment using operator =
               Type: uint256
               Source: "tn = 0"
              Identifier tn
                 Type: uint256
                 Source: "tn"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
          IfStatement
             Source: "if(msg.value > 0) { msg.sender.transfer(msg.value); }"
            BinaryOperation using operator >
               Type: bool
               Gas costs: 8
               Source: "msg.value > 0"
              MemberAccess to member value
                 Type: uint256
                 Source: "msg.value"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
            Block
               Source: "{ msg.sender.transfer(msg.value); }"
              ExpressionStatement
                 Gas costs: [???]
                 Source: "msg.sender.transfer(msg.value)"
                FunctionCall
                   Type: tuple()
                   Source: "msg.sender.transfer(msg.value)"
                  MemberAccess to member transfer
                     Type: function (uint256)
                     Source: "msg.sender.transfer"
                    MemberAccess to member sender
                       Type: address
                       Source: "msg.sender"
                      Identifier msg
                         Type: msg
                         Source: "msg"
                  MemberAccess to member value
                     Type: uint256
                     Source: "msg.value"
                    Identifier msg
                       Type: msg
                       Source: "msg"
          ExpressionStatement
             Gas costs: 6
             Source: "startNewDraw(msg.value)"
            FunctionCall
               Type: tuple()
               Source: "startNewDraw(msg.value)"
              Identifier startNewDraw
                 Type: function (uint256)
                 Source: "startNewDraw"
              MemberAccess to member value
                 Type: uint256
                 Source: "msg.value"
                Identifier msg
                   Type: msg
                   Source: "msg"
          Return
             Gas costs: 19
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
      VariableDeclarationStatement
         Gas costs: 23
         Source: "uint pf = prizeFund()"
        VariableDeclaration "pf"
           Type: uint256
           Source: "uint pf"
          ElementaryTypeName uint
             Source: "uint"
        FunctionCall
           Type: uint256
           Source: "prizeFund()"
          Identifier prizeFund
             Type: function () view returns (uint256)
             Source: "prizeFund"
      VariableDeclarationStatement
         Gas costs: 29
         Source: "uint jp1 = percent(pf, 10)"
        VariableDeclaration "jp1"
           Type: uint256
           Source: "uint jp1"
          ElementaryTypeName uint
             Source: "uint"
        FunctionCall
           Type: uint256
           Source: "percent(pf, 10)"
          Identifier percent
             Type: function (uint256,uint8) pure returns (uint256)
             Source: "percent"
          Identifier pf
             Type: uint256
             Source: "pf"
          Literal, token: [no token] value: 10
             Type: int_const 10
             Source: "10"
      VariableDeclarationStatement
         Gas costs: 29
         Source: "uint jp2 = percent(pf, 4)"
        VariableDeclaration "jp2"
           Type: uint256
           Source: "uint jp2"
          ElementaryTypeName uint
             Source: "uint"
        FunctionCall
           Type: uint256
           Source: "percent(pf, 4)"
          Identifier percent
             Type: function (uint256,uint8) pure returns (uint256)
             Source: "percent"
          Identifier pf
             Type: uint256
             Source: "pf"
          Literal, token: [no token] value: 4
             Type: int_const 4
             Source: "4"
      VariableDeclarationStatement
         Gas costs: 29
         Source: "uint jp3 = percent(pf, 1)"
        VariableDeclaration "jp3"
           Type: uint256
           Source: "uint jp3"
          ElementaryTypeName uint
             Source: "uint"
        FunctionCall
           Type: uint256
           Source: "percent(pf, 1)"
          Identifier percent
             Type: function (uint256,uint8) pure returns (uint256)
             Source: "percent"
          Identifier pf
             Type: uint256
             Source: "pf"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
      VariableDeclarationStatement
         Gas costs: 16
         Source: "uint lastbet_prize = onePotWei*10"
        VariableDeclaration "lastbet_prize"
           Type: uint256
           Source: "uint lastbet_prize"
          ElementaryTypeName uint
             Source: "uint"
        BinaryOperation using operator *
           Type: uint256
           Source: "onePotWei*10"
          Identifier onePotWei
             Type: uint256
             Source: "onePotWei"
          Literal, token: [no token] value: 10
             Type: int_const 10
             Source: "10"
      IfStatement
         Source: "if(last_winner == 0) {\r\n            \r\n            winners_count = percent(tn, 4) + 3; \r\n            \r\n            uint prizes = jp1 + jp2 + jp3 + lastbet_prize*2;\r\n            uint full_prizes = jp1 + jp2 + jp3 + (lastbet_prize * ( (winners_count+1)/10 ) );\r\n\r\n            if(winners_count < 10) {\r\n                if(prizes > pf) {\r\n                    others_prize = 0;\r\n                } else {\r\n                    others_prize = pf - prizes;    \r\n                }\r\n            } else {\r\n                if(full_prizes > pf) {\r\n                    others_prize = 0;\r\n                } else {\r\n                    others_prize = pf - full_prizes;    \r\n                }\r\n            }\r\n\r\n            sendEth(getAddress(tickets[getWinningNumber(1)]), jp1);\r\n            sendEth(getAddress(tickets[getWinningNumber(2)]), jp2);\r\n            sendEth(getAddress(tickets[getWinningNumber(3)]), jp3);\r\n            last_winner += 1;\r\n            \r\n            sendEth(msg.sender, lastbet_prize + msg.value); \r\n            return true;\r\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 209
           Source: "last_winner == 0"
          Identifier last_winner
             Type: uint256
             Source: "last_winner"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n            \r\n            winners_count = percent(tn, 4) + 3; \r\n            \r\n            uint prizes = jp1 + jp2 + jp3 + lastbet_prize*2;\r\n            uint full_prizes = jp1 + jp2 + jp3 + (lastbet_prize * ( (winners_count+1)/10 ) );\r\n\r\n            if(winners_count < 10) {\r\n                if(prizes > pf) {\r\n                    others_prize = 0;\r\n                } else {\r\n                    others_prize = pf - prizes;    \r\n                }\r\n            } else {\r\n                if(full_prizes > pf) {\r\n                    others_prize = 0;\r\n                } else {\r\n                    others_prize = pf - full_prizes;    \r\n                }\r\n            }\r\n\r\n            sendEth(getAddress(tickets[getWinningNumber(1)]), jp1);\r\n            sendEth(getAddress(tickets[getWinningNumber(2)]), jp2);\r\n            sendEth(getAddress(tickets[getWinningNumber(3)]), jp3);\r\n            last_winner += 1;\r\n            \r\n            sendEth(msg.sender, lastbet_prize + msg.value); \r\n            return true;\r\n        }"
          ExpressionStatement
             Gas costs: 20038
             Source: "winners_count = percent(tn, 4) + 3"
            Assignment using operator =
               Type: uint256
               Source: "winners_count = percent(tn, 4) + 3"
              Identifier winners_count
                 Type: uint256
                 Source: "winners_count"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "percent(tn, 4) + 3"
                FunctionCall
                   Type: uint256
                   Source: "percent(tn, 4)"
                  Identifier percent
                     Type: function (uint256,uint8) pure returns (uint256)
                     Source: "percent"
                  Identifier tn
                     Type: uint256
                     Source: "tn"
                  Literal, token: [no token] value: 4
                     Type: int_const 4
                     Source: "4"
                Literal, token: [no token] value: 3
                   Type: int_const 3
                   Source: "3"
          VariableDeclarationStatement
             Gas costs: 37
             Source: "uint prizes = jp1 + jp2 + jp3 + lastbet_prize*2"
            VariableDeclaration "prizes"
               Type: uint256
               Source: "uint prizes"
              ElementaryTypeName uint
                 Source: "uint"
            BinaryOperation using operator +
               Type: uint256
               Source: "jp1 + jp2 + jp3 + lastbet_prize*2"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "jp1 + jp2 + jp3"
                BinaryOperation using operator +
                   Type: uint256
                   Source: "jp1 + jp2"
                  Identifier jp1
                     Type: uint256
                     Source: "jp1"
                  Identifier jp2
                     Type: uint256
                     Source: "jp2"
                Identifier jp3
                   Type: uint256
                   Source: "jp3"
              BinaryOperation using operator *
                 Type: uint256
                 Source: "lastbet_prize*2"
                Identifier lastbet_prize
                   Type: uint256
                   Source: "lastbet_prize"
                Literal, token: [no token] value: 2
                   Type: int_const 2
                   Source: "2"
          VariableDeclarationStatement
             Gas costs: 274
             Source: "uint full_prizes = jp1 + jp2 + jp3 + (lastbet_prize * ( (winners_count+1)/10 ) )"
            VariableDeclaration "full_prizes"
               Type: uint256
               Source: "uint full_prizes"
              ElementaryTypeName uint
                 Source: "uint"
            BinaryOperation using operator +
               Type: uint256
               Source: "jp1 + jp2 + jp3 + (lastbet_prize * ( (winners_count+1)/10 ) )"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "jp1 + jp2 + jp3"
                BinaryOperation using operator +
                   Type: uint256
                   Source: "jp1 + jp2"
                  Identifier jp1
                     Type: uint256
                     Source: "jp1"
                  Identifier jp2
                     Type: uint256
                     Source: "jp2"
                Identifier jp3
                   Type: uint256
                   Source: "jp3"
              TupleExpression
                 Type: uint256
                 Source: "(lastbet_prize * ( (winners_count+1)/10 ) )"
                BinaryOperation using operator *
                   Type: uint256
                   Source: "lastbet_prize * ( (winners_count+1)/10 )"
                  Identifier lastbet_prize
                     Type: uint256
                     Source: "lastbet_prize"
                  TupleExpression
                     Type: uint256
                     Source: "( (winners_count+1)/10 )"
                    BinaryOperation using operator /
                       Type: uint256
                       Source: "(winners_count+1)/10"
                      TupleExpression
                         Type: uint256
                         Source: "(winners_count+1)"
                        BinaryOperation using operator +
                           Type: uint256
                           Source: "winners_count+1"
                          Identifier winners_count
                             Type: uint256
                             Source: "winners_count"
                          Literal, token: [no token] value: 1
                             Type: int_const 1
                             Source: "1"
                      Literal, token: [no token] value: 10
                         Type: int_const 10
                         Source: "10"
          IfStatement
             Source: "if(winners_count < 10) {\r\n                if(prizes > pf) {\r\n                    others_prize = 0;\r\n                } else {\r\n                    others_prize = pf - prizes;    \r\n                }\r\n            } else {\r\n                if(full_prizes > pf) {\r\n                    others_prize = 0;\r\n                } else {\r\n                    others_prize = pf - full_prizes;    \r\n                }\r\n            }"
            BinaryOperation using operator <
               Type: bool
               Gas costs: 209
               Source: "winners_count < 10"
              Identifier winners_count
                 Type: uint256
                 Source: "winners_count"
              Literal, token: [no token] value: 10
                 Type: int_const 10
                 Source: "10"
            Block
               Source: "{\r\n                if(prizes > pf) {\r\n                    others_prize = 0;\r\n                } else {\r\n                    others_prize = pf - prizes;    \r\n                }\r\n            }"
              IfStatement
                 Source: "if(prizes > pf) {\r\n                    others_prize = 0;\r\n                } else {\r\n                    others_prize = pf - prizes;    \r\n                }"
                BinaryOperation using operator >
                   Type: bool
                   Gas costs: 9
                   Source: "prizes > pf"
                  Identifier prizes
                     Type: uint256
                     Source: "prizes"
                  Identifier pf
                     Type: uint256
                     Source: "pf"
                Block
                   Source: "{\r\n                    others_prize = 0;\r\n                }"
                  ExpressionStatement
                     Gas costs: 5014
                     Source: "others_prize = 0"
                    Assignment using operator =
                       Type: uint256
                       Source: "others_prize = 0"
                      Identifier others_prize
                         Type: uint256
                         Source: "others_prize"
                      Literal, token: [no token] value: 0
                         Type: int_const 0
                         Source: "0"
                Block
                   Source: "{\r\n                    others_prize = pf - prizes;    \r\n                }"
                  ExpressionStatement
                     Gas costs: 20020
                     Source: "others_prize = pf - prizes"
                    Assignment using operator =
                       Type: uint256
                       Source: "others_prize = pf - prizes"
                      Identifier others_prize
                         Type: uint256
                         Source: "others_prize"
                      BinaryOperation using operator -
                         Type: uint256
                         Source: "pf - prizes"
                        Identifier pf
                           Type: uint256
                           Source: "pf"
                        Identifier prizes
                           Type: uint256
                           Source: "prizes"
            Block
               Source: "{\r\n                if(full_prizes > pf) {\r\n                    others_prize = 0;\r\n                } else {\r\n                    others_prize = pf - full_prizes;    \r\n                }\r\n            }"
              IfStatement
                 Source: "if(full_prizes > pf) {\r\n                    others_prize = 0;\r\n                } else {\r\n                    others_prize = pf - full_prizes;    \r\n                }"
                BinaryOperation using operator >
                   Type: bool
                   Gas costs: 9
                   Source: "full_prizes > pf"
                  Identifier full_prizes
                     Type: uint256
                     Source: "full_prizes"
                  Identifier pf
                     Type: uint256
                     Source: "pf"
                Block
                   Source: "{\r\n                    others_prize = 0;\r\n                }"
                  ExpressionStatement
                     Gas costs: 5014
                     Source: "others_prize = 0"
                    Assignment using operator =
                       Type: uint256
                       Source: "others_prize = 0"
                      Identifier others_prize
                         Type: uint256
                         Source: "others_prize"
                      Literal, token: [no token] value: 0
                         Type: int_const 0
                         Source: "0"
                Block
                   Source: "{\r\n                    others_prize = pf - full_prizes;    \r\n                }"
                  ExpressionStatement
                     Gas costs: 20020
                     Source: "others_prize = pf - full_prizes"
                    Assignment using operator =
                       Type: uint256
                       Source: "others_prize = pf - full_prizes"
                      Identifier others_prize
                         Type: uint256
                         Source: "others_prize"
                      BinaryOperation using operator -
                         Type: uint256
                         Source: "pf - full_prizes"
                        Identifier pf
                           Type: uint256
                           Source: "pf"
                        Identifier full_prizes
                           Type: uint256
                           Source: "full_prizes"
          ExpressionStatement
             Gas costs: [???]
             Source: "sendEth(getAddress(tickets[getWinningNumber(1)]), jp1)"
            FunctionCall
               Type: bool
               Source: "sendEth(getAddress(tickets[getWinningNumber(1)]), jp1)"
              Identifier sendEth
                 Type: function (address,uint256) returns (bool)
                 Source: "sendEth"
              FunctionCall
                 Type: address
                 Source: "getAddress(tickets[getWinningNumber(1)])"
                Identifier getAddress
                   Type: function (uint256) view returns (address)
                   Source: "getAddress"
                IndexAccess
                   Type: uint256
                   Source: "tickets[getWinningNumber(1)]"
                  Identifier tickets
                     Type: mapping(uint256 => uint256)
                     Source: "tickets"
                  FunctionCall
                     Type: uint256
                     Source: "getWinningNumber(1)"
                    Identifier getWinningNumber
                       Type: function (uint256) view returns (uint256)
                       Source: "getWinningNumber"
                    Literal, token: [no token] value: 1
                       Type: int_const 1
                       Source: "1"
              Identifier jp1
                 Type: uint256
                 Source: "jp1"
          ExpressionStatement
             Gas costs: [???]
             Source: "sendEth(getAddress(tickets[getWinningNumber(2)]), jp2)"
            FunctionCall
               Type: bool
               Source: "sendEth(getAddress(tickets[getWinningNumber(2)]), jp2)"
              Identifier sendEth
                 Type: function (address,uint256) returns (bool)
                 Source: "sendEth"
              FunctionCall
                 Type: address
                 Source: "getAddress(tickets[getWinningNumber(2)])"
                Identifier getAddress
                   Type: function (uint256) view returns (address)
                   Source: "getAddress"
                IndexAccess
                   Type: uint256
                   Source: "tickets[getWinningNumber(2)]"
                  Identifier tickets
                     Type: mapping(uint256 => uint256)
                     Source: "tickets"
                  FunctionCall
                     Type: uint256
                     Source: "getWinningNumber(2)"
                    Identifier getWinningNumber
                       Type: function (uint256) view returns (uint256)
                       Source: "getWinningNumber"
                    Literal, token: [no token] value: 2
                       Type: int_const 2
                       Source: "2"
              Identifier jp2
                 Type: uint256
                 Source: "jp2"
          ExpressionStatement
             Gas costs: [???]
             Source: "sendEth(getAddress(tickets[getWinningNumber(3)]), jp3)"
            FunctionCall
               Type: bool
               Source: "sendEth(getAddress(tickets[getWinningNumber(3)]), jp3)"
              Identifier sendEth
                 Type: function (address,uint256) returns (bool)
                 Source: "sendEth"
              FunctionCall
                 Type: address
                 Source: "getAddress(tickets[getWinningNumber(3)])"
                Identifier getAddress
                   Type: function (uint256) view returns (address)
                   Source: "getAddress"
                IndexAccess
                   Type: uint256
                   Source: "tickets[getWinningNumber(3)]"
                  Identifier tickets
                     Type: mapping(uint256 => uint256)
                     Source: "tickets"
                  FunctionCall
                     Type: uint256
                     Source: "getWinningNumber(3)"
                    Identifier getWinningNumber
                       Type: function (uint256) view returns (uint256)
                       Source: "getWinningNumber"
                    Literal, token: [no token] value: 3
                       Type: int_const 3
                       Source: "3"
              Identifier jp3
                 Type: uint256
                 Source: "jp3"
          ExpressionStatement
             Gas costs: 20233
             Source: "last_winner += 1"
            Assignment using operator +=
               Type: uint256
               Source: "last_winner += 1"
              Identifier last_winner
                 Type: uint256
                 Source: "last_winner"
              Literal, token: [no token] value: 1
                 Type: int_const 1
                 Source: "1"
          ExpressionStatement
             Gas costs: 27
             Source: "sendEth(msg.sender, lastbet_prize + msg.value)"
            FunctionCall
               Type: bool
               Source: "sendEth(msg.sender, lastbet_prize + msg.value)"
              Identifier sendEth
                 Type: function (address,uint256) returns (bool)
                 Source: "sendEth"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "lastbet_prize + msg.value"
                Identifier lastbet_prize
                   Type: uint256
                   Source: "lastbet_prize"
                MemberAccess to member value
                   Type: uint256
                   Source: "msg.value"
                  Identifier msg
                     Type: msg
                     Source: "msg"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
      IfStatement
         Source: "if(last_winner < winners_count + 1 && others_prize > 0) {\r\n            \r\n            uint val = others_prize / winners_count;\r\n            uint i;\r\n            uint8 cnt = 0;\r\n            for(i = last_winner; i < winners_count + 1; i++) {\r\n                sendEth(getAddress(tickets[getWinningNumber(i+3)]), val);\r\n                cnt++;\r\n                if(cnt > 9) {\r\n                    last_winner = i;\r\n                    return true;\r\n                }\r\n            }\r\n            last_winner = i;\r\n            sendEth(msg.sender, lastbet_prize + msg.value);\r\n            return true;\r\n            \r\n        } else {\r\n\r\n            startNewDraw(lastbet_prize + msg.value);   \r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 646
           Source: "last_winner < winners_count + 1 && others_prize > 0"
          BinaryOperation using operator <
             Type: bool
             Source: "last_winner < winners_count + 1"
            Identifier last_winner
               Type: uint256
               Source: "last_winner"
            BinaryOperation using operator +
               Type: uint256
               Source: "winners_count + 1"
              Identifier winners_count
                 Type: uint256
                 Source: "winners_count"
              Literal, token: [no token] value: 1
                 Type: int_const 1
                 Source: "1"
          BinaryOperation using operator >
             Type: bool
             Source: "others_prize > 0"
            Identifier others_prize
               Type: uint256
               Source: "others_prize"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
        Block
           Source: "{\r\n            \r\n            uint val = others_prize / winners_count;\r\n            uint i;\r\n            uint8 cnt = 0;\r\n            for(i = last_winner; i < winners_count + 1; i++) {\r\n                sendEth(getAddress(tickets[getWinningNumber(i+3)]), val);\r\n                cnt++;\r\n                if(cnt > 9) {\r\n                    last_winner = i;\r\n                    return true;\r\n                }\r\n            }\r\n            last_winner = i;\r\n            sendEth(msg.sender, lastbet_prize + msg.value);\r\n            return true;\r\n            \r\n        }"
          VariableDeclarationStatement
             Gas costs: 442
             Source: "uint val = others_prize / winners_count"
            VariableDeclaration "val"
               Type: uint256
               Source: "uint val"
              ElementaryTypeName uint
                 Source: "uint"
            BinaryOperation using operator /
               Type: uint256
               Source: "others_prize / winners_count"
              Identifier others_prize
                 Type: uint256
                 Source: "others_prize"
              Identifier winners_count
                 Type: uint256
                 Source: "winners_count"
          VariableDeclarationStatement
             Gas costs: 3
             Source: "uint i"
            VariableDeclaration "i"
               Type: uint256
               Source: "uint i"
              ElementaryTypeName uint
                 Source: "uint"
          VariableDeclarationStatement
             Gas costs: 11
             Source: "uint8 cnt = 0"
            VariableDeclaration "cnt"
               Type: uint8
               Source: "uint8 cnt"
              ElementaryTypeName uint8
                 Source: "uint8"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
          ForStatement
             Source: "for(i = last_winner; i < winners_count + 1; i++) {\r\n                sendEth(getAddress(tickets[getWinningNumber(i+3)]), val);\r\n                cnt++;\r\n                if(cnt > 9) {\r\n                    last_winner = i;\r\n                    return true;\r\n                }\r\n            }"
            ExpressionStatement
               Gas costs: 208
               Source: "i = last_winner"
              Assignment using operator =
                 Type: uint256
                 Source: "i = last_winner"
                Identifier i
                   Type: uint256
                   Source: "i"
                Identifier last_winner
                   Type: uint256
                   Source: "last_winner"
            BinaryOperation using operator <
               Type: bool
               Gas costs: 215
               Source: "i < winners_count + 1"
              Identifier i
                 Type: uint256
                 Source: "i"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "winners_count + 1"
                Identifier winners_count
                   Type: uint256
                   Source: "winners_count"
                Literal, token: [no token] value: 1
                   Type: int_const 1
                   Source: "1"
            ExpressionStatement
               Gas costs: 19
               Source: "i++"
              UnaryOperation (postfix) ++
                 Type: uint256
                 Source: "i++"
                Identifier i
                   Type: uint256
                   Source: "i"
            Block
               Source: "{\r\n                sendEth(getAddress(tickets[getWinningNumber(i+3)]), val);\r\n                cnt++;\r\n                if(cnt > 9) {\r\n                    last_winner = i;\r\n                    return true;\r\n                }\r\n            }"
              ExpressionStatement
                 Gas costs: [???]
                 Source: "sendEth(getAddress(tickets[getWinningNumber(i+3)]), val)"
                FunctionCall
                   Type: bool
                   Source: "sendEth(getAddress(tickets[getWinningNumber(i+3)]), val)"
                  Identifier sendEth
                     Type: function (address,uint256) returns (bool)
                     Source: "sendEth"
                  FunctionCall
                     Type: address
                     Source: "getAddress(tickets[getWinningNumber(i+3)])"
                    Identifier getAddress
                       Type: function (uint256) view returns (address)
                       Source: "getAddress"
                    IndexAccess
                       Type: uint256
                       Source: "tickets[getWinningNumber(i+3)]"
                      Identifier tickets
                         Type: mapping(uint256 => uint256)
                         Source: "tickets"
                      FunctionCall
                         Type: uint256
                         Source: "getWinningNumber(i+3)"
                        Identifier getWinningNumber
                           Type: function (uint256) view returns (uint256)
                           Source: "getWinningNumber"
                        BinaryOperation using operator +
                           Type: uint256
                           Source: "i+3"
                          Identifier i
                             Type: uint256
                             Source: "i"
                          Literal, token: [no token] value: 3
                             Type: int_const 3
                             Source: "3"
                  Identifier val
                     Type: uint256
                     Source: "val"
              ExpressionStatement
                 Gas costs: 19
                 Source: "cnt++"
                UnaryOperation (postfix) ++
                   Type: uint8
                   Source: "cnt++"
                  Identifier cnt
                     Type: uint8
                     Source: "cnt"
              IfStatement
                 Source: "if(cnt > 9) {\r\n                    last_winner = i;\r\n                    return true;\r\n                }"
                BinaryOperation using operator >
                   Type: bool
                   Gas costs: 15
                   Source: "cnt > 9"
                  Identifier cnt
                     Type: uint8
                     Source: "cnt"
                  Literal, token: [no token] value: 9
                     Type: int_const 9
                     Source: "9"
                Block
                   Source: "{\r\n                    last_winner = i;\r\n                    return true;\r\n                }"
                  ExpressionStatement
                     Gas costs: 20014
                     Source: "last_winner = i"
                    Assignment using operator =
                       Type: uint256
                       Source: "last_winner = i"
                      Identifier last_winner
                         Type: uint256
                         Source: "last_winner"
                      Identifier i
                         Type: uint256
                         Source: "i"
                  Return
                     Gas costs: 19
                     Source: "return true"
                    Literal, token: true value: true
                       Type: bool
                       Source: "true"
          ExpressionStatement
             Gas costs: 20014
             Source: "last_winner = i"
            Assignment using operator =
               Type: uint256
               Source: "last_winner = i"
              Identifier last_winner
                 Type: uint256
                 Source: "last_winner"
              Identifier i
                 Type: uint256
                 Source: "i"
          ExpressionStatement
             Gas costs: 27
             Source: "sendEth(msg.sender, lastbet_prize + msg.value)"
            FunctionCall
               Type: bool
               Source: "sendEth(msg.sender, lastbet_prize + msg.value)"
              Identifier sendEth
                 Type: function (address,uint256) returns (bool)
                 Source: "sendEth"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "lastbet_prize + msg.value"
                Identifier lastbet_prize
                   Type: uint256
                   Source: "lastbet_prize"
                MemberAccess to member value
                   Type: uint256
                   Source: "msg.value"
                  Identifier msg
                     Type: msg
                     Source: "msg"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{\r\n\r\n            startNewDraw(lastbet_prize + msg.value);   \r\n        }"
          ExpressionStatement
             Gas costs: 23
             Source: "startNewDraw(lastbet_prize + msg.value)"
            FunctionCall
               Type: tuple()
               Source: "startNewDraw(lastbet_prize + msg.value)"
              Identifier startNewDraw
                 Type: function (uint256)
                 Source: "startNewDraw"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "lastbet_prize + msg.value"
                Identifier lastbet_prize
                   Type: uint256
                   Source: "lastbet_prize"
                MemberAccess to member value
                   Type: uint256
                   Source: "msg.value"
                  Identifier msg
                     Type: msg
                     Source: "msg"
      ExpressionStatement
         Gas costs: 27
         Source: "sendEth(msg.sender, lastbet_prize + msg.value)"
        FunctionCall
           Type: bool
           Source: "sendEth(msg.sender, lastbet_prize + msg.value)"
          Identifier sendEth
             Type: function (address,uint256) returns (bool)
             Source: "sendEth"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          BinaryOperation using operator +
             Type: uint256
             Source: "lastbet_prize + msg.value"
            Identifier lastbet_prize
               Type: uint256
               Source: "lastbet_prize"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "startNewDraw"
     Source: "function startNewDraw(uint _msg_value) internal {\r\n        ticketsNum = 0;\r\n        startBlockNumber = block.number - 1;\r\n        endBlockNumber = startBlockNumber + liveBlocksNumber;\r\n        random_num += 1;\r\n        winners_count = 0;\r\n        last_winner = 0;\r\n        fee_balance += (this.balance - _msg_value);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint _msg_value)"
      VariableDeclaration "_msg_value"
         Type: uint256
         Source: "uint _msg_value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        ticketsNum = 0;\r\n        startBlockNumber = block.number - 1;\r\n        endBlockNumber = startBlockNumber + liveBlocksNumber;\r\n        random_num += 1;\r\n        winners_count = 0;\r\n        last_winner = 0;\r\n        fee_balance += (this.balance - _msg_value);\r\n    }"
      ExpressionStatement
         Gas costs: 5014
         Source: "ticketsNum = 0"
        Assignment using operator =
           Type: uint256
           Source: "ticketsNum = 0"
          Identifier ticketsNum
             Type: uint256
             Source: "ticketsNum"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 20019
         Source: "startBlockNumber = block.number - 1"
        Assignment using operator =
           Type: uint256
           Source: "startBlockNumber = block.number - 1"
          Identifier startBlockNumber
             Type: uint256
             Source: "startBlockNumber"
          BinaryOperation using operator -
             Type: uint256
             Source: "block.number - 1"
            MemberAccess to member number
               Type: uint256
               Source: "block.number"
              Identifier block
                 Type: block
                 Source: "block"
            Literal, token: [no token] value: 1
               Type: int_const 1
               Source: "1"
      ExpressionStatement
         Gas costs: 20420
         Source: "endBlockNumber = startBlockNumber + liveBlocksNumber"
        Assignment using operator =
           Type: uint256
           Source: "endBlockNumber = startBlockNumber + liveBlocksNumber"
          Identifier endBlockNumber
             Type: uint256
             Source: "endBlockNumber"
          BinaryOperation using operator +
             Type: uint256
             Source: "startBlockNumber + liveBlocksNumber"
            Identifier startBlockNumber
               Type: uint256
               Source: "startBlockNumber"
            Identifier liveBlocksNumber
               Type: uint256
               Source: "liveBlocksNumber"
      ExpressionStatement
         Gas costs: 20517
         Source: "random_num += 1"
        Assignment using operator +=
           Type: uint32
           Source: "random_num += 1"
          Identifier random_num
             Type: uint32
             Source: "random_num"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
      ExpressionStatement
         Gas costs: 5014
         Source: "winners_count = 0"
        Assignment using operator =
           Type: uint256
           Source: "winners_count = 0"
          Identifier winners_count
             Type: uint256
             Source: "winners_count"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 5014
         Source: "last_winner = 0"
        Assignment using operator =
           Type: uint256
           Source: "last_winner = 0"
          Identifier last_winner
             Type: uint256
             Source: "last_winner"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 20644
         Source: "fee_balance += (this.balance - _msg_value)"
        Assignment using operator +=
           Type: uint256
           Source: "fee_balance += (this.balance - _msg_value)"
          Identifier fee_balance
             Type: uint256
             Source: "fee_balance"
          TupleExpression
             Type: uint256
             Source: "(this.balance - _msg_value)"
            BinaryOperation using operator -
               Type: uint256
               Source: "this.balance - _msg_value"
              MemberAccess to member balance
                 Type: uint256
                 Source: "this.balance"
                Identifier this
                   Type: contract Random
                   Source: "this"
              Identifier _msg_value
                 Type: uint256
                 Source: "_msg_value"
  FunctionDefinition "payfee" - public
     Source: "function payfee() public {\r\n        require(fee_balance > 0);\r\n        uint val = fee_balance;\r\n        inv_contract.transfer( percent(val, 20) );\r\n        rtm_contract.transfer( percent(val, 49) );\r\n        mrk_contract.transfer( percent(val, 30) );\r\n        fee_balance = 0;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(fee_balance > 0);\r\n        uint val = fee_balance;\r\n        inv_contract.transfer( percent(val, 20) );\r\n        rtm_contract.transfer( percent(val, 49) );\r\n        mrk_contract.transfer( percent(val, 30) );\r\n        fee_balance = 0;\r\n    }"
      ExpressionStatement
         Gas costs: 235
         Source: "require(fee_balance > 0)"
        FunctionCall
           Type: tuple()
           Source: "require(fee_balance > 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "fee_balance > 0"
            Identifier fee_balance
               Type: uint256
               Source: "fee_balance"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      VariableDeclarationStatement
         Gas costs: 211
         Source: "uint val = fee_balance"
        VariableDeclaration "val"
           Type: uint256
           Source: "uint val"
          ElementaryTypeName uint
             Source: "uint"
        Identifier fee_balance
           Type: uint256
           Source: "fee_balance"
      ExpressionStatement
         Gas costs: [???]
         Source: "inv_contract.transfer( percent(val, 20) )"
        FunctionCall
           Type: tuple()
           Source: "inv_contract.transfer( percent(val, 20) )"
          MemberAccess to member transfer
             Type: function (uint256)
             Source: "inv_contract.transfer"
            Identifier inv_contract
               Type: address
               Source: "inv_contract"
          FunctionCall
             Type: uint256
             Source: "percent(val, 20)"
            Identifier percent
               Type: function (uint256,uint8) pure returns (uint256)
               Source: "percent"
            Identifier val
               Type: uint256
               Source: "val"
            Literal, token: [no token] value: 20
               Type: int_const 20
               Source: "20"
      ExpressionStatement
         Gas costs: [???]
         Source: "rtm_contract.transfer( percent(val, 49) )"
        FunctionCall
           Type: tuple()
           Source: "rtm_contract.transfer( percent(val, 49) )"
          MemberAccess to member transfer
             Type: function (uint256)
             Source: "rtm_contract.transfer"
            Identifier rtm_contract
               Type: address
               Source: "rtm_contract"
          FunctionCall
             Type: uint256
             Source: "percent(val, 49)"
            Identifier percent
               Type: function (uint256,uint8) pure returns (uint256)
               Source: "percent"
            Identifier val
               Type: uint256
               Source: "val"
            Literal, token: [no token] value: 49
               Type: int_const 49
               Source: "49"
      ExpressionStatement
         Gas costs: [???]
         Source: "mrk_contract.transfer( percent(val, 30) )"
        FunctionCall
           Type: tuple()
           Source: "mrk_contract.transfer( percent(val, 30) )"
          MemberAccess to member transfer
             Type: function (uint256)
             Source: "mrk_contract.transfer"
            Identifier mrk_contract
               Type: address
               Source: "mrk_contract"
          FunctionCall
             Type: uint256
             Source: "percent(val, 30)"
            Identifier percent
               Type: function (uint256,uint8) pure returns (uint256)
               Source: "percent"
            Identifier val
               Type: uint256
               Source: "val"
            Literal, token: [no token] value: 30
               Type: int_const 30
               Source: "30"
      ExpressionStatement
         Gas costs: 5014
         Source: "fee_balance = 0"
        Assignment using operator =
           Type: uint256
           Source: "fee_balance = 0"
          Identifier fee_balance
             Type: uint256
             Source: "fee_balance"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
  FunctionDefinition "sendEth"
     Source: "function sendEth(address _to, uint _val) internal returns(bool) {\r\n        if(this.balance < _val) {\r\n            TransferError(_to, _val);\r\n            return false;\r\n        }\r\n        _to.transfer(_val);\r\n        Withdraw(address(this), _to, _val);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint _val)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_val"
         Type: uint256
         Source: "uint _val"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        if(this.balance < _val) {\r\n            TransferError(_to, _val);\r\n            return false;\r\n        }\r\n        _to.transfer(_val);\r\n        Withdraw(address(this), _to, _val);\r\n        return true;\r\n    }"
      IfStatement
         Source: "if(this.balance < _val) {\r\n            TransferError(_to, _val);\r\n            return false;\r\n        }"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 414
           Source: "this.balance < _val"
          MemberAccess to member balance
             Type: uint256
             Source: "this.balance"
            Identifier this
               Type: contract Random
               Source: "this"
          Identifier _val
             Type: uint256
             Source: "_val"
        Block
           Source: "{\r\n            TransferError(_to, _val);\r\n            return false;\r\n        }"
          ExpressionStatement
             Gas costs: [???]
             Source: "TransferError(_to, _val)"
            FunctionCall
               Type: tuple()
               Source: "TransferError(_to, _val)"
              Identifier TransferError
                 Type: function (address,uint256)
                 Source: "TransferError"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _val
                 Type: uint256
                 Source: "_val"
          Return
             Gas costs: 19
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
      ExpressionStatement
         Gas costs: [???]
         Source: "_to.transfer(_val)"
        FunctionCall
           Type: tuple()
           Source: "_to.transfer(_val)"
          MemberAccess to member transfer
             Type: function (uint256)
             Source: "_to.transfer"
            Identifier _to
               Type: address
               Source: "_to"
          Identifier _val
             Type: uint256
             Source: "_val"
      ExpressionStatement
         Gas costs: [???]
         Source: "Withdraw(address(this), _to, _val)"
        FunctionCall
           Type: tuple()
           Source: "Withdraw(address(this), _to, _val)"
          Identifier Withdraw
             Type: function (address,address,uint256)
             Source: "Withdraw"
          FunctionCall
             Type: address
             Source: "address(this)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Identifier this
               Type: contract Random
               Source: "this"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _val
             Type: uint256
             Source: "_val"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "getWinningNumber" - const
     Source: "function getWinningNumber(uint _blockshift) internal constant returns (uint) {\r\n        return uint(block.blockhash(block.number - _blockshift)) % ticketsNum + 1;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint _blockshift)"
      VariableDeclaration "_blockshift"
         Type: uint256
         Source: "uint _blockshift"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        return uint(block.blockhash(block.number - _blockshift)) % ticketsNum + 1;\r\n    }"
      Return
         Gas costs: 281
         Source: "return uint(block.blockhash(block.number - _blockshift)) % ticketsNum + 1"
        BinaryOperation using operator +
           Type: uint256
           Source: "uint(block.blockhash(block.number - _blockshift)) % ticketsNum + 1"
          BinaryOperation using operator %
             Type: uint256
             Source: "uint(block.blockhash(block.number - _blockshift)) % ticketsNum"
            FunctionCall
               Type: uint256
               Source: "uint(block.blockhash(block.number - _blockshift))"
              ElementaryTypeNameExpression uint
                 Type: type(uint256)
                 Source: "uint"
              FunctionCall
                 Type: bytes32
                 Source: "block.blockhash(block.number - _blockshift)"
                MemberAccess to member blockhash
                   Type: function (uint256) view returns (bytes32)
                   Source: "block.blockhash"
                  Identifier block
                     Type: block
                     Source: "block"
                BinaryOperation using operator -
                   Type: uint256
                   Source: "block.number - _blockshift"
                  MemberAccess to member number
                     Type: uint256
                     Source: "block.number"
                    Identifier block
                       Type: block
                       Source: "block"
                  Identifier _blockshift
                     Type: uint256
                     Source: "_blockshift"
            Identifier ticketsNum
               Type: uint256
               Source: "ticketsNum"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
  FunctionDefinition "jackPotA" - public - const
     Source: "function jackPotA() public view returns (uint) {\r\n        return percent(prizeFund(), 10);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        return percent(prizeFund(), 10);\r\n    }"
      Return
         Gas costs: 38
         Source: "return percent(prizeFund(), 10)"
        FunctionCall
           Type: uint256
           Source: "percent(prizeFund(), 10)"
          Identifier percent
             Type: function (uint256,uint8) pure returns (uint256)
             Source: "percent"
          FunctionCall
             Type: uint256
             Source: "prizeFund()"
            Identifier prizeFund
               Type: function () view returns (uint256)
               Source: "prizeFund"
          Literal, token: [no token] value: 10
             Type: int_const 10
             Source: "10"
  FunctionDefinition "jackPotB" - public - const
     Source: "function jackPotB() public view returns (uint) {\r\n        return percent(prizeFund(), 4);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        return percent(prizeFund(), 4);\r\n    }"
      Return
         Gas costs: 27
         Source: "return percent(prizeFund(), 4)"
        FunctionCall
           Type: uint256
           Source: "percent(prizeFund(), 4)"
          Identifier percent
             Type: function (uint256,uint8) pure returns (uint256)
             Source: "percent"
          FunctionCall
             Type: uint256
             Source: "prizeFund()"
            Identifier prizeFund
               Type: function () view returns (uint256)
               Source: "prizeFund"
          Literal, token: [no token] value: 4
             Type: int_const 4
             Source: "4"
  FunctionDefinition "jackPotC" - public - const
     Source: "function jackPotC() public view returns (uint) {\r\n        return percent(prizeFund(), 1);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        return percent(prizeFund(), 1);\r\n    }"
      Return
         Gas costs: 38
         Source: "return percent(prizeFund(), 1)"
        FunctionCall
           Type: uint256
           Source: "percent(prizeFund(), 1)"
          Identifier percent
             Type: function (uint256,uint8) pure returns (uint256)
             Source: "percent"
          FunctionCall
             Type: uint256
             Source: "prizeFund()"
            Identifier prizeFund
               Type: function () view returns (uint256)
               Source: "prizeFund"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
  FunctionDefinition "prizeFund" - public - const
     Source: "function prizeFund() public view returns (uint) {\r\n        return ( (ticketsNum * onePotWei) / 100 ) * 90;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        return ( (ticketsNum * onePotWei) / 100 ) * 90;\r\n    }"
      Return
         Gas costs: 252
         Source: "return ( (ticketsNum * onePotWei) / 100 ) * 90"
        BinaryOperation using operator *
           Type: uint256
           Source: "( (ticketsNum * onePotWei) / 100 ) * 90"
          TupleExpression
             Type: uint256
             Source: "( (ticketsNum * onePotWei) / 100 )"
            BinaryOperation using operator /
               Type: uint256
               Source: "(ticketsNum * onePotWei) / 100"
              TupleExpression
                 Type: uint256
                 Source: "(ticketsNum * onePotWei)"
                BinaryOperation using operator *
                   Type: uint256
                   Source: "ticketsNum * onePotWei"
                  Identifier ticketsNum
                     Type: uint256
                     Source: "ticketsNum"
                  Identifier onePotWei
                     Type: uint256
                     Source: "onePotWei"
              Literal, token: [no token] value: 100
                 Type: int_const 100
                 Source: "100"
          Literal, token: [no token] value: 90
             Type: int_const 90
             Source: "90"
  FunctionDefinition "percent" - public
     Source: "function percent(uint _val, uint8 _percent) public pure returns (uint) {\r\n        return ( _val / 100 ) * _percent;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint _val, uint8 _percent)"
      VariableDeclaration "_val"
         Type: uint256
         Source: "uint _val"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_percent"
         Type: uint8
         Source: "uint8 _percent"
        ElementaryTypeName uint8
           Source: "uint8"
    ParameterList
       Gas costs: 3
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        return ( _val / 100 ) * _percent;\r\n    }"
      Return
         Gas costs: 53
         Source: "return ( _val / 100 ) * _percent"
        BinaryOperation using operator *
           Type: uint256
           Source: "( _val / 100 ) * _percent"
          TupleExpression
             Type: uint256
             Source: "( _val / 100 )"
            BinaryOperation using operator /
               Type: uint256
               Source: "_val / 100"
              Identifier _val
                 Type: uint256
                 Source: "_val"
              Literal, token: [no token] value: 100
                 Type: int_const 100
                 Source: "100"
          Identifier _percent
             Type: uint8
             Source: "_percent"
  FunctionDefinition "getTicketOwner" - public - const
     Source: "function getTicketOwner(uint _num) public view returns (address) {\r\n        if(ticketsNum == 0) {\r\n            return 0;\r\n        }\r\n        return getAddress(tickets[_num]);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint _num)"
      VariableDeclaration "_num"
         Type: uint256
         Source: "uint _num"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(address)"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\r\n        if(ticketsNum == 0) {\r\n            return 0;\r\n        }\r\n        return getAddress(tickets[_num]);\r\n    }"
      IfStatement
         Source: "if(ticketsNum == 0) {\r\n            return 0;\r\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 209
           Source: "ticketsNum == 0"
          Identifier ticketsNum
             Type: uint256
             Source: "ticketsNum"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n            return 0;\r\n        }"
          Return
             Gas costs: 19
             Source: "return 0"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      Return
         Gas costs: 307
         Source: "return getAddress(tickets[_num])"
        FunctionCall
           Type: address
           Source: "getAddress(tickets[_num])"
          Identifier getAddress
             Type: function (uint256) view returns (address)
             Source: "getAddress"
          IndexAccess
             Type: uint256
             Source: "tickets[_num]"
            Identifier tickets
               Type: mapping(uint256 => uint256)
               Source: "tickets"
            Identifier _num
               Type: uint256
               Source: "_num"
  FunctionDefinition "getTicketsCount" - public - const
     Source: "function getTicketsCount(address _addr) public view returns (uint) {\r\n        if(ticketsNum == 0) {\r\n            return 0;\r\n        }\r\n        uint num = 0;\r\n        for(uint i = 0; i < ticketsNum; i++) {\r\n            if(tickets[i] == readAddress(_addr)) {\r\n                num++;\r\n            }\r\n        }\r\n        return num;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _addr)"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        if(ticketsNum == 0) {\r\n            return 0;\r\n        }\r\n        uint num = 0;\r\n        for(uint i = 0; i < ticketsNum; i++) {\r\n            if(tickets[i] == readAddress(_addr)) {\r\n                num++;\r\n            }\r\n        }\r\n        return num;\r\n    }"
      IfStatement
         Source: "if(ticketsNum == 0) {\r\n            return 0;\r\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 209
           Source: "ticketsNum == 0"
          Identifier ticketsNum
             Type: uint256
             Source: "ticketsNum"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n            return 0;\r\n        }"
          Return
             Gas costs: 19
             Source: "return 0"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      VariableDeclarationStatement
         Gas costs: 11
         Source: "uint num = 0"
        VariableDeclaration "num"
           Type: uint256
           Source: "uint num"
          ElementaryTypeName uint
             Source: "uint"
        Literal, token: [no token] value: 0
           Type: int_const 0
           Source: "0"
      ForStatement
         Source: "for(uint i = 0; i < ticketsNum; i++) {\r\n            if(tickets[i] == readAddress(_addr)) {\r\n                num++;\r\n            }\r\n        }"
        VariableDeclarationStatement
           Gas costs: 11
           Source: "uint i = 0"
          VariableDeclaration "i"
             Type: uint256
             Source: "uint i"
            ElementaryTypeName uint
               Source: "uint"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 209
           Source: "i < ticketsNum"
          Identifier i
             Type: uint256
             Source: "i"
          Identifier ticketsNum
             Type: uint256
             Source: "ticketsNum"
        ExpressionStatement
           Gas costs: 19
           Source: "i++"
          UnaryOperation (postfix) ++
             Type: uint256
             Source: "i++"
            Identifier i
               Type: uint256
               Source: "i"
        Block
           Source: "{\r\n            if(tickets[i] == readAddress(_addr)) {\r\n                num++;\r\n            }\r\n        }"
          IfStatement
             Source: "if(tickets[i] == readAddress(_addr)) {\r\n                num++;\r\n            }"
            BinaryOperation using operator ==
               Type: bool
               Gas costs: 308
               Source: "tickets[i] == readAddress(_addr)"
              IndexAccess
                 Type: uint256
                 Source: "tickets[i]"
                Identifier tickets
                   Type: mapping(uint256 => uint256)
                   Source: "tickets"
                Identifier i
                   Type: uint256
                   Source: "i"
              FunctionCall
                 Type: uint256
                 Source: "readAddress(_addr)"
                Identifier readAddress
                   Type: function (address) view returns (uint256)
                   Source: "readAddress"
                Identifier _addr
                   Type: address
                   Source: "_addr"
            Block
               Source: "{\r\n                num++;\r\n            }"
              ExpressionStatement
                 Gas costs: 19
                 Source: "num++"
                UnaryOperation (postfix) ++
                   Type: uint256
                   Source: "num++"
                  Identifier num
                     Type: uint256
                     Source: "num"
      Return
         Gas costs: 8
         Source: "return num"
        Identifier num
           Type: uint256
           Source: "num"
  FunctionDefinition "getTicketsAtAdress" - public - const
     Source: "function getTicketsAtAdress(address _address) public view returns(uint[]) {\r\n        uint[] memory result = new uint[](getTicketsCount(_address));\r\n        uint num = 0;\r\n        for(uint i = 0; i < ticketsNum; i++) {\r\n            if(getAddress(tickets[i]) == _address) {\r\n                result[num] = i;\r\n                num++;\r\n            }\r\n        }\r\n        return result;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _address)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint[])"
      VariableDeclaration ""
         Type: uint256[] memory
         Source: "uint[]"
        ArrayTypeName
           Source: "uint[]"
          ElementaryTypeName uint
             Source: "uint"
    Block
       Source: "{\r\n        uint[] memory result = new uint[](getTicketsCount(_address));\r\n        uint num = 0;\r\n        for(uint i = 0; i < ticketsNum; i++) {\r\n            if(getAddress(tickets[i]) == _address) {\r\n                result[num] = i;\r\n                num++;\r\n            }\r\n        }\r\n        return result;\r\n    }"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "uint[] memory result = new uint[](getTicketsCount(_address))"
        VariableDeclaration "result"
           Type: uint256[] memory
           Source: "uint[] memory result"
          ArrayTypeName
             Source: "uint[]"
            ElementaryTypeName uint
               Source: "uint"
        FunctionCall
           Type: uint256[] memory
           Source: "new uint[](getTicketsCount(_address))"
          NewExpression
             Type: function (uint256) pure returns (uint256[] memory)
             Source: "new uint[]"
            ArrayTypeName
               Source: "uint[]"
              ElementaryTypeName uint
                 Source: "uint"
          FunctionCall
             Type: uint256
             Source: "getTicketsCount(_address)"
            Identifier getTicketsCount
               Type: function (address) view returns (uint256)
               Source: "getTicketsCount"
            Identifier _address
               Type: address
               Source: "_address"
      VariableDeclarationStatement
         Gas costs: 11
         Source: "uint num = 0"
        VariableDeclaration "num"
           Type: uint256
           Source: "uint num"
          ElementaryTypeName uint
             Source: "uint"
        Literal, token: [no token] value: 0
           Type: int_const 0
           Source: "0"
      ForStatement
         Source: "for(uint i = 0; i < ticketsNum; i++) {\r\n            if(getAddress(tickets[i]) == _address) {\r\n                result[num] = i;\r\n                num++;\r\n            }\r\n        }"
        VariableDeclarationStatement
           Gas costs: 11
           Source: "uint i = 0"
          VariableDeclaration "i"
             Type: uint256
             Source: "uint i"
            ElementaryTypeName uint
               Source: "uint"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 209
           Source: "i < ticketsNum"
          Identifier i
             Type: uint256
             Source: "i"
          Identifier ticketsNum
             Type: uint256
             Source: "ticketsNum"
        ExpressionStatement
           Gas costs: 19
           Source: "i++"
          UnaryOperation (postfix) ++
             Type: uint256
             Source: "i++"
            Identifier i
               Type: uint256
               Source: "i"
        Block
           Source: "{\r\n            if(getAddress(tickets[i]) == _address) {\r\n                result[num] = i;\r\n                num++;\r\n            }\r\n        }"
          IfStatement
             Source: "if(getAddress(tickets[i]) == _address) {\r\n                result[num] = i;\r\n                num++;\r\n            }"
            BinaryOperation using operator ==
               Type: bool
               Gas costs: 320
               Source: "getAddress(tickets[i]) == _address"
              FunctionCall
                 Type: address
                 Source: "getAddress(tickets[i])"
                Identifier getAddress
                   Type: function (uint256) view returns (address)
                   Source: "getAddress"
                IndexAccess
                   Type: uint256
                   Source: "tickets[i]"
                  Identifier tickets
                     Type: mapping(uint256 => uint256)
                     Source: "tickets"
                  Identifier i
                     Type: uint256
                     Source: "i"
              Identifier _address
                 Type: address
                 Source: "_address"
            Block
               Source: "{\r\n                result[num] = i;\r\n                num++;\r\n            }"
              ExpressionStatement
                 Gas costs: [???]
                 Source: "result[num] = i"
                Assignment using operator =
                   Type: uint256
                   Source: "result[num] = i"
                  IndexAccess
                     Type: uint256
                     Source: "result[num]"
                    Identifier result
                       Type: uint256[] memory
                       Source: "result"
                    Identifier num
                       Type: uint256
                       Source: "num"
                  Identifier i
                     Type: uint256
                     Source: "i"
              ExpressionStatement
                 Gas costs: 19
                 Source: "num++"
                UnaryOperation (postfix) ++
                   Type: uint256
                   Source: "num++"
                  Identifier num
                     Type: uint256
                     Source: "num"
      Return
         Gas costs: 8
         Source: "return result"
        Identifier result
           Type: uint256[] memory
           Source: "result"
  FunctionDefinition "getLastWinner" - public - const
     Source: "function getLastWinner() public view returns(uint) {\r\n        return last_winner+1;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        return last_winner+1;\r\n    }"
      Return
         Gas costs: 214
         Source: "return last_winner+1"
        BinaryOperation using operator +
           Type: uint256
           Source: "last_winner+1"
          Identifier last_winner
             Type: uint256
             Source: "last_winner"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
  FunctionDefinition "setInvContract" - public
     Source: "function setInvContract(address _addr) onlyManager public {\r\n        inv_contract = _addr;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _addr)"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyManager"
       Gas costs: 0
       Source: "onlyManager"
      Identifier onlyManager
         Type: modifier ()
         Source: "onlyManager"
    Block
       Source: "{\r\n        inv_contract = _addr;\r\n    }"
      ExpressionStatement
         Gas costs: 20267
         Source: "inv_contract = _addr"
        Assignment using operator =
           Type: address
           Source: "inv_contract = _addr"
          Identifier inv_contract
             Type: address
             Source: "inv_contract"
          Identifier _addr
             Type: address
             Source: "_addr"
  FunctionDefinition "setRtmContract" - public
     Source: "function setRtmContract(address _addr) onlyManager public {\r\n        rtm_contract = _addr;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _addr)"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyManager"
       Gas costs: 0
       Source: "onlyManager"
      Identifier onlyManager
         Type: modifier ()
         Source: "onlyManager"
    Block
       Source: "{\r\n        rtm_contract = _addr;\r\n    }"
      ExpressionStatement
         Gas costs: 20267
         Source: "rtm_contract = _addr"
        Assignment using operator =
           Type: address
           Source: "rtm_contract = _addr"
          Identifier rtm_contract
             Type: address
             Source: "rtm_contract"
          Identifier _addr
             Type: address
             Source: "_addr"
  FunctionDefinition "setMrkContract" - public
     Source: "function setMrkContract(address _addr) onlyManager public {\r\n        mrk_contract = _addr;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _addr)"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyManager"
       Gas costs: 0
       Source: "onlyManager"
      Identifier onlyManager
         Type: modifier ()
         Source: "onlyManager"
    Block
       Source: "{\r\n        mrk_contract = _addr;\r\n    }"
      ExpressionStatement
         Gas costs: 20267
         Source: "mrk_contract = _addr"
        Assignment using operator =
           Type: address
           Source: "mrk_contract = _addr"
          Identifier mrk_contract
             Type: address
             Source: "mrk_contract"
          Identifier _addr
             Type: address
             Source: "_addr"
  FunctionDefinition "checkAddress" - public
     Source: "function checkAddress(address _addr) public returns (uint addr_num)\r\n    {\r\n        for(uint i=0; i<addr.length; i++) {\r\n            if(addr[i] == _addr) {\r\n                return i;\r\n            }\r\n        }\r\n        return addr.push(_addr) - 1;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _addr)"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint addr_num)"
      VariableDeclaration "addr_num"
         Type: uint256
         Source: "uint addr_num"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        for(uint i=0; i<addr.length; i++) {\r\n            if(addr[i] == _addr) {\r\n                return i;\r\n            }\r\n        }\r\n        return addr.push(_addr) - 1;\r\n    }"
      ForStatement
         Source: "for(uint i=0; i<addr.length; i++) {\r\n            if(addr[i] == _addr) {\r\n                return i;\r\n            }\r\n        }"
        VariableDeclarationStatement
           Gas costs: 11
           Source: "uint i=0"
          VariableDeclaration "i"
             Type: uint256
             Source: "uint i"
            ElementaryTypeName uint
               Source: "uint"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 217
           Source: "i<addr.length"
          Identifier i
             Type: uint256
             Source: "i"
          MemberAccess to member length
             Type: uint256
             Source: "addr.length"
            Identifier addr
               Type: address[] storage ref
               Source: "addr"
        ExpressionStatement
           Gas costs: 19
           Source: "i++"
          UnaryOperation (postfix) ++
             Type: uint256
             Source: "i++"
            Identifier i
               Type: uint256
               Source: "i"
        Block
           Source: "{\r\n            if(addr[i] == _addr) {\r\n                return i;\r\n            }\r\n        }"
          IfStatement
             Source: "if(addr[i] == _addr) {\r\n                return i;\r\n            }"
            BinaryOperation using operator ==
               Type: bool
               Gas costs: 546
               Source: "addr[i] == _addr"
              IndexAccess
                 Type: address
                 Source: "addr[i]"
                Identifier addr
                   Type: address[] storage ref
                   Source: "addr"
                Identifier i
                   Type: uint256
                   Source: "i"
              Identifier _addr
                 Type: address
                 Source: "_addr"
            Block
               Source: "{\r\n                return i;\r\n            }"
              Return
                 Gas costs: 19
                 Source: "return i"
                Identifier i
                   Type: uint256
                   Source: "i"
      Return
         Gas costs: 20374
         Source: "return addr.push(_addr) - 1"
        BinaryOperation using operator -
           Type: uint256
           Source: "addr.push(_addr) - 1"
          FunctionCall
             Type: uint256
             Source: "addr.push(_addr)"
            MemberAccess to member push
               Type: function (address) returns (uint256)
               Source: "addr.push"
              Identifier addr
                 Type: address[] storage ref
                 Source: "addr"
            Identifier _addr
               Type: address
               Source: "_addr"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
  FunctionDefinition "readAddress" - public - const
     Source: "function readAddress(address _addr) public view returns (uint addr_num)\r\n    {\r\n        for(uint i=0; i<addr.length; i++) {\r\n            if(addr[i] == _addr) {\r\n                return i;\r\n            }\r\n        }\r\n        return 0;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _addr)"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint addr_num)"
      VariableDeclaration "addr_num"
         Type: uint256
         Source: "uint addr_num"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        for(uint i=0; i<addr.length; i++) {\r\n            if(addr[i] == _addr) {\r\n                return i;\r\n            }\r\n        }\r\n        return 0;\r\n    }"
      ForStatement
         Source: "for(uint i=0; i<addr.length; i++) {\r\n            if(addr[i] == _addr) {\r\n                return i;\r\n            }\r\n        }"
        VariableDeclarationStatement
           Gas costs: 11
           Source: "uint i=0"
          VariableDeclaration "i"
             Type: uint256
             Source: "uint i"
            ElementaryTypeName uint
               Source: "uint"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 217
           Source: "i<addr.length"
          Identifier i
             Type: uint256
             Source: "i"
          MemberAccess to member length
             Type: uint256
             Source: "addr.length"
            Identifier addr
               Type: address[] storage ref
               Source: "addr"
        ExpressionStatement
           Gas costs: 19
           Source: "i++"
          UnaryOperation (postfix) ++
             Type: uint256
             Source: "i++"
            Identifier i
               Type: uint256
               Source: "i"
        Block
           Source: "{\r\n            if(addr[i] == _addr) {\r\n                return i;\r\n            }\r\n        }"
          IfStatement
             Source: "if(addr[i] == _addr) {\r\n                return i;\r\n            }"
            BinaryOperation using operator ==
               Type: bool
               Gas costs: 546
               Source: "addr[i] == _addr"
              IndexAccess
                 Type: address
                 Source: "addr[i]"
                Identifier addr
                   Type: address[] storage ref
                   Source: "addr"
                Identifier i
                   Type: uint256
                   Source: "i"
              Identifier _addr
                 Type: address
                 Source: "_addr"
            Block
               Source: "{\r\n                return i;\r\n            }"
              Return
                 Gas costs: 19
                 Source: "return i"
                Identifier i
                   Type: uint256
                   Source: "i"
      Return
         Gas costs: 8
         Source: "return 0"
        Literal, token: [no token] value: 0
           Type: int_const 0
           Source: "0"
  FunctionDefinition "getAddress" - public - const
     Source: "function getAddress(uint _index) public view returns (address) {\r\n        return addr[_index];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint _index)"
      VariableDeclaration "_index"
         Type: uint256
         Source: "uint _index"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(address)"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\r\n        return addr[_index];\r\n    }"
      Return
         Gas costs: 533
         Source: "return addr[_index]"
        IndexAccess
           Type: address
           Source: "addr[_index]"
          Identifier addr
             Type: address[] storage ref
             Source: "addr"
          Identifier _index
             Type: uint256
             Source: "_index"
  FunctionDefinition "deposit" - public
     Source: "function deposit() public payable {\r\n        require(msg.value > 0);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(msg.value > 0);\r\n    }"
      ExpressionStatement
         Gas costs: 34
         Source: "require(msg.value > 0)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.value > 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "msg.value > 0"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
