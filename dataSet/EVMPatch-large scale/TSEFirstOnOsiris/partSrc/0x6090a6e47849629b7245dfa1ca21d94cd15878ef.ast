Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0x6090a6e47849629b7245dfa1ca21d94cd15878ef.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.0;"
ContractDefinition "AbstractENS"
   Gas costs: 0
   Source: "contract AbstractENS {\r\n    function owner(bytes32 node) constant returns(address);\r\n    function resolver(bytes32 node) constant returns(address);\r\n    function ttl(bytes32 node) constant returns(uint64);\r\n    function setOwner(bytes32 node, address owner);\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner);\r\n    function setResolver(bytes32 node, address resolver);\r\n    function setTTL(bytes32 node, uint64 ttl);\r\n\r\n    // Logged when the owner of a node assigns a new owner to a subnode.\r\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\r\n\r\n    // Logged when the owner of a node transfers ownership to a new account.\r\n    event Transfer(bytes32 indexed node, address owner);\r\n\r\n    // Logged when the resolver for a node changes.\r\n    event NewResolver(bytes32 indexed node, address resolver);\r\n\r\n    // Logged when the TTL of a node changes\r\n    event NewTTL(bytes32 indexed node, uint64 ttl);\r\n}"
  FunctionDefinition "owner" - public - const
     Source: "function owner(bytes32 node) constant returns(address);"
    ParameterList
       Source: "(bytes32 node)"
      VariableDeclaration "node"
         Type: bytes32
         Source: "bytes32 node"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Source: "(address)"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
  FunctionDefinition "resolver" - public - const
     Source: "function resolver(bytes32 node) constant returns(address);"
    ParameterList
       Source: "(bytes32 node)"
      VariableDeclaration "node"
         Type: bytes32
         Source: "bytes32 node"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Source: "(address)"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
  FunctionDefinition "ttl" - public - const
     Source: "function ttl(bytes32 node) constant returns(uint64);"
    ParameterList
       Source: "(bytes32 node)"
      VariableDeclaration "node"
         Type: bytes32
         Source: "bytes32 node"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Source: "(uint64)"
      VariableDeclaration ""
         Type: uint64
         Source: "uint64"
        ElementaryTypeName uint64
           Source: "uint64"
  FunctionDefinition "setOwner" - public
     Source: "function setOwner(bytes32 node, address owner);"
    ParameterList
       Source: "(bytes32 node, address owner)"
      VariableDeclaration "node"
         Type: bytes32
         Source: "bytes32 node"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "owner"
         Type: address
         Source: "address owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
  FunctionDefinition "setSubnodeOwner" - public
     Source: "function setSubnodeOwner(bytes32 node, bytes32 label, address owner);"
    ParameterList
       Source: "(bytes32 node, bytes32 label, address owner)"
      VariableDeclaration "node"
         Type: bytes32
         Source: "bytes32 node"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "label"
         Type: bytes32
         Source: "bytes32 label"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "owner"
         Type: address
         Source: "address owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
  FunctionDefinition "setResolver" - public
     Source: "function setResolver(bytes32 node, address resolver);"
    ParameterList
       Source: "(bytes32 node, address resolver)"
      VariableDeclaration "node"
         Type: bytes32
         Source: "bytes32 node"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "resolver"
         Type: address
         Source: "address resolver"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
  FunctionDefinition "setTTL" - public
     Source: "function setTTL(bytes32 node, uint64 ttl);"
    ParameterList
       Source: "(bytes32 node, uint64 ttl)"
      VariableDeclaration "node"
         Type: bytes32
         Source: "bytes32 node"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "ttl"
         Type: uint64
         Source: "uint64 ttl"
        ElementaryTypeName uint64
           Source: "uint64"
    ParameterList
       Source: ""
  EventDefinition "NewOwner"
     Source: "event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);"
    ParameterList
       Source: "(bytes32 indexed node, bytes32 indexed label, address owner)"
      VariableDeclaration "node"
         Type: bytes32
         Source: "bytes32 indexed node"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "label"
         Type: bytes32
         Source: "bytes32 indexed label"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "owner"
         Type: address
         Source: "address owner"
        ElementaryTypeName address
           Source: "address"
  EventDefinition "Transfer"
     Source: "event Transfer(bytes32 indexed node, address owner);"
    ParameterList
       Source: "(bytes32 indexed node, address owner)"
      VariableDeclaration "node"
         Type: bytes32
         Source: "bytes32 indexed node"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "owner"
         Type: address
         Source: "address owner"
        ElementaryTypeName address
           Source: "address"
  EventDefinition "NewResolver"
     Source: "event NewResolver(bytes32 indexed node, address resolver);"
    ParameterList
       Source: "(bytes32 indexed node, address resolver)"
      VariableDeclaration "node"
         Type: bytes32
         Source: "bytes32 indexed node"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "resolver"
         Type: address
         Source: "address resolver"
        ElementaryTypeName address
           Source: "address"
  EventDefinition "NewTTL"
     Source: "event NewTTL(bytes32 indexed node, uint64 ttl);"
    ParameterList
       Source: "(bytes32 indexed node, uint64 ttl)"
      VariableDeclaration "node"
         Type: bytes32
         Source: "bytes32 indexed node"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "ttl"
         Type: uint64
         Source: "uint64 ttl"
        ElementaryTypeName uint64
           Source: "uint64"
ContractDefinition "Deed"
   Source: "contract Deed {\r\n    address public registrar;\r\n    address constant burn = 0xdead;\r\n    uint public creationDate;\r\n    address public owner;\r\n    address public previousOwner;\r\n    uint public value;\r\n    event OwnerChanged(address newOwner);\r\n    event DeedClosed();\r\n    bool active;\r\n\r\n\r\n    modifier onlyRegistrar {\r\n        if (msg.sender != registrar) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyActive {\r\n        if (!active) throw;\r\n        _;\r\n    }\r\n\r\n    function Deed(address _owner) payable {\r\n        owner = _owner;\r\n        registrar = msg.sender;\r\n        creationDate = now;\r\n        active = true;\r\n        value = msg.value;\r\n    }\r\n\r\n    function setOwner(address newOwner) onlyRegistrar {\r\n        if (newOwner == 0) throw;\r\n        previousOwner = owner;  // This allows contracts to check who sent them the ownership\r\n        owner = newOwner;\r\n        OwnerChanged(newOwner);\r\n    }\r\n\r\n    function setRegistrar(address newRegistrar) onlyRegistrar {\r\n        registrar = newRegistrar;\r\n    }\r\n\r\n    function setBalance(uint newValue, bool throwOnFailure) onlyRegistrar onlyActive {\r\n        // Check if it has enough balance to set the value\r\n        if (value < newValue) throw;\r\n        value = newValue;\r\n        // Send the difference to the owner\r\n        if (!owner.send(this.balance - newValue) && throwOnFailure) throw;\r\n    }\r\n\r\n    /**\r\n     * @dev Close a deed and refund a specified fraction of the bid value\r\n     * @param refundRatio The amount*1/1000 to refund\r\n     */\r\n    function closeDeed(uint refundRatio) onlyRegistrar onlyActive {\r\n        active = false;\r\n        if (! burn.send(((1000 - refundRatio) * this.balance)/1000)) throw;\r\n        DeedClosed();\r\n        destroyDeed();\r\n    }\r\n\r\n    /**\r\n     * @dev Close a deed and refund a specified fraction of the bid value\r\n     */\r\n    function destroyDeed() {\r\n        if (active) throw;\r\n        \r\n        // Instead of selfdestruct(owner), invoke owner fallback function to allow\r\n        // owner to log an event if desired; but owner should also be aware that\r\n        // its fallback function can also be invoked by setBalance\r\n        if(owner.send(this.balance)) {\r\n            selfdestruct(burn);\r\n        }\r\n    }\r\n}"
  VariableDeclaration "registrar"
     Type: address
     Gas costs: 0
     Source: "address public registrar"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "burn"
     Type: address
     Gas costs: 0
     Source: "address constant burn = 0xdead"
    ElementaryTypeName address
       Source: "address"
    Literal, token: [no token] value: 0xdead
       Type: int_const 57005
       Source: "0xdead"
  VariableDeclaration "creationDate"
     Type: uint256
     Gas costs: 0
     Source: "uint public creationDate"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "owner"
     Type: address
     Gas costs: 0
     Source: "address public owner"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "previousOwner"
     Type: address
     Gas costs: 0
     Source: "address public previousOwner"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "value"
     Type: uint256
     Gas costs: 0
     Source: "uint public value"
    ElementaryTypeName uint
       Source: "uint"
  EventDefinition "OwnerChanged"
     Gas costs: 0
     Source: "event OwnerChanged(address newOwner);"
    ParameterList
       Source: "(address newOwner)"
      VariableDeclaration "newOwner"
         Type: address
         Source: "address newOwner"
        ElementaryTypeName address
           Source: "address"
  EventDefinition "DeedClosed"
     Gas costs: 0
     Source: "event DeedClosed();"
    ParameterList
       Source: "()"
  VariableDeclaration "active"
     Type: bool
     Gas costs: 0
     Source: "bool active"
    ElementaryTypeName bool
       Source: "bool"
  ModifierDefinition "onlyRegistrar"
     Source: "modifier onlyRegistrar {\r\n        if (msg.sender != registrar) throw;\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if (msg.sender != registrar) throw;\r\n        _;\r\n    }"
      IfStatement
         Source: "if (msg.sender != registrar) throw"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 0
           Source: "msg.sender != registrar"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier registrar
             Type: address
             Source: "registrar"
        Throw
           Gas costs: 0
           Source: "throw"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "onlyActive"
     Source: "modifier onlyActive {\r\n        if (!active) throw;\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if (!active) throw;\r\n        _;\r\n    }"
      IfStatement
         Source: "if (!active) throw"
        UnaryOperation (prefix) !
           Type: bool
           Gas costs: 0
           Source: "!active"
          Identifier active
             Type: bool
             Source: "active"
        Throw
           Gas costs: 0
           Source: "throw"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "Deed" - public
     Source: "function Deed(address _owner) payable {\r\n        owner = _owner;\r\n        registrar = msg.sender;\r\n        creationDate = now;\r\n        active = true;\r\n        value = msg.value;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        owner = _owner;\r\n        registrar = msg.sender;\r\n        creationDate = now;\r\n        active = true;\r\n        value = msg.value;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "owner = _owner"
        Assignment using operator =
           Type: address
           Source: "owner = _owner"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier _owner
             Type: address
             Source: "_owner"
      ExpressionStatement
         Gas costs: 0
         Source: "registrar = msg.sender"
        Assignment using operator =
           Type: address
           Source: "registrar = msg.sender"
          Identifier registrar
             Type: address
             Source: "registrar"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 0
         Source: "creationDate = now"
        Assignment using operator =
           Type: uint256
           Source: "creationDate = now"
          Identifier creationDate
             Type: uint256
             Source: "creationDate"
          Identifier now
             Type: uint256
             Source: "now"
      ExpressionStatement
         Gas costs: 0
         Source: "active = true"
        Assignment using operator =
           Type: bool
           Source: "active = true"
          Identifier active
             Type: bool
             Source: "active"
          Literal, token: true value: true
             Type: bool
             Source: "true"
      ExpressionStatement
         Gas costs: 0
         Source: "value = msg.value"
        Assignment using operator =
           Type: uint256
           Source: "value = msg.value"
          Identifier value
             Type: uint256
             Source: "value"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "setOwner" - public
     Source: "function setOwner(address newOwner) onlyRegistrar {\r\n        if (newOwner == 0) throw;\r\n        previousOwner = owner;  // This allows contracts to check who sent them the ownership\r\n        owner = newOwner;\r\n        OwnerChanged(newOwner);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address newOwner)"
      VariableDeclaration "newOwner"
         Type: address
         Source: "address newOwner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyRegistrar"
       Gas costs: 0
       Source: "onlyRegistrar"
      Identifier onlyRegistrar
         Type: modifier ()
         Source: "onlyRegistrar"
    Block
       Source: "{\r\n        if (newOwner == 0) throw;\r\n        previousOwner = owner;  // This allows contracts to check who sent them the ownership\r\n        owner = newOwner;\r\n        OwnerChanged(newOwner);\r\n    }"
      IfStatement
         Source: "if (newOwner == 0) throw"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 0
           Source: "newOwner == 0"
          Identifier newOwner
             Type: address
             Source: "newOwner"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Throw
           Gas costs: 0
           Source: "throw"
      ExpressionStatement
         Gas costs: 0
         Source: "previousOwner = owner"
        Assignment using operator =
           Type: address
           Source: "previousOwner = owner"
          Identifier previousOwner
             Type: address
             Source: "previousOwner"
          Identifier owner
             Type: address
             Source: "owner"
      ExpressionStatement
         Gas costs: 0
         Source: "owner = newOwner"
        Assignment using operator =
           Type: address
           Source: "owner = newOwner"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier newOwner
             Type: address
             Source: "newOwner"
      ExpressionStatement
         Gas costs: 0
         Source: "OwnerChanged(newOwner)"
        FunctionCall
           Type: tuple()
           Source: "OwnerChanged(newOwner)"
          Identifier OwnerChanged
             Type: function (address)
             Source: "OwnerChanged"
          Identifier newOwner
             Type: address
             Source: "newOwner"
  FunctionDefinition "setRegistrar" - public
     Source: "function setRegistrar(address newRegistrar) onlyRegistrar {\r\n        registrar = newRegistrar;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address newRegistrar)"
      VariableDeclaration "newRegistrar"
         Type: address
         Source: "address newRegistrar"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyRegistrar"
       Gas costs: 0
       Source: "onlyRegistrar"
      Identifier onlyRegistrar
         Type: modifier ()
         Source: "onlyRegistrar"
    Block
       Source: "{\r\n        registrar = newRegistrar;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "registrar = newRegistrar"
        Assignment using operator =
           Type: address
           Source: "registrar = newRegistrar"
          Identifier registrar
             Type: address
             Source: "registrar"
          Identifier newRegistrar
             Type: address
             Source: "newRegistrar"
  FunctionDefinition "setBalance" - public
     Source: "function setBalance(uint newValue, bool throwOnFailure) onlyRegistrar onlyActive {\r\n        // Check if it has enough balance to set the value\r\n        if (value < newValue) throw;\r\n        value = newValue;\r\n        // Send the difference to the owner\r\n        if (!owner.send(this.balance - newValue) && throwOnFailure) throw;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint newValue, bool throwOnFailure)"
      VariableDeclaration "newValue"
         Type: uint256
         Source: "uint newValue"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "throwOnFailure"
         Type: bool
         Source: "bool throwOnFailure"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyRegistrar"
       Gas costs: 0
       Source: "onlyRegistrar"
      Identifier onlyRegistrar
         Type: modifier ()
         Source: "onlyRegistrar"
    ModifierInvocation "onlyActive"
       Gas costs: 0
       Source: "onlyActive"
      Identifier onlyActive
         Type: modifier ()
         Source: "onlyActive"
    Block
       Source: "{\r\n        // Check if it has enough balance to set the value\r\n        if (value < newValue) throw;\r\n        value = newValue;\r\n        // Send the difference to the owner\r\n        if (!owner.send(this.balance - newValue) && throwOnFailure) throw;\r\n    }"
      IfStatement
         Source: "if (value < newValue) throw"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 0
           Source: "value < newValue"
          Identifier value
             Type: uint256
             Source: "value"
          Identifier newValue
             Type: uint256
             Source: "newValue"
        Throw
           Gas costs: 0
           Source: "throw"
      ExpressionStatement
         Gas costs: 0
         Source: "value = newValue"
        Assignment using operator =
           Type: uint256
           Source: "value = newValue"
          Identifier value
             Type: uint256
             Source: "value"
          Identifier newValue
             Type: uint256
             Source: "newValue"
      IfStatement
         Source: "if (!owner.send(this.balance - newValue) && throwOnFailure) throw"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 0
           Source: "!owner.send(this.balance - newValue) && throwOnFailure"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!owner.send(this.balance - newValue)"
            FunctionCall
               Type: bool
               Source: "owner.send(this.balance - newValue)"
              MemberAccess to member send
                 Type: function (uint256) returns (bool)
                 Source: "owner.send"
                Identifier owner
                   Type: address
                   Source: "owner"
              BinaryOperation using operator -
                 Type: uint256
                 Source: "this.balance - newValue"
                MemberAccess to member balance
                   Type: uint256
                   Source: "this.balance"
                  Identifier this
                     Type: contract Deed
                     Source: "this"
                Identifier newValue
                   Type: uint256
                   Source: "newValue"
          Identifier throwOnFailure
             Type: bool
             Source: "throwOnFailure"
        Throw
           Gas costs: 0
           Source: "throw"
  FunctionDefinition "closeDeed" - public
     Source: "function closeDeed(uint refundRatio) onlyRegistrar onlyActive {\r\n        active = false;\r\n        if (! burn.send(((1000 - refundRatio) * this.balance)/1000)) throw;\r\n        DeedClosed();\r\n        destroyDeed();\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint refundRatio)"
      VariableDeclaration "refundRatio"
         Type: uint256
         Source: "uint refundRatio"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyRegistrar"
       Gas costs: 0
       Source: "onlyRegistrar"
      Identifier onlyRegistrar
         Type: modifier ()
         Source: "onlyRegistrar"
    ModifierInvocation "onlyActive"
       Gas costs: 0
       Source: "onlyActive"
      Identifier onlyActive
         Type: modifier ()
         Source: "onlyActive"
    Block
       Source: "{\r\n        active = false;\r\n        if (! burn.send(((1000 - refundRatio) * this.balance)/1000)) throw;\r\n        DeedClosed();\r\n        destroyDeed();\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "active = false"
        Assignment using operator =
           Type: bool
           Source: "active = false"
          Identifier active
             Type: bool
             Source: "active"
          Literal, token: false value: false
             Type: bool
             Source: "false"
      IfStatement
         Source: "if (! burn.send(((1000 - refundRatio) * this.balance)/1000)) throw"
        UnaryOperation (prefix) !
           Type: bool
           Gas costs: 0
           Source: "! burn.send(((1000 - refundRatio) * this.balance)/1000)"
          FunctionCall
             Type: bool
             Source: "burn.send(((1000 - refundRatio) * this.balance)/1000)"
            MemberAccess to member send
               Type: function (uint256) returns (bool)
               Source: "burn.send"
              Identifier burn
                 Type: address
                 Source: "burn"
            BinaryOperation using operator /
               Type: uint256
               Source: "((1000 - refundRatio) * this.balance)/1000"
              TupleExpression
                 Type: uint256
                 Source: "((1000 - refundRatio) * this.balance)"
                BinaryOperation using operator *
                   Type: uint256
                   Source: "(1000 - refundRatio) * this.balance"
                  TupleExpression
                     Type: uint256
                     Source: "(1000 - refundRatio)"
                    BinaryOperation using operator -
                       Type: uint256
                       Source: "1000 - refundRatio"
                      Literal, token: [no token] value: 1000
                         Type: int_const 1000
                         Source: "1000"
                      Identifier refundRatio
                         Type: uint256
                         Source: "refundRatio"
                  MemberAccess to member balance
                     Type: uint256
                     Source: "this.balance"
                    Identifier this
                       Type: contract Deed
                       Source: "this"
              Literal, token: [no token] value: 1000
                 Type: int_const 1000
                 Source: "1000"
        Throw
           Gas costs: 0
           Source: "throw"
      ExpressionStatement
         Gas costs: 0
         Source: "DeedClosed()"
        FunctionCall
           Type: tuple()
           Source: "DeedClosed()"
          Identifier DeedClosed
             Type: function ()
             Source: "DeedClosed"
      ExpressionStatement
         Gas costs: 0
         Source: "destroyDeed()"
        FunctionCall
           Type: tuple()
           Source: "destroyDeed()"
          Identifier destroyDeed
             Type: function ()
             Source: "destroyDeed"
  FunctionDefinition "destroyDeed" - public
     Source: "function destroyDeed() {\r\n        if (active) throw;\r\n        \r\n        // Instead of selfdestruct(owner), invoke owner fallback function to allow\r\n        // owner to log an event if desired; but owner should also be aware that\r\n        // its fallback function can also be invoked by setBalance\r\n        if(owner.send(this.balance)) {\r\n            selfdestruct(burn);\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if (active) throw;\r\n        \r\n        // Instead of selfdestruct(owner), invoke owner fallback function to allow\r\n        // owner to log an event if desired; but owner should also be aware that\r\n        // its fallback function can also be invoked by setBalance\r\n        if(owner.send(this.balance)) {\r\n            selfdestruct(burn);\r\n        }\r\n    }"
      IfStatement
         Source: "if (active) throw"
        Identifier active
           Type: bool
           Gas costs: 0
           Source: "active"
        Throw
           Gas costs: 0
           Source: "throw"
      IfStatement
         Source: "if(owner.send(this.balance)) {\r\n            selfdestruct(burn);\r\n        }"
        FunctionCall
           Type: bool
           Gas costs: 0
           Source: "owner.send(this.balance)"
          MemberAccess to member send
             Type: function (uint256) returns (bool)
             Source: "owner.send"
            Identifier owner
               Type: address
               Source: "owner"
          MemberAccess to member balance
             Type: uint256
             Source: "this.balance"
            Identifier this
               Type: contract Deed
               Source: "this"
        Block
           Source: "{\r\n            selfdestruct(burn);\r\n        }"
          ExpressionStatement
             Gas costs: 0
             Source: "selfdestruct(burn)"
            FunctionCall
               Type: tuple()
               Source: "selfdestruct(burn)"
              Identifier selfdestruct
                 Type: function (address)
                 Source: "selfdestruct"
              Identifier burn
                 Type: address
                 Source: "burn"
ContractDefinition "Registrar"
   Source: "contract Registrar {\r\n    AbstractENS public ens;\r\n    bytes32 public rootNode;\r\n\r\n    mapping (bytes32 => entry) _entries;\r\n    mapping (address => mapping(bytes32 => Deed)) public sealedBids;\r\n    \r\n    enum Mode { Open, Auction, Owned, Forbidden, Reveal, NotYetAvailable }\r\n\r\n    uint32 constant totalAuctionLength = 5 days;\r\n    uint32 constant revealPeriod = 48 hours;\r\n    uint32 public constant launchLength = 8 weeks;\r\n\r\n    uint constant minPrice = 0.01 ether;\r\n    uint public registryStarted;\r\n\r\n    event AuctionStarted(bytes32 indexed hash, uint registrationDate);\r\n    event NewBid(bytes32 indexed hash, address indexed bidder, uint deposit);\r\n    event BidRevealed(bytes32 indexed hash, address indexed owner, uint value, uint8 status);\r\n    event HashRegistered(bytes32 indexed hash, address indexed owner, uint value, uint registrationDate);\r\n    event HashReleased(bytes32 indexed hash, uint value);\r\n    event HashInvalidated(bytes32 indexed hash, string indexed name, uint value, uint registrationDate);\r\n\r\n    struct entry {\r\n        Deed deed;\r\n        uint registrationDate;\r\n        uint value;\r\n        uint highestBid;\r\n    }\r\n\r\n    // State transitions for names:\r\n    //   Open -> Auction (startAuction)\r\n    //   Auction -> Reveal\r\n    //   Reveal -> Owned\r\n    //   Reveal -> Open (if nobody bid)\r\n    //   Owned -> Open (releaseDeed or invalidateName)\r\n    function state(bytes32 _hash) constant returns (Mode) {\r\n        var entry = _entries[_hash];\r\n        \r\n        if(!isAllowed(_hash, now)) {\r\n            return Mode.NotYetAvailable;\r\n        } else if(now < entry.registrationDate) {\r\n            if (now < entry.registrationDate - revealPeriod) {\r\n                return Mode.Auction;\r\n            } else {\r\n                return Mode.Reveal;\r\n            }\r\n        } else {\r\n            if(entry.highestBid == 0) {\r\n                return Mode.Open;\r\n            } else {\r\n                return Mode.Owned;\r\n            }\r\n        }\r\n    }\r\n\r\n    modifier inState(bytes32 _hash, Mode _state) {\r\n        if(state(_hash) != _state) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner(bytes32 _hash) {\r\n        if (state(_hash) != Mode.Owned || msg.sender != _entries[_hash].deed.owner()) throw;\r\n        _;\r\n    }\r\n\r\n    modifier registryOpen() {\r\n        if(now < registryStarted  || now > registryStarted + 4 years || ens.owner(rootNode) != address(this)) throw;\r\n        _;\r\n    }\r\n\r\n    function entries(bytes32 _hash) constant returns (Mode, address, uint, uint, uint) {\r\n        entry h = _entries[_hash];\r\n        return (state(_hash), h.deed, h.registrationDate, h.value, h.highestBid);\r\n    }\r\n\r\n    /**\r\n     * @dev Constructs a new Registrar, with the provided address as the owner of the root node.\r\n     * @param _ens The address of the ENS\r\n     * @param _rootNode The hash of the rootnode.\r\n     */\r\n    function Registrar(AbstractENS _ens, bytes32 _rootNode, uint _startDate) {\r\n        ens = _ens;\r\n        rootNode = _rootNode;\r\n        registryStarted = _startDate > 0 ? _startDate : now;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the maximum of two unsigned integers\r\n     * @param a A number to compare\r\n     * @param b A number to compare\r\n     * @return The maximum of two unsigned integers\r\n     */\r\n    function max(uint a, uint b) internal constant returns (uint max) {\r\n        if (a > b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the minimum of two unsigned integers\r\n     * @param a A number to compare\r\n     * @param b A number to compare\r\n     * @return The minimum of two unsigned integers\r\n     */\r\n    function min(uint a, uint b) internal constant returns (uint min) {\r\n        if (a < b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the length of a given string\r\n     * @param s The string to measure the length of\r\n     * @return The length of the input string\r\n     */\r\n    function strlen(string s) internal constant returns (uint) {\r\n        // Starting here means the LSB will be the byte we care about\r\n        uint ptr;\r\n        uint end;\r\n        assembly {\r\n            ptr := add(s, 1)\r\n            end := add(mload(s), ptr)\r\n        }\r\n        for (uint len = 0; ptr < end; len++) {\r\n            uint8 b;\r\n            assembly { b := and(mload(ptr), 0xFF) }\r\n            if (b < 0x80) {\r\n                ptr += 1;\r\n            } else if(b < 0xE0) {\r\n                ptr += 2;\r\n            } else if(b < 0xF0) {\r\n                ptr += 3;\r\n            } else if(b < 0xF8) {\r\n                ptr += 4;\r\n            } else if(b < 0xFC) {\r\n                ptr += 5;\r\n            } else {\r\n                ptr += 6;\r\n            }\r\n        }\r\n        return len;\r\n    }\r\n    \r\n    /** \r\n     * @dev Determines if a name is available for registration yet\r\n     * \r\n     * Each name will be assigned a random date in which its auction \r\n     * can be started, from 0 to 13 weeks\r\n     * \r\n     * @param _hash The hash to start an auction on\r\n     * @param _timestamp The timestamp to query about\r\n     */\r\n     \r\n    function isAllowed(bytes32 _hash, uint _timestamp) constant returns (bool allowed){\r\n        return _timestamp > getAllowedTime(_hash);\r\n    }\r\n\r\n    /** \r\n     * @dev Returns available date for hash\r\n     * \r\n     * @param _hash The hash to start an auction on\r\n     */\r\n    function getAllowedTime(bytes32 _hash) constant returns (uint timestamp) {\r\n        return registryStarted + (launchLength*(uint(_hash)>>128)>>128);\r\n        // right shift operator: a >> b == a / 2**b\r\n    }\r\n    /**\r\n     * @dev Assign the owner in ENS, if we're still the registrar\r\n     * @param _hash hash to change owner\r\n     * @param _newOwner new owner to transfer to\r\n     */\r\n    function trySetSubnodeOwner(bytes32 _hash, address _newOwner) internal {\r\n        if(ens.owner(rootNode) == address(this))\r\n            ens.setSubnodeOwner(rootNode, _hash, _newOwner);        \r\n    }\r\n\r\n    /**\r\n     * @dev Start an auction for an available hash\r\n     *\r\n     * Anyone can start an auction by sending an array of hashes that they want to bid for.\r\n     * Arrays are sent so that someone can open up an auction for X dummy hashes when they\r\n     * are only really interested in bidding for one. This will increase the cost for an\r\n     * attacker to simply bid blindly on all new auctions. Dummy auctions that are\r\n     * open but not bid on are closed after a week.\r\n     *\r\n     * @param _hash The hash to start an auction on\r\n     */\r\n    function startAuction(bytes32 _hash) registryOpen() {\r\n        var mode = state(_hash);\r\n        if(mode == Mode.Auction) return;\r\n        if(mode != Mode.Open) throw;\r\n\r\n        entry newAuction = _entries[_hash];\r\n        newAuction.registrationDate = now + totalAuctionLength;\r\n        newAuction.value = 0;\r\n        newAuction.highestBid = 0;\r\n        AuctionStarted(_hash, newAuction.registrationDate);\r\n    }\r\n\r\n    /**\r\n     * @dev Start multiple auctions for better anonymity\r\n     * @param _hashes An array of hashes, at least one of which you presumably want to bid on\r\n     */\r\n    function startAuctions(bytes32[] _hashes)  {\r\n        for (uint i = 0; i < _hashes.length; i ++ ) {\r\n            startAuction(_hashes[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hash the values required for a secret bid\r\n     * @param hash The node corresponding to the desired namehash\r\n     * @param value The bid amount\r\n     * @param salt A random value to ensure secrecy of the bid\r\n     * @return The hash of the bid values\r\n     */\r\n    function shaBid(bytes32 hash, address owner, uint value, bytes32 salt) constant returns (bytes32 sealedBid) {\r\n        return sha3(hash, owner, value, salt);\r\n    }\r\n\r\n    /**\r\n     * @dev Submit a new sealed bid on a desired hash in a blind auction\r\n     *\r\n     * Bids are sent by sending a message to the main contract with a hash and an amount. The hash\r\n     * contains information about the bid, including the bidded hash, the bid amount, and a random\r\n     * salt. Bids are not tied to any one auction until they are revealed. The value of the bid\r\n     * itself can be masqueraded by sending more than the value of your actual bid. This is\r\n     * followed by a 48h reveal period. Bids revealed after this period will be burned and the ether unrecoverable.\r\n     * Since this is an auction, it is expected that most public hashes, like known domains and common dictionary\r\n     * words, will have multiple bidders pushing the price up.\r\n     *\r\n     * @param sealedBid A sealedBid, created by the shaBid function\r\n     */\r\n    function newBid(bytes32 sealedBid) payable {\r\n        if (address(sealedBids[msg.sender][sealedBid]) > 0 ) throw;\r\n        if (msg.value < minPrice) throw;\r\n        // creates a new hash contract with the owner\r\n        Deed newBid = (new Deed).value(msg.value)(msg.sender);\r\n        sealedBids[msg.sender][sealedBid] = newBid;\r\n        NewBid(sealedBid, msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Start a set of auctions and bid on one of them\r\n     *\r\n     * This method functions identically to calling `startAuctions` followed by `newBid`,\r\n     * but all in one transaction.\r\n     * @param hashes A list of hashes to start auctions on.\r\n     * @param sealedBid A sealed bid for one of the auctions.\r\n     */\r\n    function startAuctionsAndBid(bytes32[] hashes, bytes32 sealedBid) payable {\r\n        startAuctions(hashes);\r\n        newBid(sealedBid);\r\n    }\r\n\r\n    /**\r\n     * @dev Submit the properties of a bid to reveal them\r\n     * @param _hash The node in the sealedBid\r\n     * @param _value The bid amount in the sealedBid\r\n     * @param _salt The sale in the sealedBid\r\n     */\r\n    function unsealBid(bytes32 _hash, uint _value, bytes32 _salt) {\r\n        bytes32 seal = shaBid(_hash, msg.sender, _value, _salt);\r\n        Deed bid = sealedBids[msg.sender][seal];\r\n        if (address(bid) == 0 ) throw;\r\n        sealedBids[msg.sender][seal] = Deed(0);\r\n        entry h = _entries[_hash];\r\n        uint value = min(_value, bid.value());\r\n        bid.setBalance(value, true);\r\n\r\n        var auctionState = state(_hash);\r\n        if(auctionState == Mode.Owned) {\r\n            // Too late! Bidder loses their bid. Get's 0.5% back.\r\n            bid.closeDeed(5);\r\n            BidRevealed(_hash, msg.sender, value, 1);\r\n        } else if(auctionState != Mode.Reveal) {\r\n            // Invalid phase\r\n            throw;\r\n        } else if (value < minPrice || bid.creationDate() > h.registrationDate - revealPeriod) {\r\n            // Bid too low or too late, refund 99.5%\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 0);\r\n        } else if (value > h.highestBid) {\r\n            // new winner\r\n            // cancel the other bid, refund 99.5%\r\n            if(address(h.deed) != 0) {\r\n                Deed previousWinner = h.deed;\r\n                previousWinner.closeDeed(995);\r\n            }\r\n\r\n            // set new winner\r\n            // per the rules of a vickery auction, the value becomes the previous highestBid\r\n            h.value = h.highestBid;  // will be zero if there's only 1 bidder\r\n            h.highestBid = value;\r\n            h.deed = bid;\r\n            BidRevealed(_hash, msg.sender, value, 2);\r\n        } else if (value > h.value) {\r\n            // not winner, but affects second place\r\n            h.value = value;\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 3);\r\n        } else {\r\n            // bid doesn't affect auction\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 4);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel a bid\r\n     * @param seal The value returned by the shaBid function\r\n     */\r\n    function cancelBid(address bidder, bytes32 seal) {\r\n        Deed bid = sealedBids[bidder][seal];\r\n        \r\n        // If a sole bidder does not `unsealBid` in time, they have a few more days\r\n        // where they can call `startAuction` (again) and then `unsealBid` during\r\n        // the revealPeriod to get back their bid value.\r\n        // For simplicity, they should call `startAuction` within\r\n        // 9 days (2 weeks - totalAuctionLength), otherwise their bid will be\r\n        // cancellable by anyone.\r\n        if (address(bid) == 0\r\n            || now < bid.creationDate() + totalAuctionLength + 2 weeks) throw;\r\n\r\n        // Send the canceller 0.5% of the bid, and burn the rest.\r\n        bid.setOwner(msg.sender);\r\n        bid.closeDeed(5);\r\n        sealedBids[bidder][seal] = Deed(0);\r\n        BidRevealed(seal, bidder, 0, 5);\r\n    }\r\n\r\n    /**\r\n     * @dev Finalize an auction after the registration date has passed\r\n     * @param _hash The hash of the name the auction is for\r\n     */\r\n    function finalizeAuction(bytes32 _hash) onlyOwner(_hash) {\r\n        entry h = _entries[_hash];\r\n        \r\n        // handles the case when there's only a single bidder (h.value is zero)\r\n        h.value =  max(h.value, minPrice);\r\n        h.deed.setBalance(h.value, true);\r\n\r\n        trySetSubnodeOwner(_hash, h.deed.owner());\r\n        HashRegistered(_hash, h.deed.owner(), h.value, h.registrationDate);\r\n    }\r\n\r\n    /**\r\n     * @dev The owner of a domain may transfer it to someone else at any time.\r\n     * @param _hash The node to transfer\r\n     * @param newOwner The address to transfer ownership to\r\n     */\r\n    function transfer(bytes32 _hash, address newOwner) onlyOwner(_hash) {\r\n        if (newOwner == 0) throw;\r\n\r\n        entry h = _entries[_hash];\r\n        h.deed.setOwner(newOwner);\r\n        trySetSubnodeOwner(_hash, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev After some time, or if we're no longer the registrar, the owner can release\r\n     *      the name and get their ether back.\r\n     * @param _hash The node to release\r\n     */\r\n    function releaseDeed(bytes32 _hash) onlyOwner(_hash) {\r\n        entry h = _entries[_hash];\r\n        Deed deedContract = h.deed;\r\n        if(now < h.registrationDate + 1 years && ens.owner(rootNode) == address(this)) throw;\r\n\r\n        h.value = 0;\r\n        h.highestBid = 0;\r\n        h.deed = Deed(0);\r\n\r\n        _tryEraseSingleNode(_hash);\r\n        deedContract.closeDeed(1000);\r\n        HashReleased(_hash, h.value);        \r\n    }\r\n\r\n    /**\r\n     * @dev Submit a name 6 characters long or less. If it has been registered,\r\n     * the submitter will earn 50% of the deed value. We are purposefully\r\n     * handicapping the simplified registrar as a way to force it into being restructured\r\n     * in a few years.\r\n     * @param unhashedName An invalid name to search for in the registry.\r\n     *\r\n     */\r\n    function invalidateName(string unhashedName) inState(sha3(unhashedName), Mode.Owned) {\r\n        if (strlen(unhashedName) > 6 ) throw;\r\n        bytes32 hash = sha3(unhashedName);\r\n\r\n        entry h = _entries[hash];\r\n\r\n        _tryEraseSingleNode(hash);\r\n\r\n        if(address(h.deed) != 0) {\r\n            // Reward the discoverer with 50% of the deed\r\n            // The previous owner gets 50%\r\n            h.value = max(h.value, minPrice);\r\n            h.deed.setBalance(h.value/2, false);\r\n            h.deed.setOwner(msg.sender);\r\n            h.deed.closeDeed(1000);\r\n        }\r\n\r\n        HashInvalidated(hash, unhashedName, h.value, h.registrationDate);\r\n\r\n        h.value = 0;\r\n        h.highestBid = 0;\r\n        h.deed = Deed(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows anyone to delete the owner and resolver records for a (subdomain of) a\r\n     *      name that is not currently owned in the registrar. If passing, eg, 'foo.bar.eth',\r\n     *      the owner and resolver fields on 'foo.bar.eth' and 'bar.eth' will all be cleared.\r\n     * @param labels A series of label hashes identifying the name to zero out, rooted at the\r\n     *        registrar's root. Must contain at least one element. For instance, to zero \r\n     *        'foo.bar.eth' on a registrar that owns '.eth', pass an array containing\r\n     *        [sha3('foo'), sha3('bar')].\r\n     */\r\n    function eraseNode(bytes32[] labels) {\r\n        if(labels.length == 0) throw;\r\n        if(state(labels[labels.length - 1]) == Mode.Owned) throw;\r\n\r\n        _eraseNodeHierarchy(labels.length - 1, labels, rootNode);\r\n    }\r\n\r\n    function _tryEraseSingleNode(bytes32 label) internal {\r\n        if(ens.owner(rootNode) == address(this)) {\r\n            ens.setSubnodeOwner(rootNode, label, address(this));\r\n            var node = sha3(rootNode, label);\r\n            ens.setResolver(node, 0);\r\n            ens.setOwner(node, 0);\r\n        }\r\n    }\r\n\r\n    function _eraseNodeHierarchy(uint idx, bytes32[] labels, bytes32 node) internal {\r\n        // Take ownership of the node\r\n        ens.setSubnodeOwner(node, labels[idx], address(this));\r\n        node = sha3(node, labels[idx]);\r\n        \r\n        // Recurse if there's more labels\r\n        if(idx > 0)\r\n            _eraseNodeHierarchy(idx - 1, labels, node);\r\n\r\n        // Erase the resolver and owner records\r\n        ens.setResolver(node, 0);\r\n        ens.setOwner(node, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the deed to the current registrar, if different from this one.\r\n     * Used during the upgrade process to a permanent registrar.\r\n     * @param _hash The name hash to transfer.\r\n     */\r\n    function transferRegistrars(bytes32 _hash) onlyOwner(_hash) {\r\n        var registrar = ens.owner(rootNode);\r\n        if(registrar == address(this))\r\n            throw;\r\n\r\n        // Migrate the deed\r\n        entry h = _entries[_hash];\r\n        h.deed.setRegistrar(registrar);\r\n\r\n        // Call the new registrar to accept the transfer\r\n        Registrar(registrar).acceptRegistrarTransfer(_hash, h.deed, h.registrationDate);\r\n\r\n        // Zero out the entry\r\n        h.deed = Deed(0);\r\n        h.registrationDate = 0;\r\n        h.value = 0;\r\n        h.highestBid = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Accepts a transfer from a previous registrar; stubbed out here since there\r\n     *      is no previous registrar implementing this interface.\r\n     * @param hash The sha3 hash of the label to transfer.\r\n     * @param deed The Deed object for the name being transferred in.\r\n     * @param registrationDate The date at which the name was originally registered.\r\n     */\r\n    function acceptRegistrarTransfer(bytes32 hash, Deed deed, uint registrationDate) {}\r\n\r\n}"
  VariableDeclaration "ens"
     Type: contract AbstractENS
     Gas costs: [???]
     Source: "AbstractENS public ens"
    UserDefinedTypeName "AbstractENS"
       Source: "AbstractENS"
  VariableDeclaration "rootNode"
     Type: bytes32
     Gas costs: [???]
     Source: "bytes32 public rootNode"
    ElementaryTypeName bytes32
       Source: "bytes32"
  VariableDeclaration "_entries"
     Type: mapping(bytes32 => struct Registrar.entry storage ref)
     Gas costs: 0
     Source: "mapping (bytes32 => entry) _entries"
    Mapping
       Source: "mapping (bytes32 => entry)"
      ElementaryTypeName bytes32
         Source: "bytes32"
      UserDefinedTypeName "entry"
         Source: "entry"
  VariableDeclaration "sealedBids"
     Type: mapping(address => mapping(bytes32 => contract Deed))
     Gas costs: [???]
     Source: "mapping (address => mapping(bytes32 => Deed)) public sealedBids"
    Mapping
       Source: "mapping (address => mapping(bytes32 => Deed))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping(bytes32 => Deed)"
        ElementaryTypeName bytes32
           Source: "bytes32"
        UserDefinedTypeName "Deed"
           Source: "Deed"
  EnumDefinition "Mode"
    EnumValue "Open"
    EnumValue "Auction"
    EnumValue "Owned"
    EnumValue "Forbidden"
    EnumValue "Reveal"
    EnumValue "NotYetAvailable"
  VariableDeclaration "totalAuctionLength"
     Type: uint32
     Gas costs: 6
     Source: "uint32 constant totalAuctionLength = 5 days"
    ElementaryTypeName uint32
       Source: "uint32"
    Literal, token: [no token] value: 5
       Type: int_const 432000
       Source: "5 days"
  VariableDeclaration "revealPeriod"
     Type: uint32
     Gas costs: 6
     Source: "uint32 constant revealPeriod = 48 hours"
    ElementaryTypeName uint32
       Source: "uint32"
    Literal, token: [no token] value: 48
       Type: int_const 172800
       Source: "48 hours"
  VariableDeclaration "launchLength"
     Type: uint32
     Gas costs: [???]
     Source: "uint32 public constant launchLength = 8 weeks"
    ElementaryTypeName uint32
       Source: "uint32"
    Literal, token: [no token] value: 8
       Type: int_const 4838400
       Source: "8 weeks"
  VariableDeclaration "minPrice"
     Type: uint256
     Gas costs: 12
     Source: "uint constant minPrice = 0.01 ether"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 0.01
       Type: int_const 10000000000000000
       Source: "0.01 ether"
  VariableDeclaration "registryStarted"
     Type: uint256
     Gas costs: [???]
     Source: "uint public registryStarted"
    ElementaryTypeName uint
       Source: "uint"
  EventDefinition "AuctionStarted"
     Gas costs: 0
     Source: "event AuctionStarted(bytes32 indexed hash, uint registrationDate);"
    ParameterList
       Source: "(bytes32 indexed hash, uint registrationDate)"
      VariableDeclaration "hash"
         Type: bytes32
         Source: "bytes32 indexed hash"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "registrationDate"
         Type: uint256
         Source: "uint registrationDate"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "NewBid"
     Gas costs: 0
     Source: "event NewBid(bytes32 indexed hash, address indexed bidder, uint deposit);"
    ParameterList
       Source: "(bytes32 indexed hash, address indexed bidder, uint deposit)"
      VariableDeclaration "hash"
         Type: bytes32
         Source: "bytes32 indexed hash"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "bidder"
         Type: address
         Source: "address indexed bidder"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "deposit"
         Type: uint256
         Source: "uint deposit"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "BidRevealed"
     Gas costs: 0
     Source: "event BidRevealed(bytes32 indexed hash, address indexed owner, uint value, uint8 status);"
    ParameterList
       Source: "(bytes32 indexed hash, address indexed owner, uint value, uint8 status)"
      VariableDeclaration "hash"
         Type: bytes32
         Source: "bytes32 indexed hash"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "owner"
         Type: address
         Source: "address indexed owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "status"
         Type: uint8
         Source: "uint8 status"
        ElementaryTypeName uint8
           Source: "uint8"
  EventDefinition "HashRegistered"
     Gas costs: 0
     Source: "event HashRegistered(bytes32 indexed hash, address indexed owner, uint value, uint registrationDate);"
    ParameterList
       Source: "(bytes32 indexed hash, address indexed owner, uint value, uint registrationDate)"
      VariableDeclaration "hash"
         Type: bytes32
         Source: "bytes32 indexed hash"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "owner"
         Type: address
         Source: "address indexed owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "registrationDate"
         Type: uint256
         Source: "uint registrationDate"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "HashReleased"
     Gas costs: 0
     Source: "event HashReleased(bytes32 indexed hash, uint value);"
    ParameterList
       Source: "(bytes32 indexed hash, uint value)"
      VariableDeclaration "hash"
         Type: bytes32
         Source: "bytes32 indexed hash"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "HashInvalidated"
     Gas costs: 0
     Source: "event HashInvalidated(bytes32 indexed hash, string indexed name, uint value, uint registrationDate);"
    ParameterList
       Source: "(bytes32 indexed hash, string indexed name, uint value, uint registrationDate)"
      VariableDeclaration "hash"
         Type: bytes32
         Source: "bytes32 indexed hash"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "name"
         Type: string memory
         Source: "string indexed name"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "registrationDate"
         Type: uint256
         Source: "uint registrationDate"
        ElementaryTypeName uint
           Source: "uint"
  StructDefinition "entry"
     Gas costs: 0
     Source: "struct entry {\r\n        Deed deed;\r\n        uint registrationDate;\r\n        uint value;\r\n        uint highestBid;\r\n    }"
    VariableDeclaration "deed"
       Type: contract Deed
       Source: "Deed deed"
      UserDefinedTypeName "Deed"
         Source: "Deed"
    VariableDeclaration "registrationDate"
       Type: uint256
       Source: "uint registrationDate"
      ElementaryTypeName uint
         Source: "uint"
    VariableDeclaration "value"
       Type: uint256
       Source: "uint value"
      ElementaryTypeName uint
         Source: "uint"
    VariableDeclaration "highestBid"
       Type: uint256
       Source: "uint highestBid"
      ElementaryTypeName uint
         Source: "uint"
  FunctionDefinition "state" - public - const
     Source: "function state(bytes32 _hash) constant returns (Mode) {\r\n        var entry = _entries[_hash];\r\n        \r\n        if(!isAllowed(_hash, now)) {\r\n            return Mode.NotYetAvailable;\r\n        } else if(now < entry.registrationDate) {\r\n            if (now < entry.registrationDate - revealPeriod) {\r\n                return Mode.Auction;\r\n            } else {\r\n                return Mode.Reveal;\r\n            }\r\n        } else {\r\n            if(entry.highestBid == 0) {\r\n                return Mode.Open;\r\n            } else {\r\n                return Mode.Owned;\r\n            }\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32 _hash)"
      VariableDeclaration "_hash"
         Type: bytes32
         Source: "bytes32 _hash"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Gas costs: 3
       Source: "(Mode)"
      VariableDeclaration ""
         Type: enum Registrar.Mode
         Source: "Mode"
        UserDefinedTypeName "Mode"
           Source: "Mode"
    Block
       Source: "{\r\n        var entry = _entries[_hash];\r\n        \r\n        if(!isAllowed(_hash, now)) {\r\n            return Mode.NotYetAvailable;\r\n        } else if(now < entry.registrationDate) {\r\n            if (now < entry.registrationDate - revealPeriod) {\r\n                return Mode.Auction;\r\n            } else {\r\n                return Mode.Reveal;\r\n            }\r\n        } else {\r\n            if(entry.highestBid == 0) {\r\n                return Mode.Open;\r\n            } else {\r\n                return Mode.Owned;\r\n            }\r\n        }\r\n    }"
      VariableDeclarationStatement
         Gas costs: 113
         Source: "var entry = _entries[_hash]"
        VariableDeclaration "entry"
           Type: struct Registrar.entry storage pointer
           Source: "var entry"
        IndexAccess
           Type: struct Registrar.entry storage ref
           Source: "_entries[_hash]"
          Identifier _entries
             Type: mapping(bytes32 => struct Registrar.entry storage ref)
             Source: "_entries"
          Identifier _hash
             Type: bytes32
             Source: "_hash"
      IfStatement
         Source: "if(!isAllowed(_hash, now)) {\r\n            return Mode.NotYetAvailable;\r\n        } else if(now < entry.registrationDate) {\r\n            if (now < entry.registrationDate - revealPeriod) {\r\n                return Mode.Auction;\r\n            } else {\r\n                return Mode.Reveal;\r\n            }\r\n        } else {\r\n            if(entry.highestBid == 0) {\r\n                return Mode.Open;\r\n            } else {\r\n                return Mode.Owned;\r\n            }\r\n        }"
        UnaryOperation (prefix) !
           Type: bool
           Gas costs: 12
           Source: "!isAllowed(_hash, now)"
          FunctionCall
             Type: bool
             Source: "isAllowed(_hash, now)"
            Identifier isAllowed
               Type: function (bytes32,uint256) view returns (bool)
               Source: "isAllowed"
            Identifier _hash
               Type: bytes32
               Source: "_hash"
            Identifier now
               Type: uint256
               Source: "now"
        Block
           Source: "{\r\n            return Mode.NotYetAvailable;\r\n        }"
          Return
             Gas costs: 19
             Source: "return Mode.NotYetAvailable"
            MemberAccess to member NotYetAvailable
               Type: enum Registrar.Mode
               Source: "Mode.NotYetAvailable"
              Identifier Mode
                 Type: type(enum Registrar.Mode)
                 Source: "Mode"
        IfStatement
           Source: "if(now < entry.registrationDate) {\r\n            if (now < entry.registrationDate - revealPeriod) {\r\n                return Mode.Auction;\r\n            } else {\r\n                return Mode.Reveal;\r\n            }\r\n        } else {\r\n            if(entry.highestBid == 0) {\r\n                return Mode.Open;\r\n            } else {\r\n                return Mode.Owned;\r\n            }\r\n        }"
          BinaryOperation using operator <
             Type: bool
             Gas costs: 214
             Source: "now < entry.registrationDate"
            Identifier now
               Type: uint256
               Source: "now"
            MemberAccess to member registrationDate
               Type: uint256
               Source: "entry.registrationDate"
              Identifier entry
                 Type: struct Registrar.entry storage pointer
                 Source: "entry"
          Block
             Source: "{\r\n            if (now < entry.registrationDate - revealPeriod) {\r\n                return Mode.Auction;\r\n            } else {\r\n                return Mode.Reveal;\r\n            }\r\n        }"
            IfStatement
               Source: "if (now < entry.registrationDate - revealPeriod) {\r\n                return Mode.Auction;\r\n            } else {\r\n                return Mode.Reveal;\r\n            }"
              BinaryOperation using operator <
                 Type: bool
                 Gas costs: 223
                 Source: "now < entry.registrationDate - revealPeriod"
                Identifier now
                   Type: uint256
                   Source: "now"
                BinaryOperation using operator -
                   Type: uint256
                   Source: "entry.registrationDate - revealPeriod"
                  MemberAccess to member registrationDate
                     Type: uint256
                     Source: "entry.registrationDate"
                    Identifier entry
                       Type: struct Registrar.entry storage pointer
                       Source: "entry"
                  Identifier revealPeriod
                     Type: uint32
                     Source: "revealPeriod"
              Block
                 Source: "{\r\n                return Mode.Auction;\r\n            }"
                Return
                   Gas costs: 19
                   Source: "return Mode.Auction"
                  MemberAccess to member Auction
                     Type: enum Registrar.Mode
                     Source: "Mode.Auction"
                    Identifier Mode
                       Type: type(enum Registrar.Mode)
                       Source: "Mode"
              Block
                 Source: "{\r\n                return Mode.Reveal;\r\n            }"
                Return
                   Gas costs: 19
                   Source: "return Mode.Reveal"
                  MemberAccess to member Reveal
                     Type: enum Registrar.Mode
                     Source: "Mode.Reveal"
                    Identifier Mode
                       Type: type(enum Registrar.Mode)
                       Source: "Mode"
          Block
             Source: "{\r\n            if(entry.highestBid == 0) {\r\n                return Mode.Open;\r\n            } else {\r\n                return Mode.Owned;\r\n            }\r\n        }"
            IfStatement
               Source: "if(entry.highestBid == 0) {\r\n                return Mode.Open;\r\n            } else {\r\n                return Mode.Owned;\r\n            }"
              BinaryOperation using operator ==
                 Type: bool
                 Gas costs: 215
                 Source: "entry.highestBid == 0"
                MemberAccess to member highestBid
                   Type: uint256
                   Source: "entry.highestBid"
                  Identifier entry
                     Type: struct Registrar.entry storage pointer
                     Source: "entry"
                Literal, token: [no token] value: 0
                   Type: int_const 0
                   Source: "0"
              Block
                 Source: "{\r\n                return Mode.Open;\r\n            }"
                Return
                   Gas costs: 19
                   Source: "return Mode.Open"
                  MemberAccess to member Open
                     Type: enum Registrar.Mode
                     Source: "Mode.Open"
                    Identifier Mode
                       Type: type(enum Registrar.Mode)
                       Source: "Mode"
              Block
                 Source: "{\r\n                return Mode.Owned;\r\n            }"
                Return
                   Gas costs: 8
                   Source: "return Mode.Owned"
                  MemberAccess to member Owned
                     Type: enum Registrar.Mode
                     Source: "Mode.Owned"
                    Identifier Mode
                       Type: type(enum Registrar.Mode)
                       Source: "Mode"
  ModifierDefinition "inState"
     Source: "modifier inState(bytes32 _hash, Mode _state) {\r\n        if(state(_hash) != _state) throw;\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32 _hash, Mode _state)"
      VariableDeclaration "_hash"
         Type: bytes32
         Source: "bytes32 _hash"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "_state"
         Type: enum Registrar.Mode
         Source: "Mode _state"
        UserDefinedTypeName "Mode"
           Source: "Mode"
    Block
       Source: "{\r\n        if(state(_hash) != _state) throw;\r\n        _;\r\n    }"
      IfStatement
         Source: "if(state(_hash) != _state) throw"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 79
           Source: "state(_hash) != _state"
          FunctionCall
             Type: enum Registrar.Mode
             Source: "state(_hash)"
            Identifier state
               Type: function (bytes32) view returns (enum Registrar.Mode)
               Source: "state"
            Identifier _hash
               Type: bytes32
               Source: "_hash"
          Identifier _state
             Type: enum Registrar.Mode
             Source: "_state"
        Throw
           Gas costs: 6
           Source: "throw"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "onlyOwner"
     Source: "modifier onlyOwner(bytes32 _hash) {\r\n        if (state(_hash) != Mode.Owned || msg.sender != _entries[_hash].deed.owner()) throw;\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32 _hash)"
      VariableDeclaration "_hash"
         Type: bytes32
         Source: "bytes32 _hash"
        ElementaryTypeName bytes32
           Source: "bytes32"
    Block
       Source: "{\r\n        if (state(_hash) != Mode.Owned || msg.sender != _entries[_hash].deed.owner()) throw;\r\n        _;\r\n    }"
      IfStatement
         Source: "if (state(_hash) != Mode.Owned || msg.sender != _entries[_hash].deed.owner()) throw"
        BinaryOperation using operator ||
           Type: bool
           Gas costs: [???]
           Source: "state(_hash) != Mode.Owned || msg.sender != _entries[_hash].deed.owner()"
          BinaryOperation using operator !=
             Type: bool
             Source: "state(_hash) != Mode.Owned"
            FunctionCall
               Type: enum Registrar.Mode
               Source: "state(_hash)"
              Identifier state
                 Type: function (bytes32) view returns (enum Registrar.Mode)
                 Source: "state"
              Identifier _hash
                 Type: bytes32
                 Source: "_hash"
            MemberAccess to member Owned
               Type: enum Registrar.Mode
               Source: "Mode.Owned"
              Identifier Mode
                 Type: type(enum Registrar.Mode)
                 Source: "Mode"
          BinaryOperation using operator !=
             Type: bool
             Source: "msg.sender != _entries[_hash].deed.owner()"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            FunctionCall
               Type: address
               Source: "_entries[_hash].deed.owner()"
              MemberAccess to member owner
                 Type: function () view external returns (address)
                 Source: "_entries[_hash].deed.owner"
                MemberAccess to member deed
                   Type: contract Deed
                   Source: "_entries[_hash].deed"
                  IndexAccess
                     Type: struct Registrar.entry storage ref
                     Source: "_entries[_hash]"
                    Identifier _entries
                       Type: mapping(bytes32 => struct Registrar.entry storage ref)
                       Source: "_entries"
                    Identifier _hash
                       Type: bytes32
                       Source: "_hash"
        Throw
           Gas costs: 24
           Source: "throw"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "registryOpen"
     Source: "modifier registryOpen() {\r\n        if(now < registryStarted  || now > registryStarted + 4 years || ens.owner(rootNode) != address(this)) throw;\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n        if(now < registryStarted  || now > registryStarted + 4 years || ens.owner(rootNode) != address(this)) throw;\r\n        _;\r\n    }"
      IfStatement
         Source: "if(now < registryStarted  || now > registryStarted + 4 years || ens.owner(rootNode) != address(this)) throw"
        BinaryOperation using operator ||
           Type: bool
           Gas costs: [???]
           Source: "now < registryStarted  || now > registryStarted + 4 years || ens.owner(rootNode) != address(this)"
          BinaryOperation using operator ||
             Type: bool
             Source: "now < registryStarted  || now > registryStarted + 4 years"
            BinaryOperation using operator <
               Type: bool
               Source: "now < registryStarted"
              Identifier now
                 Type: uint256
                 Source: "now"
              Identifier registryStarted
                 Type: uint256
                 Source: "registryStarted"
            BinaryOperation using operator >
               Type: bool
               Source: "now > registryStarted + 4 years"
              Identifier now
                 Type: uint256
                 Source: "now"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "registryStarted + 4 years"
                Identifier registryStarted
                   Type: uint256
                   Source: "registryStarted"
                Literal, token: [no token] value: 4
                   Type: int_const 126144000
                   Source: "4 years"
          BinaryOperation using operator !=
             Type: bool
             Source: "ens.owner(rootNode) != address(this)"
            FunctionCall
               Type: address
               Source: "ens.owner(rootNode)"
              MemberAccess to member owner
                 Type: function (bytes32) view external returns (address)
                 Source: "ens.owner"
                Identifier ens
                   Type: contract AbstractENS
                   Source: "ens"
              Identifier rootNode
                 Type: bytes32
                 Source: "rootNode"
            FunctionCall
               Type: address
               Source: "address(this)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Identifier this
                 Type: contract Registrar
                 Source: "this"
        Throw
           Gas costs: 6
           Source: "throw"
      PlaceholderStatement
         Gas costs: 1
         Source: "_"
  FunctionDefinition "entries" - public - const
     Source: "function entries(bytes32 _hash) constant returns (Mode, address, uint, uint, uint) {\r\n        entry h = _entries[_hash];\r\n        return (state(_hash), h.deed, h.registrationDate, h.value, h.highestBid);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32 _hash)"
      VariableDeclaration "_hash"
         Type: bytes32
         Source: "bytes32 _hash"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Gas costs: 15
       Source: "(Mode, address, uint, uint, uint)"
      VariableDeclaration ""
         Type: enum Registrar.Mode
         Source: "Mode"
        UserDefinedTypeName "Mode"
           Source: "Mode"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        entry h = _entries[_hash];\r\n        return (state(_hash), h.deed, h.registrationDate, h.value, h.highestBid);\r\n    }"
      VariableDeclarationStatement
         Gas costs: 113
         Source: "entry h = _entries[_hash]"
        VariableDeclaration "h"
           Type: struct Registrar.entry storage pointer
           Source: "entry h"
          UserDefinedTypeName "entry"
             Source: "entry"
        IndexAccess
           Type: struct Registrar.entry storage ref
           Source: "_entries[_hash]"
          Identifier _entries
             Type: mapping(bytes32 => struct Registrar.entry storage ref)
             Source: "_entries"
          Identifier _hash
             Type: bytes32
             Source: "_hash"
      Return
         Gas costs: 912
         Source: "return (state(_hash), h.deed, h.registrationDate, h.value, h.highestBid)"
        TupleExpression
           Type: tuple(enum Registrar.Mode,contract Deed,uint256,uint256,uint256)
           Source: "(state(_hash), h.deed, h.registrationDate, h.value, h.highestBid)"
          FunctionCall
             Type: enum Registrar.Mode
             Source: "state(_hash)"
            Identifier state
               Type: function (bytes32) view returns (enum Registrar.Mode)
               Source: "state"
            Identifier _hash
               Type: bytes32
               Source: "_hash"
          MemberAccess to member deed
             Type: contract Deed
             Source: "h.deed"
            Identifier h
               Type: struct Registrar.entry storage pointer
               Source: "h"
          MemberAccess to member registrationDate
             Type: uint256
             Source: "h.registrationDate"
            Identifier h
               Type: struct Registrar.entry storage pointer
               Source: "h"
          MemberAccess to member value
             Type: uint256
             Source: "h.value"
            Identifier h
               Type: struct Registrar.entry storage pointer
               Source: "h"
          MemberAccess to member highestBid
             Type: uint256
             Source: "h.highestBid"
            Identifier h
               Type: struct Registrar.entry storage pointer
               Source: "h"
  FunctionDefinition "Registrar" - public
     Source: "function Registrar(AbstractENS _ens, bytes32 _rootNode, uint _startDate) {\r\n        ens = _ens;\r\n        rootNode = _rootNode;\r\n        registryStarted = _startDate > 0 ? _startDate : now;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(AbstractENS _ens, bytes32 _rootNode, uint _startDate)"
      VariableDeclaration "_ens"
         Type: contract AbstractENS
         Source: "AbstractENS _ens"
        UserDefinedTypeName "AbstractENS"
           Source: "AbstractENS"
      VariableDeclaration "_rootNode"
         Type: bytes32
         Source: "bytes32 _rootNode"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "_startDate"
         Type: uint256
         Source: "uint _startDate"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        ens = _ens;\r\n        rootNode = _rootNode;\r\n        registryStarted = _startDate > 0 ? _startDate : now;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "ens = _ens"
        Assignment using operator =
           Type: contract AbstractENS
           Source: "ens = _ens"
          Identifier ens
             Type: contract AbstractENS
             Source: "ens"
          Identifier _ens
             Type: contract AbstractENS
             Source: "_ens"
      ExpressionStatement
         Gas costs: 0
         Source: "rootNode = _rootNode"
        Assignment using operator =
           Type: bytes32
           Source: "rootNode = _rootNode"
          Identifier rootNode
             Type: bytes32
             Source: "rootNode"
          Identifier _rootNode
             Type: bytes32
             Source: "_rootNode"
      ExpressionStatement
         Gas costs: 0
         Source: "registryStarted = _startDate > 0 ? _startDate : now"
        Assignment using operator =
           Type: uint256
           Source: "registryStarted = _startDate > 0 ? _startDate : now"
          Identifier registryStarted
             Type: uint256
             Source: "registryStarted"
          Conditional
             Type: uint256
             Source: "_startDate > 0 ? _startDate : now"
            BinaryOperation using operator >
               Type: bool
               Source: "_startDate > 0"
              Identifier _startDate
                 Type: uint256
                 Source: "_startDate"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
            Identifier _startDate
               Type: uint256
               Source: "_startDate"
            Identifier now
               Type: uint256
               Source: "now"
  FunctionDefinition "max" - const
     Source: "function max(uint a, uint b) internal constant returns (uint max) {\r\n        if (a > b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint a, uint b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint a"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint b"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(uint max)"
      VariableDeclaration "max"
         Type: uint256
         Source: "uint max"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        if (a > b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }"
      IfStatement
         Source: "if (a > b)\r\n            return a;\r\n        else\r\n            return b"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 9
           Source: "a > b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
        Return
           Gas costs: 19
           Source: "return a"
          Identifier a
             Type: uint256
             Source: "a"
        Return
           Gas costs: 8
           Source: "return b"
          Identifier b
             Type: uint256
             Source: "b"
  FunctionDefinition "min" - const
     Source: "function min(uint a, uint b) internal constant returns (uint min) {\r\n        if (a < b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint a, uint b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint a"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint b"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(uint min)"
      VariableDeclaration "min"
         Type: uint256
         Source: "uint min"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        if (a < b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }"
      IfStatement
         Source: "if (a < b)\r\n            return a;\r\n        else\r\n            return b"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 9
           Source: "a < b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
        Return
           Gas costs: 19
           Source: "return a"
          Identifier a
             Type: uint256
             Source: "a"
        Return
           Gas costs: 8
           Source: "return b"
          Identifier b
             Type: uint256
             Source: "b"
  FunctionDefinition "strlen" - const
     Source: "function strlen(string s) internal constant returns (uint) {\r\n        // Starting here means the LSB will be the byte we care about\r\n        uint ptr;\r\n        uint end;\r\n        assembly {\r\n            ptr := add(s, 1)\r\n            end := add(mload(s), ptr)\r\n        }\r\n        for (uint len = 0; ptr < end; len++) {\r\n            uint8 b;\r\n            assembly { b := and(mload(ptr), 0xFF) }\r\n            if (b < 0x80) {\r\n                ptr += 1;\r\n            } else if(b < 0xE0) {\r\n                ptr += 2;\r\n            } else if(b < 0xF0) {\r\n                ptr += 3;\r\n            } else if(b < 0xF8) {\r\n                ptr += 4;\r\n            } else if(b < 0xFC) {\r\n                ptr += 5;\r\n            } else {\r\n                ptr += 6;\r\n            }\r\n        }\r\n        return len;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(string s)"
      VariableDeclaration "s"
         Type: string memory
         Source: "string s"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Gas costs: 3
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        // Starting here means the LSB will be the byte we care about\r\n        uint ptr;\r\n        uint end;\r\n        assembly {\r\n            ptr := add(s, 1)\r\n            end := add(mload(s), ptr)\r\n        }\r\n        for (uint len = 0; ptr < end; len++) {\r\n            uint8 b;\r\n            assembly { b := and(mload(ptr), 0xFF) }\r\n            if (b < 0x80) {\r\n                ptr += 1;\r\n            } else if(b < 0xE0) {\r\n                ptr += 2;\r\n            } else if(b < 0xF0) {\r\n                ptr += 3;\r\n            } else if(b < 0xF8) {\r\n                ptr += 4;\r\n            } else if(b < 0xFC) {\r\n                ptr += 5;\r\n            } else {\r\n                ptr += 6;\r\n            }\r\n        }\r\n        return len;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 3
         Source: "uint ptr"
        VariableDeclaration "ptr"
           Type: uint256
           Source: "uint ptr"
          ElementaryTypeName uint
             Source: "uint"
      VariableDeclarationStatement
         Gas costs: 3
         Source: "uint end"
        VariableDeclaration "end"
           Type: uint256
           Source: "uint end"
          ElementaryTypeName uint
             Source: "uint"
      InlineAssembly
         Gas costs: 0
         Source: "assembly {\r\n            ptr := add(s, 1)\r\n            end := add(mload(s), ptr)\r\n        }\r\n        for"
      ForStatement
         Source: "for (uint len = 0; ptr < end; len++) {\r\n            uint8 b;\r\n            assembly { b := and(mload(ptr), 0xFF) }\r\n            if (b < 0x80) {\r\n                ptr += 1;\r\n            } else if(b < 0xE0) {\r\n                ptr += 2;\r\n            } else if(b < 0xF0) {\r\n                ptr += 3;\r\n            } else if(b < 0xF8) {\r\n                ptr += 4;\r\n            } else if(b < 0xFC) {\r\n                ptr += 5;\r\n            } else {\r\n                ptr += 6;\r\n            }\r\n        }"
        VariableDeclarationStatement
           Gas costs: 11
           Source: "uint len = 0"
          VariableDeclaration "len"
             Type: uint256
             Source: "uint len"
            ElementaryTypeName uint
               Source: "uint"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 9
           Source: "ptr < end"
          Identifier ptr
             Type: uint256
             Source: "ptr"
          Identifier end
             Type: uint256
             Source: "end"
        ExpressionStatement
           Gas costs: 19
           Source: "len++"
          UnaryOperation (postfix) ++
             Type: uint256
             Source: "len++"
            Identifier len
               Type: uint256
               Source: "len"
        Block
           Source: "{\r\n            uint8 b;\r\n            assembly { b := and(mload(ptr), 0xFF) }\r\n            if (b < 0x80) {\r\n                ptr += 1;\r\n            } else if(b < 0xE0) {\r\n                ptr += 2;\r\n            } else if(b < 0xF0) {\r\n                ptr += 3;\r\n            } else if(b < 0xF8) {\r\n                ptr += 4;\r\n            } else if(b < 0xFC) {\r\n                ptr += 5;\r\n            } else {\r\n                ptr += 6;\r\n            }\r\n        }"
          VariableDeclarationStatement
             Gas costs: 3
             Source: "uint8 b"
            VariableDeclaration "b"
               Type: uint8
               Source: "uint8 b"
              ElementaryTypeName uint8
                 Source: "uint8"
          InlineAssembly
             Gas costs: 0
             Source: "assembly { b := and(mload(ptr), 0xFF) }\r\n            if"
          IfStatement
             Source: "if (b < 0x80) {\r\n                ptr += 1;\r\n            } else if(b < 0xE0) {\r\n                ptr += 2;\r\n            } else if(b < 0xF0) {\r\n                ptr += 3;\r\n            } else if(b < 0xF8) {\r\n                ptr += 4;\r\n            } else if(b < 0xFC) {\r\n                ptr += 5;\r\n            } else {\r\n                ptr += 6;\r\n            }"
            BinaryOperation using operator <
               Type: bool
               Gas costs: 15
               Source: "b < 0x80"
              Identifier b
                 Type: uint8
                 Source: "b"
              Literal, token: [no token] value: 0x80
                 Type: int_const 128
                 Source: "0x80"
            Block
               Source: "{\r\n                ptr += 1;\r\n            }"
              ExpressionStatement
                 Gas costs: 14
                 Source: "ptr += 1"
                Assignment using operator +=
                   Type: uint256
                   Source: "ptr += 1"
                  Identifier ptr
                     Type: uint256
                     Source: "ptr"
                  Literal, token: [no token] value: 1
                     Type: int_const 1
                     Source: "1"
            IfStatement
               Source: "if(b < 0xE0) {\r\n                ptr += 2;\r\n            } else if(b < 0xF0) {\r\n                ptr += 3;\r\n            } else if(b < 0xF8) {\r\n                ptr += 4;\r\n            } else if(b < 0xFC) {\r\n                ptr += 5;\r\n            } else {\r\n                ptr += 6;\r\n            }"
              BinaryOperation using operator <
                 Type: bool
                 Gas costs: 15
                 Source: "b < 0xE0"
                Identifier b
                   Type: uint8
                   Source: "b"
                Literal, token: [no token] value: 0xE0
                   Type: int_const 224
                   Source: "0xE0"
              Block
                 Source: "{\r\n                ptr += 2;\r\n            }"
                ExpressionStatement
                   Gas costs: 14
                   Source: "ptr += 2"
                  Assignment using operator +=
                     Type: uint256
                     Source: "ptr += 2"
                    Identifier ptr
                       Type: uint256
                       Source: "ptr"
                    Literal, token: [no token] value: 2
                       Type: int_const 2
                       Source: "2"
              IfStatement
                 Source: "if(b < 0xF0) {\r\n                ptr += 3;\r\n            } else if(b < 0xF8) {\r\n                ptr += 4;\r\n            } else if(b < 0xFC) {\r\n                ptr += 5;\r\n            } else {\r\n                ptr += 6;\r\n            }"
                BinaryOperation using operator <
                   Type: bool
                   Gas costs: 15
                   Source: "b < 0xF0"
                  Identifier b
                     Type: uint8
                     Source: "b"
                  Literal, token: [no token] value: 0xF0
                     Type: int_const 240
                     Source: "0xF0"
                Block
                   Source: "{\r\n                ptr += 3;\r\n            }"
                  ExpressionStatement
                     Gas costs: 14
                     Source: "ptr += 3"
                    Assignment using operator +=
                       Type: uint256
                       Source: "ptr += 3"
                      Identifier ptr
                         Type: uint256
                         Source: "ptr"
                      Literal, token: [no token] value: 3
                         Type: int_const 3
                         Source: "3"
                IfStatement
                   Source: "if(b < 0xF8) {\r\n                ptr += 4;\r\n            } else if(b < 0xFC) {\r\n                ptr += 5;\r\n            } else {\r\n                ptr += 6;\r\n            }"
                  BinaryOperation using operator <
                     Type: bool
                     Gas costs: 15
                     Source: "b < 0xF8"
                    Identifier b
                       Type: uint8
                       Source: "b"
                    Literal, token: [no token] value: 0xF8
                       Type: int_const 248
                       Source: "0xF8"
                  Block
                     Source: "{\r\n                ptr += 4;\r\n            }"
                    ExpressionStatement
                       Gas costs: 14
                       Source: "ptr += 4"
                      Assignment using operator +=
                         Type: uint256
                         Source: "ptr += 4"
                        Identifier ptr
                           Type: uint256
                           Source: "ptr"
                        Literal, token: [no token] value: 4
                           Type: int_const 4
                           Source: "4"
                  IfStatement
                     Source: "if(b < 0xFC) {\r\n                ptr += 5;\r\n            } else {\r\n                ptr += 6;\r\n            }"
                    BinaryOperation using operator <
                       Type: bool
                       Gas costs: 15
                       Source: "b < 0xFC"
                      Identifier b
                         Type: uint8
                         Source: "b"
                      Literal, token: [no token] value: 0xFC
                         Type: int_const 252
                         Source: "0xFC"
                    Block
                       Source: "{\r\n                ptr += 5;\r\n            }"
                      ExpressionStatement
                         Gas costs: 14
                         Source: "ptr += 5"
                        Assignment using operator +=
                           Type: uint256
                           Source: "ptr += 5"
                          Identifier ptr
                             Type: uint256
                             Source: "ptr"
                          Literal, token: [no token] value: 5
                             Type: int_const 5
                             Source: "5"
                    Block
                       Source: "{\r\n                ptr += 6;\r\n            }"
                      ExpressionStatement
                         Gas costs: 14
                         Source: "ptr += 6"
                        Assignment using operator +=
                           Type: uint256
                           Source: "ptr += 6"
                          Identifier ptr
                             Type: uint256
                             Source: "ptr"
                          Literal, token: [no token] value: 6
                             Type: int_const 6
                             Source: "6"
      Return
         Gas costs: 8
         Source: "return len"
        Identifier len
           Type: uint256
           Source: "len"
  FunctionDefinition "isAllowed" - public - const
     Source: "function isAllowed(bytes32 _hash, uint _timestamp) constant returns (bool allowed){\r\n        return _timestamp > getAllowedTime(_hash);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32 _hash, uint _timestamp)"
      VariableDeclaration "_hash"
         Type: bytes32
         Source: "bytes32 _hash"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "_timestamp"
         Type: uint256
         Source: "uint _timestamp"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(bool allowed)"
      VariableDeclaration "allowed"
         Type: bool
         Source: "bool allowed"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        return _timestamp > getAllowedTime(_hash);\r\n    }"
      Return
         Gas costs: 29
         Source: "return _timestamp > getAllowedTime(_hash)"
        BinaryOperation using operator >
           Type: bool
           Source: "_timestamp > getAllowedTime(_hash)"
          Identifier _timestamp
             Type: uint256
             Source: "_timestamp"
          FunctionCall
             Type: uint256
             Source: "getAllowedTime(_hash)"
            Identifier getAllowedTime
               Type: function (bytes32) view returns (uint256)
               Source: "getAllowedTime"
            Identifier _hash
               Type: bytes32
               Source: "_hash"
  FunctionDefinition "getAllowedTime" - public - const
     Source: "function getAllowedTime(bytes32 _hash) constant returns (uint timestamp) {\r\n        return registryStarted + (launchLength*(uint(_hash)>>128)>>128);\r\n        // right shift operator: a >> b == a / 2**b\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32 _hash)"
      VariableDeclaration "_hash"
         Type: bytes32
         Source: "bytes32 _hash"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Gas costs: 3
       Source: "(uint timestamp)"
      VariableDeclaration "timestamp"
         Type: uint256
         Source: "uint timestamp"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        return registryStarted + (launchLength*(uint(_hash)>>128)>>128);\r\n        // right shift operator: a >> b == a / 2**b\r\n    }"
      Return
         Gas costs: 390
         Source: "return registryStarted + (launchLength*(uint(_hash)>>128)>>128)"
        BinaryOperation using operator +
           Type: uint256
           Source: "registryStarted + (launchLength*(uint(_hash)>>128)>>128)"
          Identifier registryStarted
             Type: uint256
             Source: "registryStarted"
          TupleExpression
             Type: uint256
             Source: "(launchLength*(uint(_hash)>>128)>>128)"
            BinaryOperation using operator >>
               Type: uint256
               Source: "launchLength*(uint(_hash)>>128)>>128"
              BinaryOperation using operator *
                 Type: uint256
                 Source: "launchLength*(uint(_hash)>>128)"
                Identifier launchLength
                   Type: uint32
                   Source: "launchLength"
                TupleExpression
                   Type: uint256
                   Source: "(uint(_hash)>>128)"
                  BinaryOperation using operator >>
                     Type: uint256
                     Source: "uint(_hash)>>128"
                    FunctionCall
                       Type: uint256
                       Source: "uint(_hash)"
                      ElementaryTypeNameExpression uint
                         Type: type(uint256)
                         Source: "uint"
                      Identifier _hash
                         Type: bytes32
                         Source: "_hash"
                    Literal, token: [no token] value: 128
                       Type: int_const 128
                       Source: "128"
              Literal, token: [no token] value: 128
                 Type: int_const 128
                 Source: "128"
  FunctionDefinition "trySetSubnodeOwner"
     Source: "function trySetSubnodeOwner(bytes32 _hash, address _newOwner) internal {\r\n        if(ens.owner(rootNode) == address(this))\r\n            ens.setSubnodeOwner(rootNode, _hash, _newOwner);        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32 _hash, address _newOwner)"
      VariableDeclaration "_hash"
         Type: bytes32
         Source: "bytes32 _hash"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "_newOwner"
         Type: address
         Source: "address _newOwner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if(ens.owner(rootNode) == address(this))\r\n            ens.setSubnodeOwner(rootNode, _hash, _newOwner);        \r\n    }"
      IfStatement
         Source: "if(ens.owner(rootNode) == address(this))\r\n            ens.setSubnodeOwner(rootNode, _hash, _newOwner)"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: [???]
           Source: "ens.owner(rootNode) == address(this)"
          FunctionCall
             Type: address
             Source: "ens.owner(rootNode)"
            MemberAccess to member owner
               Type: function (bytes32) view external returns (address)
               Source: "ens.owner"
              Identifier ens
                 Type: contract AbstractENS
                 Source: "ens"
            Identifier rootNode
               Type: bytes32
               Source: "rootNode"
          FunctionCall
             Type: address
             Source: "address(this)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Identifier this
               Type: contract Registrar
               Source: "this"
        ExpressionStatement
           Gas costs: [???]
           Source: "ens.setSubnodeOwner(rootNode, _hash, _newOwner)"
          FunctionCall
             Type: tuple()
             Source: "ens.setSubnodeOwner(rootNode, _hash, _newOwner)"
            MemberAccess to member setSubnodeOwner
               Type: function (bytes32,bytes32,address) external
               Source: "ens.setSubnodeOwner"
              Identifier ens
                 Type: contract AbstractENS
                 Source: "ens"
            Identifier rootNode
               Type: bytes32
               Source: "rootNode"
            Identifier _hash
               Type: bytes32
               Source: "_hash"
            Identifier _newOwner
               Type: address
               Source: "_newOwner"
  FunctionDefinition "startAuction" - public
     Source: "function startAuction(bytes32 _hash) registryOpen() {\r\n        var mode = state(_hash);\r\n        if(mode == Mode.Auction) return;\r\n        if(mode != Mode.Open) throw;\r\n\r\n        entry newAuction = _entries[_hash];\r\n        newAuction.registrationDate = now + totalAuctionLength;\r\n        newAuction.value = 0;\r\n        newAuction.highestBid = 0;\r\n        AuctionStarted(_hash, newAuction.registrationDate);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32 _hash)"
      VariableDeclaration "_hash"
         Type: bytes32
         Source: "bytes32 _hash"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "registryOpen"
       Gas costs: 0
       Source: "registryOpen()"
      Identifier registryOpen
         Type: modifier ()
         Source: "registryOpen"
    Block
       Source: "{\r\n        var mode = state(_hash);\r\n        if(mode == Mode.Auction) return;\r\n        if(mode != Mode.Open) throw;\r\n\r\n        entry newAuction = _entries[_hash];\r\n        newAuction.registrationDate = now + totalAuctionLength;\r\n        newAuction.value = 0;\r\n        newAuction.highestBid = 0;\r\n        AuctionStarted(_hash, newAuction.registrationDate);\r\n    }"
      VariableDeclarationStatement
         Gas costs: 26
         Source: "var mode = state(_hash)"
        VariableDeclaration "mode"
           Type: enum Registrar.Mode
           Source: "var mode"
        FunctionCall
           Type: enum Registrar.Mode
           Source: "state(_hash)"
          Identifier state
             Type: function (bytes32) view returns (enum Registrar.Mode)
             Source: "state"
          Identifier _hash
             Type: bytes32
             Source: "_hash"
      IfStatement
         Source: "if(mode == Mode.Auction) return;"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 61
           Source: "mode == Mode.Auction"
          Identifier mode
             Type: enum Registrar.Mode
             Source: "mode"
          MemberAccess to member Auction
             Type: enum Registrar.Mode
             Source: "Mode.Auction"
            Identifier Mode
               Type: type(enum Registrar.Mode)
               Source: "Mode"
        Return
           Gas costs: 11
           Source: "return;"
      IfStatement
         Source: "if(mode != Mode.Open) throw"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 64
           Source: "mode != Mode.Open"
          Identifier mode
             Type: enum Registrar.Mode
             Source: "mode"
          MemberAccess to member Open
             Type: enum Registrar.Mode
             Source: "Mode.Open"
            Identifier Mode
               Type: type(enum Registrar.Mode)
               Source: "Mode"
        Throw
           Gas costs: 6
           Source: "throw"
      VariableDeclarationStatement
         Gas costs: 113
         Source: "entry newAuction = _entries[_hash]"
        VariableDeclaration "newAuction"
           Type: struct Registrar.entry storage pointer
           Source: "entry newAuction"
          UserDefinedTypeName "entry"
             Source: "entry"
        IndexAccess
           Type: struct Registrar.entry storage ref
           Source: "_entries[_hash]"
          Identifier _entries
             Type: mapping(bytes32 => struct Registrar.entry storage ref)
             Source: "_entries"
          Identifier _hash
             Type: bytes32
             Source: "_hash"
      ExpressionStatement
         Gas costs: 20028
         Source: "newAuction.registrationDate = now + totalAuctionLength"
        Assignment using operator =
           Type: uint256
           Source: "newAuction.registrationDate = now + totalAuctionLength"
          MemberAccess to member registrationDate
             Type: uint256
             Source: "newAuction.registrationDate"
            Identifier newAuction
               Type: struct Registrar.entry storage pointer
               Source: "newAuction"
          BinaryOperation using operator +
             Type: uint256
             Source: "now + totalAuctionLength"
            Identifier now
               Type: uint256
               Source: "now"
            Identifier totalAuctionLength
               Type: uint32
               Source: "totalAuctionLength"
      ExpressionStatement
         Gas costs: 5020
         Source: "newAuction.value = 0"
        Assignment using operator =
           Type: uint256
           Source: "newAuction.value = 0"
          MemberAccess to member value
             Type: uint256
             Source: "newAuction.value"
            Identifier newAuction
               Type: struct Registrar.entry storage pointer
               Source: "newAuction"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 5020
         Source: "newAuction.highestBid = 0"
        Assignment using operator =
           Type: uint256
           Source: "newAuction.highestBid = 0"
          MemberAccess to member highestBid
             Type: uint256
             Source: "newAuction.highestBid"
            Identifier newAuction
               Type: struct Registrar.entry storage pointer
               Source: "newAuction"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: [???]
         Source: "AuctionStarted(_hash, newAuction.registrationDate)"
        FunctionCall
           Type: tuple()
           Source: "AuctionStarted(_hash, newAuction.registrationDate)"
          Identifier AuctionStarted
             Type: function (bytes32,uint256)
             Source: "AuctionStarted"
          Identifier _hash
             Type: bytes32
             Source: "_hash"
          MemberAccess to member registrationDate
             Type: uint256
             Source: "newAuction.registrationDate"
            Identifier newAuction
               Type: struct Registrar.entry storage pointer
               Source: "newAuction"
  FunctionDefinition "startAuctions" - public
     Source: "function startAuctions(bytes32[] _hashes)  {\r\n        for (uint i = 0; i < _hashes.length; i ++ ) {\r\n            startAuction(_hashes[i]);\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32[] _hashes)"
      VariableDeclaration "_hashes"
         Type: bytes32[] memory
         Source: "bytes32[] _hashes"
        ArrayTypeName
           Source: "bytes32[]"
          ElementaryTypeName bytes32
             Source: "bytes32"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        for (uint i = 0; i < _hashes.length; i ++ ) {\r\n            startAuction(_hashes[i]);\r\n        }\r\n    }"
      ForStatement
         Source: "for (uint i = 0; i < _hashes.length; i ++ ) {\r\n            startAuction(_hashes[i]);\r\n        }"
        VariableDeclarationStatement
           Gas costs: 11
           Source: "uint i = 0"
          VariableDeclaration "i"
             Type: uint256
             Source: "uint i"
            ElementaryTypeName uint
               Source: "uint"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        BinaryOperation using operator <
           Type: bool
           Gas costs: [???]
           Source: "i < _hashes.length"
          Identifier i
             Type: uint256
             Source: "i"
          MemberAccess to member length
             Type: uint256
             Source: "_hashes.length"
            Identifier _hashes
               Type: bytes32[] memory
               Source: "_hashes"
        ExpressionStatement
           Gas costs: 19
           Source: "i ++"
          UnaryOperation (postfix) ++
             Type: uint256
             Source: "i ++"
            Identifier i
               Type: uint256
               Source: "i"
        Block
           Source: "{\r\n            startAuction(_hashes[i]);\r\n        }"
          ExpressionStatement
             Gas costs: [???]
             Source: "startAuction(_hashes[i])"
            FunctionCall
               Type: tuple()
               Source: "startAuction(_hashes[i])"
              Identifier startAuction
                 Type: function (bytes32)
                 Source: "startAuction"
              IndexAccess
                 Type: bytes32
                 Source: "_hashes[i]"
                Identifier _hashes
                   Type: bytes32[] memory
                   Source: "_hashes"
                Identifier i
                   Type: uint256
                   Source: "i"
  FunctionDefinition "shaBid" - public - const
     Source: "function shaBid(bytes32 hash, address owner, uint value, bytes32 salt) constant returns (bytes32 sealedBid) {\r\n        return sha3(hash, owner, value, salt);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32 hash, address owner, uint value, bytes32 salt)"
      VariableDeclaration "hash"
         Type: bytes32
         Source: "bytes32 hash"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "owner"
         Type: address
         Source: "address owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "salt"
         Type: bytes32
         Source: "bytes32 salt"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Gas costs: 3
       Source: "(bytes32 sealedBid)"
      VariableDeclaration "sealedBid"
         Type: bytes32
         Source: "bytes32 sealedBid"
        ElementaryTypeName bytes32
           Source: "bytes32"
    Block
       Source: "{\r\n        return sha3(hash, owner, value, salt);\r\n    }"
      Return
         Gas costs: [???]
         Source: "return sha3(hash, owner, value, salt)"
        FunctionCall
           Type: bytes32
           Source: "sha3(hash, owner, value, salt)"
          Identifier sha3
             Type: function () pure returns (bytes32)
             Source: "sha3"
          Identifier hash
             Type: bytes32
             Source: "hash"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier value
             Type: uint256
             Source: "value"
          Identifier salt
             Type: bytes32
             Source: "salt"
  FunctionDefinition "newBid" - public
     Source: "function newBid(bytes32 sealedBid) payable {\r\n        if (address(sealedBids[msg.sender][sealedBid]) > 0 ) throw;\r\n        if (msg.value < minPrice) throw;\r\n        // creates a new hash contract with the owner\r\n        Deed newBid = (new Deed).value(msg.value)(msg.sender);\r\n        sealedBids[msg.sender][sealedBid] = newBid;\r\n        NewBid(sealedBid, msg.sender, msg.value);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32 sealedBid)"
      VariableDeclaration "sealedBid"
         Type: bytes32
         Source: "bytes32 sealedBid"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if (address(sealedBids[msg.sender][sealedBid]) > 0 ) throw;\r\n        if (msg.value < minPrice) throw;\r\n        // creates a new hash contract with the owner\r\n        Deed newBid = (new Deed).value(msg.value)(msg.sender);\r\n        sealedBids[msg.sender][sealedBid] = newBid;\r\n        NewBid(sealedBid, msg.sender, msg.value);\r\n    }"
      IfStatement
         Source: "if (address(sealedBids[msg.sender][sealedBid]) > 0 ) throw"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 442
           Source: "address(sealedBids[msg.sender][sealedBid]) > 0"
          FunctionCall
             Type: address
             Source: "address(sealedBids[msg.sender][sealedBid])"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            IndexAccess
               Type: contract Deed
               Source: "sealedBids[msg.sender][sealedBid]"
              IndexAccess
                 Type: mapping(bytes32 => contract Deed)
                 Source: "sealedBids[msg.sender]"
                Identifier sealedBids
                   Type: mapping(address => mapping(bytes32 => contract Deed))
                   Source: "sealedBids"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier sealedBid
                 Type: bytes32
                 Source: "sealedBid"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Throw
           Gas costs: 6
           Source: "throw"
      IfStatement
         Source: "if (msg.value < minPrice) throw"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 5
           Source: "msg.value < minPrice"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier minPrice
             Type: uint256
             Source: "minPrice"
        Throw
           Gas costs: 6
           Source: "throw"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "Deed newBid = (new Deed).value(msg.value)(msg.sender)"
        VariableDeclaration "newBid"
           Type: contract Deed
           Source: "Deed newBid"
          UserDefinedTypeName "Deed"
             Source: "Deed"
        FunctionCall
           Type: contract Deed
           Source: "(new Deed).value(msg.value)(msg.sender)"
          FunctionCall
             Type: function (address) payable returns (contract Deed)
             Source: "(new Deed).value(msg.value)"
            MemberAccess to member value
               Type: function (uint256) returns (function (address) payable returns (contract Deed))
               Source: "(new Deed).value"
              TupleExpression
                 Type: function (address) payable returns (contract Deed)
                 Source: "(new Deed)"
                NewExpression
                   Type: function (address) payable returns (contract Deed)
                   Source: "new Deed"
                  UserDefinedTypeName "Deed"
                     Source: "Deed"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 20458
         Source: "sealedBids[msg.sender][sealedBid] = newBid"
        Assignment using operator =
           Type: contract Deed
           Source: "sealedBids[msg.sender][sealedBid] = newBid"
          IndexAccess
             Type: contract Deed
             Source: "sealedBids[msg.sender][sealedBid]"
            IndexAccess
               Type: mapping(bytes32 => contract Deed)
               Source: "sealedBids[msg.sender]"
              Identifier sealedBids
                 Type: mapping(address => mapping(bytes32 => contract Deed))
                 Source: "sealedBids"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier sealedBid
               Type: bytes32
               Source: "sealedBid"
          Identifier newBid
             Type: contract Deed
             Source: "newBid"
      ExpressionStatement
         Gas costs: [???]
         Source: "NewBid(sealedBid, msg.sender, msg.value)"
        FunctionCall
           Type: tuple()
           Source: "NewBid(sealedBid, msg.sender, msg.value)"
          Identifier NewBid
             Type: function (bytes32,address,uint256)
             Source: "NewBid"
          Identifier sealedBid
             Type: bytes32
             Source: "sealedBid"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "startAuctionsAndBid" - public
     Source: "function startAuctionsAndBid(bytes32[] hashes, bytes32 sealedBid) payable {\r\n        startAuctions(hashes);\r\n        newBid(sealedBid);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32[] hashes, bytes32 sealedBid)"
      VariableDeclaration "hashes"
         Type: bytes32[] memory
         Source: "bytes32[] hashes"
        ArrayTypeName
           Source: "bytes32[]"
          ElementaryTypeName bytes32
             Source: "bytes32"
      VariableDeclaration "sealedBid"
         Type: bytes32
         Source: "bytes32 sealedBid"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        startAuctions(hashes);\r\n        newBid(sealedBid);\r\n    }"
      ExpressionStatement
         Gas costs: 18
         Source: "startAuctions(hashes)"
        FunctionCall
           Type: tuple()
           Source: "startAuctions(hashes)"
          Identifier startAuctions
             Type: function (bytes32[] memory)
             Source: "startAuctions"
          Identifier hashes
             Type: bytes32[] memory
             Source: "hashes"
      ExpressionStatement
         Gas costs: 18
         Source: "newBid(sealedBid)"
        FunctionCall
           Type: tuple()
           Source: "newBid(sealedBid)"
          Identifier newBid
             Type: function (bytes32)
             Source: "newBid"
          Identifier sealedBid
             Type: bytes32
             Source: "sealedBid"
  FunctionDefinition "unsealBid" - public
     Source: "function unsealBid(bytes32 _hash, uint _value, bytes32 _salt) {\r\n        bytes32 seal = shaBid(_hash, msg.sender, _value, _salt);\r\n        Deed bid = sealedBids[msg.sender][seal];\r\n        if (address(bid) == 0 ) throw;\r\n        sealedBids[msg.sender][seal] = Deed(0);\r\n        entry h = _entries[_hash];\r\n        uint value = min(_value, bid.value());\r\n        bid.setBalance(value, true);\r\n\r\n        var auctionState = state(_hash);\r\n        if(auctionState == Mode.Owned) {\r\n            // Too late! Bidder loses their bid. Get's 0.5% back.\r\n            bid.closeDeed(5);\r\n            BidRevealed(_hash, msg.sender, value, 1);\r\n        } else if(auctionState != Mode.Reveal) {\r\n            // Invalid phase\r\n            throw;\r\n        } else if (value < minPrice || bid.creationDate() > h.registrationDate - revealPeriod) {\r\n            // Bid too low or too late, refund 99.5%\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 0);\r\n        } else if (value > h.highestBid) {\r\n            // new winner\r\n            // cancel the other bid, refund 99.5%\r\n            if(address(h.deed) != 0) {\r\n                Deed previousWinner = h.deed;\r\n                previousWinner.closeDeed(995);\r\n            }\r\n\r\n            // set new winner\r\n            // per the rules of a vickery auction, the value becomes the previous highestBid\r\n            h.value = h.highestBid;  // will be zero if there's only 1 bidder\r\n            h.highestBid = value;\r\n            h.deed = bid;\r\n            BidRevealed(_hash, msg.sender, value, 2);\r\n        } else if (value > h.value) {\r\n            // not winner, but affects second place\r\n            h.value = value;\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 3);\r\n        } else {\r\n            // bid doesn't affect auction\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 4);\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32 _hash, uint _value, bytes32 _salt)"
      VariableDeclaration "_hash"
         Type: bytes32
         Source: "bytes32 _hash"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_salt"
         Type: bytes32
         Source: "bytes32 _salt"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        bytes32 seal = shaBid(_hash, msg.sender, _value, _salt);\r\n        Deed bid = sealedBids[msg.sender][seal];\r\n        if (address(bid) == 0 ) throw;\r\n        sealedBids[msg.sender][seal] = Deed(0);\r\n        entry h = _entries[_hash];\r\n        uint value = min(_value, bid.value());\r\n        bid.setBalance(value, true);\r\n\r\n        var auctionState = state(_hash);\r\n        if(auctionState == Mode.Owned) {\r\n            // Too late! Bidder loses their bid. Get's 0.5% back.\r\n            bid.closeDeed(5);\r\n            BidRevealed(_hash, msg.sender, value, 1);\r\n        } else if(auctionState != Mode.Reveal) {\r\n            // Invalid phase\r\n            throw;\r\n        } else if (value < minPrice || bid.creationDate() > h.registrationDate - revealPeriod) {\r\n            // Bid too low or too late, refund 99.5%\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 0);\r\n        } else if (value > h.highestBid) {\r\n            // new winner\r\n            // cancel the other bid, refund 99.5%\r\n            if(address(h.deed) != 0) {\r\n                Deed previousWinner = h.deed;\r\n                previousWinner.closeDeed(995);\r\n            }\r\n\r\n            // set new winner\r\n            // per the rules of a vickery auction, the value becomes the previous highestBid\r\n            h.value = h.highestBid;  // will be zero if there's only 1 bidder\r\n            h.highestBid = value;\r\n            h.deed = bid;\r\n            BidRevealed(_hash, msg.sender, value, 2);\r\n        } else if (value > h.value) {\r\n            // not winner, but affects second place\r\n            h.value = value;\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 3);\r\n        } else {\r\n            // bid doesn't affect auction\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 4);\r\n        }\r\n    }"
      VariableDeclarationStatement
         Gas costs: 34
         Source: "bytes32 seal = shaBid(_hash, msg.sender, _value, _salt)"
        VariableDeclaration "seal"
           Type: bytes32
           Source: "bytes32 seal"
          ElementaryTypeName bytes32
             Source: "bytes32"
        FunctionCall
           Type: bytes32
           Source: "shaBid(_hash, msg.sender, _value, _salt)"
          Identifier shaBid
             Type: function (bytes32,address,uint256,bytes32) view returns (bytes32)
             Source: "shaBid"
          Identifier _hash
             Type: bytes32
             Source: "_hash"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
          Identifier _salt
             Type: bytes32
             Source: "_salt"
      VariableDeclarationStatement
         Gas costs: 438
         Source: "Deed bid = sealedBids[msg.sender][seal]"
        VariableDeclaration "bid"
           Type: contract Deed
           Source: "Deed bid"
          UserDefinedTypeName "Deed"
             Source: "Deed"
        IndexAccess
           Type: contract Deed
           Source: "sealedBids[msg.sender][seal]"
          IndexAccess
             Type: mapping(bytes32 => contract Deed)
             Source: "sealedBids[msg.sender]"
            Identifier sealedBids
               Type: mapping(address => mapping(bytes32 => contract Deed))
               Source: "sealedBids"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier seal
             Type: bytes32
             Source: "seal"
      IfStatement
         Source: "if (address(bid) == 0 ) throw"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 15
           Source: "address(bid) == 0"
          FunctionCall
             Type: address
             Source: "address(bid)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Identifier bid
               Type: contract Deed
               Source: "bid"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Throw
           Gas costs: 6
           Source: "throw"
      ExpressionStatement
         Gas costs: 20458
         Source: "sealedBids[msg.sender][seal] = Deed(0)"
        Assignment using operator =
           Type: contract Deed
           Source: "sealedBids[msg.sender][seal] = Deed(0)"
          IndexAccess
             Type: contract Deed
             Source: "sealedBids[msg.sender][seal]"
            IndexAccess
               Type: mapping(bytes32 => contract Deed)
               Source: "sealedBids[msg.sender]"
              Identifier sealedBids
                 Type: mapping(address => mapping(bytes32 => contract Deed))
                 Source: "sealedBids"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier seal
               Type: bytes32
               Source: "seal"
          FunctionCall
             Type: contract Deed
             Source: "Deed(0)"
            Identifier Deed
               Type: type(contract Deed)
               Source: "Deed"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      VariableDeclarationStatement
         Gas costs: 107
         Source: "entry h = _entries[_hash]"
        VariableDeclaration "h"
           Type: struct Registrar.entry storage pointer
           Source: "entry h"
          UserDefinedTypeName "entry"
             Source: "entry"
        IndexAccess
           Type: struct Registrar.entry storage ref
           Source: "_entries[_hash]"
          Identifier _entries
             Type: mapping(bytes32 => struct Registrar.entry storage ref)
             Source: "_entries"
          Identifier _hash
             Type: bytes32
             Source: "_hash"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "uint value = min(_value, bid.value())"
        VariableDeclaration "value"
           Type: uint256
           Source: "uint value"
          ElementaryTypeName uint
             Source: "uint"
        FunctionCall
           Type: uint256
           Source: "min(_value, bid.value())"
          Identifier min
             Type: function (uint256,uint256) view returns (uint256)
             Source: "min"
          Identifier _value
             Type: uint256
             Source: "_value"
          FunctionCall
             Type: uint256
             Source: "bid.value()"
            MemberAccess to member value
               Type: function () view external returns (uint256)
               Source: "bid.value"
              Identifier bid
                 Type: contract Deed
                 Source: "bid"
      ExpressionStatement
         Gas costs: [???]
         Source: "bid.setBalance(value, true)"
        FunctionCall
           Type: tuple()
           Source: "bid.setBalance(value, true)"
          MemberAccess to member setBalance
             Type: function (uint256,bool) external
             Source: "bid.setBalance"
            Identifier bid
               Type: contract Deed
               Source: "bid"
          Identifier value
             Type: uint256
             Source: "value"
          Literal, token: true value: true
             Type: bool
             Source: "true"
      VariableDeclarationStatement
         Gas costs: 26
         Source: "var auctionState = state(_hash)"
        VariableDeclaration "auctionState"
           Type: enum Registrar.Mode
           Source: "var auctionState"
        FunctionCall
           Type: enum Registrar.Mode
           Source: "state(_hash)"
          Identifier state
             Type: function (bytes32) view returns (enum Registrar.Mode)
             Source: "state"
          Identifier _hash
             Type: bytes32
             Source: "_hash"
      IfStatement
         Source: "if(auctionState == Mode.Owned) {\r\n            // Too late! Bidder loses their bid. Get's 0.5% back.\r\n            bid.closeDeed(5);\r\n            BidRevealed(_hash, msg.sender, value, 1);\r\n        } else if(auctionState != Mode.Reveal) {\r\n            // Invalid phase\r\n            throw;\r\n        } else if (value < minPrice || bid.creationDate() > h.registrationDate - revealPeriod) {\r\n            // Bid too low or too late, refund 99.5%\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 0);\r\n        } else if (value > h.highestBid) {\r\n            // new winner\r\n            // cancel the other bid, refund 99.5%\r\n            if(address(h.deed) != 0) {\r\n                Deed previousWinner = h.deed;\r\n                previousWinner.closeDeed(995);\r\n            }\r\n\r\n            // set new winner\r\n            // per the rules of a vickery auction, the value becomes the previous highestBid\r\n            h.value = h.highestBid;  // will be zero if there's only 1 bidder\r\n            h.highestBid = value;\r\n            h.deed = bid;\r\n            BidRevealed(_hash, msg.sender, value, 2);\r\n        } else if (value > h.value) {\r\n            // not winner, but affects second place\r\n            h.value = value;\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 3);\r\n        } else {\r\n            // bid doesn't affect auction\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 4);\r\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 61
           Source: "auctionState == Mode.Owned"
          Identifier auctionState
             Type: enum Registrar.Mode
             Source: "auctionState"
          MemberAccess to member Owned
             Type: enum Registrar.Mode
             Source: "Mode.Owned"
            Identifier Mode
               Type: type(enum Registrar.Mode)
               Source: "Mode"
        Block
           Source: "{\r\n            // Too late! Bidder loses their bid. Get's 0.5% back.\r\n            bid.closeDeed(5);\r\n            BidRevealed(_hash, msg.sender, value, 1);\r\n        }"
          ExpressionStatement
             Gas costs: [???]
             Source: "bid.closeDeed(5)"
            FunctionCall
               Type: tuple()
               Source: "bid.closeDeed(5)"
              MemberAccess to member closeDeed
                 Type: function (uint256) external
                 Source: "bid.closeDeed"
                Identifier bid
                   Type: contract Deed
                   Source: "bid"
              Literal, token: [no token] value: 5
                 Type: int_const 5
                 Source: "5"
          ExpressionStatement
             Gas costs: [???]
             Source: "BidRevealed(_hash, msg.sender, value, 1)"
            FunctionCall
               Type: tuple()
               Source: "BidRevealed(_hash, msg.sender, value, 1)"
              Identifier BidRevealed
                 Type: function (bytes32,address,uint256,uint8)
                 Source: "BidRevealed"
              Identifier _hash
                 Type: bytes32
                 Source: "_hash"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier value
                 Type: uint256
                 Source: "value"
              Literal, token: [no token] value: 1
                 Type: int_const 1
                 Source: "1"
        IfStatement
           Source: "if(auctionState != Mode.Reveal) {\r\n            // Invalid phase\r\n            throw;\r\n        } else if (value < minPrice || bid.creationDate() > h.registrationDate - revealPeriod) {\r\n            // Bid too low or too late, refund 99.5%\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 0);\r\n        } else if (value > h.highestBid) {\r\n            // new winner\r\n            // cancel the other bid, refund 99.5%\r\n            if(address(h.deed) != 0) {\r\n                Deed previousWinner = h.deed;\r\n                previousWinner.closeDeed(995);\r\n            }\r\n\r\n            // set new winner\r\n            // per the rules of a vickery auction, the value becomes the previous highestBid\r\n            h.value = h.highestBid;  // will be zero if there's only 1 bidder\r\n            h.highestBid = value;\r\n            h.deed = bid;\r\n            BidRevealed(_hash, msg.sender, value, 2);\r\n        } else if (value > h.value) {\r\n            // not winner, but affects second place\r\n            h.value = value;\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 3);\r\n        } else {\r\n            // bid doesn't affect auction\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 4);\r\n        }"
          BinaryOperation using operator !=
             Type: bool
             Gas costs: 64
             Source: "auctionState != Mode.Reveal"
            Identifier auctionState
               Type: enum Registrar.Mode
               Source: "auctionState"
            MemberAccess to member Reveal
               Type: enum Registrar.Mode
               Source: "Mode.Reveal"
              Identifier Mode
                 Type: type(enum Registrar.Mode)
                 Source: "Mode"
          Block
             Source: "{\r\n            // Invalid phase\r\n            throw;\r\n        }"
            Throw
               Gas costs: 6
               Source: "throw"
          IfStatement
             Source: "if (value < minPrice || bid.creationDate() > h.registrationDate - revealPeriod) {\r\n            // Bid too low or too late, refund 99.5%\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 0);\r\n        } else if (value > h.highestBid) {\r\n            // new winner\r\n            // cancel the other bid, refund 99.5%\r\n            if(address(h.deed) != 0) {\r\n                Deed previousWinner = h.deed;\r\n                previousWinner.closeDeed(995);\r\n            }\r\n\r\n            // set new winner\r\n            // per the rules of a vickery auction, the value becomes the previous highestBid\r\n            h.value = h.highestBid;  // will be zero if there's only 1 bidder\r\n            h.highestBid = value;\r\n            h.deed = bid;\r\n            BidRevealed(_hash, msg.sender, value, 2);\r\n        } else if (value > h.value) {\r\n            // not winner, but affects second place\r\n            h.value = value;\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 3);\r\n        } else {\r\n            // bid doesn't affect auction\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 4);\r\n        }"
            BinaryOperation using operator ||
               Type: bool
               Gas costs: [???]
               Source: "value < minPrice || bid.creationDate() > h.registrationDate - revealPeriod"
              BinaryOperation using operator <
                 Type: bool
                 Source: "value < minPrice"
                Identifier value
                   Type: uint256
                   Source: "value"
                Identifier minPrice
                   Type: uint256
                   Source: "minPrice"
              BinaryOperation using operator >
                 Type: bool
                 Source: "bid.creationDate() > h.registrationDate - revealPeriod"
                FunctionCall
                   Type: uint256
                   Source: "bid.creationDate()"
                  MemberAccess to member creationDate
                     Type: function () view external returns (uint256)
                     Source: "bid.creationDate"
                    Identifier bid
                       Type: contract Deed
                       Source: "bid"
                BinaryOperation using operator -
                   Type: uint256
                   Source: "h.registrationDate - revealPeriod"
                  MemberAccess to member registrationDate
                     Type: uint256
                     Source: "h.registrationDate"
                    Identifier h
                       Type: struct Registrar.entry storage pointer
                       Source: "h"
                  Identifier revealPeriod
                     Type: uint32
                     Source: "revealPeriod"
            Block
               Source: "{\r\n            // Bid too low or too late, refund 99.5%\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 0);\r\n        }"
              ExpressionStatement
                 Gas costs: [???]
                 Source: "bid.closeDeed(995)"
                FunctionCall
                   Type: tuple()
                   Source: "bid.closeDeed(995)"
                  MemberAccess to member closeDeed
                     Type: function (uint256) external
                     Source: "bid.closeDeed"
                    Identifier bid
                       Type: contract Deed
                       Source: "bid"
                  Literal, token: [no token] value: 995
                     Type: int_const 995
                     Source: "995"
              ExpressionStatement
                 Gas costs: [???]
                 Source: "BidRevealed(_hash, msg.sender, value, 0)"
                FunctionCall
                   Type: tuple()
                   Source: "BidRevealed(_hash, msg.sender, value, 0)"
                  Identifier BidRevealed
                     Type: function (bytes32,address,uint256,uint8)
                     Source: "BidRevealed"
                  Identifier _hash
                     Type: bytes32
                     Source: "_hash"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
                  Identifier value
                     Type: uint256
                     Source: "value"
                  Literal, token: [no token] value: 0
                     Type: int_const 0
                     Source: "0"
            IfStatement
               Source: "if (value > h.highestBid) {\r\n            // new winner\r\n            // cancel the other bid, refund 99.5%\r\n            if(address(h.deed) != 0) {\r\n                Deed previousWinner = h.deed;\r\n                previousWinner.closeDeed(995);\r\n            }\r\n\r\n            // set new winner\r\n            // per the rules of a vickery auction, the value becomes the previous highestBid\r\n            h.value = h.highestBid;  // will be zero if there's only 1 bidder\r\n            h.highestBid = value;\r\n            h.deed = bid;\r\n            BidRevealed(_hash, msg.sender, value, 2);\r\n        } else if (value > h.value) {\r\n            // not winner, but affects second place\r\n            h.value = value;\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 3);\r\n        } else {\r\n            // bid doesn't affect auction\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 4);\r\n        }"
              BinaryOperation using operator >
                 Type: bool
                 Gas costs: 215
                 Source: "value > h.highestBid"
                Identifier value
                   Type: uint256
                   Source: "value"
                MemberAccess to member highestBid
                   Type: uint256
                   Source: "h.highestBid"
                  Identifier h
                     Type: struct Registrar.entry storage pointer
                     Source: "h"
              Block
                 Source: "{\r\n            // new winner\r\n            // cancel the other bid, refund 99.5%\r\n            if(address(h.deed) != 0) {\r\n                Deed previousWinner = h.deed;\r\n                previousWinner.closeDeed(995);\r\n            }\r\n\r\n            // set new winner\r\n            // per the rules of a vickery auction, the value becomes the previous highestBid\r\n            h.value = h.highestBid;  // will be zero if there's only 1 bidder\r\n            h.highestBid = value;\r\n            h.deed = bid;\r\n            BidRevealed(_hash, msg.sender, value, 2);\r\n        }"
                IfStatement
                   Source: "if(address(h.deed) != 0) {\r\n                Deed previousWinner = h.deed;\r\n                previousWinner.closeDeed(995);\r\n            }"
                  BinaryOperation using operator !=
                     Type: bool
                     Gas costs: 260
                     Source: "address(h.deed) != 0"
                    FunctionCall
                       Type: address
                       Source: "address(h.deed)"
                      ElementaryTypeNameExpression address
                         Type: type(address)
                         Source: "address"
                      MemberAccess to member deed
                         Type: contract Deed
                         Source: "h.deed"
                        Identifier h
                           Type: struct Registrar.entry storage pointer
                           Source: "h"
                    Literal, token: [no token] value: 0
                       Type: int_const 0
                       Source: "0"
                  Block
                     Source: "{\r\n                Deed previousWinner = h.deed;\r\n                previousWinner.closeDeed(995);\r\n            }"
                    VariableDeclarationStatement
                       Gas costs: 253
                       Source: "Deed previousWinner = h.deed"
                      VariableDeclaration "previousWinner"
                         Type: contract Deed
                         Source: "Deed previousWinner"
                        UserDefinedTypeName "Deed"
                           Source: "Deed"
                      MemberAccess to member deed
                         Type: contract Deed
                         Source: "h.deed"
                        Identifier h
                           Type: struct Registrar.entry storage pointer
                           Source: "h"
                    ExpressionStatement
                       Gas costs: [???]
                       Source: "previousWinner.closeDeed(995)"
                      FunctionCall
                         Type: tuple()
                         Source: "previousWinner.closeDeed(995)"
                        MemberAccess to member closeDeed
                           Type: function (uint256) external
                           Source: "previousWinner.closeDeed"
                          Identifier previousWinner
                             Type: contract Deed
                             Source: "previousWinner"
                        Literal, token: [no token] value: 995
                           Type: int_const 995
                           Source: "995"
                ExpressionStatement
                   Gas costs: 20226
                   Source: "h.value = h.highestBid"
                  Assignment using operator =
                     Type: uint256
                     Source: "h.value = h.highestBid"
                    MemberAccess to member value
                       Type: uint256
                       Source: "h.value"
                      Identifier h
                         Type: struct Registrar.entry storage pointer
                         Source: "h"
                    MemberAccess to member highestBid
                       Type: uint256
                       Source: "h.highestBid"
                      Identifier h
                         Type: struct Registrar.entry storage pointer
                         Source: "h"
                ExpressionStatement
                   Gas costs: 20020
                   Source: "h.highestBid = value"
                  Assignment using operator =
                     Type: uint256
                     Source: "h.highestBid = value"
                    MemberAccess to member highestBid
                       Type: uint256
                       Source: "h.highestBid"
                      Identifier h
                         Type: struct Registrar.entry storage pointer
                         Source: "h"
                    Identifier value
                       Type: uint256
                       Source: "value"
                ExpressionStatement
                   Gas costs: 20273
                   Source: "h.deed = bid"
                  Assignment using operator =
                     Type: contract Deed
                     Source: "h.deed = bid"
                    MemberAccess to member deed
                       Type: contract Deed
                       Source: "h.deed"
                      Identifier h
                         Type: struct Registrar.entry storage pointer
                         Source: "h"
                    Identifier bid
                       Type: contract Deed
                       Source: "bid"
                ExpressionStatement
                   Gas costs: [???]
                   Source: "BidRevealed(_hash, msg.sender, value, 2)"
                  FunctionCall
                     Type: tuple()
                     Source: "BidRevealed(_hash, msg.sender, value, 2)"
                    Identifier BidRevealed
                       Type: function (bytes32,address,uint256,uint8)
                       Source: "BidRevealed"
                    Identifier _hash
                       Type: bytes32
                       Source: "_hash"
                    MemberAccess to member sender
                       Type: address
                       Source: "msg.sender"
                      Identifier msg
                         Type: msg
                         Source: "msg"
                    Identifier value
                       Type: uint256
                       Source: "value"
                    Literal, token: [no token] value: 2
                       Type: int_const 2
                       Source: "2"
              IfStatement
                 Source: "if (value > h.value) {\r\n            // not winner, but affects second place\r\n            h.value = value;\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 3);\r\n        } else {\r\n            // bid doesn't affect auction\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 4);\r\n        }"
                BinaryOperation using operator >
                   Type: bool
                   Gas costs: 215
                   Source: "value > h.value"
                  Identifier value
                     Type: uint256
                     Source: "value"
                  MemberAccess to member value
                     Type: uint256
                     Source: "h.value"
                    Identifier h
                       Type: struct Registrar.entry storage pointer
                       Source: "h"
                Block
                   Source: "{\r\n            // not winner, but affects second place\r\n            h.value = value;\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 3);\r\n        }"
                  ExpressionStatement
                     Gas costs: 20020
                     Source: "h.value = value"
                    Assignment using operator =
                       Type: uint256
                       Source: "h.value = value"
                      MemberAccess to member value
                         Type: uint256
                         Source: "h.value"
                        Identifier h
                           Type: struct Registrar.entry storage pointer
                           Source: "h"
                      Identifier value
                         Type: uint256
                         Source: "value"
                  ExpressionStatement
                     Gas costs: [???]
                     Source: "bid.closeDeed(995)"
                    FunctionCall
                       Type: tuple()
                       Source: "bid.closeDeed(995)"
                      MemberAccess to member closeDeed
                         Type: function (uint256) external
                         Source: "bid.closeDeed"
                        Identifier bid
                           Type: contract Deed
                           Source: "bid"
                      Literal, token: [no token] value: 995
                         Type: int_const 995
                         Source: "995"
                  ExpressionStatement
                     Gas costs: [???]
                     Source: "BidRevealed(_hash, msg.sender, value, 3)"
                    FunctionCall
                       Type: tuple()
                       Source: "BidRevealed(_hash, msg.sender, value, 3)"
                      Identifier BidRevealed
                         Type: function (bytes32,address,uint256,uint8)
                         Source: "BidRevealed"
                      Identifier _hash
                         Type: bytes32
                         Source: "_hash"
                      MemberAccess to member sender
                         Type: address
                         Source: "msg.sender"
                        Identifier msg
                           Type: msg
                           Source: "msg"
                      Identifier value
                         Type: uint256
                         Source: "value"
                      Literal, token: [no token] value: 3
                         Type: int_const 3
                         Source: "3"
                Block
                   Source: "{\r\n            // bid doesn't affect auction\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 4);\r\n        }"
                  ExpressionStatement
                     Gas costs: [???]
                     Source: "bid.closeDeed(995)"
                    FunctionCall
                       Type: tuple()
                       Source: "bid.closeDeed(995)"
                      MemberAccess to member closeDeed
                         Type: function (uint256) external
                         Source: "bid.closeDeed"
                        Identifier bid
                           Type: contract Deed
                           Source: "bid"
                      Literal, token: [no token] value: 995
                         Type: int_const 995
                         Source: "995"
                  ExpressionStatement
                     Gas costs: [???]
                     Source: "BidRevealed(_hash, msg.sender, value, 4)"
                    FunctionCall
                       Type: tuple()
                       Source: "BidRevealed(_hash, msg.sender, value, 4)"
                      Identifier BidRevealed
                         Type: function (bytes32,address,uint256,uint8)
                         Source: "BidRevealed"
                      Identifier _hash
                         Type: bytes32
                         Source: "_hash"
                      MemberAccess to member sender
                         Type: address
                         Source: "msg.sender"
                        Identifier msg
                           Type: msg
                           Source: "msg"
                      Identifier value
                         Type: uint256
                         Source: "value"
                      Literal, token: [no token] value: 4
                         Type: int_const 4
                         Source: "4"
  FunctionDefinition "cancelBid" - public
     Source: "function cancelBid(address bidder, bytes32 seal) {\r\n        Deed bid = sealedBids[bidder][seal];\r\n        \r\n        // If a sole bidder does not `unsealBid` in time, they have a few more days\r\n        // where they can call `startAuction` (again) and then `unsealBid` during\r\n        // the revealPeriod to get back their bid value.\r\n        // For simplicity, they should call `startAuction` within\r\n        // 9 days (2 weeks - totalAuctionLength), otherwise their bid will be\r\n        // cancellable by anyone.\r\n        if (address(bid) == 0\r\n            || now < bid.creationDate() + totalAuctionLength + 2 weeks) throw;\r\n\r\n        // Send the canceller 0.5% of the bid, and burn the rest.\r\n        bid.setOwner(msg.sender);\r\n        bid.closeDeed(5);\r\n        sealedBids[bidder][seal] = Deed(0);\r\n        BidRevealed(seal, bidder, 0, 5);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address bidder, bytes32 seal)"
      VariableDeclaration "bidder"
         Type: address
         Source: "address bidder"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "seal"
         Type: bytes32
         Source: "bytes32 seal"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        Deed bid = sealedBids[bidder][seal];\r\n        \r\n        // If a sole bidder does not `unsealBid` in time, they have a few more days\r\n        // where they can call `startAuction` (again) and then `unsealBid` during\r\n        // the revealPeriod to get back their bid value.\r\n        // For simplicity, they should call `startAuction` within\r\n        // 9 days (2 weeks - totalAuctionLength), otherwise their bid will be\r\n        // cancellable by anyone.\r\n        if (address(bid) == 0\r\n            || now < bid.creationDate() + totalAuctionLength + 2 weeks) throw;\r\n\r\n        // Send the canceller 0.5% of the bid, and burn the rest.\r\n        bid.setOwner(msg.sender);\r\n        bid.closeDeed(5);\r\n        sealedBids[bidder][seal] = Deed(0);\r\n        BidRevealed(seal, bidder, 0, 5);\r\n    }"
      VariableDeclarationStatement
         Gas costs: 439
         Source: "Deed bid = sealedBids[bidder][seal]"
        VariableDeclaration "bid"
           Type: contract Deed
           Source: "Deed bid"
          UserDefinedTypeName "Deed"
             Source: "Deed"
        IndexAccess
           Type: contract Deed
           Source: "sealedBids[bidder][seal]"
          IndexAccess
             Type: mapping(bytes32 => contract Deed)
             Source: "sealedBids[bidder]"
            Identifier sealedBids
               Type: mapping(address => mapping(bytes32 => contract Deed))
               Source: "sealedBids"
            Identifier bidder
               Type: address
               Source: "bidder"
          Identifier seal
             Type: bytes32
             Source: "seal"
      IfStatement
         Source: "if (address(bid) == 0\r\n            || now < bid.creationDate() + totalAuctionLength + 2 weeks) throw"
        BinaryOperation using operator ||
           Type: bool
           Gas costs: [???]
           Source: "address(bid) == 0\r\n            || now < bid.creationDate() + totalAuctionLength + 2 weeks"
          BinaryOperation using operator ==
             Type: bool
             Source: "address(bid) == 0"
            FunctionCall
               Type: address
               Source: "address(bid)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Identifier bid
                 Type: contract Deed
                 Source: "bid"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
          BinaryOperation using operator <
             Type: bool
             Source: "now < bid.creationDate() + totalAuctionLength + 2 weeks"
            Identifier now
               Type: uint256
               Source: "now"
            BinaryOperation using operator +
               Type: uint256
               Source: "bid.creationDate() + totalAuctionLength + 2 weeks"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "bid.creationDate() + totalAuctionLength"
                FunctionCall
                   Type: uint256
                   Source: "bid.creationDate()"
                  MemberAccess to member creationDate
                     Type: function () view external returns (uint256)
                     Source: "bid.creationDate"
                    Identifier bid
                       Type: contract Deed
                       Source: "bid"
                Identifier totalAuctionLength
                   Type: uint32
                   Source: "totalAuctionLength"
              Literal, token: [no token] value: 2
                 Type: int_const 1209600
                 Source: "2 weeks"
        Throw
           Gas costs: 6
           Source: "throw"
      ExpressionStatement
         Gas costs: [???]
         Source: "bid.setOwner(msg.sender)"
        FunctionCall
           Type: tuple()
           Source: "bid.setOwner(msg.sender)"
          MemberAccess to member setOwner
             Type: function (address) external
             Source: "bid.setOwner"
            Identifier bid
               Type: contract Deed
               Source: "bid"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: [???]
         Source: "bid.closeDeed(5)"
        FunctionCall
           Type: tuple()
           Source: "bid.closeDeed(5)"
          MemberAccess to member closeDeed
             Type: function (uint256) external
             Source: "bid.closeDeed"
            Identifier bid
               Type: contract Deed
               Source: "bid"
          Literal, token: [no token] value: 5
             Type: int_const 5
             Source: "5"
      ExpressionStatement
         Gas costs: 20459
         Source: "sealedBids[bidder][seal] = Deed(0)"
        Assignment using operator =
           Type: contract Deed
           Source: "sealedBids[bidder][seal] = Deed(0)"
          IndexAccess
             Type: contract Deed
             Source: "sealedBids[bidder][seal]"
            IndexAccess
               Type: mapping(bytes32 => contract Deed)
               Source: "sealedBids[bidder]"
              Identifier sealedBids
                 Type: mapping(address => mapping(bytes32 => contract Deed))
                 Source: "sealedBids"
              Identifier bidder
                 Type: address
                 Source: "bidder"
            Identifier seal
               Type: bytes32
               Source: "seal"
          FunctionCall
             Type: contract Deed
             Source: "Deed(0)"
            Identifier Deed
               Type: type(contract Deed)
               Source: "Deed"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: [???]
         Source: "BidRevealed(seal, bidder, 0, 5)"
        FunctionCall
           Type: tuple()
           Source: "BidRevealed(seal, bidder, 0, 5)"
          Identifier BidRevealed
             Type: function (bytes32,address,uint256,uint8)
             Source: "BidRevealed"
          Identifier seal
             Type: bytes32
             Source: "seal"
          Identifier bidder
             Type: address
             Source: "bidder"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
          Literal, token: [no token] value: 5
             Type: int_const 5
             Source: "5"
  FunctionDefinition "finalizeAuction" - public
     Source: "function finalizeAuction(bytes32 _hash) onlyOwner(_hash) {\r\n        entry h = _entries[_hash];\r\n        \r\n        // handles the case when there's only a single bidder (h.value is zero)\r\n        h.value =  max(h.value, minPrice);\r\n        h.deed.setBalance(h.value, true);\r\n\r\n        trySetSubnodeOwner(_hash, h.deed.owner());\r\n        HashRegistered(_hash, h.deed.owner(), h.value, h.registrationDate);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32 _hash)"
      VariableDeclaration "_hash"
         Type: bytes32
         Source: "bytes32 _hash"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 3
       Source: "onlyOwner(_hash)"
      Identifier onlyOwner
         Type: modifier (bytes32)
         Source: "onlyOwner"
      Identifier _hash
         Type: bytes32
         Source: "_hash"
    Block
       Source: "{\r\n        entry h = _entries[_hash];\r\n        \r\n        // handles the case when there's only a single bidder (h.value is zero)\r\n        h.value =  max(h.value, minPrice);\r\n        h.deed.setBalance(h.value, true);\r\n\r\n        trySetSubnodeOwner(_hash, h.deed.owner());\r\n        HashRegistered(_hash, h.deed.owner(), h.value, h.registrationDate);\r\n    }"
      VariableDeclarationStatement
         Gas costs: 113
         Source: "entry h = _entries[_hash]"
        VariableDeclaration "h"
           Type: struct Registrar.entry storage pointer
           Source: "entry h"
          UserDefinedTypeName "entry"
             Source: "entry"
        IndexAccess
           Type: struct Registrar.entry storage ref
           Source: "_entries[_hash]"
          Identifier _entries
             Type: mapping(bytes32 => struct Registrar.entry storage ref)
             Source: "_entries"
          Identifier _hash
             Type: bytes32
             Source: "_hash"
      ExpressionStatement
         Gas costs: 20230
         Source: "h.value =  max(h.value, minPrice)"
        Assignment using operator =
           Type: uint256
           Source: "h.value =  max(h.value, minPrice)"
          MemberAccess to member value
             Type: uint256
             Source: "h.value"
            Identifier h
               Type: struct Registrar.entry storage pointer
               Source: "h"
          FunctionCall
             Type: uint256
             Source: "max(h.value, minPrice)"
            Identifier max
               Type: function (uint256,uint256) view returns (uint256)
               Source: "max"
            MemberAccess to member value
               Type: uint256
               Source: "h.value"
              Identifier h
                 Type: struct Registrar.entry storage pointer
                 Source: "h"
            Identifier minPrice
               Type: uint256
               Source: "minPrice"
      ExpressionStatement
         Gas costs: [???]
         Source: "h.deed.setBalance(h.value, true)"
        FunctionCall
           Type: tuple()
           Source: "h.deed.setBalance(h.value, true)"
          MemberAccess to member setBalance
             Type: function (uint256,bool) external
             Source: "h.deed.setBalance"
            MemberAccess to member deed
               Type: contract Deed
               Source: "h.deed"
              Identifier h
                 Type: struct Registrar.entry storage pointer
                 Source: "h"
          MemberAccess to member value
             Type: uint256
             Source: "h.value"
            Identifier h
               Type: struct Registrar.entry storage pointer
               Source: "h"
          Literal, token: true value: true
             Type: bool
             Source: "true"
      ExpressionStatement
         Gas costs: [???]
         Source: "trySetSubnodeOwner(_hash, h.deed.owner())"
        FunctionCall
           Type: tuple()
           Source: "trySetSubnodeOwner(_hash, h.deed.owner())"
          Identifier trySetSubnodeOwner
             Type: function (bytes32,address)
             Source: "trySetSubnodeOwner"
          Identifier _hash
             Type: bytes32
             Source: "_hash"
          FunctionCall
             Type: address
             Source: "h.deed.owner()"
            MemberAccess to member owner
               Type: function () view external returns (address)
               Source: "h.deed.owner"
              MemberAccess to member deed
                 Type: contract Deed
                 Source: "h.deed"
                Identifier h
                   Type: struct Registrar.entry storage pointer
                   Source: "h"
      ExpressionStatement
         Gas costs: [???]
         Source: "HashRegistered(_hash, h.deed.owner(), h.value, h.registrationDate)"
        FunctionCall
           Type: tuple()
           Source: "HashRegistered(_hash, h.deed.owner(), h.value, h.registrationDate)"
          Identifier HashRegistered
             Type: function (bytes32,address,uint256,uint256)
             Source: "HashRegistered"
          Identifier _hash
             Type: bytes32
             Source: "_hash"
          FunctionCall
             Type: address
             Source: "h.deed.owner()"
            MemberAccess to member owner
               Type: function () view external returns (address)
               Source: "h.deed.owner"
              MemberAccess to member deed
                 Type: contract Deed
                 Source: "h.deed"
                Identifier h
                   Type: struct Registrar.entry storage pointer
                   Source: "h"
          MemberAccess to member value
             Type: uint256
             Source: "h.value"
            Identifier h
               Type: struct Registrar.entry storage pointer
               Source: "h"
          MemberAccess to member registrationDate
             Type: uint256
             Source: "h.registrationDate"
            Identifier h
               Type: struct Registrar.entry storage pointer
               Source: "h"
  FunctionDefinition "transfer" - public
     Source: "function transfer(bytes32 _hash, address newOwner) onlyOwner(_hash) {\r\n        if (newOwner == 0) throw;\r\n\r\n        entry h = _entries[_hash];\r\n        h.deed.setOwner(newOwner);\r\n        trySetSubnodeOwner(_hash, newOwner);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32 _hash, address newOwner)"
      VariableDeclaration "_hash"
         Type: bytes32
         Source: "bytes32 _hash"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "newOwner"
         Type: address
         Source: "address newOwner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 3
       Source: "onlyOwner(_hash)"
      Identifier onlyOwner
         Type: modifier (bytes32)
         Source: "onlyOwner"
      Identifier _hash
         Type: bytes32
         Source: "_hash"
    Block
       Source: "{\r\n        if (newOwner == 0) throw;\r\n\r\n        entry h = _entries[_hash];\r\n        h.deed.setOwner(newOwner);\r\n        trySetSubnodeOwner(_hash, newOwner);\r\n    }"
      IfStatement
         Source: "if (newOwner == 0) throw"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 15
           Source: "newOwner == 0"
          Identifier newOwner
             Type: address
             Source: "newOwner"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Throw
           Gas costs: 6
           Source: "throw"
      VariableDeclarationStatement
         Gas costs: 113
         Source: "entry h = _entries[_hash]"
        VariableDeclaration "h"
           Type: struct Registrar.entry storage pointer
           Source: "entry h"
          UserDefinedTypeName "entry"
             Source: "entry"
        IndexAccess
           Type: struct Registrar.entry storage ref
           Source: "_entries[_hash]"
          Identifier _entries
             Type: mapping(bytes32 => struct Registrar.entry storage ref)
             Source: "_entries"
          Identifier _hash
             Type: bytes32
             Source: "_hash"
      ExpressionStatement
         Gas costs: [???]
         Source: "h.deed.setOwner(newOwner)"
        FunctionCall
           Type: tuple()
           Source: "h.deed.setOwner(newOwner)"
          MemberAccess to member setOwner
             Type: function (address) external
             Source: "h.deed.setOwner"
            MemberAccess to member deed
               Type: contract Deed
               Source: "h.deed"
              Identifier h
                 Type: struct Registrar.entry storage pointer
                 Source: "h"
          Identifier newOwner
             Type: address
             Source: "newOwner"
      ExpressionStatement
         Gas costs: 10
         Source: "trySetSubnodeOwner(_hash, newOwner)"
        FunctionCall
           Type: tuple()
           Source: "trySetSubnodeOwner(_hash, newOwner)"
          Identifier trySetSubnodeOwner
             Type: function (bytes32,address)
             Source: "trySetSubnodeOwner"
          Identifier _hash
             Type: bytes32
             Source: "_hash"
          Identifier newOwner
             Type: address
             Source: "newOwner"
  FunctionDefinition "releaseDeed" - public
     Source: "function releaseDeed(bytes32 _hash) onlyOwner(_hash) {\r\n        entry h = _entries[_hash];\r\n        Deed deedContract = h.deed;\r\n        if(now < h.registrationDate + 1 years && ens.owner(rootNode) == address(this)) throw;\r\n\r\n        h.value = 0;\r\n        h.highestBid = 0;\r\n        h.deed = Deed(0);\r\n\r\n        _tryEraseSingleNode(_hash);\r\n        deedContract.closeDeed(1000);\r\n        HashReleased(_hash, h.value);        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32 _hash)"
      VariableDeclaration "_hash"
         Type: bytes32
         Source: "bytes32 _hash"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 3
       Source: "onlyOwner(_hash)"
      Identifier onlyOwner
         Type: modifier (bytes32)
         Source: "onlyOwner"
      Identifier _hash
         Type: bytes32
         Source: "_hash"
    Block
       Source: "{\r\n        entry h = _entries[_hash];\r\n        Deed deedContract = h.deed;\r\n        if(now < h.registrationDate + 1 years && ens.owner(rootNode) == address(this)) throw;\r\n\r\n        h.value = 0;\r\n        h.highestBid = 0;\r\n        h.deed = Deed(0);\r\n\r\n        _tryEraseSingleNode(_hash);\r\n        deedContract.closeDeed(1000);\r\n        HashReleased(_hash, h.value);        \r\n    }"
      VariableDeclarationStatement
         Gas costs: 113
         Source: "entry h = _entries[_hash]"
        VariableDeclaration "h"
           Type: struct Registrar.entry storage pointer
           Source: "entry h"
          UserDefinedTypeName "entry"
             Source: "entry"
        IndexAccess
           Type: struct Registrar.entry storage ref
           Source: "_entries[_hash]"
          Identifier _entries
             Type: mapping(bytes32 => struct Registrar.entry storage ref)
             Source: "_entries"
          Identifier _hash
             Type: bytes32
             Source: "_hash"
      VariableDeclarationStatement
         Gas costs: 253
         Source: "Deed deedContract = h.deed"
        VariableDeclaration "deedContract"
           Type: contract Deed
           Source: "Deed deedContract"
          UserDefinedTypeName "Deed"
             Source: "Deed"
        MemberAccess to member deed
           Type: contract Deed
           Source: "h.deed"
          Identifier h
             Type: struct Registrar.entry storage pointer
             Source: "h"
      IfStatement
         Source: "if(now < h.registrationDate + 1 years && ens.owner(rootNode) == address(this)) throw"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: [???]
           Source: "now < h.registrationDate + 1 years && ens.owner(rootNode) == address(this)"
          BinaryOperation using operator <
             Type: bool
             Source: "now < h.registrationDate + 1 years"
            Identifier now
               Type: uint256
               Source: "now"
            BinaryOperation using operator +
               Type: uint256
               Source: "h.registrationDate + 1 years"
              MemberAccess to member registrationDate
                 Type: uint256
                 Source: "h.registrationDate"
                Identifier h
                   Type: struct Registrar.entry storage pointer
                   Source: "h"
              Literal, token: [no token] value: 1
                 Type: int_const 31536000
                 Source: "1 years"
          BinaryOperation using operator ==
             Type: bool
             Source: "ens.owner(rootNode) == address(this)"
            FunctionCall
               Type: address
               Source: "ens.owner(rootNode)"
              MemberAccess to member owner
                 Type: function (bytes32) view external returns (address)
                 Source: "ens.owner"
                Identifier ens
                   Type: contract AbstractENS
                   Source: "ens"
              Identifier rootNode
                 Type: bytes32
                 Source: "rootNode"
            FunctionCall
               Type: address
               Source: "address(this)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Identifier this
                 Type: contract Registrar
                 Source: "this"
        Throw
           Gas costs: 6
           Source: "throw"
      ExpressionStatement
         Gas costs: 5020
         Source: "h.value = 0"
        Assignment using operator =
           Type: uint256
           Source: "h.value = 0"
          MemberAccess to member value
             Type: uint256
             Source: "h.value"
            Identifier h
               Type: struct Registrar.entry storage pointer
               Source: "h"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 5020
         Source: "h.highestBid = 0"
        Assignment using operator =
           Type: uint256
           Source: "h.highestBid = 0"
          MemberAccess to member highestBid
             Type: uint256
             Source: "h.highestBid"
            Identifier h
               Type: struct Registrar.entry storage pointer
               Source: "h"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 20273
         Source: "h.deed = Deed(0)"
        Assignment using operator =
           Type: contract Deed
           Source: "h.deed = Deed(0)"
          MemberAccess to member deed
             Type: contract Deed
             Source: "h.deed"
            Identifier h
               Type: struct Registrar.entry storage pointer
               Source: "h"
          FunctionCall
             Type: contract Deed
             Source: "Deed(0)"
            Identifier Deed
               Type: type(contract Deed)
               Source: "Deed"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: 7
         Source: "_tryEraseSingleNode(_hash)"
        FunctionCall
           Type: tuple()
           Source: "_tryEraseSingleNode(_hash)"
          Identifier _tryEraseSingleNode
             Type: function (bytes32)
             Source: "_tryEraseSingleNode"
          Identifier _hash
             Type: bytes32
             Source: "_hash"
      ExpressionStatement
         Gas costs: [???]
         Source: "deedContract.closeDeed(1000)"
        FunctionCall
           Type: tuple()
           Source: "deedContract.closeDeed(1000)"
          MemberAccess to member closeDeed
             Type: function (uint256) external
             Source: "deedContract.closeDeed"
            Identifier deedContract
               Type: contract Deed
               Source: "deedContract"
          Literal, token: [no token] value: 1000
             Type: int_const 1000
             Source: "1000"
      ExpressionStatement
         Gas costs: [???]
         Source: "HashReleased(_hash, h.value)"
        FunctionCall
           Type: tuple()
           Source: "HashReleased(_hash, h.value)"
          Identifier HashReleased
             Type: function (bytes32,uint256)
             Source: "HashReleased"
          Identifier _hash
             Type: bytes32
             Source: "_hash"
          MemberAccess to member value
             Type: uint256
             Source: "h.value"
            Identifier h
               Type: struct Registrar.entry storage pointer
               Source: "h"
  FunctionDefinition "invalidateName" - public
     Source: "function invalidateName(string unhashedName) inState(sha3(unhashedName), Mode.Owned) {\r\n        if (strlen(unhashedName) > 6 ) throw;\r\n        bytes32 hash = sha3(unhashedName);\r\n\r\n        entry h = _entries[hash];\r\n\r\n        _tryEraseSingleNode(hash);\r\n\r\n        if(address(h.deed) != 0) {\r\n            // Reward the discoverer with 50% of the deed\r\n            // The previous owner gets 50%\r\n            h.value = max(h.value, minPrice);\r\n            h.deed.setBalance(h.value/2, false);\r\n            h.deed.setOwner(msg.sender);\r\n            h.deed.closeDeed(1000);\r\n        }\r\n\r\n        HashInvalidated(hash, unhashedName, h.value, h.registrationDate);\r\n\r\n        h.value = 0;\r\n        h.highestBid = 0;\r\n        h.deed = Deed(0);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(string unhashedName)"
      VariableDeclaration "unhashedName"
         Type: string memory
         Source: "string unhashedName"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "inState"
       Gas costs: [???]
       Source: "inState(sha3(unhashedName), Mode.Owned)"
      Identifier inState
         Type: modifier (bytes32,enum Registrar.Mode)
         Source: "inState"
      FunctionCall
         Type: bytes32
         Source: "sha3(unhashedName)"
        Identifier sha3
           Type: function () pure returns (bytes32)
           Source: "sha3"
        Identifier unhashedName
           Type: string memory
           Source: "unhashedName"
      MemberAccess to member Owned
         Type: enum Registrar.Mode
         Source: "Mode.Owned"
        Identifier Mode
           Type: type(enum Registrar.Mode)
           Source: "Mode"
    Block
       Source: "{\r\n        if (strlen(unhashedName) > 6 ) throw;\r\n        bytes32 hash = sha3(unhashedName);\r\n\r\n        entry h = _entries[hash];\r\n\r\n        _tryEraseSingleNode(hash);\r\n\r\n        if(address(h.deed) != 0) {\r\n            // Reward the discoverer with 50% of the deed\r\n            // The previous owner gets 50%\r\n            h.value = max(h.value, minPrice);\r\n            h.deed.setBalance(h.value/2, false);\r\n            h.deed.setOwner(msg.sender);\r\n            h.deed.closeDeed(1000);\r\n        }\r\n\r\n        HashInvalidated(hash, unhashedName, h.value, h.registrationDate);\r\n\r\n        h.value = 0;\r\n        h.highestBid = 0;\r\n        h.deed = Deed(0);\r\n    }"
      IfStatement
         Source: "if (strlen(unhashedName) > 6 ) throw"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 13
           Source: "strlen(unhashedName) > 6"
          FunctionCall
             Type: uint256
             Source: "strlen(unhashedName)"
            Identifier strlen
               Type: function (string memory) view returns (uint256)
               Source: "strlen"
            Identifier unhashedName
               Type: string memory
               Source: "unhashedName"
          Literal, token: [no token] value: 6
             Type: int_const 6
             Source: "6"
        Throw
           Gas costs: 6
           Source: "throw"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "bytes32 hash = sha3(unhashedName)"
        VariableDeclaration "hash"
           Type: bytes32
           Source: "bytes32 hash"
          ElementaryTypeName bytes32
             Source: "bytes32"
        FunctionCall
           Type: bytes32
           Source: "sha3(unhashedName)"
          Identifier sha3
             Type: function () pure returns (bytes32)
             Source: "sha3"
          Identifier unhashedName
             Type: string memory
             Source: "unhashedName"
      VariableDeclarationStatement
         Gas costs: 107
         Source: "entry h = _entries[hash]"
        VariableDeclaration "h"
           Type: struct Registrar.entry storage pointer
           Source: "entry h"
          UserDefinedTypeName "entry"
             Source: "entry"
        IndexAccess
           Type: struct Registrar.entry storage ref
           Source: "_entries[hash]"
          Identifier _entries
             Type: mapping(bytes32 => struct Registrar.entry storage ref)
             Source: "_entries"
          Identifier hash
             Type: bytes32
             Source: "hash"
      ExpressionStatement
         Gas costs: 18
         Source: "_tryEraseSingleNode(hash)"
        FunctionCall
           Type: tuple()
           Source: "_tryEraseSingleNode(hash)"
          Identifier _tryEraseSingleNode
             Type: function (bytes32)
             Source: "_tryEraseSingleNode"
          Identifier hash
             Type: bytes32
             Source: "hash"
      IfStatement
         Source: "if(address(h.deed) != 0) {\r\n            // Reward the discoverer with 50% of the deed\r\n            // The previous owner gets 50%\r\n            h.value = max(h.value, minPrice);\r\n            h.deed.setBalance(h.value/2, false);\r\n            h.deed.setOwner(msg.sender);\r\n            h.deed.closeDeed(1000);\r\n        }"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 260
           Source: "address(h.deed) != 0"
          FunctionCall
             Type: address
             Source: "address(h.deed)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            MemberAccess to member deed
               Type: contract Deed
               Source: "h.deed"
              Identifier h
                 Type: struct Registrar.entry storage pointer
                 Source: "h"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n            // Reward the discoverer with 50% of the deed\r\n            // The previous owner gets 50%\r\n            h.value = max(h.value, minPrice);\r\n            h.deed.setBalance(h.value/2, false);\r\n            h.deed.setOwner(msg.sender);\r\n            h.deed.closeDeed(1000);\r\n        }"
          ExpressionStatement
             Gas costs: 20241
             Source: "h.value = max(h.value, minPrice)"
            Assignment using operator =
               Type: uint256
               Source: "h.value = max(h.value, minPrice)"
              MemberAccess to member value
                 Type: uint256
                 Source: "h.value"
                Identifier h
                   Type: struct Registrar.entry storage pointer
                   Source: "h"
              FunctionCall
                 Type: uint256
                 Source: "max(h.value, minPrice)"
                Identifier max
                   Type: function (uint256,uint256) view returns (uint256)
                   Source: "max"
                MemberAccess to member value
                   Type: uint256
                   Source: "h.value"
                  Identifier h
                     Type: struct Registrar.entry storage pointer
                     Source: "h"
                Identifier minPrice
                   Type: uint256
                   Source: "minPrice"
          ExpressionStatement
             Gas costs: [???]
             Source: "h.deed.setBalance(h.value/2, false)"
            FunctionCall
               Type: tuple()
               Source: "h.deed.setBalance(h.value/2, false)"
              MemberAccess to member setBalance
                 Type: function (uint256,bool) external
                 Source: "h.deed.setBalance"
                MemberAccess to member deed
                   Type: contract Deed
                   Source: "h.deed"
                  Identifier h
                     Type: struct Registrar.entry storage pointer
                     Source: "h"
              BinaryOperation using operator /
                 Type: uint256
                 Source: "h.value/2"
                MemberAccess to member value
                   Type: uint256
                   Source: "h.value"
                  Identifier h
                     Type: struct Registrar.entry storage pointer
                     Source: "h"
                Literal, token: [no token] value: 2
                   Type: int_const 2
                   Source: "2"
              Literal, token: false value: false
                 Type: bool
                 Source: "false"
          ExpressionStatement
             Gas costs: [???]
             Source: "h.deed.setOwner(msg.sender)"
            FunctionCall
               Type: tuple()
               Source: "h.deed.setOwner(msg.sender)"
              MemberAccess to member setOwner
                 Type: function (address) external
                 Source: "h.deed.setOwner"
                MemberAccess to member deed
                   Type: contract Deed
                   Source: "h.deed"
                  Identifier h
                     Type: struct Registrar.entry storage pointer
                     Source: "h"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
          ExpressionStatement
             Gas costs: [???]
             Source: "h.deed.closeDeed(1000)"
            FunctionCall
               Type: tuple()
               Source: "h.deed.closeDeed(1000)"
              MemberAccess to member closeDeed
                 Type: function (uint256) external
                 Source: "h.deed.closeDeed"
                MemberAccess to member deed
                   Type: contract Deed
                   Source: "h.deed"
                  Identifier h
                     Type: struct Registrar.entry storage pointer
                     Source: "h"
              Literal, token: [no token] value: 1000
                 Type: int_const 1000
                 Source: "1000"
      ExpressionStatement
         Gas costs: [???]
         Source: "HashInvalidated(hash, unhashedName, h.value, h.registrationDate)"
        FunctionCall
           Type: tuple()
           Source: "HashInvalidated(hash, unhashedName, h.value, h.registrationDate)"
          Identifier HashInvalidated
             Type: function (bytes32,string memory,uint256,uint256)
             Source: "HashInvalidated"
          Identifier hash
             Type: bytes32
             Source: "hash"
          Identifier unhashedName
             Type: string memory
             Source: "unhashedName"
          MemberAccess to member value
             Type: uint256
             Source: "h.value"
            Identifier h
               Type: struct Registrar.entry storage pointer
               Source: "h"
          MemberAccess to member registrationDate
             Type: uint256
             Source: "h.registrationDate"
            Identifier h
               Type: struct Registrar.entry storage pointer
               Source: "h"
      ExpressionStatement
         Gas costs: 5020
         Source: "h.value = 0"
        Assignment using operator =
           Type: uint256
           Source: "h.value = 0"
          MemberAccess to member value
             Type: uint256
             Source: "h.value"
            Identifier h
               Type: struct Registrar.entry storage pointer
               Source: "h"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 5020
         Source: "h.highestBid = 0"
        Assignment using operator =
           Type: uint256
           Source: "h.highestBid = 0"
          MemberAccess to member highestBid
             Type: uint256
             Source: "h.highestBid"
            Identifier h
               Type: struct Registrar.entry storage pointer
               Source: "h"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 20273
         Source: "h.deed = Deed(0)"
        Assignment using operator =
           Type: contract Deed
           Source: "h.deed = Deed(0)"
          MemberAccess to member deed
             Type: contract Deed
             Source: "h.deed"
            Identifier h
               Type: struct Registrar.entry storage pointer
               Source: "h"
          FunctionCall
             Type: contract Deed
             Source: "Deed(0)"
            Identifier Deed
               Type: type(contract Deed)
               Source: "Deed"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
  FunctionDefinition "eraseNode" - public
     Source: "function eraseNode(bytes32[] labels) {\r\n        if(labels.length == 0) throw;\r\n        if(state(labels[labels.length - 1]) == Mode.Owned) throw;\r\n\r\n        _eraseNodeHierarchy(labels.length - 1, labels, rootNode);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32[] labels)"
      VariableDeclaration "labels"
         Type: bytes32[] memory
         Source: "bytes32[] labels"
        ArrayTypeName
           Source: "bytes32[]"
          ElementaryTypeName bytes32
             Source: "bytes32"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if(labels.length == 0) throw;\r\n        if(state(labels[labels.length - 1]) == Mode.Owned) throw;\r\n\r\n        _eraseNodeHierarchy(labels.length - 1, labels, rootNode);\r\n    }"
      IfStatement
         Source: "if(labels.length == 0) throw"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: [???]
           Source: "labels.length == 0"
          MemberAccess to member length
             Type: uint256
             Source: "labels.length"
            Identifier labels
               Type: bytes32[] memory
               Source: "labels"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Throw
           Gas costs: 6
           Source: "throw"
      IfStatement
         Source: "if(state(labels[labels.length - 1]) == Mode.Owned) throw"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: [???]
           Source: "state(labels[labels.length - 1]) == Mode.Owned"
          FunctionCall
             Type: enum Registrar.Mode
             Source: "state(labels[labels.length - 1])"
            Identifier state
               Type: function (bytes32) view returns (enum Registrar.Mode)
               Source: "state"
            IndexAccess
               Type: bytes32
               Source: "labels[labels.length - 1]"
              Identifier labels
                 Type: bytes32[] memory
                 Source: "labels"
              BinaryOperation using operator -
                 Type: uint256
                 Source: "labels.length - 1"
                MemberAccess to member length
                   Type: uint256
                   Source: "labels.length"
                  Identifier labels
                     Type: bytes32[] memory
                     Source: "labels"
                Literal, token: [no token] value: 1
                   Type: int_const 1
                   Source: "1"
          MemberAccess to member Owned
             Type: enum Registrar.Mode
             Source: "Mode.Owned"
            Identifier Mode
               Type: type(enum Registrar.Mode)
               Source: "Mode"
        Throw
           Gas costs: 6
           Source: "throw"
      ExpressionStatement
         Gas costs: [???]
         Source: "_eraseNodeHierarchy(labels.length - 1, labels, rootNode)"
        FunctionCall
           Type: tuple()
           Source: "_eraseNodeHierarchy(labels.length - 1, labels, rootNode)"
          Identifier _eraseNodeHierarchy
             Type: function (uint256,bytes32[] memory,bytes32)
             Source: "_eraseNodeHierarchy"
          BinaryOperation using operator -
             Type: uint256
             Source: "labels.length - 1"
            MemberAccess to member length
               Type: uint256
               Source: "labels.length"
              Identifier labels
                 Type: bytes32[] memory
                 Source: "labels"
            Literal, token: [no token] value: 1
               Type: int_const 1
               Source: "1"
          Identifier labels
             Type: bytes32[] memory
             Source: "labels"
          Identifier rootNode
             Type: bytes32
             Source: "rootNode"
  FunctionDefinition "_tryEraseSingleNode"
     Source: "function _tryEraseSingleNode(bytes32 label) internal {\r\n        if(ens.owner(rootNode) == address(this)) {\r\n            ens.setSubnodeOwner(rootNode, label, address(this));\r\n            var node = sha3(rootNode, label);\r\n            ens.setResolver(node, 0);\r\n            ens.setOwner(node, 0);\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32 label)"
      VariableDeclaration "label"
         Type: bytes32
         Source: "bytes32 label"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if(ens.owner(rootNode) == address(this)) {\r\n            ens.setSubnodeOwner(rootNode, label, address(this));\r\n            var node = sha3(rootNode, label);\r\n            ens.setResolver(node, 0);\r\n            ens.setOwner(node, 0);\r\n        }\r\n    }"
      IfStatement
         Source: "if(ens.owner(rootNode) == address(this)) {\r\n            ens.setSubnodeOwner(rootNode, label, address(this));\r\n            var node = sha3(rootNode, label);\r\n            ens.setResolver(node, 0);\r\n            ens.setOwner(node, 0);\r\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: [???]
           Source: "ens.owner(rootNode) == address(this)"
          FunctionCall
             Type: address
             Source: "ens.owner(rootNode)"
            MemberAccess to member owner
               Type: function (bytes32) view external returns (address)
               Source: "ens.owner"
              Identifier ens
                 Type: contract AbstractENS
                 Source: "ens"
            Identifier rootNode
               Type: bytes32
               Source: "rootNode"
          FunctionCall
             Type: address
             Source: "address(this)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Identifier this
               Type: contract Registrar
               Source: "this"
        Block
           Source: "{\r\n            ens.setSubnodeOwner(rootNode, label, address(this));\r\n            var node = sha3(rootNode, label);\r\n            ens.setResolver(node, 0);\r\n            ens.setOwner(node, 0);\r\n        }"
          ExpressionStatement
             Gas costs: [???]
             Source: "ens.setSubnodeOwner(rootNode, label, address(this))"
            FunctionCall
               Type: tuple()
               Source: "ens.setSubnodeOwner(rootNode, label, address(this))"
              MemberAccess to member setSubnodeOwner
                 Type: function (bytes32,bytes32,address) external
                 Source: "ens.setSubnodeOwner"
                Identifier ens
                   Type: contract AbstractENS
                   Source: "ens"
              Identifier rootNode
                 Type: bytes32
                 Source: "rootNode"
              Identifier label
                 Type: bytes32
                 Source: "label"
              FunctionCall
                 Type: address
                 Source: "address(this)"
                ElementaryTypeNameExpression address
                   Type: type(address)
                   Source: "address"
                Identifier this
                   Type: contract Registrar
                   Source: "this"
          VariableDeclarationStatement
             Gas costs: [???]
             Source: "var node = sha3(rootNode, label)"
            VariableDeclaration "node"
               Type: bytes32
               Source: "var node"
            FunctionCall
               Type: bytes32
               Source: "sha3(rootNode, label)"
              Identifier sha3
                 Type: function () pure returns (bytes32)
                 Source: "sha3"
              Identifier rootNode
                 Type: bytes32
                 Source: "rootNode"
              Identifier label
                 Type: bytes32
                 Source: "label"
          ExpressionStatement
             Gas costs: [???]
             Source: "ens.setResolver(node, 0)"
            FunctionCall
               Type: tuple()
               Source: "ens.setResolver(node, 0)"
              MemberAccess to member setResolver
                 Type: function (bytes32,address) external
                 Source: "ens.setResolver"
                Identifier ens
                   Type: contract AbstractENS
                   Source: "ens"
              Identifier node
                 Type: bytes32
                 Source: "node"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
          ExpressionStatement
             Gas costs: [???]
             Source: "ens.setOwner(node, 0)"
            FunctionCall
               Type: tuple()
               Source: "ens.setOwner(node, 0)"
              MemberAccess to member setOwner
                 Type: function (bytes32,address) external
                 Source: "ens.setOwner"
                Identifier ens
                   Type: contract AbstractENS
                   Source: "ens"
              Identifier node
                 Type: bytes32
                 Source: "node"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
  FunctionDefinition "_eraseNodeHierarchy"
     Source: "function _eraseNodeHierarchy(uint idx, bytes32[] labels, bytes32 node) internal {\r\n        // Take ownership of the node\r\n        ens.setSubnodeOwner(node, labels[idx], address(this));\r\n        node = sha3(node, labels[idx]);\r\n        \r\n        // Recurse if there's more labels\r\n        if(idx > 0)\r\n            _eraseNodeHierarchy(idx - 1, labels, node);\r\n\r\n        // Erase the resolver and owner records\r\n        ens.setResolver(node, 0);\r\n        ens.setOwner(node, 0);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint idx, bytes32[] labels, bytes32 node)"
      VariableDeclaration "idx"
         Type: uint256
         Source: "uint idx"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "labels"
         Type: bytes32[] memory
         Source: "bytes32[] labels"
        ArrayTypeName
           Source: "bytes32[]"
          ElementaryTypeName bytes32
             Source: "bytes32"
      VariableDeclaration "node"
         Type: bytes32
         Source: "bytes32 node"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        // Take ownership of the node\r\n        ens.setSubnodeOwner(node, labels[idx], address(this));\r\n        node = sha3(node, labels[idx]);\r\n        \r\n        // Recurse if there's more labels\r\n        if(idx > 0)\r\n            _eraseNodeHierarchy(idx - 1, labels, node);\r\n\r\n        // Erase the resolver and owner records\r\n        ens.setResolver(node, 0);\r\n        ens.setOwner(node, 0);\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "ens.setSubnodeOwner(node, labels[idx], address(this))"
        FunctionCall
           Type: tuple()
           Source: "ens.setSubnodeOwner(node, labels[idx], address(this))"
          MemberAccess to member setSubnodeOwner
             Type: function (bytes32,bytes32,address) external
             Source: "ens.setSubnodeOwner"
            Identifier ens
               Type: contract AbstractENS
               Source: "ens"
          Identifier node
             Type: bytes32
             Source: "node"
          IndexAccess
             Type: bytes32
             Source: "labels[idx]"
            Identifier labels
               Type: bytes32[] memory
               Source: "labels"
            Identifier idx
               Type: uint256
               Source: "idx"
          FunctionCall
             Type: address
             Source: "address(this)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Identifier this
               Type: contract Registrar
               Source: "this"
      ExpressionStatement
         Gas costs: [???]
         Source: "node = sha3(node, labels[idx])"
        Assignment using operator =
           Type: bytes32
           Source: "node = sha3(node, labels[idx])"
          Identifier node
             Type: bytes32
             Source: "node"
          FunctionCall
             Type: bytes32
             Source: "sha3(node, labels[idx])"
            Identifier sha3
               Type: function () pure returns (bytes32)
               Source: "sha3"
            Identifier node
               Type: bytes32
               Source: "node"
            IndexAccess
               Type: bytes32
               Source: "labels[idx]"
              Identifier labels
                 Type: bytes32[] memory
                 Source: "labels"
              Identifier idx
                 Type: uint256
                 Source: "idx"
      IfStatement
         Source: "if(idx > 0)\r\n            _eraseNodeHierarchy(idx - 1, labels, node)"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 9
           Source: "idx > 0"
          Identifier idx
             Type: uint256
             Source: "idx"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        ExpressionStatement
           Gas costs: 30
           Source: "_eraseNodeHierarchy(idx - 1, labels, node)"
          FunctionCall
             Type: tuple()
             Source: "_eraseNodeHierarchy(idx - 1, labels, node)"
            Identifier _eraseNodeHierarchy
               Type: function (uint256,bytes32[] memory,bytes32)
               Source: "_eraseNodeHierarchy"
            BinaryOperation using operator -
               Type: uint256
               Source: "idx - 1"
              Identifier idx
                 Type: uint256
                 Source: "idx"
              Literal, token: [no token] value: 1
                 Type: int_const 1
                 Source: "1"
            Identifier labels
               Type: bytes32[] memory
               Source: "labels"
            Identifier node
               Type: bytes32
               Source: "node"
      ExpressionStatement
         Gas costs: [???]
         Source: "ens.setResolver(node, 0)"
        FunctionCall
           Type: tuple()
           Source: "ens.setResolver(node, 0)"
          MemberAccess to member setResolver
             Type: function (bytes32,address) external
             Source: "ens.setResolver"
            Identifier ens
               Type: contract AbstractENS
               Source: "ens"
          Identifier node
             Type: bytes32
             Source: "node"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: [???]
         Source: "ens.setOwner(node, 0)"
        FunctionCall
           Type: tuple()
           Source: "ens.setOwner(node, 0)"
          MemberAccess to member setOwner
             Type: function (bytes32,address) external
             Source: "ens.setOwner"
            Identifier ens
               Type: contract AbstractENS
               Source: "ens"
          Identifier node
             Type: bytes32
             Source: "node"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
  FunctionDefinition "transferRegistrars" - public
     Source: "function transferRegistrars(bytes32 _hash) onlyOwner(_hash) {\r\n        var registrar = ens.owner(rootNode);\r\n        if(registrar == address(this))\r\n            throw;\r\n\r\n        // Migrate the deed\r\n        entry h = _entries[_hash];\r\n        h.deed.setRegistrar(registrar);\r\n\r\n        // Call the new registrar to accept the transfer\r\n        Registrar(registrar).acceptRegistrarTransfer(_hash, h.deed, h.registrationDate);\r\n\r\n        // Zero out the entry\r\n        h.deed = Deed(0);\r\n        h.registrationDate = 0;\r\n        h.value = 0;\r\n        h.highestBid = 0;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32 _hash)"
      VariableDeclaration "_hash"
         Type: bytes32
         Source: "bytes32 _hash"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 3
       Source: "onlyOwner(_hash)"
      Identifier onlyOwner
         Type: modifier (bytes32)
         Source: "onlyOwner"
      Identifier _hash
         Type: bytes32
         Source: "_hash"
    Block
       Source: "{\r\n        var registrar = ens.owner(rootNode);\r\n        if(registrar == address(this))\r\n            throw;\r\n\r\n        // Migrate the deed\r\n        entry h = _entries[_hash];\r\n        h.deed.setRegistrar(registrar);\r\n\r\n        // Call the new registrar to accept the transfer\r\n        Registrar(registrar).acceptRegistrarTransfer(_hash, h.deed, h.registrationDate);\r\n\r\n        // Zero out the entry\r\n        h.deed = Deed(0);\r\n        h.registrationDate = 0;\r\n        h.value = 0;\r\n        h.highestBid = 0;\r\n    }"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "var registrar = ens.owner(rootNode)"
        VariableDeclaration "registrar"
           Type: address
           Source: "var registrar"
        FunctionCall
           Type: address
           Source: "ens.owner(rootNode)"
          MemberAccess to member owner
             Type: function (bytes32) view external returns (address)
             Source: "ens.owner"
            Identifier ens
               Type: contract AbstractENS
               Source: "ens"
          Identifier rootNode
             Type: bytes32
             Source: "rootNode"
      IfStatement
         Source: "if(registrar == address(this))\r\n            throw"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 20
           Source: "registrar == address(this)"
          Identifier registrar
             Type: address
             Source: "registrar"
          FunctionCall
             Type: address
             Source: "address(this)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Identifier this
               Type: contract Registrar
               Source: "this"
        Throw
           Gas costs: 6
           Source: "throw"
      VariableDeclarationStatement
         Gas costs: 113
         Source: "entry h = _entries[_hash]"
        VariableDeclaration "h"
           Type: struct Registrar.entry storage pointer
           Source: "entry h"
          UserDefinedTypeName "entry"
             Source: "entry"
        IndexAccess
           Type: struct Registrar.entry storage ref
           Source: "_entries[_hash]"
          Identifier _entries
             Type: mapping(bytes32 => struct Registrar.entry storage ref)
             Source: "_entries"
          Identifier _hash
             Type: bytes32
             Source: "_hash"
      ExpressionStatement
         Gas costs: [???]
         Source: "h.deed.setRegistrar(registrar)"
        FunctionCall
           Type: tuple()
           Source: "h.deed.setRegistrar(registrar)"
          MemberAccess to member setRegistrar
             Type: function (address) external
             Source: "h.deed.setRegistrar"
            MemberAccess to member deed
               Type: contract Deed
               Source: "h.deed"
              Identifier h
                 Type: struct Registrar.entry storage pointer
                 Source: "h"
          Identifier registrar
             Type: address
             Source: "registrar"
      ExpressionStatement
         Gas costs: [???]
         Source: "Registrar(registrar).acceptRegistrarTransfer(_hash, h.deed, h.registrationDate)"
        FunctionCall
           Type: tuple()
           Source: "Registrar(registrar).acceptRegistrarTransfer(_hash, h.deed, h.registrationDate)"
          MemberAccess to member acceptRegistrarTransfer
             Type: function (bytes32,contract Deed,uint256) external
             Source: "Registrar(registrar).acceptRegistrarTransfer"
            FunctionCall
               Type: contract Registrar
               Source: "Registrar(registrar)"
              Identifier Registrar
                 Type: type(contract Registrar)
                 Source: "Registrar"
              Identifier registrar
                 Type: address
                 Source: "registrar"
          Identifier _hash
             Type: bytes32
             Source: "_hash"
          MemberAccess to member deed
             Type: contract Deed
             Source: "h.deed"
            Identifier h
               Type: struct Registrar.entry storage pointer
               Source: "h"
          MemberAccess to member registrationDate
             Type: uint256
             Source: "h.registrationDate"
            Identifier h
               Type: struct Registrar.entry storage pointer
               Source: "h"
      ExpressionStatement
         Gas costs: 20273
         Source: "h.deed = Deed(0)"
        Assignment using operator =
           Type: contract Deed
           Source: "h.deed = Deed(0)"
          MemberAccess to member deed
             Type: contract Deed
             Source: "h.deed"
            Identifier h
               Type: struct Registrar.entry storage pointer
               Source: "h"
          FunctionCall
             Type: contract Deed
             Source: "Deed(0)"
            Identifier Deed
               Type: type(contract Deed)
               Source: "Deed"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: 5020
         Source: "h.registrationDate = 0"
        Assignment using operator =
           Type: uint256
           Source: "h.registrationDate = 0"
          MemberAccess to member registrationDate
             Type: uint256
             Source: "h.registrationDate"
            Identifier h
               Type: struct Registrar.entry storage pointer
               Source: "h"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 5020
         Source: "h.value = 0"
        Assignment using operator =
           Type: uint256
           Source: "h.value = 0"
          MemberAccess to member value
             Type: uint256
             Source: "h.value"
            Identifier h
               Type: struct Registrar.entry storage pointer
               Source: "h"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 5020
         Source: "h.highestBid = 0"
        Assignment using operator =
           Type: uint256
           Source: "h.highestBid = 0"
          MemberAccess to member highestBid
             Type: uint256
             Source: "h.highestBid"
            Identifier h
               Type: struct Registrar.entry storage pointer
               Source: "h"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
  FunctionDefinition "acceptRegistrarTransfer" - public
     Source: "function acceptRegistrarTransfer(bytes32 hash, Deed deed, uint registrationDate) {}"
    ParameterList
       Gas costs: 0
       Source: "(bytes32 hash, Deed deed, uint registrationDate)"
      VariableDeclaration "hash"
         Type: bytes32
         Source: "bytes32 hash"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "deed"
         Type: contract Deed
         Source: "Deed deed"
        UserDefinedTypeName "Deed"
           Source: "Deed"
      VariableDeclaration "registrationDate"
         Type: uint256
         Source: "uint registrationDate"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Gas costs: 0
       Source: "{}"
