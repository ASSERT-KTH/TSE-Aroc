Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0xb8d0c280183f274101183d4c0a6057087b43baa8.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.11;"
ContractDefinition "Token"
   Source: "contract Token \r\n{\r\n\r\n    \r\n    function totalSupply() constant returns (uint256 ) {\r\n      return;\r\n    }\r\n\r\n    \r\n    \r\n    function balanceOf(address ) constant returns (uint256 ) {\r\n      return;\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    function transfer(address , uint256 ) returns (bool ) {\r\n      return;\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function transferFrom(address , address , uint256 ) returns (bool ) {\r\n      return;\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    function approve(address , uint256 ) returns (bool ) {\r\n      return;\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    function allowance(address , address ) constant returns (uint256 ) {\r\n      return;\r\n    }\r\n\r\n\r\n    event Transfer(address indexed , address indexed , uint256 );\r\n    event Approval(address indexed , address indexed , uint256 );\r\n}"
  FunctionDefinition "totalSupply" - public - const
     Source: "function totalSupply() constant returns (uint256 ) {\r\n      return;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: "(uint256 )"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n      return;\r\n    }"
      Return
         Gas costs: 0
         Source: "return;"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address ) constant returns (uint256 ) {\r\n      return;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address )"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: "(uint256 )"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n      return;\r\n    }"
      Return
         Gas costs: 0
         Source: "return;"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address , uint256 ) returns (bool ) {\r\n      return;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address , uint256 )"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(bool )"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n      return;\r\n    }"
      Return
         Gas costs: 0
         Source: "return;"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address , address , uint256 ) returns (bool ) {\r\n      return;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address , address , uint256 )"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(bool )"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n      return;\r\n    }"
      Return
         Gas costs: 0
         Source: "return;"
  FunctionDefinition "approve" - public
     Source: "function approve(address , uint256 ) returns (bool ) {\r\n      return;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address , uint256 )"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(bool )"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n      return;\r\n    }"
      Return
         Gas costs: 0
         Source: "return;"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address , address ) constant returns (uint256 ) {\r\n      return;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address , address )"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: "(uint256 )"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n      return;\r\n    }"
      Return
         Gas costs: 0
         Source: "return;"
  EventDefinition "Transfer"
     Gas costs: 0
     Source: "event Transfer(address indexed , address indexed , uint256 );"
    ParameterList
       Source: "(address indexed , address indexed , uint256 )"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Approval"
     Gas costs: 0
     Source: "event Approval(address indexed , address indexed , uint256 );"
    ParameterList
       Source: "(address indexed , address indexed , uint256 )"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
ContractDefinition "StdToken"
   Source: "contract StdToken is Token \r\n{\r\n\r\n     mapping(address => uint256) balances;\r\n     mapping (address => mapping (address => uint256)) allowed;\r\n\r\n     uint256 public allSupply = 0;\r\n\r\n\r\n     function transfer(address _to, uint256 _value) returns (bool success) \r\n     {\r\n          if((balances[msg.sender] >= _value) && (balances[_to] + _value > balances[_to])) \r\n          {\r\n               balances[msg.sender] -= _value;\r\n               balances[_to] += _value;\r\n\r\n               Transfer(msg.sender, _to, _value);\r\n               return true;\r\n          } \r\n          else \r\n          { \r\n               return false; \r\n          }\r\n     }\r\n\r\n     function transferFrom(address _from, address _to, uint256 _value) returns (bool success) \r\n     {\r\n          if((balances[_from] >= _value) && (allowed[_from][msg.sender] >= _value) && (balances[_to] + _value > balances[_to])) \r\n          {\r\n               balances[_to] += _value;\r\n               balances[_from] -= _value;\r\n               allowed[_from][msg.sender] -= _value;\r\n\r\n               Transfer(_from, _to, _value);\r\n               return true;\r\n          } \r\n          else \r\n          { \r\n               return false; \r\n          }\r\n     }\r\n\r\n     function balanceOf(address _owner) constant returns (uint256 balance) \r\n     {\r\n          return balances[_owner];\r\n     }\r\n\r\n     function approve(address _spender, uint256 _value) returns (bool success) \r\n     {\r\n          allowed[msg.sender][_spender] = _value;\r\n          Approval(msg.sender, _spender, _value);\r\n\r\n          return true;\r\n     }\r\n\r\n     function allowance(address _owner, address _spender) constant returns (uint256 remaining) \r\n     {\r\n          return allowed[_owner][_spender];\r\n     }\r\n\r\n     function totalSupply() constant returns (uint256 supplyOut) \r\n     {\r\n          supplyOut = allSupply;\r\n          return;\r\n     }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Token"
    UserDefinedTypeName "Token"
       Source: "Token"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping(address => uint256) balances"
    Mapping
       Source: "mapping(address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "allowed"
     Type: mapping(address => mapping(address => uint256))
     Gas costs: 0
     Source: "mapping (address => mapping (address => uint256)) allowed"
    Mapping
       Source: "mapping (address => mapping (address => uint256))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping (address => uint256)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint256
           Source: "uint256"
  VariableDeclaration "allSupply"
     Type: uint256
     Gas costs: 287
     Source: "uint256 public allSupply = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) returns (bool success) \r\n     {\r\n          if((balances[msg.sender] >= _value) && (balances[_to] + _value > balances[_to])) \r\n          {\r\n               balances[msg.sender] -= _value;\r\n               balances[_to] += _value;\r\n\r\n               Transfer(msg.sender, _to, _value);\r\n               return true;\r\n          } \r\n          else \r\n          { \r\n               return false; \r\n          }\r\n     }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n          if((balances[msg.sender] >= _value) && (balances[_to] + _value > balances[_to])) \r\n          {\r\n               balances[msg.sender] -= _value;\r\n               balances[_to] += _value;\r\n\r\n               Transfer(msg.sender, _to, _value);\r\n               return true;\r\n          } \r\n          else \r\n          { \r\n               return false; \r\n          }\r\n     }"
      IfStatement
         Source: "if((balances[msg.sender] >= _value) && (balances[_to] + _value > balances[_to])) \r\n          {\r\n               balances[msg.sender] -= _value;\r\n               balances[_to] += _value;\r\n\r\n               Transfer(msg.sender, _to, _value);\r\n               return true;\r\n          } \r\n          else \r\n          { \r\n               return false; \r\n          }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 930
           Source: "(balances[msg.sender] >= _value) && (balances[_to] + _value > balances[_to])"
          TupleExpression
             Type: bool
             Source: "(balances[msg.sender] >= _value)"
            BinaryOperation using operator >=
               Type: bool
               Source: "balances[msg.sender] >= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          TupleExpression
             Type: bool
             Source: "(balances[_to] + _value > balances[_to])"
            BinaryOperation using operator >
               Type: bool
               Source: "balances[_to] + _value > balances[_to]"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "balances[_to] + _value"
                IndexAccess
                   Type: uint256
                   Source: "balances[_to]"
                  Identifier balances
                     Type: mapping(address => uint256)
                     Source: "balances"
                  Identifier _to
                     Type: address
                     Source: "_to"
                Identifier _value
                   Type: uint256
                   Source: "_value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
        Block
           Source: "{\r\n               balances[msg.sender] -= _value;\r\n               balances[_to] += _value;\r\n\r\n               Transfer(msg.sender, _to, _value);\r\n               return true;\r\n          }"
          ExpressionStatement
             Gas costs: 20328
             Source: "balances[msg.sender] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "balances[msg.sender] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20323
             Source: "balances[_to] += _value"
            Assignment using operator +=
               Type: uint256
               Source: "balances[_to] += _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 1837
             Source: "Transfer(msg.sender, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(msg.sender, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{ \r\n               return false; \r\n          }"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _value) returns (bool success) \r\n     {\r\n          if((balances[_from] >= _value) && (allowed[_from][msg.sender] >= _value) && (balances[_to] + _value > balances[_to])) \r\n          {\r\n               balances[_to] += _value;\r\n               balances[_from] -= _value;\r\n               allowed[_from][msg.sender] -= _value;\r\n\r\n               Transfer(_from, _to, _value);\r\n               return true;\r\n          } \r\n          else \r\n          { \r\n               return false; \r\n          }\r\n     }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n          if((balances[_from] >= _value) && (allowed[_from][msg.sender] >= _value) && (balances[_to] + _value > balances[_to])) \r\n          {\r\n               balances[_to] += _value;\r\n               balances[_from] -= _value;\r\n               allowed[_from][msg.sender] -= _value;\r\n\r\n               Transfer(_from, _to, _value);\r\n               return true;\r\n          } \r\n          else \r\n          { \r\n               return false; \r\n          }\r\n     }"
      IfStatement
         Source: "if((balances[_from] >= _value) && (allowed[_from][msg.sender] >= _value) && (balances[_to] + _value > balances[_to])) \r\n          {\r\n               balances[_to] += _value;\r\n               balances[_from] -= _value;\r\n               allowed[_from][msg.sender] -= _value;\r\n\r\n               Transfer(_from, _to, _value);\r\n               return true;\r\n          } \r\n          else \r\n          { \r\n               return false; \r\n          }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 1350
           Source: "(balances[_from] >= _value) && (allowed[_from][msg.sender] >= _value) && (balances[_to] + _value > balances[_to])"
          BinaryOperation using operator &&
             Type: bool
             Source: "(balances[_from] >= _value) && (allowed[_from][msg.sender] >= _value)"
            TupleExpression
               Type: bool
               Source: "(balances[_from] >= _value)"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "balances[_from] >= _value"
                IndexAccess
                   Type: uint256
                   Source: "balances[_from]"
                  Identifier balances
                     Type: mapping(address => uint256)
                     Source: "balances"
                  Identifier _from
                     Type: address
                     Source: "_from"
                Identifier _value
                   Type: uint256
                   Source: "_value"
            TupleExpression
               Type: bool
               Source: "(allowed[_from][msg.sender] >= _value)"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "allowed[_from][msg.sender] >= _value"
                IndexAccess
                   Type: uint256
                   Source: "allowed[_from][msg.sender]"
                  IndexAccess
                     Type: mapping(address => uint256)
                     Source: "allowed[_from]"
                    Identifier allowed
                       Type: mapping(address => mapping(address => uint256))
                       Source: "allowed"
                    Identifier _from
                       Type: address
                       Source: "_from"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
                Identifier _value
                   Type: uint256
                   Source: "_value"
          TupleExpression
             Type: bool
             Source: "(balances[_to] + _value > balances[_to])"
            BinaryOperation using operator >
               Type: bool
               Source: "balances[_to] + _value > balances[_to]"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "balances[_to] + _value"
                IndexAccess
                   Type: uint256
                   Source: "balances[_to]"
                  Identifier balances
                     Type: mapping(address => uint256)
                     Source: "balances"
                  Identifier _to
                     Type: address
                     Source: "_to"
                Identifier _value
                   Type: uint256
                   Source: "_value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
        Block
           Source: "{\r\n               balances[_to] += _value;\r\n               balances[_from] -= _value;\r\n               allowed[_from][msg.sender] -= _value;\r\n\r\n               Transfer(_from, _to, _value);\r\n               return true;\r\n          }"
          ExpressionStatement
             Gas costs: 20329
             Source: "balances[_to] += _value"
            Assignment using operator +=
               Type: uint256
               Source: "balances[_to] += _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20323
             Source: "balances[_from] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "balances[_from] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_from]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _from
                   Type: address
                   Source: "_from"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20412
             Source: "allowed[_from][msg.sender] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "allowed[_from][msg.sender] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "allowed[_from][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[_from]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  Identifier _from
                     Type: address
                     Source: "_from"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 1838
             Source: "Transfer(_from, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(_from, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              Identifier _from
                 Type: address
                 Source: "_from"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{ \r\n               return false; \r\n          }"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) constant returns (uint256 balance) \r\n     {\r\n          return balances[_owner];\r\n     }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n          return balances[_owner];\r\n     }"
      Return
         Gas costs: 304
         Source: "return balances[_owner]"
        IndexAccess
           Type: uint256
           Source: "balances[_owner]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          Identifier _owner
             Type: address
             Source: "_owner"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint256 _value) returns (bool success) \r\n     {\r\n          allowed[msg.sender][_spender] = _value;\r\n          Approval(msg.sender, _spender, _value);\r\n\r\n          return true;\r\n     }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n          allowed[msg.sender][_spender] = _value;\r\n          Approval(msg.sender, _spender, _value);\r\n\r\n          return true;\r\n     }"
      ExpressionStatement
         Gas costs: 20199
         Source: "allowed[msg.sender][_spender] = _value"
        Assignment using operator =
           Type: uint256
           Source: "allowed[msg.sender][_spender] = _value"
          IndexAccess
             Type: uint256
             Source: "allowed[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[msg.sender]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 1837
         Source: "Approval(msg.sender, _spender, _value)"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender, _spender, _value)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) constant returns (uint256 remaining) \r\n     {\r\n          return allowed[_owner][_spender];\r\n     }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint256 remaining"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n          return allowed[_owner][_spender];\r\n     }"
      Return
         Gas costs: 394
         Source: "return allowed[_owner][_spender]"
        IndexAccess
           Type: uint256
           Source: "allowed[_owner][_spender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowed[_owner]"
            Identifier allowed
               Type: mapping(address => mapping(address => uint256))
               Source: "allowed"
            Identifier _owner
               Type: address
               Source: "_owner"
          Identifier _spender
             Type: address
             Source: "_spender"
  FunctionDefinition "totalSupply" - public - const
     Source: "function totalSupply() constant returns (uint256 supplyOut) \r\n     {\r\n          supplyOut = allSupply;\r\n          return;\r\n     }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256 supplyOut)"
      VariableDeclaration "supplyOut"
         Type: uint256
         Source: "uint256 supplyOut"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n          supplyOut = allSupply;\r\n          return;\r\n     }"
      ExpressionStatement
         Gas costs: 208
         Source: "supplyOut = allSupply"
        Assignment using operator =
           Type: uint256
           Source: "supplyOut = allSupply"
          Identifier supplyOut
             Type: uint256
             Source: "supplyOut"
          Identifier allSupply
             Type: uint256
             Source: "allSupply"
      Return
         Gas costs: 0
         Source: "return;"
ContractDefinition "ReputationToken"
   Source: "contract ReputationToken is StdToken {\r\n     string public name = \"EthlendReputationToken\";\r\n     uint public decimals = 18;\r\n     string public symbol = \"CRE\";\r\n\r\n     address public creator = 0x0;\r\n\r\n     function ReputationToken(){\r\n          creator = msg.sender;\r\n     }\r\n\r\n     function changeCreator(address newCreator){\r\n          if(msg.sender!=creator)throw;\r\n\r\n          creator = newCreator;\r\n     }\r\n\r\n     function issueTokens(address forAddress, uint tokenCount) returns (bool success){\r\n          if(msg.sender!=creator)throw;\r\n          \r\n          if(tokenCount==0) {\r\n               success = false;\r\n               return ;\r\n          }\r\n\r\n          balances[forAddress]+=tokenCount;\r\n          allSupply+=tokenCount;\r\n\r\n          success = true;\r\n          return;\r\n     }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "StdToken"
    UserDefinedTypeName "StdToken"
       Source: "StdToken"
  VariableDeclaration "name"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public name = \"EthlendReputationToken\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: EthlendReputationToken
       Type: literal_string "EthlendReputationToken"
       Source: "\"EthlendReputationToken\""
  VariableDeclaration "decimals"
     Type: uint256
     Gas costs: 287
     Source: "uint public decimals = 18"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 18
       Type: int_const 18
       Source: "18"
  VariableDeclaration "symbol"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public symbol = \"CRE\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: CRE
       Type: literal_string "CRE"
       Source: "\"CRE\""
  VariableDeclaration "creator"
     Type: address
     Gas costs: 335
     Source: "address public creator = 0x0"
    ElementaryTypeName address
       Source: "address"
    Literal, token: [no token] value: 0x0
       Type: int_const 0
       Source: "0x0"
  FunctionDefinition "ReputationToken" - public
     Source: "function ReputationToken(){\r\n          creator = msg.sender;\r\n     }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n          creator = msg.sender;\r\n     }"
      ExpressionStatement
         Gas costs: 0
         Source: "creator = msg.sender"
        Assignment using operator =
           Type: address
           Source: "creator = msg.sender"
          Identifier creator
             Type: address
             Source: "creator"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "changeCreator" - public
     Source: "function changeCreator(address newCreator){\r\n          if(msg.sender!=creator)throw;\r\n\r\n          creator = newCreator;\r\n     }"
    ParameterList
       Gas costs: 0
       Source: "(address newCreator)"
      VariableDeclaration "newCreator"
         Type: address
         Source: "address newCreator"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n          if(msg.sender!=creator)throw;\r\n\r\n          creator = newCreator;\r\n     }"
      IfStatement
         Source: "if(msg.sender!=creator)throw"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 259
           Source: "msg.sender!=creator"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier creator
             Type: address
             Source: "creator"
        Throw
           Gas costs: 6
           Source: "throw"
      ExpressionStatement
         Gas costs: 20267
         Source: "creator = newCreator"
        Assignment using operator =
           Type: address
           Source: "creator = newCreator"
          Identifier creator
             Type: address
             Source: "creator"
          Identifier newCreator
             Type: address
             Source: "newCreator"
  FunctionDefinition "issueTokens" - public
     Source: "function issueTokens(address forAddress, uint tokenCount) returns (bool success){\r\n          if(msg.sender!=creator)throw;\r\n          \r\n          if(tokenCount==0) {\r\n               success = false;\r\n               return ;\r\n          }\r\n\r\n          balances[forAddress]+=tokenCount;\r\n          allSupply+=tokenCount;\r\n\r\n          success = true;\r\n          return;\r\n     }"
    ParameterList
       Gas costs: 0
       Source: "(address forAddress, uint tokenCount)"
      VariableDeclaration "forAddress"
         Type: address
         Source: "address forAddress"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "tokenCount"
         Type: uint256
         Source: "uint tokenCount"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n          if(msg.sender!=creator)throw;\r\n          \r\n          if(tokenCount==0) {\r\n               success = false;\r\n               return ;\r\n          }\r\n\r\n          balances[forAddress]+=tokenCount;\r\n          allSupply+=tokenCount;\r\n\r\n          success = true;\r\n          return;\r\n     }"
      IfStatement
         Source: "if(msg.sender!=creator)throw"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 259
           Source: "msg.sender!=creator"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier creator
             Type: address
             Source: "creator"
        Throw
           Gas costs: 6
           Source: "throw"
      IfStatement
         Source: "if(tokenCount==0) {\r\n               success = false;\r\n               return ;\r\n          }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "tokenCount==0"
          Identifier tokenCount
             Type: uint256
             Source: "tokenCount"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n               success = false;\r\n               return ;\r\n          }"
          ExpressionStatement
             Gas costs: 8
             Source: "success = false"
            Assignment using operator =
               Type: bool
               Source: "success = false"
              Identifier success
                 Type: bool
                 Source: "success"
              Literal, token: false value: false
                 Type: bool
                 Source: "false"
          Return
             Gas costs: 11
             Source: "return ;"
      ExpressionStatement
         Gas costs: 20329
         Source: "balances[forAddress]+=tokenCount"
        Assignment using operator +=
           Type: uint256
           Source: "balances[forAddress]+=tokenCount"
          IndexAccess
             Type: uint256
             Source: "balances[forAddress]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier forAddress
               Type: address
               Source: "forAddress"
          Identifier tokenCount
             Type: uint256
             Source: "tokenCount"
      ExpressionStatement
         Gas costs: 20233
         Source: "allSupply+=tokenCount"
        Assignment using operator +=
           Type: uint256
           Source: "allSupply+=tokenCount"
          Identifier allSupply
             Type: uint256
             Source: "allSupply"
          Identifier tokenCount
             Type: uint256
             Source: "tokenCount"
      ExpressionStatement
         Gas costs: 8
         Source: "success = true"
        Assignment using operator =
           Type: bool
           Source: "success = true"
          Identifier success
             Type: bool
             Source: "success"
          Literal, token: true value: true
             Type: bool
             Source: "true"
      Return
         Gas costs: 0
         Source: "return;"
