Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0x4055ce7003525c966beff40cfe6f04ab4c0dd82f.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.8;"
ContractDefinition "SafeMath"
   Source: "contract SafeMath {\r\n\r\n    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\r\n        uint256 z = x + y;\r\n        require((z >= x) && (z >= y));\r\n        return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\r\n        require(x >= y);\r\n        uint256 z = x - y;\r\n        return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\r\n        uint256 z = x * y;\r\n        require((x == 0)||(z/x == y));\r\n        return z;\r\n    }\r\n\r\n}"
  FunctionDefinition "safeAdd"
     Source: "function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\r\n        uint256 z = x + y;\r\n        require((z >= x) && (z >= y));\r\n        return z;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 x, uint256 y)"
      VariableDeclaration "x"
         Type: uint256
         Source: "uint256 x"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "y"
         Type: uint256
         Source: "uint256 y"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        uint256 z = x + y;\r\n        require((z >= x) && (z >= y));\r\n        return z;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 17
         Source: "uint256 z = x + y"
        VariableDeclaration "z"
           Type: uint256
           Source: "uint256 z"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator +
           Type: uint256
           Source: "x + y"
          Identifier x
             Type: uint256
             Source: "x"
          Identifier y
             Type: uint256
             Source: "y"
      ExpressionStatement
         Gas costs: 72
         Source: "require((z >= x) && (z >= y))"
        FunctionCall
           Type: tuple()
           Source: "require((z >= x) && (z >= y))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator &&
             Type: bool
             Source: "(z >= x) && (z >= y)"
            TupleExpression
               Type: bool
               Source: "(z >= x)"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "z >= x"
                Identifier z
                   Type: uint256
                   Source: "z"
                Identifier x
                   Type: uint256
                   Source: "x"
            TupleExpression
               Type: bool
               Source: "(z >= y)"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "z >= y"
                Identifier z
                   Type: uint256
                   Source: "z"
                Identifier y
                   Type: uint256
                   Source: "y"
      Return
         Gas costs: 8
         Source: "return z"
        Identifier z
           Type: uint256
           Source: "z"
  FunctionDefinition "safeSubtract"
     Source: "function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\r\n        require(x >= y);\r\n        uint256 z = x - y;\r\n        return z;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 x, uint256 y)"
      VariableDeclaration "x"
         Type: uint256
         Source: "uint256 x"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "y"
         Type: uint256
         Source: "uint256 y"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        require(x >= y);\r\n        uint256 z = x - y;\r\n        return z;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "require(x >= y)"
        FunctionCall
           Type: tuple()
           Source: "require(x >= y)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "x >= y"
            Identifier x
               Type: uint256
               Source: "x"
            Identifier y
               Type: uint256
               Source: "y"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 z = x - y"
        VariableDeclaration "z"
           Type: uint256
           Source: "uint256 z"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator -
           Type: uint256
           Source: "x - y"
          Identifier x
             Type: uint256
             Source: "x"
          Identifier y
             Type: uint256
             Source: "y"
      Return
         Gas costs: 0
         Source: "return z"
        Identifier z
           Type: uint256
           Source: "z"
  FunctionDefinition "safeMult"
     Source: "function safeMult(uint256 x, uint256 y) internal returns(uint256) {\r\n        uint256 z = x * y;\r\n        require((x == 0)||(z/x == y));\r\n        return z;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 x, uint256 y)"
      VariableDeclaration "x"
         Type: uint256
         Source: "uint256 x"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "y"
         Type: uint256
         Source: "uint256 y"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        uint256 z = x * y;\r\n        require((x == 0)||(z/x == y));\r\n        return z;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 19
         Source: "uint256 z = x * y"
        VariableDeclaration "z"
           Type: uint256
           Source: "uint256 z"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator *
           Type: uint256
           Source: "x * y"
          Identifier x
             Type: uint256
             Source: "x"
          Identifier y
             Type: uint256
             Source: "y"
      ExpressionStatement
         Gas costs: 94
         Source: "require((x == 0)||(z/x == y))"
        FunctionCall
           Type: tuple()
           Source: "require((x == 0)||(z/x == y))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ||
             Type: bool
             Source: "(x == 0)||(z/x == y)"
            TupleExpression
               Type: bool
               Source: "(x == 0)"
              BinaryOperation using operator ==
                 Type: bool
                 Source: "x == 0"
                Identifier x
                   Type: uint256
                   Source: "x"
                Literal, token: [no token] value: 0
                   Type: int_const 0
                   Source: "0"
            TupleExpression
               Type: bool
               Source: "(z/x == y)"
              BinaryOperation using operator ==
                 Type: bool
                 Source: "z/x == y"
                BinaryOperation using operator /
                   Type: uint256
                   Source: "z/x"
                  Identifier z
                     Type: uint256
                     Source: "z"
                  Identifier x
                     Type: uint256
                     Source: "x"
                Identifier y
                   Type: uint256
                   Source: "y"
      Return
         Gas costs: 8
         Source: "return z"
        Identifier z
           Type: uint256
           Source: "z"
ContractDefinition "Token"
   Gas costs: [???]
   Source: "contract Token {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}"
  VariableDeclaration "totalSupply"
     Type: uint256
     Source: "uint256 public totalSupply"
    ElementaryTypeName uint256
       Source: "uint256"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) constant returns (uint256 balance);"
    ParameterList
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256 balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) returns (bool success);"
    ParameterList
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _value) returns (bool success);"
    ParameterList
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint256 _value) returns (bool success);"
    ParameterList
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) constant returns (uint256 remaining);"
    ParameterList
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256 remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint256 remaining"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Transfer"
     Source: "event Transfer(address indexed _from, address indexed _to, uint256 _value);"
    ParameterList
       Source: "(address indexed _from, address indexed _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address indexed _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address indexed _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Approval"
     Source: "event Approval(address indexed _owner, address indexed _spender, uint256 _value);"
    ParameterList
       Source: "(address indexed _owner, address indexed _spender, uint256 _value)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address indexed _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address indexed _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
ContractDefinition "StandardToken"
   Source: "contract StandardToken is Token {\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Token"
    UserDefinedTypeName "Token"
       Source: "Token"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping (address => uint256) balances"
    Mapping
       Source: "mapping (address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "allowed"
     Type: mapping(address => mapping(address => uint256))
     Gas costs: 0
     Source: "mapping (address => mapping (address => uint256)) allowed"
    Mapping
       Source: "mapping (address => mapping (address => uint256))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping (address => uint256)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }"
      IfStatement
         Source: "if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 338
           Source: "balances[msg.sender] >= _value && _value > 0"
          BinaryOperation using operator >=
             Type: bool
             Source: "balances[msg.sender] >= _value"
            IndexAccess
               Type: uint256
               Source: "balances[msg.sender]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
          BinaryOperation using operator >
             Type: bool
             Source: "_value > 0"
            Identifier _value
               Type: uint256
               Source: "_value"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
        Block
           Source: "{\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }"
          ExpressionStatement
             Gas costs: 20328
             Source: "balances[msg.sender] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "balances[msg.sender] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20323
             Source: "balances[_to] += _value"
            Assignment using operator +=
               Type: uint256
               Source: "balances[_to] += _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: [???]
             Source: "Transfer(msg.sender, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(msg.sender, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{\r\n            return false;\r\n        }"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }"
      IfStatement
         Source: "if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 758
           Source: "balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0"
          BinaryOperation using operator &&
             Type: bool
             Source: "balances[_from] >= _value && allowed[_from][msg.sender] >= _value"
            BinaryOperation using operator >=
               Type: bool
               Source: "balances[_from] >= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_from]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _from
                   Type: address
                   Source: "_from"
              Identifier _value
                 Type: uint256
                 Source: "_value"
            BinaryOperation using operator >=
               Type: bool
               Source: "allowed[_from][msg.sender] >= _value"
              IndexAccess
                 Type: uint256
                 Source: "allowed[_from][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[_from]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  Identifier _from
                     Type: address
                     Source: "_from"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          BinaryOperation using operator >
             Type: bool
             Source: "_value > 0"
            Identifier _value
               Type: uint256
               Source: "_value"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
        Block
           Source: "{\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }"
          ExpressionStatement
             Gas costs: 20329
             Source: "balances[_to] += _value"
            Assignment using operator +=
               Type: uint256
               Source: "balances[_to] += _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20323
             Source: "balances[_from] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "balances[_from] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_from]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _from
                   Type: address
                   Source: "_from"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20412
             Source: "allowed[_from][msg.sender] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "allowed[_from][msg.sender] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "allowed[_from][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[_from]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  Identifier _from
                     Type: address
                     Source: "_from"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: [???]
             Source: "Transfer(_from, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(_from, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              Identifier _from
                 Type: address
                 Source: "_from"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{\r\n            return false;\r\n        }"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return balances[_owner];\r\n    }"
      Return
         Gas costs: 304
         Source: "return balances[_owner]"
        IndexAccess
           Type: uint256
           Source: "balances[_owner]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          Identifier _owner
             Type: address
             Source: "_owner"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 20199
         Source: "allowed[msg.sender][_spender] = _value"
        Assignment using operator =
           Type: uint256
           Source: "allowed[msg.sender][_spender] = _value"
          IndexAccess
             Type: uint256
             Source: "allowed[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[msg.sender]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: [???]
         Source: "Approval(msg.sender, _spender, _value)"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender, _spender, _value)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint256 remaining"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return allowed[_owner][_spender];\r\n    }"
      Return
         Gas costs: 394
         Source: "return allowed[_owner][_spender]"
        IndexAccess
           Type: uint256
           Source: "allowed[_owner][_spender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowed[_owner]"
            Identifier allowed
               Type: mapping(address => mapping(address => uint256))
               Source: "allowed"
            Identifier _owner
               Type: address
               Source: "_owner"
          Identifier _spender
             Type: address
             Source: "_spender"
ContractDefinition "GameICO"
   Source: "contract GameICO is StandardToken, SafeMath {\r\n    // Descriptive properties\r\n    string public constant name = \"Game.com Token\";\r\n    string public constant symbol = \"GTC\";\r\n    uint256 public constant decimals = 18;\r\n    string public version = \"1.0\";\r\n\r\n    // Account for ether proceed.\r\n    address public etherProceedsAccount = 0x0;\r\n    address public multiWallet = 0x0;\r\n\r\n    // These params specify the start, end, min, and max of the sale.\r\n    bool public isFinalized;\r\n\r\n    uint256 public window0TotalSupply = 0;\r\n    uint256 public window1TotalSupply = 0;\r\n    uint256 public window2TotalSupply = 0;\r\n    uint256 public window3TotalSupply = 0;\r\n\r\n    uint256 public window0StartTime = 0;\r\n    uint256 public window0EndTime = 0;\r\n    uint256 public window1StartTime = 0;\r\n    uint256 public window1EndTime = 0;\r\n    uint256 public window2StartTime = 0;\r\n    uint256 public window2EndTime = 0;\r\n    uint256 public window3StartTime = 0;\r\n    uint256 public window3EndTime = 0;\r\n\r\n    // setting the capacity of every part of ico\r\n    uint256 public preservedTokens = 1300000000 * 10**decimals;\r\n    uint256 public window0TokenCreationCap = 200000000 * 10**decimals;\r\n    uint256 public window1TokenCreationCap = 200000000 * 10**decimals;\r\n    uint256 public window2TokenCreationCap = 300000000 * 10**decimals;\r\n    uint256 public window3TokenCreationCap = 0 * 10**decimals;\r\n\r\n    // Setting the exchange rate for the ICO.\r\n    uint256 public window0TokenExchangeRate = 5000;\r\n    uint256 public window1TokenExchangeRate = 4000;\r\n    uint256 public window2TokenExchangeRate = 3000;\r\n    uint256 public window3TokenExchangeRate = 0;\r\n\r\n    uint256 public preICOLimit = 0;\r\n\r\n    // Events for logging refunds and token creation.\r\n    //event LogRefund(address indexed _to, uint256 _value);\r\n    event CreateGameIco(address indexed _to, uint256 _value);\r\n    event PreICOTokenPushed(address indexed _buyer, uint256 _amount);\r\n\r\n    // constructor\r\n    function GameICO()\r\n    {\r\n        totalSupply =  2000000000 * 10**decimals;\r\n        isFinalized             = false;\r\n        etherProceedsAccount    = msg.sender;\r\n    }\r\n    function adjustTime(\r\n    uint256 _window0StartTime, uint256 _window0EndTime,\r\n    uint256 _window1StartTime, uint256 _window1EndTime,\r\n    uint256 _window2StartTime, uint256 _window2EndTime)\r\n    {\r\n        require(msg.sender == etherProceedsAccount);\r\n        window0StartTime = _window0StartTime;\r\n        window0EndTime = _window0EndTime;\r\n        window1StartTime = _window1StartTime;\r\n        window1EndTime = _window1EndTime;\r\n        window2StartTime = _window2StartTime;\r\n        window2EndTime = _window2EndTime;\r\n    }\r\n    function adjustSupply(uint256 _window0TotalSupply, uint256 _window1TotalSupply, uint256 _window2TotalSupply){\r\n        require(msg.sender == etherProceedsAccount);\r\n        window0TotalSupply = _window0TotalSupply * 10**decimals;\r\n        window1TotalSupply = _window1TotalSupply * 10**decimals;\r\n        window2TotalSupply = _window2TotalSupply * 10**decimals;\r\n    }\r\n    function adjustCap(uint256 _preservedTokens, uint256 _window0TokenCreationCap, uint256 _window1TokenCreationCap, uint256 _window2TokenCreationCap){\r\n        require(msg.sender == etherProceedsAccount);\r\n        preservedTokens = _preservedTokens * 10**decimals;\r\n        window0TokenCreationCap = _window0TokenCreationCap * 10**decimals;\r\n        window1TokenCreationCap = _window1TokenCreationCap * 10**decimals;\r\n        window2TokenCreationCap = _window2TokenCreationCap * 10**decimals;\r\n    }\r\n    function adjustRate(uint256 _window0TokenExchangeRate, uint256 _window1TokenExchangeRate, uint256 _window2TokenExchangeRate){\r\n        require(msg.sender == etherProceedsAccount);\r\n        window0TokenExchangeRate = _window0TokenExchangeRate;\r\n        window1TokenExchangeRate = _window1TokenExchangeRate;\r\n        window2TokenExchangeRate = _window2TokenExchangeRate;\r\n    }\r\n    function setProceedsAccount(address _newEtherProceedsAccount) {\r\n        require(msg.sender == etherProceedsAccount);\r\n        etherProceedsAccount = _newEtherProceedsAccount;\r\n    }\r\n    function setMultiWallet(address _newWallet){\r\n        require(msg.sender == etherProceedsAccount);\r\n        multiWallet = _newWallet;\r\n    }\r\n    function setPreICOLimit(uint256 _preICOLimit){\r\n        require(msg.sender == etherProceedsAccount);\r\n        preICOLimit = _preICOLimit;\r\n    }\r\n\r\n    function preICOPush(address buyer, uint256 amount) {\r\n        require(msg.sender == etherProceedsAccount);\r\n\r\n        uint256 tokens = 0;\r\n        uint256 checkedSupply = 0;\r\n        checkedSupply = safeAdd(window0TotalSupply, amount);\r\n        require(window0TokenCreationCap >= checkedSupply);\r\n        balances[buyer] += tokens;\r\n        window0TotalSupply = checkedSupply;\r\n        PreICOTokenPushed(buyer, amount);\r\n    }\r\n\r\n    function () payable {\r\n        create();\r\n    }\r\n    function create() internal{\r\n        require(!isFinalized);\r\n        require(msg.value >= 0.001 ether);\r\n        uint256 tokens = 0;\r\n        uint256 checkedSupply = 0;\r\n\r\n        if(window0StartTime != 0 && window0EndTime != 0 && time() >= window0StartTime && time() <= window0EndTime){\r\n            if(preICOLimit > 0){\r\n                require(msg.value >= preICOLimit);\r\n            }\r\n            tokens = safeMult(msg.value, window0TokenExchangeRate);\r\n            checkedSupply = safeAdd(window0TotalSupply, tokens);\r\n            require(window0TokenCreationCap >= checkedSupply);\r\n            balances[msg.sender] += tokens;\r\n            window0TotalSupply = checkedSupply;\r\n            CreateGameIco(msg.sender, tokens);\r\n        }else if(window1StartTime != 0 && window1EndTime!= 0 && time() >= window1StartTime && time() <= window1EndTime){\r\n            tokens = safeMult(msg.value, window1TokenExchangeRate);\r\n            checkedSupply = safeAdd(window1TotalSupply, tokens);\r\n            require(window1TokenCreationCap >= checkedSupply);\r\n            balances[msg.sender] += tokens;\r\n            window1TotalSupply = checkedSupply;\r\n            CreateGameIco(msg.sender, tokens);\r\n        }else if(window2StartTime != 0 && window2EndTime != 0 && time() >= window2StartTime && time() <= window2EndTime){\r\n            tokens = safeMult(msg.value, window2TokenExchangeRate);\r\n            checkedSupply = safeAdd(window2TotalSupply, tokens);\r\n            require(window2TokenCreationCap >= checkedSupply);\r\n            balances[msg.sender] += tokens;\r\n            window2TotalSupply = checkedSupply;\r\n            CreateGameIco(msg.sender, tokens);\r\n        }else{\r\n            require(false);\r\n        }\r\n\r\n    }\r\n\r\n    function time() internal returns (uint) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function today(uint startTime) internal returns (uint) {\r\n        return dayFor(time(), startTime);\r\n    }\r\n\r\n    function dayFor(uint timestamp, uint startTime) internal returns (uint) {\r\n        return timestamp < startTime ? 0 : safeSubtract(timestamp, startTime) / 24 hours + 1;\r\n    }\r\n\r\n    function withDraw(uint256 _value){\r\n        require(msg.sender == etherProceedsAccount);\r\n        if(multiWallet != 0x0){\r\n            if (!multiWallet.send(_value)) require(false);\r\n        }else{\r\n            if (!etherProceedsAccount.send(_value)) require(false);\r\n        }\r\n    }\r\n\r\n    function finalize() {\r\n        require(!isFinalized);\r\n        require(msg.sender == etherProceedsAccount);\r\n        isFinalized = true;\r\n        balances[etherProceedsAccount] += totalSupply- window0TotalSupply- window1TotalSupply - window2TotalSupply;\r\n        if(multiWallet != 0x0){\r\n            if (!multiWallet.send(this.balance)) require(false);\r\n        }else{\r\n            if (!etherProceedsAccount.send(this.balance)) require(false);\r\n        }\r\n    }\r\n\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "StandardToken"
    UserDefinedTypeName "StandardToken"
       Source: "StandardToken"
  InheritanceSpecifier
     Gas costs: 0
     Source: "SafeMath"
    UserDefinedTypeName "SafeMath"
       Source: "SafeMath"
  VariableDeclaration "name"
     Type: string memory
     Gas costs: [???]
     Source: "string public constant name = \"Game.com Token\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: Game.com Token
       Type: literal_string "Game.com Token"
       Source: "\"Game.com Token\""
  VariableDeclaration "symbol"
     Type: string memory
     Gas costs: [???]
     Source: "string public constant symbol = \"GTC\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: GTC
       Type: literal_string "GTC"
       Source: "\"GTC\""
  VariableDeclaration "decimals"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant decimals = 18"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 18
       Type: int_const 18
       Source: "18"
  VariableDeclaration "version"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public version = \"1.0\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: 1.0
       Type: literal_string "1.0"
       Source: "\"1.0\""
  VariableDeclaration "etherProceedsAccount"
     Type: address
     Gas costs: [???]
     Source: "address public etherProceedsAccount = 0x0"
    ElementaryTypeName address
       Source: "address"
    Literal, token: [no token] value: 0x0
       Type: int_const 0
       Source: "0x0"
  VariableDeclaration "multiWallet"
     Type: address
     Gas costs: [???]
     Source: "address public multiWallet = 0x0"
    ElementaryTypeName address
       Source: "address"
    Literal, token: [no token] value: 0x0
       Type: int_const 0
       Source: "0x0"
  VariableDeclaration "isFinalized"
     Type: bool
     Gas costs: [???]
     Source: "bool public isFinalized"
    ElementaryTypeName bool
       Source: "bool"
  VariableDeclaration "window0TotalSupply"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public window0TotalSupply = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "window1TotalSupply"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public window1TotalSupply = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "window2TotalSupply"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public window2TotalSupply = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "window3TotalSupply"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public window3TotalSupply = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "window0StartTime"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public window0StartTime = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "window0EndTime"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public window0EndTime = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "window1StartTime"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public window1StartTime = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "window1EndTime"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public window1EndTime = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "window2StartTime"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public window2StartTime = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "window2EndTime"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public window2EndTime = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "window3StartTime"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public window3StartTime = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "window3EndTime"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public window3EndTime = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "preservedTokens"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public preservedTokens = 1300000000 * 10**decimals"
    ElementaryTypeName uint256
       Source: "uint256"
    BinaryOperation using operator *
       Type: uint256
       Source: "1300000000 * 10**decimals"
      Literal, token: [no token] value: 1300000000
         Type: int_const 1300000000
         Source: "1300000000"
      BinaryOperation using operator **
         Type: uint256
         Source: "10**decimals"
        Literal, token: [no token] value: 10
           Type: int_const 10
           Source: "10"
        Identifier decimals
           Type: uint256
           Source: "decimals"
  VariableDeclaration "window0TokenCreationCap"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public window0TokenCreationCap = 200000000 * 10**decimals"
    ElementaryTypeName uint256
       Source: "uint256"
    BinaryOperation using operator *
       Type: uint256
       Source: "200000000 * 10**decimals"
      Literal, token: [no token] value: 200000000
         Type: int_const 200000000
         Source: "200000000"
      BinaryOperation using operator **
         Type: uint256
         Source: "10**decimals"
        Literal, token: [no token] value: 10
           Type: int_const 10
           Source: "10"
        Identifier decimals
           Type: uint256
           Source: "decimals"
  VariableDeclaration "window1TokenCreationCap"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public window1TokenCreationCap = 200000000 * 10**decimals"
    ElementaryTypeName uint256
       Source: "uint256"
    BinaryOperation using operator *
       Type: uint256
       Source: "200000000 * 10**decimals"
      Literal, token: [no token] value: 200000000
         Type: int_const 200000000
         Source: "200000000"
      BinaryOperation using operator **
         Type: uint256
         Source: "10**decimals"
        Literal, token: [no token] value: 10
           Type: int_const 10
           Source: "10"
        Identifier decimals
           Type: uint256
           Source: "decimals"
  VariableDeclaration "window2TokenCreationCap"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public window2TokenCreationCap = 300000000 * 10**decimals"
    ElementaryTypeName uint256
       Source: "uint256"
    BinaryOperation using operator *
       Type: uint256
       Source: "300000000 * 10**decimals"
      Literal, token: [no token] value: 300000000
         Type: int_const 300000000
         Source: "300000000"
      BinaryOperation using operator **
         Type: uint256
         Source: "10**decimals"
        Literal, token: [no token] value: 10
           Type: int_const 10
           Source: "10"
        Identifier decimals
           Type: uint256
           Source: "decimals"
  VariableDeclaration "window3TokenCreationCap"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public window3TokenCreationCap = 0 * 10**decimals"
    ElementaryTypeName uint256
       Source: "uint256"
    BinaryOperation using operator *
       Type: uint256
       Source: "0 * 10**decimals"
      Literal, token: [no token] value: 0
         Type: int_const 0
         Source: "0"
      BinaryOperation using operator **
         Type: uint256
         Source: "10**decimals"
        Literal, token: [no token] value: 10
           Type: int_const 10
           Source: "10"
        Identifier decimals
           Type: uint256
           Source: "decimals"
  VariableDeclaration "window0TokenExchangeRate"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public window0TokenExchangeRate = 5000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 5000
       Type: int_const 5000
       Source: "5000"
  VariableDeclaration "window1TokenExchangeRate"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public window1TokenExchangeRate = 4000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 4000
       Type: int_const 4000
       Source: "4000"
  VariableDeclaration "window2TokenExchangeRate"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public window2TokenExchangeRate = 3000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 3000
       Type: int_const 3000
       Source: "3000"
  VariableDeclaration "window3TokenExchangeRate"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public window3TokenExchangeRate = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "preICOLimit"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public preICOLimit = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  EventDefinition "CreateGameIco"
     Gas costs: 0
     Source: "event CreateGameIco(address indexed _to, uint256 _value);"
    ParameterList
       Source: "(address indexed _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address indexed _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "PreICOTokenPushed"
     Gas costs: 0
     Source: "event PreICOTokenPushed(address indexed _buyer, uint256 _amount);"
    ParameterList
       Source: "(address indexed _buyer, uint256 _amount)"
      VariableDeclaration "_buyer"
         Type: address
         Source: "address indexed _buyer"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "GameICO" - public
     Source: "function GameICO()\r\n    {\r\n        totalSupply =  2000000000 * 10**decimals;\r\n        isFinalized             = false;\r\n        etherProceedsAccount    = msg.sender;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        totalSupply =  2000000000 * 10**decimals;\r\n        isFinalized             = false;\r\n        etherProceedsAccount    = msg.sender;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "totalSupply =  2000000000 * 10**decimals"
        Assignment using operator =
           Type: uint256
           Source: "totalSupply =  2000000000 * 10**decimals"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          BinaryOperation using operator *
             Type: uint256
             Source: "2000000000 * 10**decimals"
            Literal, token: [no token] value: 2000000000
               Type: int_const 2000000000
               Source: "2000000000"
            BinaryOperation using operator **
               Type: uint256
               Source: "10**decimals"
              Literal, token: [no token] value: 10
                 Type: int_const 10
                 Source: "10"
              Identifier decimals
                 Type: uint256
                 Source: "decimals"
      ExpressionStatement
         Gas costs: 0
         Source: "isFinalized             = false"
        Assignment using operator =
           Type: bool
           Source: "isFinalized             = false"
          Identifier isFinalized
             Type: bool
             Source: "isFinalized"
          Literal, token: false value: false
             Type: bool
             Source: "false"
      ExpressionStatement
         Gas costs: 0
         Source: "etherProceedsAccount    = msg.sender"
        Assignment using operator =
           Type: address
           Source: "etherProceedsAccount    = msg.sender"
          Identifier etherProceedsAccount
             Type: address
             Source: "etherProceedsAccount"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "adjustTime" - public
     Source: "function adjustTime(\r\n    uint256 _window0StartTime, uint256 _window0EndTime,\r\n    uint256 _window1StartTime, uint256 _window1EndTime,\r\n    uint256 _window2StartTime, uint256 _window2EndTime)\r\n    {\r\n        require(msg.sender == etherProceedsAccount);\r\n        window0StartTime = _window0StartTime;\r\n        window0EndTime = _window0EndTime;\r\n        window1StartTime = _window1StartTime;\r\n        window1EndTime = _window1EndTime;\r\n        window2StartTime = _window2StartTime;\r\n        window2EndTime = _window2EndTime;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(\r\n    uint256 _window0StartTime, uint256 _window0EndTime,\r\n    uint256 _window1StartTime, uint256 _window1EndTime,\r\n    uint256 _window2StartTime, uint256 _window2EndTime)"
      VariableDeclaration "_window0StartTime"
         Type: uint256
         Source: "uint256 _window0StartTime"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_window0EndTime"
         Type: uint256
         Source: "uint256 _window0EndTime"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_window1StartTime"
         Type: uint256
         Source: "uint256 _window1StartTime"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_window1EndTime"
         Type: uint256
         Source: "uint256 _window1EndTime"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_window2StartTime"
         Type: uint256
         Source: "uint256 _window2StartTime"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_window2EndTime"
         Type: uint256
         Source: "uint256 _window2EndTime"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(msg.sender == etherProceedsAccount);\r\n        window0StartTime = _window0StartTime;\r\n        window0EndTime = _window0EndTime;\r\n        window1StartTime = _window1StartTime;\r\n        window1EndTime = _window1EndTime;\r\n        window2StartTime = _window2StartTime;\r\n        window2EndTime = _window2EndTime;\r\n    }"
      ExpressionStatement
         Gas costs: 282
         Source: "require(msg.sender == etherProceedsAccount)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == etherProceedsAccount)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == etherProceedsAccount"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier etherProceedsAccount
               Type: address
               Source: "etherProceedsAccount"
      ExpressionStatement
         Gas costs: 20014
         Source: "window0StartTime = _window0StartTime"
        Assignment using operator =
           Type: uint256
           Source: "window0StartTime = _window0StartTime"
          Identifier window0StartTime
             Type: uint256
             Source: "window0StartTime"
          Identifier _window0StartTime
             Type: uint256
             Source: "_window0StartTime"
      ExpressionStatement
         Gas costs: 20014
         Source: "window0EndTime = _window0EndTime"
        Assignment using operator =
           Type: uint256
           Source: "window0EndTime = _window0EndTime"
          Identifier window0EndTime
             Type: uint256
             Source: "window0EndTime"
          Identifier _window0EndTime
             Type: uint256
             Source: "_window0EndTime"
      ExpressionStatement
         Gas costs: 20014
         Source: "window1StartTime = _window1StartTime"
        Assignment using operator =
           Type: uint256
           Source: "window1StartTime = _window1StartTime"
          Identifier window1StartTime
             Type: uint256
             Source: "window1StartTime"
          Identifier _window1StartTime
             Type: uint256
             Source: "_window1StartTime"
      ExpressionStatement
         Gas costs: 20014
         Source: "window1EndTime = _window1EndTime"
        Assignment using operator =
           Type: uint256
           Source: "window1EndTime = _window1EndTime"
          Identifier window1EndTime
             Type: uint256
             Source: "window1EndTime"
          Identifier _window1EndTime
             Type: uint256
             Source: "_window1EndTime"
      ExpressionStatement
         Gas costs: 20014
         Source: "window2StartTime = _window2StartTime"
        Assignment using operator =
           Type: uint256
           Source: "window2StartTime = _window2StartTime"
          Identifier window2StartTime
             Type: uint256
             Source: "window2StartTime"
          Identifier _window2StartTime
             Type: uint256
             Source: "_window2StartTime"
      ExpressionStatement
         Gas costs: 20014
         Source: "window2EndTime = _window2EndTime"
        Assignment using operator =
           Type: uint256
           Source: "window2EndTime = _window2EndTime"
          Identifier window2EndTime
             Type: uint256
             Source: "window2EndTime"
          Identifier _window2EndTime
             Type: uint256
             Source: "_window2EndTime"
  FunctionDefinition "adjustSupply" - public
     Source: "function adjustSupply(uint256 _window0TotalSupply, uint256 _window1TotalSupply, uint256 _window2TotalSupply){\r\n        require(msg.sender == etherProceedsAccount);\r\n        window0TotalSupply = _window0TotalSupply * 10**decimals;\r\n        window1TotalSupply = _window1TotalSupply * 10**decimals;\r\n        window2TotalSupply = _window2TotalSupply * 10**decimals;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _window0TotalSupply, uint256 _window1TotalSupply, uint256 _window2TotalSupply)"
      VariableDeclaration "_window0TotalSupply"
         Type: uint256
         Source: "uint256 _window0TotalSupply"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_window1TotalSupply"
         Type: uint256
         Source: "uint256 _window1TotalSupply"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_window2TotalSupply"
         Type: uint256
         Source: "uint256 _window2TotalSupply"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(msg.sender == etherProceedsAccount);\r\n        window0TotalSupply = _window0TotalSupply * 10**decimals;\r\n        window1TotalSupply = _window1TotalSupply * 10**decimals;\r\n        window2TotalSupply = _window2TotalSupply * 10**decimals;\r\n    }"
      ExpressionStatement
         Gas costs: 282
         Source: "require(msg.sender == etherProceedsAccount)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == etherProceedsAccount)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == etherProceedsAccount"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier etherProceedsAccount
               Type: address
               Source: "etherProceedsAccount"
      ExpressionStatement
         Gas costs: 20082
         Source: "window0TotalSupply = _window0TotalSupply * 10**decimals"
        Assignment using operator =
           Type: uint256
           Source: "window0TotalSupply = _window0TotalSupply * 10**decimals"
          Identifier window0TotalSupply
             Type: uint256
             Source: "window0TotalSupply"
          BinaryOperation using operator *
             Type: uint256
             Source: "_window0TotalSupply * 10**decimals"
            Identifier _window0TotalSupply
               Type: uint256
               Source: "_window0TotalSupply"
            BinaryOperation using operator **
               Type: uint256
               Source: "10**decimals"
              Literal, token: [no token] value: 10
                 Type: int_const 10
                 Source: "10"
              Identifier decimals
                 Type: uint256
                 Source: "decimals"
      ExpressionStatement
         Gas costs: 20082
         Source: "window1TotalSupply = _window1TotalSupply * 10**decimals"
        Assignment using operator =
           Type: uint256
           Source: "window1TotalSupply = _window1TotalSupply * 10**decimals"
          Identifier window1TotalSupply
             Type: uint256
             Source: "window1TotalSupply"
          BinaryOperation using operator *
             Type: uint256
             Source: "_window1TotalSupply * 10**decimals"
            Identifier _window1TotalSupply
               Type: uint256
               Source: "_window1TotalSupply"
            BinaryOperation using operator **
               Type: uint256
               Source: "10**decimals"
              Literal, token: [no token] value: 10
                 Type: int_const 10
                 Source: "10"
              Identifier decimals
                 Type: uint256
                 Source: "decimals"
      ExpressionStatement
         Gas costs: 20082
         Source: "window2TotalSupply = _window2TotalSupply * 10**decimals"
        Assignment using operator =
           Type: uint256
           Source: "window2TotalSupply = _window2TotalSupply * 10**decimals"
          Identifier window2TotalSupply
             Type: uint256
             Source: "window2TotalSupply"
          BinaryOperation using operator *
             Type: uint256
             Source: "_window2TotalSupply * 10**decimals"
            Identifier _window2TotalSupply
               Type: uint256
               Source: "_window2TotalSupply"
            BinaryOperation using operator **
               Type: uint256
               Source: "10**decimals"
              Literal, token: [no token] value: 10
                 Type: int_const 10
                 Source: "10"
              Identifier decimals
                 Type: uint256
                 Source: "decimals"
  FunctionDefinition "adjustCap" - public
     Source: "function adjustCap(uint256 _preservedTokens, uint256 _window0TokenCreationCap, uint256 _window1TokenCreationCap, uint256 _window2TokenCreationCap){\r\n        require(msg.sender == etherProceedsAccount);\r\n        preservedTokens = _preservedTokens * 10**decimals;\r\n        window0TokenCreationCap = _window0TokenCreationCap * 10**decimals;\r\n        window1TokenCreationCap = _window1TokenCreationCap * 10**decimals;\r\n        window2TokenCreationCap = _window2TokenCreationCap * 10**decimals;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _preservedTokens, uint256 _window0TokenCreationCap, uint256 _window1TokenCreationCap, uint256 _window2TokenCreationCap)"
      VariableDeclaration "_preservedTokens"
         Type: uint256
         Source: "uint256 _preservedTokens"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_window0TokenCreationCap"
         Type: uint256
         Source: "uint256 _window0TokenCreationCap"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_window1TokenCreationCap"
         Type: uint256
         Source: "uint256 _window1TokenCreationCap"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_window2TokenCreationCap"
         Type: uint256
         Source: "uint256 _window2TokenCreationCap"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(msg.sender == etherProceedsAccount);\r\n        preservedTokens = _preservedTokens * 10**decimals;\r\n        window0TokenCreationCap = _window0TokenCreationCap * 10**decimals;\r\n        window1TokenCreationCap = _window1TokenCreationCap * 10**decimals;\r\n        window2TokenCreationCap = _window2TokenCreationCap * 10**decimals;\r\n    }"
      ExpressionStatement
         Gas costs: 282
         Source: "require(msg.sender == etherProceedsAccount)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == etherProceedsAccount)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == etherProceedsAccount"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier etherProceedsAccount
               Type: address
               Source: "etherProceedsAccount"
      ExpressionStatement
         Gas costs: 20082
         Source: "preservedTokens = _preservedTokens * 10**decimals"
        Assignment using operator =
           Type: uint256
           Source: "preservedTokens = _preservedTokens * 10**decimals"
          Identifier preservedTokens
             Type: uint256
             Source: "preservedTokens"
          BinaryOperation using operator *
             Type: uint256
             Source: "_preservedTokens * 10**decimals"
            Identifier _preservedTokens
               Type: uint256
               Source: "_preservedTokens"
            BinaryOperation using operator **
               Type: uint256
               Source: "10**decimals"
              Literal, token: [no token] value: 10
                 Type: int_const 10
                 Source: "10"
              Identifier decimals
                 Type: uint256
                 Source: "decimals"
      ExpressionStatement
         Gas costs: 20082
         Source: "window0TokenCreationCap = _window0TokenCreationCap * 10**decimals"
        Assignment using operator =
           Type: uint256
           Source: "window0TokenCreationCap = _window0TokenCreationCap * 10**decimals"
          Identifier window0TokenCreationCap
             Type: uint256
             Source: "window0TokenCreationCap"
          BinaryOperation using operator *
             Type: uint256
             Source: "_window0TokenCreationCap * 10**decimals"
            Identifier _window0TokenCreationCap
               Type: uint256
               Source: "_window0TokenCreationCap"
            BinaryOperation using operator **
               Type: uint256
               Source: "10**decimals"
              Literal, token: [no token] value: 10
                 Type: int_const 10
                 Source: "10"
              Identifier decimals
                 Type: uint256
                 Source: "decimals"
      ExpressionStatement
         Gas costs: 20082
         Source: "window1TokenCreationCap = _window1TokenCreationCap * 10**decimals"
        Assignment using operator =
           Type: uint256
           Source: "window1TokenCreationCap = _window1TokenCreationCap * 10**decimals"
          Identifier window1TokenCreationCap
             Type: uint256
             Source: "window1TokenCreationCap"
          BinaryOperation using operator *
             Type: uint256
             Source: "_window1TokenCreationCap * 10**decimals"
            Identifier _window1TokenCreationCap
               Type: uint256
               Source: "_window1TokenCreationCap"
            BinaryOperation using operator **
               Type: uint256
               Source: "10**decimals"
              Literal, token: [no token] value: 10
                 Type: int_const 10
                 Source: "10"
              Identifier decimals
                 Type: uint256
                 Source: "decimals"
      ExpressionStatement
         Gas costs: 20082
         Source: "window2TokenCreationCap = _window2TokenCreationCap * 10**decimals"
        Assignment using operator =
           Type: uint256
           Source: "window2TokenCreationCap = _window2TokenCreationCap * 10**decimals"
          Identifier window2TokenCreationCap
             Type: uint256
             Source: "window2TokenCreationCap"
          BinaryOperation using operator *
             Type: uint256
             Source: "_window2TokenCreationCap * 10**decimals"
            Identifier _window2TokenCreationCap
               Type: uint256
               Source: "_window2TokenCreationCap"
            BinaryOperation using operator **
               Type: uint256
               Source: "10**decimals"
              Literal, token: [no token] value: 10
                 Type: int_const 10
                 Source: "10"
              Identifier decimals
                 Type: uint256
                 Source: "decimals"
  FunctionDefinition "adjustRate" - public
     Source: "function adjustRate(uint256 _window0TokenExchangeRate, uint256 _window1TokenExchangeRate, uint256 _window2TokenExchangeRate){\r\n        require(msg.sender == etherProceedsAccount);\r\n        window0TokenExchangeRate = _window0TokenExchangeRate;\r\n        window1TokenExchangeRate = _window1TokenExchangeRate;\r\n        window2TokenExchangeRate = _window2TokenExchangeRate;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _window0TokenExchangeRate, uint256 _window1TokenExchangeRate, uint256 _window2TokenExchangeRate)"
      VariableDeclaration "_window0TokenExchangeRate"
         Type: uint256
         Source: "uint256 _window0TokenExchangeRate"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_window1TokenExchangeRate"
         Type: uint256
         Source: "uint256 _window1TokenExchangeRate"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_window2TokenExchangeRate"
         Type: uint256
         Source: "uint256 _window2TokenExchangeRate"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(msg.sender == etherProceedsAccount);\r\n        window0TokenExchangeRate = _window0TokenExchangeRate;\r\n        window1TokenExchangeRate = _window1TokenExchangeRate;\r\n        window2TokenExchangeRate = _window2TokenExchangeRate;\r\n    }"
      ExpressionStatement
         Gas costs: 282
         Source: "require(msg.sender == etherProceedsAccount)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == etherProceedsAccount)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == etherProceedsAccount"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier etherProceedsAccount
               Type: address
               Source: "etherProceedsAccount"
      ExpressionStatement
         Gas costs: 20014
         Source: "window0TokenExchangeRate = _window0TokenExchangeRate"
        Assignment using operator =
           Type: uint256
           Source: "window0TokenExchangeRate = _window0TokenExchangeRate"
          Identifier window0TokenExchangeRate
             Type: uint256
             Source: "window0TokenExchangeRate"
          Identifier _window0TokenExchangeRate
             Type: uint256
             Source: "_window0TokenExchangeRate"
      ExpressionStatement
         Gas costs: 20014
         Source: "window1TokenExchangeRate = _window1TokenExchangeRate"
        Assignment using operator =
           Type: uint256
           Source: "window1TokenExchangeRate = _window1TokenExchangeRate"
          Identifier window1TokenExchangeRate
             Type: uint256
             Source: "window1TokenExchangeRate"
          Identifier _window1TokenExchangeRate
             Type: uint256
             Source: "_window1TokenExchangeRate"
      ExpressionStatement
         Gas costs: 20014
         Source: "window2TokenExchangeRate = _window2TokenExchangeRate"
        Assignment using operator =
           Type: uint256
           Source: "window2TokenExchangeRate = _window2TokenExchangeRate"
          Identifier window2TokenExchangeRate
             Type: uint256
             Source: "window2TokenExchangeRate"
          Identifier _window2TokenExchangeRate
             Type: uint256
             Source: "_window2TokenExchangeRate"
  FunctionDefinition "setProceedsAccount" - public
     Source: "function setProceedsAccount(address _newEtherProceedsAccount) {\r\n        require(msg.sender == etherProceedsAccount);\r\n        etherProceedsAccount = _newEtherProceedsAccount;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _newEtherProceedsAccount)"
      VariableDeclaration "_newEtherProceedsAccount"
         Type: address
         Source: "address _newEtherProceedsAccount"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(msg.sender == etherProceedsAccount);\r\n        etherProceedsAccount = _newEtherProceedsAccount;\r\n    }"
      ExpressionStatement
         Gas costs: 282
         Source: "require(msg.sender == etherProceedsAccount)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == etherProceedsAccount)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == etherProceedsAccount"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier etherProceedsAccount
               Type: address
               Source: "etherProceedsAccount"
      ExpressionStatement
         Gas costs: 20267
         Source: "etherProceedsAccount = _newEtherProceedsAccount"
        Assignment using operator =
           Type: address
           Source: "etherProceedsAccount = _newEtherProceedsAccount"
          Identifier etherProceedsAccount
             Type: address
             Source: "etherProceedsAccount"
          Identifier _newEtherProceedsAccount
             Type: address
             Source: "_newEtherProceedsAccount"
  FunctionDefinition "setMultiWallet" - public
     Source: "function setMultiWallet(address _newWallet){\r\n        require(msg.sender == etherProceedsAccount);\r\n        multiWallet = _newWallet;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _newWallet)"
      VariableDeclaration "_newWallet"
         Type: address
         Source: "address _newWallet"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(msg.sender == etherProceedsAccount);\r\n        multiWallet = _newWallet;\r\n    }"
      ExpressionStatement
         Gas costs: 282
         Source: "require(msg.sender == etherProceedsAccount)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == etherProceedsAccount)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == etherProceedsAccount"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier etherProceedsAccount
               Type: address
               Source: "etherProceedsAccount"
      ExpressionStatement
         Gas costs: 20267
         Source: "multiWallet = _newWallet"
        Assignment using operator =
           Type: address
           Source: "multiWallet = _newWallet"
          Identifier multiWallet
             Type: address
             Source: "multiWallet"
          Identifier _newWallet
             Type: address
             Source: "_newWallet"
  FunctionDefinition "setPreICOLimit" - public
     Source: "function setPreICOLimit(uint256 _preICOLimit){\r\n        require(msg.sender == etherProceedsAccount);\r\n        preICOLimit = _preICOLimit;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _preICOLimit)"
      VariableDeclaration "_preICOLimit"
         Type: uint256
         Source: "uint256 _preICOLimit"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(msg.sender == etherProceedsAccount);\r\n        preICOLimit = _preICOLimit;\r\n    }"
      ExpressionStatement
         Gas costs: 282
         Source: "require(msg.sender == etherProceedsAccount)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == etherProceedsAccount)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == etherProceedsAccount"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier etherProceedsAccount
               Type: address
               Source: "etherProceedsAccount"
      ExpressionStatement
         Gas costs: 20014
         Source: "preICOLimit = _preICOLimit"
        Assignment using operator =
           Type: uint256
           Source: "preICOLimit = _preICOLimit"
          Identifier preICOLimit
             Type: uint256
             Source: "preICOLimit"
          Identifier _preICOLimit
             Type: uint256
             Source: "_preICOLimit"
  FunctionDefinition "preICOPush" - public
     Source: "function preICOPush(address buyer, uint256 amount) {\r\n        require(msg.sender == etherProceedsAccount);\r\n\r\n        uint256 tokens = 0;\r\n        uint256 checkedSupply = 0;\r\n        checkedSupply = safeAdd(window0TotalSupply, amount);\r\n        require(window0TokenCreationCap >= checkedSupply);\r\n        balances[buyer] += tokens;\r\n        window0TotalSupply = checkedSupply;\r\n        PreICOTokenPushed(buyer, amount);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address buyer, uint256 amount)"
      VariableDeclaration "buyer"
         Type: address
         Source: "address buyer"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "amount"
         Type: uint256
         Source: "uint256 amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(msg.sender == etherProceedsAccount);\r\n\r\n        uint256 tokens = 0;\r\n        uint256 checkedSupply = 0;\r\n        checkedSupply = safeAdd(window0TotalSupply, amount);\r\n        require(window0TokenCreationCap >= checkedSupply);\r\n        balances[buyer] += tokens;\r\n        window0TotalSupply = checkedSupply;\r\n        PreICOTokenPushed(buyer, amount);\r\n    }"
      ExpressionStatement
         Gas costs: 282
         Source: "require(msg.sender == etherProceedsAccount)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == etherProceedsAccount)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == etherProceedsAccount"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier etherProceedsAccount
               Type: address
               Source: "etherProceedsAccount"
      VariableDeclarationStatement
         Gas costs: 11
         Source: "uint256 tokens = 0"
        VariableDeclaration "tokens"
           Type: uint256
           Source: "uint256 tokens"
          ElementaryTypeName uint256
             Source: "uint256"
        Literal, token: [no token] value: 0
           Type: int_const 0
           Source: "0"
      VariableDeclarationStatement
         Gas costs: 11
         Source: "uint256 checkedSupply = 0"
        VariableDeclaration "checkedSupply"
           Type: uint256
           Source: "uint256 checkedSupply"
          ElementaryTypeName uint256
             Source: "uint256"
        Literal, token: [no token] value: 0
           Type: int_const 0
           Source: "0"
      ExpressionStatement
         Gas costs: 226
         Source: "checkedSupply = safeAdd(window0TotalSupply, amount)"
        Assignment using operator =
           Type: uint256
           Source: "checkedSupply = safeAdd(window0TotalSupply, amount)"
          Identifier checkedSupply
             Type: uint256
             Source: "checkedSupply"
          FunctionCall
             Type: uint256
             Source: "safeAdd(window0TotalSupply, amount)"
            Identifier safeAdd
               Type: function (uint256,uint256) returns (uint256)
               Source: "safeAdd"
            Identifier window0TotalSupply
               Type: uint256
               Source: "window0TotalSupply"
            Identifier amount
               Type: uint256
               Source: "amount"
      ExpressionStatement
         Gas costs: 238
         Source: "require(window0TokenCreationCap >= checkedSupply)"
        FunctionCall
           Type: tuple()
           Source: "require(window0TokenCreationCap >= checkedSupply)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "window0TokenCreationCap >= checkedSupply"
            Identifier window0TokenCreationCap
               Type: uint256
               Source: "window0TokenCreationCap"
            Identifier checkedSupply
               Type: uint256
               Source: "checkedSupply"
      ExpressionStatement
         Gas costs: 20329
         Source: "balances[buyer] += tokens"
        Assignment using operator +=
           Type: uint256
           Source: "balances[buyer] += tokens"
          IndexAccess
             Type: uint256
             Source: "balances[buyer]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier buyer
               Type: address
               Source: "buyer"
          Identifier tokens
             Type: uint256
             Source: "tokens"
      ExpressionStatement
         Gas costs: 20014
         Source: "window0TotalSupply = checkedSupply"
        Assignment using operator =
           Type: uint256
           Source: "window0TotalSupply = checkedSupply"
          Identifier window0TotalSupply
             Type: uint256
             Source: "window0TotalSupply"
          Identifier checkedSupply
             Type: uint256
             Source: "checkedSupply"
      ExpressionStatement
         Gas costs: [???]
         Source: "PreICOTokenPushed(buyer, amount)"
        FunctionCall
           Type: tuple()
           Source: "PreICOTokenPushed(buyer, amount)"
          Identifier PreICOTokenPushed
             Type: function (address,uint256)
             Source: "PreICOTokenPushed"
          Identifier buyer
             Type: address
             Source: "buyer"
          Identifier amount
             Type: uint256
             Source: "amount"
  FunctionDefinition "" - public
     Source: "function () payable {\r\n        create();\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        create();\r\n    }"
      ExpressionStatement
         Gas costs: 4
         Source: "create()"
        FunctionCall
           Type: tuple()
           Source: "create()"
          Identifier create
             Type: function ()
             Source: "create"
  FunctionDefinition "create"
     Source: "function create() internal{\r\n        require(!isFinalized);\r\n        require(msg.value >= 0.001 ether);\r\n        uint256 tokens = 0;\r\n        uint256 checkedSupply = 0;\r\n\r\n        if(window0StartTime != 0 && window0EndTime != 0 && time() >= window0StartTime && time() <= window0EndTime){\r\n            if(preICOLimit > 0){\r\n                require(msg.value >= preICOLimit);\r\n            }\r\n            tokens = safeMult(msg.value, window0TokenExchangeRate);\r\n            checkedSupply = safeAdd(window0TotalSupply, tokens);\r\n            require(window0TokenCreationCap >= checkedSupply);\r\n            balances[msg.sender] += tokens;\r\n            window0TotalSupply = checkedSupply;\r\n            CreateGameIco(msg.sender, tokens);\r\n        }else if(window1StartTime != 0 && window1EndTime!= 0 && time() >= window1StartTime && time() <= window1EndTime){\r\n            tokens = safeMult(msg.value, window1TokenExchangeRate);\r\n            checkedSupply = safeAdd(window1TotalSupply, tokens);\r\n            require(window1TokenCreationCap >= checkedSupply);\r\n            balances[msg.sender] += tokens;\r\n            window1TotalSupply = checkedSupply;\r\n            CreateGameIco(msg.sender, tokens);\r\n        }else if(window2StartTime != 0 && window2EndTime != 0 && time() >= window2StartTime && time() <= window2EndTime){\r\n            tokens = safeMult(msg.value, window2TokenExchangeRate);\r\n            checkedSupply = safeAdd(window2TotalSupply, tokens);\r\n            require(window2TokenCreationCap >= checkedSupply);\r\n            balances[msg.sender] += tokens;\r\n            window2TotalSupply = checkedSupply;\r\n            CreateGameIco(msg.sender, tokens);\r\n        }else{\r\n            require(false);\r\n        }\r\n\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(!isFinalized);\r\n        require(msg.value >= 0.001 ether);\r\n        uint256 tokens = 0;\r\n        uint256 checkedSupply = 0;\r\n\r\n        if(window0StartTime != 0 && window0EndTime != 0 && time() >= window0StartTime && time() <= window0EndTime){\r\n            if(preICOLimit > 0){\r\n                require(msg.value >= preICOLimit);\r\n            }\r\n            tokens = safeMult(msg.value, window0TokenExchangeRate);\r\n            checkedSupply = safeAdd(window0TotalSupply, tokens);\r\n            require(window0TokenCreationCap >= checkedSupply);\r\n            balances[msg.sender] += tokens;\r\n            window0TotalSupply = checkedSupply;\r\n            CreateGameIco(msg.sender, tokens);\r\n        }else if(window1StartTime != 0 && window1EndTime!= 0 && time() >= window1StartTime && time() <= window1EndTime){\r\n            tokens = safeMult(msg.value, window1TokenExchangeRate);\r\n            checkedSupply = safeAdd(window1TotalSupply, tokens);\r\n            require(window1TokenCreationCap >= checkedSupply);\r\n            balances[msg.sender] += tokens;\r\n            window1TotalSupply = checkedSupply;\r\n            CreateGameIco(msg.sender, tokens);\r\n        }else if(window2StartTime != 0 && window2EndTime != 0 && time() >= window2StartTime && time() <= window2EndTime){\r\n            tokens = safeMult(msg.value, window2TokenExchangeRate);\r\n            checkedSupply = safeAdd(window2TotalSupply, tokens);\r\n            require(window2TokenCreationCap >= checkedSupply);\r\n            balances[msg.sender] += tokens;\r\n            window2TotalSupply = checkedSupply;\r\n            CreateGameIco(msg.sender, tokens);\r\n        }else{\r\n            require(false);\r\n        }\r\n\r\n    }"
      ExpressionStatement
         Gas costs: 318
         Source: "require(!isFinalized)"
        FunctionCall
           Type: tuple()
           Source: "require(!isFinalized)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!isFinalized"
            Identifier isFinalized
               Type: bool
               Source: "isFinalized"
      ExpressionStatement
         Gas costs: 37
         Source: "require(msg.value >= 0.001 ether)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.value >= 0.001 ether)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "msg.value >= 0.001 ether"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Literal, token: [no token] value: 0.001
               Type: int_const 1000000000000000
               Source: "0.001 ether"
      VariableDeclarationStatement
         Gas costs: 11
         Source: "uint256 tokens = 0"
        VariableDeclaration "tokens"
           Type: uint256
           Source: "uint256 tokens"
          ElementaryTypeName uint256
             Source: "uint256"
        Literal, token: [no token] value: 0
           Type: int_const 0
           Source: "0"
      VariableDeclarationStatement
         Gas costs: 11
         Source: "uint256 checkedSupply = 0"
        VariableDeclaration "checkedSupply"
           Type: uint256
           Source: "uint256 checkedSupply"
          ElementaryTypeName uint256
             Source: "uint256"
        Literal, token: [no token] value: 0
           Type: int_const 0
           Source: "0"
      IfStatement
         Source: "if(window0StartTime != 0 && window0EndTime != 0 && time() >= window0StartTime && time() <= window0EndTime){\r\n            if(preICOLimit > 0){\r\n                require(msg.value >= preICOLimit);\r\n            }\r\n            tokens = safeMult(msg.value, window0TokenExchangeRate);\r\n            checkedSupply = safeAdd(window0TotalSupply, tokens);\r\n            require(window0TokenCreationCap >= checkedSupply);\r\n            balances[msg.sender] += tokens;\r\n            window0TotalSupply = checkedSupply;\r\n            CreateGameIco(msg.sender, tokens);\r\n        }else if(window1StartTime != 0 && window1EndTime!= 0 && time() >= window1StartTime && time() <= window1EndTime){\r\n            tokens = safeMult(msg.value, window1TokenExchangeRate);\r\n            checkedSupply = safeAdd(window1TotalSupply, tokens);\r\n            require(window1TokenCreationCap >= checkedSupply);\r\n            balances[msg.sender] += tokens;\r\n            window1TotalSupply = checkedSupply;\r\n            CreateGameIco(msg.sender, tokens);\r\n        }else if(window2StartTime != 0 && window2EndTime != 0 && time() >= window2StartTime && time() <= window2EndTime){\r\n            tokens = safeMult(msg.value, window2TokenExchangeRate);\r\n            checkedSupply = safeAdd(window2TotalSupply, tokens);\r\n            require(window2TokenCreationCap >= checkedSupply);\r\n            balances[msg.sender] += tokens;\r\n            window2TotalSupply = checkedSupply;\r\n            CreateGameIco(msg.sender, tokens);\r\n        }else{\r\n            require(false);\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 927
           Source: "window0StartTime != 0 && window0EndTime != 0 && time() >= window0StartTime && time() <= window0EndTime"
          BinaryOperation using operator &&
             Type: bool
             Source: "window0StartTime != 0 && window0EndTime != 0 && time() >= window0StartTime"
            BinaryOperation using operator &&
               Type: bool
               Source: "window0StartTime != 0 && window0EndTime != 0"
              BinaryOperation using operator !=
                 Type: bool
                 Source: "window0StartTime != 0"
                Identifier window0StartTime
                   Type: uint256
                   Source: "window0StartTime"
                Literal, token: [no token] value: 0
                   Type: int_const 0
                   Source: "0"
              BinaryOperation using operator !=
                 Type: bool
                 Source: "window0EndTime != 0"
                Identifier window0EndTime
                   Type: uint256
                   Source: "window0EndTime"
                Literal, token: [no token] value: 0
                   Type: int_const 0
                   Source: "0"
            BinaryOperation using operator >=
               Type: bool
               Source: "time() >= window0StartTime"
              FunctionCall
                 Type: uint256
                 Source: "time()"
                Identifier time
                   Type: function () returns (uint256)
                   Source: "time"
              Identifier window0StartTime
                 Type: uint256
                 Source: "window0StartTime"
          BinaryOperation using operator <=
             Type: bool
             Source: "time() <= window0EndTime"
            FunctionCall
               Type: uint256
               Source: "time()"
              Identifier time
                 Type: function () returns (uint256)
                 Source: "time"
            Identifier window0EndTime
               Type: uint256
               Source: "window0EndTime"
        Block
           Source: "{\r\n            if(preICOLimit > 0){\r\n                require(msg.value >= preICOLimit);\r\n            }\r\n            tokens = safeMult(msg.value, window0TokenExchangeRate);\r\n            checkedSupply = safeAdd(window0TotalSupply, tokens);\r\n            require(window0TokenCreationCap >= checkedSupply);\r\n            balances[msg.sender] += tokens;\r\n            window0TotalSupply = checkedSupply;\r\n            CreateGameIco(msg.sender, tokens);\r\n        }"
          IfStatement
             Source: "if(preICOLimit > 0){\r\n                require(msg.value >= preICOLimit);\r\n            }"
            BinaryOperation using operator >
               Type: bool
               Gas costs: 209
               Source: "preICOLimit > 0"
              Identifier preICOLimit
                 Type: uint256
                 Source: "preICOLimit"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
            Block
               Source: "{\r\n                require(msg.value >= preICOLimit);\r\n            }"
              ExpressionStatement
                 Gas costs: 237
                 Source: "require(msg.value >= preICOLimit)"
                FunctionCall
                   Type: tuple()
                   Source: "require(msg.value >= preICOLimit)"
                  Identifier require
                     Type: function (bool) pure
                     Source: "require"
                  BinaryOperation using operator >=
                     Type: bool
                     Source: "msg.value >= preICOLimit"
                    MemberAccess to member value
                       Type: uint256
                       Source: "msg.value"
                      Identifier msg
                         Type: msg
                         Source: "msg"
                    Identifier preICOLimit
                       Type: uint256
                       Source: "preICOLimit"
          ExpressionStatement
             Gas costs: 214
             Source: "tokens = safeMult(msg.value, window0TokenExchangeRate)"
            Assignment using operator =
               Type: uint256
               Source: "tokens = safeMult(msg.value, window0TokenExchangeRate)"
              Identifier tokens
                 Type: uint256
                 Source: "tokens"
              FunctionCall
                 Type: uint256
                 Source: "safeMult(msg.value, window0TokenExchangeRate)"
                Identifier safeMult
                   Type: function (uint256,uint256) returns (uint256)
                   Source: "safeMult"
                MemberAccess to member value
                   Type: uint256
                   Source: "msg.value"
                  Identifier msg
                     Type: msg
                     Source: "msg"
                Identifier window0TokenExchangeRate
                   Type: uint256
                   Source: "window0TokenExchangeRate"
          ExpressionStatement
             Gas costs: 215
             Source: "checkedSupply = safeAdd(window0TotalSupply, tokens)"
            Assignment using operator =
               Type: uint256
               Source: "checkedSupply = safeAdd(window0TotalSupply, tokens)"
              Identifier checkedSupply
                 Type: uint256
                 Source: "checkedSupply"
              FunctionCall
                 Type: uint256
                 Source: "safeAdd(window0TotalSupply, tokens)"
                Identifier safeAdd
                   Type: function (uint256,uint256) returns (uint256)
                   Source: "safeAdd"
                Identifier window0TotalSupply
                   Type: uint256
                   Source: "window0TotalSupply"
                Identifier tokens
                   Type: uint256
                   Source: "tokens"
          ExpressionStatement
             Gas costs: 238
             Source: "require(window0TokenCreationCap >= checkedSupply)"
            FunctionCall
               Type: tuple()
               Source: "require(window0TokenCreationCap >= checkedSupply)"
              Identifier require
                 Type: function (bool) pure
                 Source: "require"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "window0TokenCreationCap >= checkedSupply"
                Identifier window0TokenCreationCap
                   Type: uint256
                   Source: "window0TokenCreationCap"
                Identifier checkedSupply
                   Type: uint256
                   Source: "checkedSupply"
          ExpressionStatement
             Gas costs: 20328
             Source: "balances[msg.sender] += tokens"
            Assignment using operator +=
               Type: uint256
               Source: "balances[msg.sender] += tokens"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier tokens
                 Type: uint256
                 Source: "tokens"
          ExpressionStatement
             Gas costs: 20014
             Source: "window0TotalSupply = checkedSupply"
            Assignment using operator =
               Type: uint256
               Source: "window0TotalSupply = checkedSupply"
              Identifier window0TotalSupply
                 Type: uint256
                 Source: "window0TotalSupply"
              Identifier checkedSupply
                 Type: uint256
                 Source: "checkedSupply"
          ExpressionStatement
             Gas costs: [???]
             Source: "CreateGameIco(msg.sender, tokens)"
            FunctionCall
               Type: tuple()
               Source: "CreateGameIco(msg.sender, tokens)"
              Identifier CreateGameIco
                 Type: function (address,uint256)
                 Source: "CreateGameIco"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier tokens
                 Type: uint256
                 Source: "tokens"
        IfStatement
           Source: "if(window1StartTime != 0 && window1EndTime!= 0 && time() >= window1StartTime && time() <= window1EndTime){\r\n            tokens = safeMult(msg.value, window1TokenExchangeRate);\r\n            checkedSupply = safeAdd(window1TotalSupply, tokens);\r\n            require(window1TokenCreationCap >= checkedSupply);\r\n            balances[msg.sender] += tokens;\r\n            window1TotalSupply = checkedSupply;\r\n            CreateGameIco(msg.sender, tokens);\r\n        }else if(window2StartTime != 0 && window2EndTime != 0 && time() >= window2StartTime && time() <= window2EndTime){\r\n            tokens = safeMult(msg.value, window2TokenExchangeRate);\r\n            checkedSupply = safeAdd(window2TotalSupply, tokens);\r\n            require(window2TokenCreationCap >= checkedSupply);\r\n            balances[msg.sender] += tokens;\r\n            window2TotalSupply = checkedSupply;\r\n            CreateGameIco(msg.sender, tokens);\r\n        }else{\r\n            require(false);\r\n        }"
          BinaryOperation using operator &&
             Type: bool
             Gas costs: 938
             Source: "window1StartTime != 0 && window1EndTime!= 0 && time() >= window1StartTime && time() <= window1EndTime"
            BinaryOperation using operator &&
               Type: bool
               Source: "window1StartTime != 0 && window1EndTime!= 0 && time() >= window1StartTime"
              BinaryOperation using operator &&
                 Type: bool
                 Source: "window1StartTime != 0 && window1EndTime!= 0"
                BinaryOperation using operator !=
                   Type: bool
                   Source: "window1StartTime != 0"
                  Identifier window1StartTime
                     Type: uint256
                     Source: "window1StartTime"
                  Literal, token: [no token] value: 0
                     Type: int_const 0
                     Source: "0"
                BinaryOperation using operator !=
                   Type: bool
                   Source: "window1EndTime!= 0"
                  Identifier window1EndTime
                     Type: uint256
                     Source: "window1EndTime"
                  Literal, token: [no token] value: 0
                     Type: int_const 0
                     Source: "0"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "time() >= window1StartTime"
                FunctionCall
                   Type: uint256
                   Source: "time()"
                  Identifier time
                     Type: function () returns (uint256)
                     Source: "time"
                Identifier window1StartTime
                   Type: uint256
                   Source: "window1StartTime"
            BinaryOperation using operator <=
               Type: bool
               Source: "time() <= window1EndTime"
              FunctionCall
                 Type: uint256
                 Source: "time()"
                Identifier time
                   Type: function () returns (uint256)
                   Source: "time"
              Identifier window1EndTime
                 Type: uint256
                 Source: "window1EndTime"
          Block
             Source: "{\r\n            tokens = safeMult(msg.value, window1TokenExchangeRate);\r\n            checkedSupply = safeAdd(window1TotalSupply, tokens);\r\n            require(window1TokenCreationCap >= checkedSupply);\r\n            balances[msg.sender] += tokens;\r\n            window1TotalSupply = checkedSupply;\r\n            CreateGameIco(msg.sender, tokens);\r\n        }"
            ExpressionStatement
               Gas costs: 225
               Source: "tokens = safeMult(msg.value, window1TokenExchangeRate)"
              Assignment using operator =
                 Type: uint256
                 Source: "tokens = safeMult(msg.value, window1TokenExchangeRate)"
                Identifier tokens
                   Type: uint256
                   Source: "tokens"
                FunctionCall
                   Type: uint256
                   Source: "safeMult(msg.value, window1TokenExchangeRate)"
                  Identifier safeMult
                     Type: function (uint256,uint256) returns (uint256)
                     Source: "safeMult"
                  MemberAccess to member value
                     Type: uint256
                     Source: "msg.value"
                    Identifier msg
                       Type: msg
                       Source: "msg"
                  Identifier window1TokenExchangeRate
                     Type: uint256
                     Source: "window1TokenExchangeRate"
            ExpressionStatement
               Gas costs: 226
               Source: "checkedSupply = safeAdd(window1TotalSupply, tokens)"
              Assignment using operator =
                 Type: uint256
                 Source: "checkedSupply = safeAdd(window1TotalSupply, tokens)"
                Identifier checkedSupply
                   Type: uint256
                   Source: "checkedSupply"
                FunctionCall
                   Type: uint256
                   Source: "safeAdd(window1TotalSupply, tokens)"
                  Identifier safeAdd
                     Type: function (uint256,uint256) returns (uint256)
                     Source: "safeAdd"
                  Identifier window1TotalSupply
                     Type: uint256
                     Source: "window1TotalSupply"
                  Identifier tokens
                     Type: uint256
                     Source: "tokens"
            ExpressionStatement
               Gas costs: 238
               Source: "require(window1TokenCreationCap >= checkedSupply)"
              FunctionCall
                 Type: tuple()
                 Source: "require(window1TokenCreationCap >= checkedSupply)"
                Identifier require
                   Type: function (bool) pure
                   Source: "require"
                BinaryOperation using operator >=
                   Type: bool
                   Source: "window1TokenCreationCap >= checkedSupply"
                  Identifier window1TokenCreationCap
                     Type: uint256
                     Source: "window1TokenCreationCap"
                  Identifier checkedSupply
                     Type: uint256
                     Source: "checkedSupply"
            ExpressionStatement
               Gas costs: 20328
               Source: "balances[msg.sender] += tokens"
              Assignment using operator +=
                 Type: uint256
                 Source: "balances[msg.sender] += tokens"
                IndexAccess
                   Type: uint256
                   Source: "balances[msg.sender]"
                  Identifier balances
                     Type: mapping(address => uint256)
                     Source: "balances"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
                Identifier tokens
                   Type: uint256
                   Source: "tokens"
            ExpressionStatement
               Gas costs: 20014
               Source: "window1TotalSupply = checkedSupply"
              Assignment using operator =
                 Type: uint256
                 Source: "window1TotalSupply = checkedSupply"
                Identifier window1TotalSupply
                   Type: uint256
                   Source: "window1TotalSupply"
                Identifier checkedSupply
                   Type: uint256
                   Source: "checkedSupply"
            ExpressionStatement
               Gas costs: [???]
               Source: "CreateGameIco(msg.sender, tokens)"
              FunctionCall
                 Type: tuple()
                 Source: "CreateGameIco(msg.sender, tokens)"
                Identifier CreateGameIco
                   Type: function (address,uint256)
                   Source: "CreateGameIco"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
                Identifier tokens
                   Type: uint256
                   Source: "tokens"
          IfStatement
             Source: "if(window2StartTime != 0 && window2EndTime != 0 && time() >= window2StartTime && time() <= window2EndTime){\r\n            tokens = safeMult(msg.value, window2TokenExchangeRate);\r\n            checkedSupply = safeAdd(window2TotalSupply, tokens);\r\n            require(window2TokenCreationCap >= checkedSupply);\r\n            balances[msg.sender] += tokens;\r\n            window2TotalSupply = checkedSupply;\r\n            CreateGameIco(msg.sender, tokens);\r\n        }else{\r\n            require(false);\r\n        }"
            BinaryOperation using operator &&
               Type: bool
               Gas costs: 938
               Source: "window2StartTime != 0 && window2EndTime != 0 && time() >= window2StartTime && time() <= window2EndTime"
              BinaryOperation using operator &&
                 Type: bool
                 Source: "window2StartTime != 0 && window2EndTime != 0 && time() >= window2StartTime"
                BinaryOperation using operator &&
                   Type: bool
                   Source: "window2StartTime != 0 && window2EndTime != 0"
                  BinaryOperation using operator !=
                     Type: bool
                     Source: "window2StartTime != 0"
                    Identifier window2StartTime
                       Type: uint256
                       Source: "window2StartTime"
                    Literal, token: [no token] value: 0
                       Type: int_const 0
                       Source: "0"
                  BinaryOperation using operator !=
                     Type: bool
                     Source: "window2EndTime != 0"
                    Identifier window2EndTime
                       Type: uint256
                       Source: "window2EndTime"
                    Literal, token: [no token] value: 0
                       Type: int_const 0
                       Source: "0"
                BinaryOperation using operator >=
                   Type: bool
                   Source: "time() >= window2StartTime"
                  FunctionCall
                     Type: uint256
                     Source: "time()"
                    Identifier time
                       Type: function () returns (uint256)
                       Source: "time"
                  Identifier window2StartTime
                     Type: uint256
                     Source: "window2StartTime"
              BinaryOperation using operator <=
                 Type: bool
                 Source: "time() <= window2EndTime"
                FunctionCall
                   Type: uint256
                   Source: "time()"
                  Identifier time
                     Type: function () returns (uint256)
                     Source: "time"
                Identifier window2EndTime
                   Type: uint256
                   Source: "window2EndTime"
            Block
               Source: "{\r\n            tokens = safeMult(msg.value, window2TokenExchangeRate);\r\n            checkedSupply = safeAdd(window2TotalSupply, tokens);\r\n            require(window2TokenCreationCap >= checkedSupply);\r\n            balances[msg.sender] += tokens;\r\n            window2TotalSupply = checkedSupply;\r\n            CreateGameIco(msg.sender, tokens);\r\n        }"
              ExpressionStatement
                 Gas costs: 225
                 Source: "tokens = safeMult(msg.value, window2TokenExchangeRate)"
                Assignment using operator =
                   Type: uint256
                   Source: "tokens = safeMult(msg.value, window2TokenExchangeRate)"
                  Identifier tokens
                     Type: uint256
                     Source: "tokens"
                  FunctionCall
                     Type: uint256
                     Source: "safeMult(msg.value, window2TokenExchangeRate)"
                    Identifier safeMult
                       Type: function (uint256,uint256) returns (uint256)
                       Source: "safeMult"
                    MemberAccess to member value
                       Type: uint256
                       Source: "msg.value"
                      Identifier msg
                         Type: msg
                         Source: "msg"
                    Identifier window2TokenExchangeRate
                       Type: uint256
                       Source: "window2TokenExchangeRate"
              ExpressionStatement
                 Gas costs: 226
                 Source: "checkedSupply = safeAdd(window2TotalSupply, tokens)"
                Assignment using operator =
                   Type: uint256
                   Source: "checkedSupply = safeAdd(window2TotalSupply, tokens)"
                  Identifier checkedSupply
                     Type: uint256
                     Source: "checkedSupply"
                  FunctionCall
                     Type: uint256
                     Source: "safeAdd(window2TotalSupply, tokens)"
                    Identifier safeAdd
                       Type: function (uint256,uint256) returns (uint256)
                       Source: "safeAdd"
                    Identifier window2TotalSupply
                       Type: uint256
                       Source: "window2TotalSupply"
                    Identifier tokens
                       Type: uint256
                       Source: "tokens"
              ExpressionStatement
                 Gas costs: 238
                 Source: "require(window2TokenCreationCap >= checkedSupply)"
                FunctionCall
                   Type: tuple()
                   Source: "require(window2TokenCreationCap >= checkedSupply)"
                  Identifier require
                     Type: function (bool) pure
                     Source: "require"
                  BinaryOperation using operator >=
                     Type: bool
                     Source: "window2TokenCreationCap >= checkedSupply"
                    Identifier window2TokenCreationCap
                       Type: uint256
                       Source: "window2TokenCreationCap"
                    Identifier checkedSupply
                       Type: uint256
                       Source: "checkedSupply"
              ExpressionStatement
                 Gas costs: 20328
                 Source: "balances[msg.sender] += tokens"
                Assignment using operator +=
                   Type: uint256
                   Source: "balances[msg.sender] += tokens"
                  IndexAccess
                     Type: uint256
                     Source: "balances[msg.sender]"
                    Identifier balances
                       Type: mapping(address => uint256)
                       Source: "balances"
                    MemberAccess to member sender
                       Type: address
                       Source: "msg.sender"
                      Identifier msg
                         Type: msg
                         Source: "msg"
                  Identifier tokens
                     Type: uint256
                     Source: "tokens"
              ExpressionStatement
                 Gas costs: 20014
                 Source: "window2TotalSupply = checkedSupply"
                Assignment using operator =
                   Type: uint256
                   Source: "window2TotalSupply = checkedSupply"
                  Identifier window2TotalSupply
                     Type: uint256
                     Source: "window2TotalSupply"
                  Identifier checkedSupply
                     Type: uint256
                     Source: "checkedSupply"
              ExpressionStatement
                 Gas costs: [???]
                 Source: "CreateGameIco(msg.sender, tokens)"
                FunctionCall
                   Type: tuple()
                   Source: "CreateGameIco(msg.sender, tokens)"
                  Identifier CreateGameIco
                     Type: function (address,uint256)
                     Source: "CreateGameIco"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
                  Identifier tokens
                     Type: uint256
                     Source: "tokens"
            Block
               Source: "{\r\n            require(false);\r\n        }"
              ExpressionStatement
                 Gas costs: 29
                 Source: "require(false)"
                FunctionCall
                   Type: tuple()
                   Source: "require(false)"
                  Identifier require
                     Type: function (bool) pure
                     Source: "require"
                  Literal, token: false value: false
                     Type: bool
                     Source: "false"
  FunctionDefinition "time"
     Source: "function time() internal returns (uint) {\r\n        return block.timestamp;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        return block.timestamp;\r\n    }"
      Return
         Gas costs: 7
         Source: "return block.timestamp"
        MemberAccess to member timestamp
           Type: uint256
           Source: "block.timestamp"
          Identifier block
             Type: block
             Source: "block"
  FunctionDefinition "today"
     Source: "function today(uint startTime) internal returns (uint) {\r\n        return dayFor(time(), startTime);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint startTime)"
      VariableDeclaration "startTime"
         Type: uint256
         Source: "uint startTime"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        return dayFor(time(), startTime);\r\n    }"
      Return
         Gas costs: 0
         Source: "return dayFor(time(), startTime)"
        FunctionCall
           Type: uint256
           Source: "dayFor(time(), startTime)"
          Identifier dayFor
             Type: function (uint256,uint256) returns (uint256)
             Source: "dayFor"
          FunctionCall
             Type: uint256
             Source: "time()"
            Identifier time
               Type: function () returns (uint256)
               Source: "time"
          Identifier startTime
             Type: uint256
             Source: "startTime"
  FunctionDefinition "dayFor"
     Source: "function dayFor(uint timestamp, uint startTime) internal returns (uint) {\r\n        return timestamp < startTime ? 0 : safeSubtract(timestamp, startTime) / 24 hours + 1;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint timestamp, uint startTime)"
      VariableDeclaration "timestamp"
         Type: uint256
         Source: "uint timestamp"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "startTime"
         Type: uint256
         Source: "uint startTime"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        return timestamp < startTime ? 0 : safeSubtract(timestamp, startTime) / 24 hours + 1;\r\n    }"
      Return
         Gas costs: 0
         Source: "return timestamp < startTime ? 0 : safeSubtract(timestamp, startTime) / 24 hours + 1"
        Conditional
           Type: uint256
           Source: "timestamp < startTime ? 0 : safeSubtract(timestamp, startTime) / 24 hours + 1"
          BinaryOperation using operator <
             Type: bool
             Source: "timestamp < startTime"
            Identifier timestamp
               Type: uint256
               Source: "timestamp"
            Identifier startTime
               Type: uint256
               Source: "startTime"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
          BinaryOperation using operator +
             Type: uint256
             Source: "safeSubtract(timestamp, startTime) / 24 hours + 1"
            BinaryOperation using operator /
               Type: uint256
               Source: "safeSubtract(timestamp, startTime) / 24 hours"
              FunctionCall
                 Type: uint256
                 Source: "safeSubtract(timestamp, startTime)"
                Identifier safeSubtract
                   Type: function (uint256,uint256) returns (uint256)
                   Source: "safeSubtract"
                Identifier timestamp
                   Type: uint256
                   Source: "timestamp"
                Identifier startTime
                   Type: uint256
                   Source: "startTime"
              Literal, token: [no token] value: 24
                 Type: int_const 86400
                 Source: "24 hours"
            Literal, token: [no token] value: 1
               Type: int_const 1
               Source: "1"
  FunctionDefinition "withDraw" - public
     Source: "function withDraw(uint256 _value){\r\n        require(msg.sender == etherProceedsAccount);\r\n        if(multiWallet != 0x0){\r\n            if (!multiWallet.send(_value)) require(false);\r\n        }else{\r\n            if (!etherProceedsAccount.send(_value)) require(false);\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _value)"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(msg.sender == etherProceedsAccount);\r\n        if(multiWallet != 0x0){\r\n            if (!multiWallet.send(_value)) require(false);\r\n        }else{\r\n            if (!etherProceedsAccount.send(_value)) require(false);\r\n        }\r\n    }"
      ExpressionStatement
         Gas costs: 282
         Source: "require(msg.sender == etherProceedsAccount)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == etherProceedsAccount)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == etherProceedsAccount"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier etherProceedsAccount
               Type: address
               Source: "etherProceedsAccount"
      IfStatement
         Source: "if(multiWallet != 0x0){\r\n            if (!multiWallet.send(_value)) require(false);\r\n        }else{\r\n            if (!etherProceedsAccount.send(_value)) require(false);\r\n        }"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 254
           Source: "multiWallet != 0x0"
          Identifier multiWallet
             Type: address
             Source: "multiWallet"
          Literal, token: [no token] value: 0x0
             Type: int_const 0
             Source: "0x0"
        Block
           Source: "{\r\n            if (!multiWallet.send(_value)) require(false);\r\n        }"
          IfStatement
             Source: "if (!multiWallet.send(_value)) require(false)"
            UnaryOperation (prefix) !
               Type: bool
               Gas costs: [???]
               Source: "!multiWallet.send(_value)"
              FunctionCall
                 Type: bool
                 Source: "multiWallet.send(_value)"
                MemberAccess to member send
                   Type: function (uint256) returns (bool)
                   Source: "multiWallet.send"
                  Identifier multiWallet
                     Type: address
                     Source: "multiWallet"
                Identifier _value
                   Type: uint256
                   Source: "_value"
            ExpressionStatement
               Gas costs: 29
               Source: "require(false)"
              FunctionCall
                 Type: tuple()
                 Source: "require(false)"
                Identifier require
                   Type: function (bool) pure
                   Source: "require"
                Literal, token: false value: false
                   Type: bool
                   Source: "false"
        Block
           Source: "{\r\n            if (!etherProceedsAccount.send(_value)) require(false);\r\n        }"
          IfStatement
             Source: "if (!etherProceedsAccount.send(_value)) require(false)"
            UnaryOperation (prefix) !
               Type: bool
               Gas costs: [???]
               Source: "!etherProceedsAccount.send(_value)"
              FunctionCall
                 Type: bool
                 Source: "etherProceedsAccount.send(_value)"
                MemberAccess to member send
                   Type: function (uint256) returns (bool)
                   Source: "etherProceedsAccount.send"
                  Identifier etherProceedsAccount
                     Type: address
                     Source: "etherProceedsAccount"
                Identifier _value
                   Type: uint256
                   Source: "_value"
            ExpressionStatement
               Gas costs: 29
               Source: "require(false)"
              FunctionCall
                 Type: tuple()
                 Source: "require(false)"
                Identifier require
                   Type: function (bool) pure
                   Source: "require"
                Literal, token: false value: false
                   Type: bool
                   Source: "false"
  FunctionDefinition "finalize" - public
     Source: "function finalize() {\r\n        require(!isFinalized);\r\n        require(msg.sender == etherProceedsAccount);\r\n        isFinalized = true;\r\n        balances[etherProceedsAccount] += totalSupply- window0TotalSupply- window1TotalSupply - window2TotalSupply;\r\n        if(multiWallet != 0x0){\r\n            if (!multiWallet.send(this.balance)) require(false);\r\n        }else{\r\n            if (!etherProceedsAccount.send(this.balance)) require(false);\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(!isFinalized);\r\n        require(msg.sender == etherProceedsAccount);\r\n        isFinalized = true;\r\n        balances[etherProceedsAccount] += totalSupply- window0TotalSupply- window1TotalSupply - window2TotalSupply;\r\n        if(multiWallet != 0x0){\r\n            if (!multiWallet.send(this.balance)) require(false);\r\n        }else{\r\n            if (!etherProceedsAccount.send(this.balance)) require(false);\r\n        }\r\n    }"
      ExpressionStatement
         Gas costs: 318
         Source: "require(!isFinalized)"
        FunctionCall
           Type: tuple()
           Source: "require(!isFinalized)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!isFinalized"
            Identifier isFinalized
               Type: bool
               Source: "isFinalized"
      ExpressionStatement
         Gas costs: 282
         Source: "require(msg.sender == etherProceedsAccount)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == etherProceedsAccount)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == etherProceedsAccount"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier etherProceedsAccount
               Type: address
               Source: "etherProceedsAccount"
      ExpressionStatement
         Gas costs: 20317
         Source: "isFinalized = true"
        Assignment using operator =
           Type: bool
           Source: "isFinalized = true"
          Identifier isFinalized
             Type: bool
             Source: "isFinalized"
          Literal, token: true value: true
             Type: bool
             Source: "true"
      ExpressionStatement
         Gas costs: 21383
         Source: "balances[etherProceedsAccount] += totalSupply- window0TotalSupply- window1TotalSupply - window2TotalSupply"
        Assignment using operator +=
           Type: uint256
           Source: "balances[etherProceedsAccount] += totalSupply- window0TotalSupply- window1TotalSupply - window2TotalSupply"
          IndexAccess
             Type: uint256
             Source: "balances[etherProceedsAccount]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier etherProceedsAccount
               Type: address
               Source: "etherProceedsAccount"
          BinaryOperation using operator -
             Type: uint256
             Source: "totalSupply- window0TotalSupply- window1TotalSupply - window2TotalSupply"
            BinaryOperation using operator -
               Type: uint256
               Source: "totalSupply- window0TotalSupply- window1TotalSupply"
              BinaryOperation using operator -
                 Type: uint256
                 Source: "totalSupply- window0TotalSupply"
                Identifier totalSupply
                   Type: uint256
                   Source: "totalSupply"
                Identifier window0TotalSupply
                   Type: uint256
                   Source: "window0TotalSupply"
              Identifier window1TotalSupply
                 Type: uint256
                 Source: "window1TotalSupply"
            Identifier window2TotalSupply
               Type: uint256
               Source: "window2TotalSupply"
      IfStatement
         Source: "if(multiWallet != 0x0){\r\n            if (!multiWallet.send(this.balance)) require(false);\r\n        }else{\r\n            if (!etherProceedsAccount.send(this.balance)) require(false);\r\n        }"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 254
           Source: "multiWallet != 0x0"
          Identifier multiWallet
             Type: address
             Source: "multiWallet"
          Literal, token: [no token] value: 0x0
             Type: int_const 0
             Source: "0x0"
        Block
           Source: "{\r\n            if (!multiWallet.send(this.balance)) require(false);\r\n        }"
          IfStatement
             Source: "if (!multiWallet.send(this.balance)) require(false)"
            UnaryOperation (prefix) !
               Type: bool
               Gas costs: [???]
               Source: "!multiWallet.send(this.balance)"
              FunctionCall
                 Type: bool
                 Source: "multiWallet.send(this.balance)"
                MemberAccess to member send
                   Type: function (uint256) returns (bool)
                   Source: "multiWallet.send"
                  Identifier multiWallet
                     Type: address
                     Source: "multiWallet"
                MemberAccess to member balance
                   Type: uint256
                   Source: "this.balance"
                  Identifier this
                     Type: contract GameICO
                     Source: "this"
            ExpressionStatement
               Gas costs: 29
               Source: "require(false)"
              FunctionCall
                 Type: tuple()
                 Source: "require(false)"
                Identifier require
                   Type: function (bool) pure
                   Source: "require"
                Literal, token: false value: false
                   Type: bool
                   Source: "false"
        Block
           Source: "{\r\n            if (!etherProceedsAccount.send(this.balance)) require(false);\r\n        }"
          IfStatement
             Source: "if (!etherProceedsAccount.send(this.balance)) require(false)"
            UnaryOperation (prefix) !
               Type: bool
               Gas costs: [???]
               Source: "!etherProceedsAccount.send(this.balance)"
              FunctionCall
                 Type: bool
                 Source: "etherProceedsAccount.send(this.balance)"
                MemberAccess to member send
                   Type: function (uint256) returns (bool)
                   Source: "etherProceedsAccount.send"
                  Identifier etherProceedsAccount
                     Type: address
                     Source: "etherProceedsAccount"
                MemberAccess to member balance
                   Type: uint256
                   Source: "this.balance"
                  Identifier this
                     Type: contract GameICO
                     Source: "this"
            ExpressionStatement
               Gas costs: 29
               Source: "require(false)"
              FunctionCall
                 Type: tuple()
                 Source: "require(false)"
                Identifier require
                   Type: function (bool) pure
                   Source: "require"
                Literal, token: false value: false
                   Type: bool
                   Source: "false"
