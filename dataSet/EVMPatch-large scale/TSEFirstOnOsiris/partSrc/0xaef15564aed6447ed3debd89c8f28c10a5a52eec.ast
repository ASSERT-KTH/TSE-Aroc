Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0xaef15564aed6447ed3debd89c8f28c10a5a52eec.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.15;"
ContractDefinition "Permittable"
   Source: "contract Permittable {\r\n    mapping(address => bool) permitted;\r\n\r\n    function Permittable() public {\r\n        permitted[msg.sender] = true;\r\n    }\r\n\r\n    modifier onlyPermitted() {\r\n        require(permitted[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function permit(address _address, bool _isAllowed) public onlyPermitted {\r\n        permitted[_address] = _isAllowed;\r\n    }\r\n\r\n    function isPermitted(address _address) public view returns (bool) {\r\n        return permitted[_address];\r\n    }\r\n}"
  VariableDeclaration "permitted"
     Type: mapping(address => bool)
     Gas costs: 0
     Source: "mapping(address => bool) permitted"
    Mapping
       Source: "mapping(address => bool)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName bool
         Source: "bool"
  FunctionDefinition "Permittable" - public
     Source: "function Permittable() public {\r\n        permitted[msg.sender] = true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        permitted[msg.sender] = true;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "permitted[msg.sender] = true"
        Assignment using operator =
           Type: bool
           Source: "permitted[msg.sender] = true"
          IndexAccess
             Type: bool
             Source: "permitted[msg.sender]"
            Identifier permitted
               Type: mapping(address => bool)
               Source: "permitted"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Literal, token: true value: true
             Type: bool
             Source: "true"
  ModifierDefinition "onlyPermitted"
     Source: "modifier onlyPermitted() {\r\n        require(permitted[msg.sender]);\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n        require(permitted[msg.sender]);\r\n        _;\r\n    }"
      ExpressionStatement
         Gas costs: 6480
         Source: "require(permitted[msg.sender])"
        FunctionCall
           Type: tuple()
           Source: "require(permitted[msg.sender])"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          IndexAccess
             Type: bool
             Source: "permitted[msg.sender]"
            Identifier permitted
               Type: mapping(address => bool)
               Source: "permitted"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "permit" - public
     Source: "function permit(address _address, bool _isAllowed) public onlyPermitted {\r\n        permitted[_address] = _isAllowed;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _address, bool _isAllowed)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_isAllowed"
         Type: bool
         Source: "bool _isAllowed"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        permitted[_address] = _isAllowed;\r\n    }"
      ExpressionStatement
         Gas costs: 20363
         Source: "permitted[_address] = _isAllowed"
        Assignment using operator =
           Type: bool
           Source: "permitted[_address] = _isAllowed"
          IndexAccess
             Type: bool
             Source: "permitted[_address]"
            Identifier permitted
               Type: mapping(address => bool)
               Source: "permitted"
            Identifier _address
               Type: address
               Source: "_address"
          Identifier _isAllowed
             Type: bool
             Source: "_isAllowed"
  FunctionDefinition "isPermitted" - public - const
     Source: "function isPermitted(address _address) public view returns (bool) {\r\n        return permitted[_address];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _address)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        return permitted[_address];\r\n    }"
      Return
         Gas costs: 340
         Source: "return permitted[_address]"
        IndexAccess
           Type: bool
           Source: "permitted[_address]"
          Identifier permitted
             Type: mapping(address => bool)
             Source: "permitted"
          Identifier _address
             Type: address
             Source: "_address"
ContractDefinition "Destructable"
   Source: "contract Destructable is Permittable {\r\n    function kill() public onlyPermitted {\r\n        selfdestruct(msg.sender);\r\n    }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Permittable"
    UserDefinedTypeName "Permittable"
       Source: "Permittable"
  FunctionDefinition "kill" - public
     Source: "function kill() public onlyPermitted {\r\n        selfdestruct(msg.sender);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        selfdestruct(msg.sender);\r\n    }"
      ExpressionStatement
         Gas costs: 30008
         Source: "selfdestruct(msg.sender)"
        FunctionCall
           Type: tuple()
           Source: "selfdestruct(msg.sender)"
          Identifier selfdestruct
             Type: function (address)
             Source: "selfdestruct"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
ContractDefinition "Withdrawable"
   Source: "contract Withdrawable is Permittable {\r\n    function withdraw(address _to, uint256 _amount) public onlyPermitted {\r\n        require(_to != address(0));\r\n\r\n        if (_amount == 0)\r\n            _amount = this.balance;\r\n\r\n        _to.transfer(_amount);\r\n    }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Permittable"
    UserDefinedTypeName "Permittable"
       Source: "Permittable"
  FunctionDefinition "withdraw" - public
     Source: "function withdraw(address _to, uint256 _amount) public onlyPermitted {\r\n        require(_to != address(0));\r\n\r\n        if (_amount == 0)\r\n            _amount = this.balance;\r\n\r\n        _to.transfer(_amount);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _amount)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        require(_to != address(0));\r\n\r\n        if (_amount == 0)\r\n            _amount = this.balance;\r\n\r\n        _to.transfer(_amount);\r\n    }"
      ExpressionStatement
         Gas costs: 50
         Source: "require(_to != address(0))"
        FunctionCall
           Type: tuple()
           Source: "require(_to != address(0))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "_to != address(0)"
            Identifier _to
               Type: address
               Source: "_to"
            FunctionCall
               Type: address
               Source: "address(0)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      IfStatement
         Source: "if (_amount == 0)\r\n            _amount = this.balance"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "_amount == 0"
          Identifier _amount
             Type: uint256
             Source: "_amount"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        ExpressionStatement
           Gas costs: 413
           Source: "_amount = this.balance"
          Assignment using operator =
             Type: uint256
             Source: "_amount = this.balance"
            Identifier _amount
               Type: uint256
               Source: "_amount"
            MemberAccess to member balance
               Type: uint256
               Source: "this.balance"
              Identifier this
                 Type: contract Withdrawable
                 Source: "this"
      ExpressionStatement
         Gas costs: [???]
         Source: "_to.transfer(_amount)"
        FunctionCall
           Type: tuple()
           Source: "_to.transfer(_amount)"
          MemberAccess to member transfer
             Type: function (uint256)
             Source: "_to.transfer"
            Identifier _to
               Type: address
               Source: "_to"
          Identifier _amount
             Type: uint256
             Source: "_amount"
ContractDefinition "ERC20Token"
   Gas costs: 0
   Source: "contract ERC20Token {\r\n\r\n    // Topic: ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n\r\n    // Topic: 8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\r\n    event Approval(address indexed _owner, address indexed _recipient, uint256 _amount);\r\n\r\n    function totalSupply() public constant returns (uint256);\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _amount) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success);\r\n    function approve(address _recipient, uint256 _amount) public returns (bool success);\r\n    function allowance(address _owner, address _recipient) public constant returns (uint256 remaining);\r\n}"
  EventDefinition "Transfer"
     Source: "event Transfer(address indexed _from, address indexed _to, uint256 _amount);"
    ParameterList
       Source: "(address indexed _from, address indexed _to, uint256 _amount)"
      VariableDeclaration "_from"
         Type: address
         Source: "address indexed _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address indexed _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Approval"
     Source: "event Approval(address indexed _owner, address indexed _recipient, uint256 _amount);"
    ParameterList
       Source: "(address indexed _owner, address indexed _recipient, uint256 _amount)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address indexed _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_recipient"
         Type: address
         Source: "address indexed _recipient"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "totalSupply" - public - const
     Source: "function totalSupply() public constant returns (uint256);"
    ParameterList
       Source: "()"
    ParameterList
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) public constant returns (uint256 balance);"
    ParameterList
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256 balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _amount) public returns (bool success);"
    ParameterList
       Source: "(address _to, uint256 _amount)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success);"
    ParameterList
       Source: "(address _from, address _to, uint256 _amount)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "approve" - public
     Source: "function approve(address _recipient, uint256 _amount) public returns (bool success);"
    ParameterList
       Source: "(address _recipient, uint256 _amount)"
      VariableDeclaration "_recipient"
         Type: address
         Source: "address _recipient"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _recipient) public constant returns (uint256 remaining);"
    ParameterList
       Source: "(address _owner, address _recipient)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_recipient"
         Type: address
         Source: "address _recipient"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256 remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint256 remaining"
        ElementaryTypeName uint256
           Source: "uint256"
ContractDefinition "TokenStorage"
   Source: "contract TokenStorage is Permittable, Destructable, Withdrawable {\r\n    struct Megabox {\r\n        address owner;\r\n        uint256 totalSupply;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    mapping(address => uint256) private balances;\r\n    mapping(string => uint256) private settings;\r\n    mapping(uint256 => Megabox) private megaboxes;\r\n    uint256 megaboxIndex = 0;\r\n\r\n    function _start() public onlyPermitted {\r\n        //Number of decimal places\r\n        uint decimalPlaces = 8;\r\n        setSetting(\"decimalPlaces\", decimalPlaces);\r\n\r\n        //Tokens stored as integer values multiplied by multiplier. I.e. 1 token with 8 decimals would be stored as 100,000,000\r\n        setSetting(\"multiplier\", 10 ** decimalPlaces);\r\n\r\n        //Tokens amount to send exhausting warning\r\n        setSetting(\"exhaustingNumber\", 2 * 10**decimalPlaces);\r\n\r\n        //Token price in weis per 1\r\n        setSetting(\"tokenPrice\", 15283860872157044);\r\n\r\n        //Decimator for the percents (1000 = 100%)\r\n        setSetting(\"percentage\", 1000);\r\n\r\n        //TransferFee(10) == 1%\r\n        setSetting(\"transferFee\", 10);\r\n\r\n        //PurchaseFee(157) == 15.7%\r\n        setSetting(\"purchaseFee\", 0);\r\n\r\n        //PurchaseCap(5000) == 5000.00000000 tokens\r\n        setSetting(\"purchaseCap\", 0);\r\n\r\n        //PurchaseTimeout in seconds\r\n        setSetting(\"purchaseTimeout\", 0);\r\n\r\n        //Timestamp when ICO\r\n        setSetting(\"icoTimestamp\", now);\r\n\r\n        //RedemptionTimeout in seconds\r\n        setSetting(\"redemptionTimeout\", 365 * 24 * 60 * 60);\r\n\r\n        //RedemptionFee(157) == 15.7%\r\n        setSetting(\"redemptionFee\", 0);\r\n\r\n        // Address to return operational fees\r\n        setSetting(\"feeReturnAddress\", uint(address(0x0d026A63a88A0FEc2344044e656D6B63684FBeA1)));\r\n\r\n        // Address to collect dead tokens\r\n        setSetting(\"deadTokensAddress\", uint(address(0x4DcB8F5b22557672B35Ef48F8C2b71f8F54c251F)));\r\n\r\n        //Total supply of tokens\r\n        setSetting(\"totalSupply\", 100 * 1000 * 1000 * (10 ** decimalPlaces));\r\n\r\n        setSetting(\"newMegaboxThreshold\", 1 * 10**decimalPlaces);\r\n    }\r\n\r\n    function getBalance(address _address) public view onlyPermitted returns(uint256) {\r\n        return balances[_address];\r\n    }\r\n\r\n    function setBalance(address _address, uint256 _amount) public onlyPermitted returns (uint256) {\r\n        balances[_address] = _amount;\r\n        return balances[_address];\r\n    }\r\n\r\n    function transfer(address _from, address _to, uint256 _amount) public onlyPermitted returns (uint256) {\r\n        require(balances[_from] >= _amount);\r\n\r\n        decreaseBalance(_from, _amount);\r\n        increaseBalance(_to, _amount);\r\n        return _amount;\r\n    }\r\n\r\n    function decreaseBalance(address _address, uint256 _amount) public onlyPermitted returns (uint256) {\r\n        require(balances[_address] >= _amount);\r\n\r\n        balances[_address] -= _amount;\r\n        return _amount;\r\n    }\r\n\r\n    function increaseBalance(address _address, uint256 _amount) public onlyPermitted returns (uint256) {\r\n        balances[_address] += _amount;\r\n        return _amount;\r\n    }\r\n\r\n    function getSetting(string _name) public view onlyPermitted returns(uint256) {\r\n        return settings[_name];\r\n    }\r\n\r\n    function getSettingAddress(string _name) public view onlyPermitted returns(address) {\r\n        return address(getSetting(_name));\r\n    }\r\n\r\n    function setSetting(string _name, uint256 _value) public onlyPermitted returns (uint256) {\r\n        settings[_name] = _value;\r\n        return settings[_name];\r\n    }\r\n\r\n    function newMegabox(address _owner, uint256 _tokens, uint256 _timestamp) public onlyPermitted {\r\n        uint newMegaboxIndex = megaboxIndex++;\r\n        megaboxes[newMegaboxIndex] = Megabox({owner: _owner, totalSupply: _tokens, timestamp: _timestamp});\r\n\r\n        setSetting(\"totalSupply\", getSetting(\"totalSupply\") + _tokens);\r\n\r\n        uint256 balance = balances[_owner] + _tokens;\r\n        setBalance(_owner, balance);\r\n    }\r\n\r\n    function getMegabox(uint256 index) public view onlyPermitted returns (address, uint256, uint256) {\r\n        return (megaboxes[index].owner, megaboxes[index].totalSupply, megaboxes[index].timestamp);\r\n    }\r\n\r\n    function getMegaboxIndex() public view onlyPermitted returns (uint256) {\r\n        return megaboxIndex;\r\n    }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Permittable"
    UserDefinedTypeName "Permittable"
       Source: "Permittable"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Destructable"
    UserDefinedTypeName "Destructable"
       Source: "Destructable"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Withdrawable"
    UserDefinedTypeName "Withdrawable"
       Source: "Withdrawable"
  StructDefinition "Megabox"
     Gas costs: 0
     Source: "struct Megabox {\r\n        address owner;\r\n        uint256 totalSupply;\r\n        uint256 timestamp;\r\n    }"
    VariableDeclaration "owner"
       Type: address
       Source: "address owner"
      ElementaryTypeName address
         Source: "address"
    VariableDeclaration "totalSupply"
       Type: uint256
       Source: "uint256 totalSupply"
      ElementaryTypeName uint256
         Source: "uint256"
    VariableDeclaration "timestamp"
       Type: uint256
       Source: "uint256 timestamp"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping(address => uint256) private balances"
    Mapping
       Source: "mapping(address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "settings"
     Type: mapping(string memory => uint256)
     Gas costs: 0
     Source: "mapping(string => uint256) private settings"
    Mapping
       Source: "mapping(string => uint256)"
      ElementaryTypeName string
         Source: "string"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "megaboxes"
     Type: mapping(uint256 => struct TokenStorage.Megabox storage ref)
     Gas costs: 0
     Source: "mapping(uint256 => Megabox) private megaboxes"
    Mapping
       Source: "mapping(uint256 => Megabox)"
      ElementaryTypeName uint256
         Source: "uint256"
      UserDefinedTypeName "Megabox"
         Source: "Megabox"
  VariableDeclaration "megaboxIndex"
     Type: uint256
     Gas costs: 0
     Source: "uint256 megaboxIndex = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  FunctionDefinition "_start" - public
     Source: "function _start() public onlyPermitted {\r\n        //Number of decimal places\r\n        uint decimalPlaces = 8;\r\n        setSetting(\"decimalPlaces\", decimalPlaces);\r\n\r\n        //Tokens stored as integer values multiplied by multiplier. I.e. 1 token with 8 decimals would be stored as 100,000,000\r\n        setSetting(\"multiplier\", 10 ** decimalPlaces);\r\n\r\n        //Tokens amount to send exhausting warning\r\n        setSetting(\"exhaustingNumber\", 2 * 10**decimalPlaces);\r\n\r\n        //Token price in weis per 1\r\n        setSetting(\"tokenPrice\", 15283860872157044);\r\n\r\n        //Decimator for the percents (1000 = 100%)\r\n        setSetting(\"percentage\", 1000);\r\n\r\n        //TransferFee(10) == 1%\r\n        setSetting(\"transferFee\", 10);\r\n\r\n        //PurchaseFee(157) == 15.7%\r\n        setSetting(\"purchaseFee\", 0);\r\n\r\n        //PurchaseCap(5000) == 5000.00000000 tokens\r\n        setSetting(\"purchaseCap\", 0);\r\n\r\n        //PurchaseTimeout in seconds\r\n        setSetting(\"purchaseTimeout\", 0);\r\n\r\n        //Timestamp when ICO\r\n        setSetting(\"icoTimestamp\", now);\r\n\r\n        //RedemptionTimeout in seconds\r\n        setSetting(\"redemptionTimeout\", 365 * 24 * 60 * 60);\r\n\r\n        //RedemptionFee(157) == 15.7%\r\n        setSetting(\"redemptionFee\", 0);\r\n\r\n        // Address to return operational fees\r\n        setSetting(\"feeReturnAddress\", uint(address(0x0d026A63a88A0FEc2344044e656D6B63684FBeA1)));\r\n\r\n        // Address to collect dead tokens\r\n        setSetting(\"deadTokensAddress\", uint(address(0x4DcB8F5b22557672B35Ef48F8C2b71f8F54c251F)));\r\n\r\n        //Total supply of tokens\r\n        setSetting(\"totalSupply\", 100 * 1000 * 1000 * (10 ** decimalPlaces));\r\n\r\n        setSetting(\"newMegaboxThreshold\", 1 * 10**decimalPlaces);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        //Number of decimal places\r\n        uint decimalPlaces = 8;\r\n        setSetting(\"decimalPlaces\", decimalPlaces);\r\n\r\n        //Tokens stored as integer values multiplied by multiplier. I.e. 1 token with 8 decimals would be stored as 100,000,000\r\n        setSetting(\"multiplier\", 10 ** decimalPlaces);\r\n\r\n        //Tokens amount to send exhausting warning\r\n        setSetting(\"exhaustingNumber\", 2 * 10**decimalPlaces);\r\n\r\n        //Token price in weis per 1\r\n        setSetting(\"tokenPrice\", 15283860872157044);\r\n\r\n        //Decimator for the percents (1000 = 100%)\r\n        setSetting(\"percentage\", 1000);\r\n\r\n        //TransferFee(10) == 1%\r\n        setSetting(\"transferFee\", 10);\r\n\r\n        //PurchaseFee(157) == 15.7%\r\n        setSetting(\"purchaseFee\", 0);\r\n\r\n        //PurchaseCap(5000) == 5000.00000000 tokens\r\n        setSetting(\"purchaseCap\", 0);\r\n\r\n        //PurchaseTimeout in seconds\r\n        setSetting(\"purchaseTimeout\", 0);\r\n\r\n        //Timestamp when ICO\r\n        setSetting(\"icoTimestamp\", now);\r\n\r\n        //RedemptionTimeout in seconds\r\n        setSetting(\"redemptionTimeout\", 365 * 24 * 60 * 60);\r\n\r\n        //RedemptionFee(157) == 15.7%\r\n        setSetting(\"redemptionFee\", 0);\r\n\r\n        // Address to return operational fees\r\n        setSetting(\"feeReturnAddress\", uint(address(0x0d026A63a88A0FEc2344044e656D6B63684FBeA1)));\r\n\r\n        // Address to collect dead tokens\r\n        setSetting(\"deadTokensAddress\", uint(address(0x4DcB8F5b22557672B35Ef48F8C2b71f8F54c251F)));\r\n\r\n        //Total supply of tokens\r\n        setSetting(\"totalSupply\", 100 * 1000 * 1000 * (10 ** decimalPlaces));\r\n\r\n        setSetting(\"newMegaboxThreshold\", 1 * 10**decimalPlaces);\r\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint decimalPlaces = 8"
        VariableDeclaration "decimalPlaces"
           Type: uint256
           Source: "uint decimalPlaces"
          ElementaryTypeName uint
             Source: "uint"
        Literal, token: [no token] value: 8
           Type: int_const 8
           Source: "8"
      ExpressionStatement
         Gas costs: 0
         Source: "setSetting(\"decimalPlaces\", decimalPlaces)"
        FunctionCall
           Type: uint256
           Source: "setSetting(\"decimalPlaces\", decimalPlaces)"
          Identifier setSetting
             Type: function (string memory,uint256) returns (uint256)
             Source: "setSetting"
          Literal, token: [no token] value: decimalPlaces
             Type: literal_string "decimalPlaces"
             Source: "\"decimalPlaces\""
          Identifier decimalPlaces
             Type: uint256
             Source: "decimalPlaces"
      ExpressionStatement
         Gas costs: 0
         Source: "setSetting(\"multiplier\", 10 ** decimalPlaces)"
        FunctionCall
           Type: uint256
           Source: "setSetting(\"multiplier\", 10 ** decimalPlaces)"
          Identifier setSetting
             Type: function (string memory,uint256) returns (uint256)
             Source: "setSetting"
          Literal, token: [no token] value: multiplier
             Type: literal_string "multiplier"
             Source: "\"multiplier\""
          BinaryOperation using operator **
             Type: uint256
             Source: "10 ** decimalPlaces"
            Literal, token: [no token] value: 10
               Type: int_const 10
               Source: "10"
            Identifier decimalPlaces
               Type: uint256
               Source: "decimalPlaces"
      ExpressionStatement
         Gas costs: 0
         Source: "setSetting(\"exhaustingNumber\", 2 * 10**decimalPlaces)"
        FunctionCall
           Type: uint256
           Source: "setSetting(\"exhaustingNumber\", 2 * 10**decimalPlaces)"
          Identifier setSetting
             Type: function (string memory,uint256) returns (uint256)
             Source: "setSetting"
          Literal, token: [no token] value: exhaustingNumber
             Type: literal_string "exhaustingNumber"
             Source: "\"exhaustingNumber\""
          BinaryOperation using operator *
             Type: uint256
             Source: "2 * 10**decimalPlaces"
            Literal, token: [no token] value: 2
               Type: int_const 2
               Source: "2"
            BinaryOperation using operator **
               Type: uint256
               Source: "10**decimalPlaces"
              Literal, token: [no token] value: 10
                 Type: int_const 10
                 Source: "10"
              Identifier decimalPlaces
                 Type: uint256
                 Source: "decimalPlaces"
      ExpressionStatement
         Gas costs: 0
         Source: "setSetting(\"tokenPrice\", 15283860872157044)"
        FunctionCall
           Type: uint256
           Source: "setSetting(\"tokenPrice\", 15283860872157044)"
          Identifier setSetting
             Type: function (string memory,uint256) returns (uint256)
             Source: "setSetting"
          Literal, token: [no token] value: tokenPrice
             Type: literal_string "tokenPrice"
             Source: "\"tokenPrice\""
          Literal, token: [no token] value: 15283860872157044
             Type: int_const 15283860872157044
             Source: "15283860872157044"
      ExpressionStatement
         Gas costs: 0
         Source: "setSetting(\"percentage\", 1000)"
        FunctionCall
           Type: uint256
           Source: "setSetting(\"percentage\", 1000)"
          Identifier setSetting
             Type: function (string memory,uint256) returns (uint256)
             Source: "setSetting"
          Literal, token: [no token] value: percentage
             Type: literal_string "percentage"
             Source: "\"percentage\""
          Literal, token: [no token] value: 1000
             Type: int_const 1000
             Source: "1000"
      ExpressionStatement
         Gas costs: 0
         Source: "setSetting(\"transferFee\", 10)"
        FunctionCall
           Type: uint256
           Source: "setSetting(\"transferFee\", 10)"
          Identifier setSetting
             Type: function (string memory,uint256) returns (uint256)
             Source: "setSetting"
          Literal, token: [no token] value: transferFee
             Type: literal_string "transferFee"
             Source: "\"transferFee\""
          Literal, token: [no token] value: 10
             Type: int_const 10
             Source: "10"
      ExpressionStatement
         Gas costs: 0
         Source: "setSetting(\"purchaseFee\", 0)"
        FunctionCall
           Type: uint256
           Source: "setSetting(\"purchaseFee\", 0)"
          Identifier setSetting
             Type: function (string memory,uint256) returns (uint256)
             Source: "setSetting"
          Literal, token: [no token] value: purchaseFee
             Type: literal_string "purchaseFee"
             Source: "\"purchaseFee\""
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "setSetting(\"purchaseCap\", 0)"
        FunctionCall
           Type: uint256
           Source: "setSetting(\"purchaseCap\", 0)"
          Identifier setSetting
             Type: function (string memory,uint256) returns (uint256)
             Source: "setSetting"
          Literal, token: [no token] value: purchaseCap
             Type: literal_string "purchaseCap"
             Source: "\"purchaseCap\""
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "setSetting(\"purchaseTimeout\", 0)"
        FunctionCall
           Type: uint256
           Source: "setSetting(\"purchaseTimeout\", 0)"
          Identifier setSetting
             Type: function (string memory,uint256) returns (uint256)
             Source: "setSetting"
          Literal, token: [no token] value: purchaseTimeout
             Type: literal_string "purchaseTimeout"
             Source: "\"purchaseTimeout\""
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "setSetting(\"icoTimestamp\", now)"
        FunctionCall
           Type: uint256
           Source: "setSetting(\"icoTimestamp\", now)"
          Identifier setSetting
             Type: function (string memory,uint256) returns (uint256)
             Source: "setSetting"
          Literal, token: [no token] value: icoTimestamp
             Type: literal_string "icoTimestamp"
             Source: "\"icoTimestamp\""
          Identifier now
             Type: uint256
             Source: "now"
      ExpressionStatement
         Gas costs: 0
         Source: "setSetting(\"redemptionTimeout\", 365 * 24 * 60 * 60)"
        FunctionCall
           Type: uint256
           Source: "setSetting(\"redemptionTimeout\", 365 * 24 * 60 * 60)"
          Identifier setSetting
             Type: function (string memory,uint256) returns (uint256)
             Source: "setSetting"
          Literal, token: [no token] value: redemptionTimeout
             Type: literal_string "redemptionTimeout"
             Source: "\"redemptionTimeout\""
          BinaryOperation using operator *
             Type: int_const 31536000
             Source: "365 * 24 * 60 * 60"
            BinaryOperation using operator *
               Type: int_const 525600
               Source: "365 * 24 * 60"
              BinaryOperation using operator *
                 Type: int_const 8760
                 Source: "365 * 24"
                Literal, token: [no token] value: 365
                   Type: int_const 365
                   Source: "365"
                Literal, token: [no token] value: 24
                   Type: int_const 24
                   Source: "24"
              Literal, token: [no token] value: 60
                 Type: int_const 60
                 Source: "60"
            Literal, token: [no token] value: 60
               Type: int_const 60
               Source: "60"
      ExpressionStatement
         Gas costs: 0
         Source: "setSetting(\"redemptionFee\", 0)"
        FunctionCall
           Type: uint256
           Source: "setSetting(\"redemptionFee\", 0)"
          Identifier setSetting
             Type: function (string memory,uint256) returns (uint256)
             Source: "setSetting"
          Literal, token: [no token] value: redemptionFee
             Type: literal_string "redemptionFee"
             Source: "\"redemptionFee\""
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "setSetting(\"feeReturnAddress\", uint(address(0x0d026A63a88A0FEc2344044e656D6B63684FBeA1)))"
        FunctionCall
           Type: uint256
           Source: "setSetting(\"feeReturnAddress\", uint(address(0x0d026A63a88A0FEc2344044e656D6B63684FBeA1)))"
          Identifier setSetting
             Type: function (string memory,uint256) returns (uint256)
             Source: "setSetting"
          Literal, token: [no token] value: feeReturnAddress
             Type: literal_string "feeReturnAddress"
             Source: "\"feeReturnAddress\""
          FunctionCall
             Type: uint256
             Source: "uint(address(0x0d026A63a88A0FEc2344044e656D6B63684FBeA1))"
            ElementaryTypeNameExpression uint
               Type: type(uint256)
               Source: "uint"
            FunctionCall
               Type: address
               Source: "address(0x0d026A63a88A0FEc2344044e656D6B63684FBeA1)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Literal, token: [no token] value: 0x0d026A63a88A0FEc2344044e656D6B63684FBeA1
                 Type: address
                 Source: "0x0d026A63a88A0FEc2344044e656D6B63684FBeA1"
      ExpressionStatement
         Gas costs: 0
         Source: "setSetting(\"deadTokensAddress\", uint(address(0x4DcB8F5b22557672B35Ef48F8C2b71f8F54c251F)))"
        FunctionCall
           Type: uint256
           Source: "setSetting(\"deadTokensAddress\", uint(address(0x4DcB8F5b22557672B35Ef48F8C2b71f8F54c251F)))"
          Identifier setSetting
             Type: function (string memory,uint256) returns (uint256)
             Source: "setSetting"
          Literal, token: [no token] value: deadTokensAddress
             Type: literal_string "deadTokensAddress"
             Source: "\"deadTokensAddress\""
          FunctionCall
             Type: uint256
             Source: "uint(address(0x4DcB8F5b22557672B35Ef48F8C2b71f8F54c251F))"
            ElementaryTypeNameExpression uint
               Type: type(uint256)
               Source: "uint"
            FunctionCall
               Type: address
               Source: "address(0x4DcB8F5b22557672B35Ef48F8C2b71f8F54c251F)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Literal, token: [no token] value: 0x4DcB8F5b22557672B35Ef48F8C2b71f8F54c251F
                 Type: address
                 Source: "0x4DcB8F5b22557672B35Ef48F8C2b71f8F54c251F"
      ExpressionStatement
         Gas costs: 0
         Source: "setSetting(\"totalSupply\", 100 * 1000 * 1000 * (10 ** decimalPlaces))"
        FunctionCall
           Type: uint256
           Source: "setSetting(\"totalSupply\", 100 * 1000 * 1000 * (10 ** decimalPlaces))"
          Identifier setSetting
             Type: function (string memory,uint256) returns (uint256)
             Source: "setSetting"
          Literal, token: [no token] value: totalSupply
             Type: literal_string "totalSupply"
             Source: "\"totalSupply\""
          BinaryOperation using operator *
             Type: uint256
             Source: "100 * 1000 * 1000 * (10 ** decimalPlaces)"
            BinaryOperation using operator *
               Type: int_const 100000000
               Source: "100 * 1000 * 1000"
              BinaryOperation using operator *
                 Type: int_const 100000
                 Source: "100 * 1000"
                Literal, token: [no token] value: 100
                   Type: int_const 100
                   Source: "100"
                Literal, token: [no token] value: 1000
                   Type: int_const 1000
                   Source: "1000"
              Literal, token: [no token] value: 1000
                 Type: int_const 1000
                 Source: "1000"
            TupleExpression
               Type: uint256
               Source: "(10 ** decimalPlaces)"
              BinaryOperation using operator **
                 Type: uint256
                 Source: "10 ** decimalPlaces"
                Literal, token: [no token] value: 10
                   Type: int_const 10
                   Source: "10"
                Identifier decimalPlaces
                   Type: uint256
                   Source: "decimalPlaces"
      ExpressionStatement
         Gas costs: 0
         Source: "setSetting(\"newMegaboxThreshold\", 1 * 10**decimalPlaces)"
        FunctionCall
           Type: uint256
           Source: "setSetting(\"newMegaboxThreshold\", 1 * 10**decimalPlaces)"
          Identifier setSetting
             Type: function (string memory,uint256) returns (uint256)
             Source: "setSetting"
          Literal, token: [no token] value: newMegaboxThreshold
             Type: literal_string "newMegaboxThreshold"
             Source: "\"newMegaboxThreshold\""
          BinaryOperation using operator *
             Type: uint256
             Source: "1 * 10**decimalPlaces"
            Literal, token: [no token] value: 1
               Type: int_const 1
               Source: "1"
            BinaryOperation using operator **
               Type: uint256
               Source: "10**decimalPlaces"
              Literal, token: [no token] value: 10
                 Type: int_const 10
                 Source: "10"
              Identifier decimalPlaces
                 Type: uint256
                 Source: "decimalPlaces"
  FunctionDefinition "getBalance" - public - const
     Source: "function getBalance(address _address) public view onlyPermitted returns(uint256) {\r\n        return balances[_address];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _address)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        return balances[_address];\r\n    }"
      Return
         Gas costs: 0
         Source: "return balances[_address]"
        IndexAccess
           Type: uint256
           Source: "balances[_address]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          Identifier _address
             Type: address
             Source: "_address"
  FunctionDefinition "setBalance" - public
     Source: "function setBalance(address _address, uint256 _amount) public onlyPermitted returns (uint256) {\r\n        balances[_address] = _amount;\r\n        return balances[_address];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _address, uint256 _amount)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        balances[_address] = _amount;\r\n        return balances[_address];\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "balances[_address] = _amount"
        Assignment using operator =
           Type: uint256
           Source: "balances[_address] = _amount"
          IndexAccess
             Type: uint256
             Source: "balances[_address]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _address
               Type: address
               Source: "_address"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      Return
         Gas costs: 0
         Source: "return balances[_address]"
        IndexAccess
           Type: uint256
           Source: "balances[_address]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          Identifier _address
             Type: address
             Source: "_address"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _from, address _to, uint256 _amount) public onlyPermitted returns (uint256) {\r\n        require(balances[_from] >= _amount);\r\n\r\n        decreaseBalance(_from, _amount);\r\n        increaseBalance(_to, _amount);\r\n        return _amount;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _amount)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        require(balances[_from] >= _amount);\r\n\r\n        decreaseBalance(_from, _amount);\r\n        increaseBalance(_to, _amount);\r\n        return _amount;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "require(balances[_from] >= _amount)"
        FunctionCall
           Type: tuple()
           Source: "require(balances[_from] >= _amount)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "balances[_from] >= _amount"
            IndexAccess
               Type: uint256
               Source: "balances[_from]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _from
                 Type: address
                 Source: "_from"
            Identifier _amount
               Type: uint256
               Source: "_amount"
      ExpressionStatement
         Gas costs: 0
         Source: "decreaseBalance(_from, _amount)"
        FunctionCall
           Type: uint256
           Source: "decreaseBalance(_from, _amount)"
          Identifier decreaseBalance
             Type: function (address,uint256) returns (uint256)
             Source: "decreaseBalance"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      ExpressionStatement
         Gas costs: 0
         Source: "increaseBalance(_to, _amount)"
        FunctionCall
           Type: uint256
           Source: "increaseBalance(_to, _amount)"
          Identifier increaseBalance
             Type: function (address,uint256) returns (uint256)
             Source: "increaseBalance"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      Return
         Gas costs: 0
         Source: "return _amount"
        Identifier _amount
           Type: uint256
           Source: "_amount"
  FunctionDefinition "decreaseBalance" - public
     Source: "function decreaseBalance(address _address, uint256 _amount) public onlyPermitted returns (uint256) {\r\n        require(balances[_address] >= _amount);\r\n\r\n        balances[_address] -= _amount;\r\n        return _amount;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _address, uint256 _amount)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        require(balances[_address] >= _amount);\r\n\r\n        balances[_address] -= _amount;\r\n        return _amount;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "require(balances[_address] >= _amount)"
        FunctionCall
           Type: tuple()
           Source: "require(balances[_address] >= _amount)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "balances[_address] >= _amount"
            IndexAccess
               Type: uint256
               Source: "balances[_address]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _address
                 Type: address
                 Source: "_address"
            Identifier _amount
               Type: uint256
               Source: "_amount"
      ExpressionStatement
         Gas costs: 0
         Source: "balances[_address] -= _amount"
        Assignment using operator -=
           Type: uint256
           Source: "balances[_address] -= _amount"
          IndexAccess
             Type: uint256
             Source: "balances[_address]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _address
               Type: address
               Source: "_address"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      Return
         Gas costs: 0
         Source: "return _amount"
        Identifier _amount
           Type: uint256
           Source: "_amount"
  FunctionDefinition "increaseBalance" - public
     Source: "function increaseBalance(address _address, uint256 _amount) public onlyPermitted returns (uint256) {\r\n        balances[_address] += _amount;\r\n        return _amount;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _address, uint256 _amount)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        balances[_address] += _amount;\r\n        return _amount;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "balances[_address] += _amount"
        Assignment using operator +=
           Type: uint256
           Source: "balances[_address] += _amount"
          IndexAccess
             Type: uint256
             Source: "balances[_address]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _address
               Type: address
               Source: "_address"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      Return
         Gas costs: 0
         Source: "return _amount"
        Identifier _amount
           Type: uint256
           Source: "_amount"
  FunctionDefinition "getSetting" - public - const
     Source: "function getSetting(string _name) public view onlyPermitted returns(uint256) {\r\n        return settings[_name];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(string _name)"
      VariableDeclaration "_name"
         Type: string memory
         Source: "string _name"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        return settings[_name];\r\n    }"
      Return
         Gas costs: 0
         Source: "return settings[_name]"
        IndexAccess
           Type: uint256
           Source: "settings[_name]"
          Identifier settings
             Type: mapping(string memory => uint256)
             Source: "settings"
          Identifier _name
             Type: string memory
             Source: "_name"
  FunctionDefinition "getSettingAddress" - public - const
     Source: "function getSettingAddress(string _name) public view onlyPermitted returns(address) {\r\n        return address(getSetting(_name));\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(string _name)"
      VariableDeclaration "_name"
         Type: string memory
         Source: "string _name"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Gas costs: 0
       Source: "(address)"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        return address(getSetting(_name));\r\n    }"
      Return
         Gas costs: 0
         Source: "return address(getSetting(_name))"
        FunctionCall
           Type: address
           Source: "address(getSetting(_name))"
          ElementaryTypeNameExpression address
             Type: type(address)
             Source: "address"
          FunctionCall
             Type: uint256
             Source: "getSetting(_name)"
            Identifier getSetting
               Type: function (string memory) view returns (uint256)
               Source: "getSetting"
            Identifier _name
               Type: string memory
               Source: "_name"
  FunctionDefinition "setSetting" - public
     Source: "function setSetting(string _name, uint256 _value) public onlyPermitted returns (uint256) {\r\n        settings[_name] = _value;\r\n        return settings[_name];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(string _name, uint256 _value)"
      VariableDeclaration "_name"
         Type: string memory
         Source: "string _name"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        settings[_name] = _value;\r\n        return settings[_name];\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "settings[_name] = _value"
        Assignment using operator =
           Type: uint256
           Source: "settings[_name] = _value"
          IndexAccess
             Type: uint256
             Source: "settings[_name]"
            Identifier settings
               Type: mapping(string memory => uint256)
               Source: "settings"
            Identifier _name
               Type: string memory
               Source: "_name"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 0
         Source: "return settings[_name]"
        IndexAccess
           Type: uint256
           Source: "settings[_name]"
          Identifier settings
             Type: mapping(string memory => uint256)
             Source: "settings"
          Identifier _name
             Type: string memory
             Source: "_name"
  FunctionDefinition "newMegabox" - public
     Source: "function newMegabox(address _owner, uint256 _tokens, uint256 _timestamp) public onlyPermitted {\r\n        uint newMegaboxIndex = megaboxIndex++;\r\n        megaboxes[newMegaboxIndex] = Megabox({owner: _owner, totalSupply: _tokens, timestamp: _timestamp});\r\n\r\n        setSetting(\"totalSupply\", getSetting(\"totalSupply\") + _tokens);\r\n\r\n        uint256 balance = balances[_owner] + _tokens;\r\n        setBalance(_owner, balance);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, uint256 _tokens, uint256 _timestamp)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_tokens"
         Type: uint256
         Source: "uint256 _tokens"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_timestamp"
         Type: uint256
         Source: "uint256 _timestamp"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        uint newMegaboxIndex = megaboxIndex++;\r\n        megaboxes[newMegaboxIndex] = Megabox({owner: _owner, totalSupply: _tokens, timestamp: _timestamp});\r\n\r\n        setSetting(\"totalSupply\", getSetting(\"totalSupply\") + _tokens);\r\n\r\n        uint256 balance = balances[_owner] + _tokens;\r\n        setBalance(_owner, balance);\r\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint newMegaboxIndex = megaboxIndex++"
        VariableDeclaration "newMegaboxIndex"
           Type: uint256
           Source: "uint newMegaboxIndex"
          ElementaryTypeName uint
             Source: "uint"
        UnaryOperation (postfix) ++
           Type: uint256
           Source: "megaboxIndex++"
          Identifier megaboxIndex
             Type: uint256
             Source: "megaboxIndex"
      ExpressionStatement
         Gas costs: 0
         Source: "megaboxes[newMegaboxIndex] = Megabox({owner: _owner, totalSupply: _tokens, timestamp: _timestamp})"
        Assignment using operator =
           Type: struct TokenStorage.Megabox storage ref
           Source: "megaboxes[newMegaboxIndex] = Megabox({owner: _owner, totalSupply: _tokens, timestamp: _timestamp})"
          IndexAccess
             Type: struct TokenStorage.Megabox storage ref
             Source: "megaboxes[newMegaboxIndex]"
            Identifier megaboxes
               Type: mapping(uint256 => struct TokenStorage.Megabox storage ref)
               Source: "megaboxes"
            Identifier newMegaboxIndex
               Type: uint256
               Source: "newMegaboxIndex"
          FunctionCall
             Type: struct TokenStorage.Megabox memory
             Source: "Megabox({owner: _owner, totalSupply: _tokens, timestamp: _timestamp})"
            Identifier Megabox
               Type: type(struct TokenStorage.Megabox storage pointer)
               Source: "Megabox"
            Identifier _owner
               Type: address
               Source: "_owner"
            Identifier _tokens
               Type: uint256
               Source: "_tokens"
            Identifier _timestamp
               Type: uint256
               Source: "_timestamp"
      ExpressionStatement
         Gas costs: 0
         Source: "setSetting(\"totalSupply\", getSetting(\"totalSupply\") + _tokens)"
        FunctionCall
           Type: uint256
           Source: "setSetting(\"totalSupply\", getSetting(\"totalSupply\") + _tokens)"
          Identifier setSetting
             Type: function (string memory,uint256) returns (uint256)
             Source: "setSetting"
          Literal, token: [no token] value: totalSupply
             Type: literal_string "totalSupply"
             Source: "\"totalSupply\""
          BinaryOperation using operator +
             Type: uint256
             Source: "getSetting(\"totalSupply\") + _tokens"
            FunctionCall
               Type: uint256
               Source: "getSetting(\"totalSupply\")"
              Identifier getSetting
                 Type: function (string memory) view returns (uint256)
                 Source: "getSetting"
              Literal, token: [no token] value: totalSupply
                 Type: literal_string "totalSupply"
                 Source: "\"totalSupply\""
            Identifier _tokens
               Type: uint256
               Source: "_tokens"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 balance = balances[_owner] + _tokens"
        VariableDeclaration "balance"
           Type: uint256
           Source: "uint256 balance"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator +
           Type: uint256
           Source: "balances[_owner] + _tokens"
          IndexAccess
             Type: uint256
             Source: "balances[_owner]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _owner
               Type: address
               Source: "_owner"
          Identifier _tokens
             Type: uint256
             Source: "_tokens"
      ExpressionStatement
         Gas costs: 0
         Source: "setBalance(_owner, balance)"
        FunctionCall
           Type: uint256
           Source: "setBalance(_owner, balance)"
          Identifier setBalance
             Type: function (address,uint256) returns (uint256)
             Source: "setBalance"
          Identifier _owner
             Type: address
             Source: "_owner"
          Identifier balance
             Type: uint256
             Source: "balance"
  FunctionDefinition "getMegabox" - public - const
     Source: "function getMegabox(uint256 index) public view onlyPermitted returns (address, uint256, uint256) {\r\n        return (megaboxes[index].owner, megaboxes[index].totalSupply, megaboxes[index].timestamp);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 index)"
      VariableDeclaration "index"
         Type: uint256
         Source: "uint256 index"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(address, uint256, uint256)"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        return (megaboxes[index].owner, megaboxes[index].totalSupply, megaboxes[index].timestamp);\r\n    }"
      Return
         Gas costs: 0
         Source: "return (megaboxes[index].owner, megaboxes[index].totalSupply, megaboxes[index].timestamp)"
        TupleExpression
           Type: tuple(address,uint256,uint256)
           Source: "(megaboxes[index].owner, megaboxes[index].totalSupply, megaboxes[index].timestamp)"
          MemberAccess to member owner
             Type: address
             Source: "megaboxes[index].owner"
            IndexAccess
               Type: struct TokenStorage.Megabox storage ref
               Source: "megaboxes[index]"
              Identifier megaboxes
                 Type: mapping(uint256 => struct TokenStorage.Megabox storage ref)
                 Source: "megaboxes"
              Identifier index
                 Type: uint256
                 Source: "index"
          MemberAccess to member totalSupply
             Type: uint256
             Source: "megaboxes[index].totalSupply"
            IndexAccess
               Type: struct TokenStorage.Megabox storage ref
               Source: "megaboxes[index]"
              Identifier megaboxes
                 Type: mapping(uint256 => struct TokenStorage.Megabox storage ref)
                 Source: "megaboxes"
              Identifier index
                 Type: uint256
                 Source: "index"
          MemberAccess to member timestamp
             Type: uint256
             Source: "megaboxes[index].timestamp"
            IndexAccess
               Type: struct TokenStorage.Megabox storage ref
               Source: "megaboxes[index]"
              Identifier megaboxes
                 Type: mapping(uint256 => struct TokenStorage.Megabox storage ref)
                 Source: "megaboxes"
              Identifier index
                 Type: uint256
                 Source: "index"
  FunctionDefinition "getMegaboxIndex" - public - const
     Source: "function getMegaboxIndex() public view onlyPermitted returns (uint256) {\r\n        return megaboxIndex;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        return megaboxIndex;\r\n    }"
      Return
         Gas costs: 0
         Source: "return megaboxIndex"
        Identifier megaboxIndex
           Type: uint256
           Source: "megaboxIndex"
ContractDefinition "TokenValidator"
   Source: "contract TokenValidator is Permittable, Destructable {\r\n    TokenStorage store;\r\n    mapping(address => uint256) datesOfPurchase;\r\n\r\n    function _setStore(address _address) public onlyPermitted {\r\n        store = TokenStorage(_address);\r\n    }\r\n\r\n    function getTransferFee(address _owner, address _address, uint256 _amount) public view returns(uint256) {\r\n        return (_address == _owner) ? 0 : (_amount * store.getSetting(\"transferFee\") / store.getSetting(\"percentage\"));\r\n    }\r\n\r\n    function validateAndGetTransferFee(address _owner, address _from, address /*_to*/, uint256 _amount) public view returns(uint256) {\r\n        uint256 _fee = getTransferFee(_owner, _from, _amount);\r\n\r\n        require(_amount > 0);\r\n        require((_amount + _fee) > 0);\r\n        require(store.getBalance(_from) >= (_amount + _fee));\r\n\r\n        return _fee;\r\n    }\r\n\r\n    function validateResetDeadTokens(uint256 _amount) public view returns(address) {\r\n        address deadTokensAddress = store.getSettingAddress(\"deadTokensAddress\");\r\n        uint256 deadTokens = store.getBalance(deadTokensAddress);\r\n\r\n        require(_amount > 0);\r\n        require(_amount <= deadTokens);\r\n\r\n        return deadTokensAddress;\r\n    }\r\n\r\n    function validateStart(address _owner, address _store) public view {\r\n        require(_store != address(0));\r\n        require(_store == address(store));\r\n        require(store.getBalance(_owner) == 0);\r\n    }\r\n\r\n    function validateAndGetPurchaseTokens(address _owner, address _address, uint256 _moneyAmount) public view returns (uint256) {\r\n        uint256 _tokens = _moneyAmount * store.getSetting(\"multiplier\") / store.getSetting(\"tokenPrice\");\r\n        uint256 _purchaseTimeout = store.getSetting(\"purchaseTimeout\");\r\n        uint256 _purchaseCap = store.getSetting(\"purchaseCap\");\r\n\r\n        require((_purchaseTimeout <= 0) || (block.timestamp - datesOfPurchase[_address] > _purchaseTimeout));\r\n        require(_tokens > 0);\r\n        require(store.getBalance(_owner) >= _tokens);\r\n        require((_purchaseCap <= 0) || (_tokens <= _purchaseCap));\r\n\r\n        return _tokens;\r\n    }\r\n\r\n    function updateDateOfPurchase(address _address, uint256 timestamp) public onlyPermitted {\r\n        datesOfPurchase[_address] = timestamp;\r\n    }\r\n\r\n    function validateAndGetRedeemFee(address /*_owner*/, address _address, uint256 _tokens) public view returns (uint256) {\r\n        uint256 _icoTimestamp = store.getSetting(\"icoTimestamp\");\r\n        uint256 _redemptionTimeout = store.getSetting(\"redemptionTimeout\");\r\n        uint256 _fee = _tokens * store.getSetting(\"redemptionFee\") / store.getSetting(\"percentage\");\r\n\r\n        require((_redemptionTimeout <= 0) || (block.timestamp > _icoTimestamp + _redemptionTimeout));\r\n        require(_tokens > 0);\r\n        require((_tokens + _fee) >= 0);\r\n        require(store.getBalance(_address) >= (_tokens + _fee));\r\n\r\n        return _fee;\r\n    }\r\n\r\n    function validateStartMegabox(address _owner, uint256 _tokens) public view {\r\n        uint256 _totalSupply = store.getSetting(\"totalSupply\");\r\n        uint256 _newMegaboxThreshold = store.getSetting(\"newMegaboxThreshold\");\r\n        uint256 _ownerBalance = store.getBalance(_owner);\r\n\r\n        require(_ownerBalance <= _newMegaboxThreshold);\r\n        require(_tokens > 0);\r\n        require((_totalSupply + _tokens) > _totalSupply);\r\n    }\r\n\r\n    function canPurchase(address _owner, address _address, uint256 _tokens) public view returns(bool, bool, bool, bool) {\r\n        uint256 _purchaseTimeout = store.getSetting(\"purchaseTimeout\");\r\n        uint256 _fee = _tokens * store.getSetting(\"purchaseFee\") / store.getSetting(\"percentage\");\r\n\r\n        bool purchaseTimeoutPassed = ((_purchaseTimeout <= 0) || (block.timestamp - datesOfPurchase[_address] > _purchaseTimeout));\r\n        bool tokensNumberPassed = (_tokens > 0);\r\n        bool ownerBalancePassed = (store.getBalance(_owner) >= (_tokens + _fee));\r\n        bool purchaseCapPassed = (store.getSetting(\"purchaseCap\") <= 0) || (_tokens < store.getSetting(\"purchaseCap\"));\r\n\r\n        return (purchaseTimeoutPassed, ownerBalancePassed, tokensNumberPassed, purchaseCapPassed);\r\n    }\r\n\r\n    function canTransfer(address _owner, address _from, address /*_to*/, uint256 _amount) public view returns (bool, bool) {\r\n        uint256 _fee = getTransferFee(_owner, _from, _amount);\r\n\r\n        bool transferPositivePassed = (_amount + _fee) > 0;\r\n        bool ownerBalancePassed = store.getBalance(_from) >= (_amount + _fee);\r\n\r\n        return (transferPositivePassed, ownerBalancePassed);\r\n    }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Permittable"
    UserDefinedTypeName "Permittable"
       Source: "Permittable"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Destructable"
    UserDefinedTypeName "Destructable"
       Source: "Destructable"
  VariableDeclaration "store"
     Type: contract TokenStorage
     Gas costs: 0
     Source: "TokenStorage store"
    UserDefinedTypeName "TokenStorage"
       Source: "TokenStorage"
  VariableDeclaration "datesOfPurchase"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping(address => uint256) datesOfPurchase"
    Mapping
       Source: "mapping(address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  FunctionDefinition "_setStore" - public
     Source: "function _setStore(address _address) public onlyPermitted {\r\n        store = TokenStorage(_address);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _address)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        store = TokenStorage(_address);\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "store = TokenStorage(_address)"
        Assignment using operator =
           Type: contract TokenStorage
           Source: "store = TokenStorage(_address)"
          Identifier store
             Type: contract TokenStorage
             Source: "store"
          FunctionCall
             Type: contract TokenStorage
             Source: "TokenStorage(_address)"
            Identifier TokenStorage
               Type: type(contract TokenStorage)
               Source: "TokenStorage"
            Identifier _address
               Type: address
               Source: "_address"
  FunctionDefinition "getTransferFee" - public - const
     Source: "function getTransferFee(address _owner, address _address, uint256 _amount) public view returns(uint256) {\r\n        return (_address == _owner) ? 0 : (_amount * store.getSetting(\"transferFee\") / store.getSetting(\"percentage\"));\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, address _address, uint256 _amount)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return (_address == _owner) ? 0 : (_amount * store.getSetting(\"transferFee\") / store.getSetting(\"percentage\"));\r\n    }"
      Return
         Gas costs: 0
         Source: "return (_address == _owner) ? 0 : (_amount * store.getSetting(\"transferFee\") / store.getSetting(\"percentage\"))"
        Conditional
           Type: uint256
           Source: "(_address == _owner) ? 0 : (_amount * store.getSetting(\"transferFee\") / store.getSetting(\"percentage\"))"
          TupleExpression
             Type: bool
             Source: "(_address == _owner)"
            BinaryOperation using operator ==
               Type: bool
               Source: "_address == _owner"
              Identifier _address
                 Type: address
                 Source: "_address"
              Identifier _owner
                 Type: address
                 Source: "_owner"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
          TupleExpression
             Type: uint256
             Source: "(_amount * store.getSetting(\"transferFee\") / store.getSetting(\"percentage\"))"
            BinaryOperation using operator /
               Type: uint256
               Source: "_amount * store.getSetting(\"transferFee\") / store.getSetting(\"percentage\")"
              BinaryOperation using operator *
                 Type: uint256
                 Source: "_amount * store.getSetting(\"transferFee\")"
                Identifier _amount
                   Type: uint256
                   Source: "_amount"
                FunctionCall
                   Type: uint256
                   Source: "store.getSetting(\"transferFee\")"
                  MemberAccess to member getSetting
                     Type: function (string memory) view external returns (uint256)
                     Source: "store.getSetting"
                    Identifier store
                       Type: contract TokenStorage
                       Source: "store"
                  Literal, token: [no token] value: transferFee
                     Type: literal_string "transferFee"
                     Source: "\"transferFee\""
              FunctionCall
                 Type: uint256
                 Source: "store.getSetting(\"percentage\")"
                MemberAccess to member getSetting
                   Type: function (string memory) view external returns (uint256)
                   Source: "store.getSetting"
                  Identifier store
                     Type: contract TokenStorage
                     Source: "store"
                Literal, token: [no token] value: percentage
                   Type: literal_string "percentage"
                   Source: "\"percentage\""
  FunctionDefinition "validateAndGetTransferFee" - public - const
     Source: "function validateAndGetTransferFee(address _owner, address _from, address /*_to*/, uint256 _amount) public view returns(uint256) {\r\n        uint256 _fee = getTransferFee(_owner, _from, _amount);\r\n\r\n        require(_amount > 0);\r\n        require((_amount + _fee) > 0);\r\n        require(store.getBalance(_from) >= (_amount + _fee));\r\n\r\n        return _fee;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, address _from, address /*_to*/, uint256 _amount)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        uint256 _fee = getTransferFee(_owner, _from, _amount);\r\n\r\n        require(_amount > 0);\r\n        require((_amount + _fee) > 0);\r\n        require(store.getBalance(_from) >= (_amount + _fee));\r\n\r\n        return _fee;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 _fee = getTransferFee(_owner, _from, _amount)"
        VariableDeclaration "_fee"
           Type: uint256
           Source: "uint256 _fee"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "getTransferFee(_owner, _from, _amount)"
          Identifier getTransferFee
             Type: function (address,address,uint256) view returns (uint256)
             Source: "getTransferFee"
          Identifier _owner
             Type: address
             Source: "_owner"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_amount > 0)"
        FunctionCall
           Type: tuple()
           Source: "require(_amount > 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "_amount > 0"
            Identifier _amount
               Type: uint256
               Source: "_amount"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "require((_amount + _fee) > 0)"
        FunctionCall
           Type: tuple()
           Source: "require((_amount + _fee) > 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "(_amount + _fee) > 0"
            TupleExpression
               Type: uint256
               Source: "(_amount + _fee)"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "_amount + _fee"
                Identifier _amount
                   Type: uint256
                   Source: "_amount"
                Identifier _fee
                   Type: uint256
                   Source: "_fee"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "require(store.getBalance(_from) >= (_amount + _fee))"
        FunctionCall
           Type: tuple()
           Source: "require(store.getBalance(_from) >= (_amount + _fee))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "store.getBalance(_from) >= (_amount + _fee)"
            FunctionCall
               Type: uint256
               Source: "store.getBalance(_from)"
              MemberAccess to member getBalance
                 Type: function (address) view external returns (uint256)
                 Source: "store.getBalance"
                Identifier store
                   Type: contract TokenStorage
                   Source: "store"
              Identifier _from
                 Type: address
                 Source: "_from"
            TupleExpression
               Type: uint256
               Source: "(_amount + _fee)"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "_amount + _fee"
                Identifier _amount
                   Type: uint256
                   Source: "_amount"
                Identifier _fee
                   Type: uint256
                   Source: "_fee"
      Return
         Gas costs: 0
         Source: "return _fee"
        Identifier _fee
           Type: uint256
           Source: "_fee"
  FunctionDefinition "validateResetDeadTokens" - public - const
     Source: "function validateResetDeadTokens(uint256 _amount) public view returns(address) {\r\n        address deadTokensAddress = store.getSettingAddress(\"deadTokensAddress\");\r\n        uint256 deadTokens = store.getBalance(deadTokensAddress);\r\n\r\n        require(_amount > 0);\r\n        require(_amount <= deadTokens);\r\n\r\n        return deadTokensAddress;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _amount)"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(address)"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\r\n        address deadTokensAddress = store.getSettingAddress(\"deadTokensAddress\");\r\n        uint256 deadTokens = store.getBalance(deadTokensAddress);\r\n\r\n        require(_amount > 0);\r\n        require(_amount <= deadTokens);\r\n\r\n        return deadTokensAddress;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "address deadTokensAddress = store.getSettingAddress(\"deadTokensAddress\")"
        VariableDeclaration "deadTokensAddress"
           Type: address
           Source: "address deadTokensAddress"
          ElementaryTypeName address
             Source: "address"
        FunctionCall
           Type: address
           Source: "store.getSettingAddress(\"deadTokensAddress\")"
          MemberAccess to member getSettingAddress
             Type: function (string memory) view external returns (address)
             Source: "store.getSettingAddress"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Literal, token: [no token] value: deadTokensAddress
             Type: literal_string "deadTokensAddress"
             Source: "\"deadTokensAddress\""
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 deadTokens = store.getBalance(deadTokensAddress)"
        VariableDeclaration "deadTokens"
           Type: uint256
           Source: "uint256 deadTokens"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "store.getBalance(deadTokensAddress)"
          MemberAccess to member getBalance
             Type: function (address) view external returns (uint256)
             Source: "store.getBalance"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Identifier deadTokensAddress
             Type: address
             Source: "deadTokensAddress"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_amount > 0)"
        FunctionCall
           Type: tuple()
           Source: "require(_amount > 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "_amount > 0"
            Identifier _amount
               Type: uint256
               Source: "_amount"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_amount <= deadTokens)"
        FunctionCall
           Type: tuple()
           Source: "require(_amount <= deadTokens)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator <=
             Type: bool
             Source: "_amount <= deadTokens"
            Identifier _amount
               Type: uint256
               Source: "_amount"
            Identifier deadTokens
               Type: uint256
               Source: "deadTokens"
      Return
         Gas costs: 0
         Source: "return deadTokensAddress"
        Identifier deadTokensAddress
           Type: address
           Source: "deadTokensAddress"
  FunctionDefinition "validateStart" - public - const
     Source: "function validateStart(address _owner, address _store) public view {\r\n        require(_store != address(0));\r\n        require(_store == address(store));\r\n        require(store.getBalance(_owner) == 0);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, address _store)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_store"
         Type: address
         Source: "address _store"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(_store != address(0));\r\n        require(_store == address(store));\r\n        require(store.getBalance(_owner) == 0);\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_store != address(0))"
        FunctionCall
           Type: tuple()
           Source: "require(_store != address(0))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "_store != address(0)"
            Identifier _store
               Type: address
               Source: "_store"
            FunctionCall
               Type: address
               Source: "address(0)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_store == address(store))"
        FunctionCall
           Type: tuple()
           Source: "require(_store == address(store))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "_store == address(store)"
            Identifier _store
               Type: address
               Source: "_store"
            FunctionCall
               Type: address
               Source: "address(store)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Identifier store
                 Type: contract TokenStorage
                 Source: "store"
      ExpressionStatement
         Gas costs: 0
         Source: "require(store.getBalance(_owner) == 0)"
        FunctionCall
           Type: tuple()
           Source: "require(store.getBalance(_owner) == 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "store.getBalance(_owner) == 0"
            FunctionCall
               Type: uint256
               Source: "store.getBalance(_owner)"
              MemberAccess to member getBalance
                 Type: function (address) view external returns (uint256)
                 Source: "store.getBalance"
                Identifier store
                   Type: contract TokenStorage
                   Source: "store"
              Identifier _owner
                 Type: address
                 Source: "_owner"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
  FunctionDefinition "validateAndGetPurchaseTokens" - public - const
     Source: "function validateAndGetPurchaseTokens(address _owner, address _address, uint256 _moneyAmount) public view returns (uint256) {\r\n        uint256 _tokens = _moneyAmount * store.getSetting(\"multiplier\") / store.getSetting(\"tokenPrice\");\r\n        uint256 _purchaseTimeout = store.getSetting(\"purchaseTimeout\");\r\n        uint256 _purchaseCap = store.getSetting(\"purchaseCap\");\r\n\r\n        require((_purchaseTimeout <= 0) || (block.timestamp - datesOfPurchase[_address] > _purchaseTimeout));\r\n        require(_tokens > 0);\r\n        require(store.getBalance(_owner) >= _tokens);\r\n        require((_purchaseCap <= 0) || (_tokens <= _purchaseCap));\r\n\r\n        return _tokens;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, address _address, uint256 _moneyAmount)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_moneyAmount"
         Type: uint256
         Source: "uint256 _moneyAmount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        uint256 _tokens = _moneyAmount * store.getSetting(\"multiplier\") / store.getSetting(\"tokenPrice\");\r\n        uint256 _purchaseTimeout = store.getSetting(\"purchaseTimeout\");\r\n        uint256 _purchaseCap = store.getSetting(\"purchaseCap\");\r\n\r\n        require((_purchaseTimeout <= 0) || (block.timestamp - datesOfPurchase[_address] > _purchaseTimeout));\r\n        require(_tokens > 0);\r\n        require(store.getBalance(_owner) >= _tokens);\r\n        require((_purchaseCap <= 0) || (_tokens <= _purchaseCap));\r\n\r\n        return _tokens;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 _tokens = _moneyAmount * store.getSetting(\"multiplier\") / store.getSetting(\"tokenPrice\")"
        VariableDeclaration "_tokens"
           Type: uint256
           Source: "uint256 _tokens"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator /
           Type: uint256
           Source: "_moneyAmount * store.getSetting(\"multiplier\") / store.getSetting(\"tokenPrice\")"
          BinaryOperation using operator *
             Type: uint256
             Source: "_moneyAmount * store.getSetting(\"multiplier\")"
            Identifier _moneyAmount
               Type: uint256
               Source: "_moneyAmount"
            FunctionCall
               Type: uint256
               Source: "store.getSetting(\"multiplier\")"
              MemberAccess to member getSetting
                 Type: function (string memory) view external returns (uint256)
                 Source: "store.getSetting"
                Identifier store
                   Type: contract TokenStorage
                   Source: "store"
              Literal, token: [no token] value: multiplier
                 Type: literal_string "multiplier"
                 Source: "\"multiplier\""
          FunctionCall
             Type: uint256
             Source: "store.getSetting(\"tokenPrice\")"
            MemberAccess to member getSetting
               Type: function (string memory) view external returns (uint256)
               Source: "store.getSetting"
              Identifier store
                 Type: contract TokenStorage
                 Source: "store"
            Literal, token: [no token] value: tokenPrice
               Type: literal_string "tokenPrice"
               Source: "\"tokenPrice\""
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 _purchaseTimeout = store.getSetting(\"purchaseTimeout\")"
        VariableDeclaration "_purchaseTimeout"
           Type: uint256
           Source: "uint256 _purchaseTimeout"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "store.getSetting(\"purchaseTimeout\")"
          MemberAccess to member getSetting
             Type: function (string memory) view external returns (uint256)
             Source: "store.getSetting"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Literal, token: [no token] value: purchaseTimeout
             Type: literal_string "purchaseTimeout"
             Source: "\"purchaseTimeout\""
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 _purchaseCap = store.getSetting(\"purchaseCap\")"
        VariableDeclaration "_purchaseCap"
           Type: uint256
           Source: "uint256 _purchaseCap"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "store.getSetting(\"purchaseCap\")"
          MemberAccess to member getSetting
             Type: function (string memory) view external returns (uint256)
             Source: "store.getSetting"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Literal, token: [no token] value: purchaseCap
             Type: literal_string "purchaseCap"
             Source: "\"purchaseCap\""
      ExpressionStatement
         Gas costs: 0
         Source: "require((_purchaseTimeout <= 0) || (block.timestamp - datesOfPurchase[_address] > _purchaseTimeout))"
        FunctionCall
           Type: tuple()
           Source: "require((_purchaseTimeout <= 0) || (block.timestamp - datesOfPurchase[_address] > _purchaseTimeout))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ||
             Type: bool
             Source: "(_purchaseTimeout <= 0) || (block.timestamp - datesOfPurchase[_address] > _purchaseTimeout)"
            TupleExpression
               Type: bool
               Source: "(_purchaseTimeout <= 0)"
              BinaryOperation using operator <=
                 Type: bool
                 Source: "_purchaseTimeout <= 0"
                Identifier _purchaseTimeout
                   Type: uint256
                   Source: "_purchaseTimeout"
                Literal, token: [no token] value: 0
                   Type: int_const 0
                   Source: "0"
            TupleExpression
               Type: bool
               Source: "(block.timestamp - datesOfPurchase[_address] > _purchaseTimeout)"
              BinaryOperation using operator >
                 Type: bool
                 Source: "block.timestamp - datesOfPurchase[_address] > _purchaseTimeout"
                BinaryOperation using operator -
                   Type: uint256
                   Source: "block.timestamp - datesOfPurchase[_address]"
                  MemberAccess to member timestamp
                     Type: uint256
                     Source: "block.timestamp"
                    Identifier block
                       Type: block
                       Source: "block"
                  IndexAccess
                     Type: uint256
                     Source: "datesOfPurchase[_address]"
                    Identifier datesOfPurchase
                       Type: mapping(address => uint256)
                       Source: "datesOfPurchase"
                    Identifier _address
                       Type: address
                       Source: "_address"
                Identifier _purchaseTimeout
                   Type: uint256
                   Source: "_purchaseTimeout"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_tokens > 0)"
        FunctionCall
           Type: tuple()
           Source: "require(_tokens > 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "_tokens > 0"
            Identifier _tokens
               Type: uint256
               Source: "_tokens"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "require(store.getBalance(_owner) >= _tokens)"
        FunctionCall
           Type: tuple()
           Source: "require(store.getBalance(_owner) >= _tokens)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "store.getBalance(_owner) >= _tokens"
            FunctionCall
               Type: uint256
               Source: "store.getBalance(_owner)"
              MemberAccess to member getBalance
                 Type: function (address) view external returns (uint256)
                 Source: "store.getBalance"
                Identifier store
                   Type: contract TokenStorage
                   Source: "store"
              Identifier _owner
                 Type: address
                 Source: "_owner"
            Identifier _tokens
               Type: uint256
               Source: "_tokens"
      ExpressionStatement
         Gas costs: 0
         Source: "require((_purchaseCap <= 0) || (_tokens <= _purchaseCap))"
        FunctionCall
           Type: tuple()
           Source: "require((_purchaseCap <= 0) || (_tokens <= _purchaseCap))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ||
             Type: bool
             Source: "(_purchaseCap <= 0) || (_tokens <= _purchaseCap)"
            TupleExpression
               Type: bool
               Source: "(_purchaseCap <= 0)"
              BinaryOperation using operator <=
                 Type: bool
                 Source: "_purchaseCap <= 0"
                Identifier _purchaseCap
                   Type: uint256
                   Source: "_purchaseCap"
                Literal, token: [no token] value: 0
                   Type: int_const 0
                   Source: "0"
            TupleExpression
               Type: bool
               Source: "(_tokens <= _purchaseCap)"
              BinaryOperation using operator <=
                 Type: bool
                 Source: "_tokens <= _purchaseCap"
                Identifier _tokens
                   Type: uint256
                   Source: "_tokens"
                Identifier _purchaseCap
                   Type: uint256
                   Source: "_purchaseCap"
      Return
         Gas costs: 0
         Source: "return _tokens"
        Identifier _tokens
           Type: uint256
           Source: "_tokens"
  FunctionDefinition "updateDateOfPurchase" - public
     Source: "function updateDateOfPurchase(address _address, uint256 timestamp) public onlyPermitted {\r\n        datesOfPurchase[_address] = timestamp;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _address, uint256 timestamp)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "timestamp"
         Type: uint256
         Source: "uint256 timestamp"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        datesOfPurchase[_address] = timestamp;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "datesOfPurchase[_address] = timestamp"
        Assignment using operator =
           Type: uint256
           Source: "datesOfPurchase[_address] = timestamp"
          IndexAccess
             Type: uint256
             Source: "datesOfPurchase[_address]"
            Identifier datesOfPurchase
               Type: mapping(address => uint256)
               Source: "datesOfPurchase"
            Identifier _address
               Type: address
               Source: "_address"
          Identifier timestamp
             Type: uint256
             Source: "timestamp"
  FunctionDefinition "validateAndGetRedeemFee" - public - const
     Source: "function validateAndGetRedeemFee(address /*_owner*/, address _address, uint256 _tokens) public view returns (uint256) {\r\n        uint256 _icoTimestamp = store.getSetting(\"icoTimestamp\");\r\n        uint256 _redemptionTimeout = store.getSetting(\"redemptionTimeout\");\r\n        uint256 _fee = _tokens * store.getSetting(\"redemptionFee\") / store.getSetting(\"percentage\");\r\n\r\n        require((_redemptionTimeout <= 0) || (block.timestamp > _icoTimestamp + _redemptionTimeout));\r\n        require(_tokens > 0);\r\n        require((_tokens + _fee) >= 0);\r\n        require(store.getBalance(_address) >= (_tokens + _fee));\r\n\r\n        return _fee;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address /*_owner*/, address _address, uint256 _tokens)"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_tokens"
         Type: uint256
         Source: "uint256 _tokens"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        uint256 _icoTimestamp = store.getSetting(\"icoTimestamp\");\r\n        uint256 _redemptionTimeout = store.getSetting(\"redemptionTimeout\");\r\n        uint256 _fee = _tokens * store.getSetting(\"redemptionFee\") / store.getSetting(\"percentage\");\r\n\r\n        require((_redemptionTimeout <= 0) || (block.timestamp > _icoTimestamp + _redemptionTimeout));\r\n        require(_tokens > 0);\r\n        require((_tokens + _fee) >= 0);\r\n        require(store.getBalance(_address) >= (_tokens + _fee));\r\n\r\n        return _fee;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 _icoTimestamp = store.getSetting(\"icoTimestamp\")"
        VariableDeclaration "_icoTimestamp"
           Type: uint256
           Source: "uint256 _icoTimestamp"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "store.getSetting(\"icoTimestamp\")"
          MemberAccess to member getSetting
             Type: function (string memory) view external returns (uint256)
             Source: "store.getSetting"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Literal, token: [no token] value: icoTimestamp
             Type: literal_string "icoTimestamp"
             Source: "\"icoTimestamp\""
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 _redemptionTimeout = store.getSetting(\"redemptionTimeout\")"
        VariableDeclaration "_redemptionTimeout"
           Type: uint256
           Source: "uint256 _redemptionTimeout"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "store.getSetting(\"redemptionTimeout\")"
          MemberAccess to member getSetting
             Type: function (string memory) view external returns (uint256)
             Source: "store.getSetting"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Literal, token: [no token] value: redemptionTimeout
             Type: literal_string "redemptionTimeout"
             Source: "\"redemptionTimeout\""
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 _fee = _tokens * store.getSetting(\"redemptionFee\") / store.getSetting(\"percentage\")"
        VariableDeclaration "_fee"
           Type: uint256
           Source: "uint256 _fee"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator /
           Type: uint256
           Source: "_tokens * store.getSetting(\"redemptionFee\") / store.getSetting(\"percentage\")"
          BinaryOperation using operator *
             Type: uint256
             Source: "_tokens * store.getSetting(\"redemptionFee\")"
            Identifier _tokens
               Type: uint256
               Source: "_tokens"
            FunctionCall
               Type: uint256
               Source: "store.getSetting(\"redemptionFee\")"
              MemberAccess to member getSetting
                 Type: function (string memory) view external returns (uint256)
                 Source: "store.getSetting"
                Identifier store
                   Type: contract TokenStorage
                   Source: "store"
              Literal, token: [no token] value: redemptionFee
                 Type: literal_string "redemptionFee"
                 Source: "\"redemptionFee\""
          FunctionCall
             Type: uint256
             Source: "store.getSetting(\"percentage\")"
            MemberAccess to member getSetting
               Type: function (string memory) view external returns (uint256)
               Source: "store.getSetting"
              Identifier store
                 Type: contract TokenStorage
                 Source: "store"
            Literal, token: [no token] value: percentage
               Type: literal_string "percentage"
               Source: "\"percentage\""
      ExpressionStatement
         Gas costs: 0
         Source: "require((_redemptionTimeout <= 0) || (block.timestamp > _icoTimestamp + _redemptionTimeout))"
        FunctionCall
           Type: tuple()
           Source: "require((_redemptionTimeout <= 0) || (block.timestamp > _icoTimestamp + _redemptionTimeout))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ||
             Type: bool
             Source: "(_redemptionTimeout <= 0) || (block.timestamp > _icoTimestamp + _redemptionTimeout)"
            TupleExpression
               Type: bool
               Source: "(_redemptionTimeout <= 0)"
              BinaryOperation using operator <=
                 Type: bool
                 Source: "_redemptionTimeout <= 0"
                Identifier _redemptionTimeout
                   Type: uint256
                   Source: "_redemptionTimeout"
                Literal, token: [no token] value: 0
                   Type: int_const 0
                   Source: "0"
            TupleExpression
               Type: bool
               Source: "(block.timestamp > _icoTimestamp + _redemptionTimeout)"
              BinaryOperation using operator >
                 Type: bool
                 Source: "block.timestamp > _icoTimestamp + _redemptionTimeout"
                MemberAccess to member timestamp
                   Type: uint256
                   Source: "block.timestamp"
                  Identifier block
                     Type: block
                     Source: "block"
                BinaryOperation using operator +
                   Type: uint256
                   Source: "_icoTimestamp + _redemptionTimeout"
                  Identifier _icoTimestamp
                     Type: uint256
                     Source: "_icoTimestamp"
                  Identifier _redemptionTimeout
                     Type: uint256
                     Source: "_redemptionTimeout"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_tokens > 0)"
        FunctionCall
           Type: tuple()
           Source: "require(_tokens > 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "_tokens > 0"
            Identifier _tokens
               Type: uint256
               Source: "_tokens"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "require((_tokens + _fee) >= 0)"
        FunctionCall
           Type: tuple()
           Source: "require((_tokens + _fee) >= 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "(_tokens + _fee) >= 0"
            TupleExpression
               Type: uint256
               Source: "(_tokens + _fee)"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "_tokens + _fee"
                Identifier _tokens
                   Type: uint256
                   Source: "_tokens"
                Identifier _fee
                   Type: uint256
                   Source: "_fee"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "require(store.getBalance(_address) >= (_tokens + _fee))"
        FunctionCall
           Type: tuple()
           Source: "require(store.getBalance(_address) >= (_tokens + _fee))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "store.getBalance(_address) >= (_tokens + _fee)"
            FunctionCall
               Type: uint256
               Source: "store.getBalance(_address)"
              MemberAccess to member getBalance
                 Type: function (address) view external returns (uint256)
                 Source: "store.getBalance"
                Identifier store
                   Type: contract TokenStorage
                   Source: "store"
              Identifier _address
                 Type: address
                 Source: "_address"
            TupleExpression
               Type: uint256
               Source: "(_tokens + _fee)"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "_tokens + _fee"
                Identifier _tokens
                   Type: uint256
                   Source: "_tokens"
                Identifier _fee
                   Type: uint256
                   Source: "_fee"
      Return
         Gas costs: 0
         Source: "return _fee"
        Identifier _fee
           Type: uint256
           Source: "_fee"
  FunctionDefinition "validateStartMegabox" - public - const
     Source: "function validateStartMegabox(address _owner, uint256 _tokens) public view {\r\n        uint256 _totalSupply = store.getSetting(\"totalSupply\");\r\n        uint256 _newMegaboxThreshold = store.getSetting(\"newMegaboxThreshold\");\r\n        uint256 _ownerBalance = store.getBalance(_owner);\r\n\r\n        require(_ownerBalance <= _newMegaboxThreshold);\r\n        require(_tokens > 0);\r\n        require((_totalSupply + _tokens) > _totalSupply);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, uint256 _tokens)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_tokens"
         Type: uint256
         Source: "uint256 _tokens"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        uint256 _totalSupply = store.getSetting(\"totalSupply\");\r\n        uint256 _newMegaboxThreshold = store.getSetting(\"newMegaboxThreshold\");\r\n        uint256 _ownerBalance = store.getBalance(_owner);\r\n\r\n        require(_ownerBalance <= _newMegaboxThreshold);\r\n        require(_tokens > 0);\r\n        require((_totalSupply + _tokens) > _totalSupply);\r\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 _totalSupply = store.getSetting(\"totalSupply\")"
        VariableDeclaration "_totalSupply"
           Type: uint256
           Source: "uint256 _totalSupply"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "store.getSetting(\"totalSupply\")"
          MemberAccess to member getSetting
             Type: function (string memory) view external returns (uint256)
             Source: "store.getSetting"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Literal, token: [no token] value: totalSupply
             Type: literal_string "totalSupply"
             Source: "\"totalSupply\""
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 _newMegaboxThreshold = store.getSetting(\"newMegaboxThreshold\")"
        VariableDeclaration "_newMegaboxThreshold"
           Type: uint256
           Source: "uint256 _newMegaboxThreshold"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "store.getSetting(\"newMegaboxThreshold\")"
          MemberAccess to member getSetting
             Type: function (string memory) view external returns (uint256)
             Source: "store.getSetting"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Literal, token: [no token] value: newMegaboxThreshold
             Type: literal_string "newMegaboxThreshold"
             Source: "\"newMegaboxThreshold\""
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 _ownerBalance = store.getBalance(_owner)"
        VariableDeclaration "_ownerBalance"
           Type: uint256
           Source: "uint256 _ownerBalance"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "store.getBalance(_owner)"
          MemberAccess to member getBalance
             Type: function (address) view external returns (uint256)
             Source: "store.getBalance"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Identifier _owner
             Type: address
             Source: "_owner"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_ownerBalance <= _newMegaboxThreshold)"
        FunctionCall
           Type: tuple()
           Source: "require(_ownerBalance <= _newMegaboxThreshold)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator <=
             Type: bool
             Source: "_ownerBalance <= _newMegaboxThreshold"
            Identifier _ownerBalance
               Type: uint256
               Source: "_ownerBalance"
            Identifier _newMegaboxThreshold
               Type: uint256
               Source: "_newMegaboxThreshold"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_tokens > 0)"
        FunctionCall
           Type: tuple()
           Source: "require(_tokens > 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "_tokens > 0"
            Identifier _tokens
               Type: uint256
               Source: "_tokens"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "require((_totalSupply + _tokens) > _totalSupply)"
        FunctionCall
           Type: tuple()
           Source: "require((_totalSupply + _tokens) > _totalSupply)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "(_totalSupply + _tokens) > _totalSupply"
            TupleExpression
               Type: uint256
               Source: "(_totalSupply + _tokens)"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "_totalSupply + _tokens"
                Identifier _totalSupply
                   Type: uint256
                   Source: "_totalSupply"
                Identifier _tokens
                   Type: uint256
                   Source: "_tokens"
            Identifier _totalSupply
               Type: uint256
               Source: "_totalSupply"
  FunctionDefinition "canPurchase" - public - const
     Source: "function canPurchase(address _owner, address _address, uint256 _tokens) public view returns(bool, bool, bool, bool) {\r\n        uint256 _purchaseTimeout = store.getSetting(\"purchaseTimeout\");\r\n        uint256 _fee = _tokens * store.getSetting(\"purchaseFee\") / store.getSetting(\"percentage\");\r\n\r\n        bool purchaseTimeoutPassed = ((_purchaseTimeout <= 0) || (block.timestamp - datesOfPurchase[_address] > _purchaseTimeout));\r\n        bool tokensNumberPassed = (_tokens > 0);\r\n        bool ownerBalancePassed = (store.getBalance(_owner) >= (_tokens + _fee));\r\n        bool purchaseCapPassed = (store.getSetting(\"purchaseCap\") <= 0) || (_tokens < store.getSetting(\"purchaseCap\"));\r\n\r\n        return (purchaseTimeoutPassed, ownerBalancePassed, tokensNumberPassed, purchaseCapPassed);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, address _address, uint256 _tokens)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_tokens"
         Type: uint256
         Source: "uint256 _tokens"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(bool, bool, bool, bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        uint256 _purchaseTimeout = store.getSetting(\"purchaseTimeout\");\r\n        uint256 _fee = _tokens * store.getSetting(\"purchaseFee\") / store.getSetting(\"percentage\");\r\n\r\n        bool purchaseTimeoutPassed = ((_purchaseTimeout <= 0) || (block.timestamp - datesOfPurchase[_address] > _purchaseTimeout));\r\n        bool tokensNumberPassed = (_tokens > 0);\r\n        bool ownerBalancePassed = (store.getBalance(_owner) >= (_tokens + _fee));\r\n        bool purchaseCapPassed = (store.getSetting(\"purchaseCap\") <= 0) || (_tokens < store.getSetting(\"purchaseCap\"));\r\n\r\n        return (purchaseTimeoutPassed, ownerBalancePassed, tokensNumberPassed, purchaseCapPassed);\r\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 _purchaseTimeout = store.getSetting(\"purchaseTimeout\")"
        VariableDeclaration "_purchaseTimeout"
           Type: uint256
           Source: "uint256 _purchaseTimeout"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "store.getSetting(\"purchaseTimeout\")"
          MemberAccess to member getSetting
             Type: function (string memory) view external returns (uint256)
             Source: "store.getSetting"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Literal, token: [no token] value: purchaseTimeout
             Type: literal_string "purchaseTimeout"
             Source: "\"purchaseTimeout\""
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 _fee = _tokens * store.getSetting(\"purchaseFee\") / store.getSetting(\"percentage\")"
        VariableDeclaration "_fee"
           Type: uint256
           Source: "uint256 _fee"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator /
           Type: uint256
           Source: "_tokens * store.getSetting(\"purchaseFee\") / store.getSetting(\"percentage\")"
          BinaryOperation using operator *
             Type: uint256
             Source: "_tokens * store.getSetting(\"purchaseFee\")"
            Identifier _tokens
               Type: uint256
               Source: "_tokens"
            FunctionCall
               Type: uint256
               Source: "store.getSetting(\"purchaseFee\")"
              MemberAccess to member getSetting
                 Type: function (string memory) view external returns (uint256)
                 Source: "store.getSetting"
                Identifier store
                   Type: contract TokenStorage
                   Source: "store"
              Literal, token: [no token] value: purchaseFee
                 Type: literal_string "purchaseFee"
                 Source: "\"purchaseFee\""
          FunctionCall
             Type: uint256
             Source: "store.getSetting(\"percentage\")"
            MemberAccess to member getSetting
               Type: function (string memory) view external returns (uint256)
               Source: "store.getSetting"
              Identifier store
                 Type: contract TokenStorage
                 Source: "store"
            Literal, token: [no token] value: percentage
               Type: literal_string "percentage"
               Source: "\"percentage\""
      VariableDeclarationStatement
         Gas costs: 0
         Source: "bool purchaseTimeoutPassed = ((_purchaseTimeout <= 0) || (block.timestamp - datesOfPurchase[_address] > _purchaseTimeout))"
        VariableDeclaration "purchaseTimeoutPassed"
           Type: bool
           Source: "bool purchaseTimeoutPassed"
          ElementaryTypeName bool
             Source: "bool"
        TupleExpression
           Type: bool
           Source: "((_purchaseTimeout <= 0) || (block.timestamp - datesOfPurchase[_address] > _purchaseTimeout))"
          BinaryOperation using operator ||
             Type: bool
             Source: "(_purchaseTimeout <= 0) || (block.timestamp - datesOfPurchase[_address] > _purchaseTimeout)"
            TupleExpression
               Type: bool
               Source: "(_purchaseTimeout <= 0)"
              BinaryOperation using operator <=
                 Type: bool
                 Source: "_purchaseTimeout <= 0"
                Identifier _purchaseTimeout
                   Type: uint256
                   Source: "_purchaseTimeout"
                Literal, token: [no token] value: 0
                   Type: int_const 0
                   Source: "0"
            TupleExpression
               Type: bool
               Source: "(block.timestamp - datesOfPurchase[_address] > _purchaseTimeout)"
              BinaryOperation using operator >
                 Type: bool
                 Source: "block.timestamp - datesOfPurchase[_address] > _purchaseTimeout"
                BinaryOperation using operator -
                   Type: uint256
                   Source: "block.timestamp - datesOfPurchase[_address]"
                  MemberAccess to member timestamp
                     Type: uint256
                     Source: "block.timestamp"
                    Identifier block
                       Type: block
                       Source: "block"
                  IndexAccess
                     Type: uint256
                     Source: "datesOfPurchase[_address]"
                    Identifier datesOfPurchase
                       Type: mapping(address => uint256)
                       Source: "datesOfPurchase"
                    Identifier _address
                       Type: address
                       Source: "_address"
                Identifier _purchaseTimeout
                   Type: uint256
                   Source: "_purchaseTimeout"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "bool tokensNumberPassed = (_tokens > 0)"
        VariableDeclaration "tokensNumberPassed"
           Type: bool
           Source: "bool tokensNumberPassed"
          ElementaryTypeName bool
             Source: "bool"
        TupleExpression
           Type: bool
           Source: "(_tokens > 0)"
          BinaryOperation using operator >
             Type: bool
             Source: "_tokens > 0"
            Identifier _tokens
               Type: uint256
               Source: "_tokens"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "bool ownerBalancePassed = (store.getBalance(_owner) >= (_tokens + _fee))"
        VariableDeclaration "ownerBalancePassed"
           Type: bool
           Source: "bool ownerBalancePassed"
          ElementaryTypeName bool
             Source: "bool"
        TupleExpression
           Type: bool
           Source: "(store.getBalance(_owner) >= (_tokens + _fee))"
          BinaryOperation using operator >=
             Type: bool
             Source: "store.getBalance(_owner) >= (_tokens + _fee)"
            FunctionCall
               Type: uint256
               Source: "store.getBalance(_owner)"
              MemberAccess to member getBalance
                 Type: function (address) view external returns (uint256)
                 Source: "store.getBalance"
                Identifier store
                   Type: contract TokenStorage
                   Source: "store"
              Identifier _owner
                 Type: address
                 Source: "_owner"
            TupleExpression
               Type: uint256
               Source: "(_tokens + _fee)"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "_tokens + _fee"
                Identifier _tokens
                   Type: uint256
                   Source: "_tokens"
                Identifier _fee
                   Type: uint256
                   Source: "_fee"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "bool purchaseCapPassed = (store.getSetting(\"purchaseCap\") <= 0) || (_tokens < store.getSetting(\"purchaseCap\"))"
        VariableDeclaration "purchaseCapPassed"
           Type: bool
           Source: "bool purchaseCapPassed"
          ElementaryTypeName bool
             Source: "bool"
        BinaryOperation using operator ||
           Type: bool
           Source: "(store.getSetting(\"purchaseCap\") <= 0) || (_tokens < store.getSetting(\"purchaseCap\"))"
          TupleExpression
             Type: bool
             Source: "(store.getSetting(\"purchaseCap\") <= 0)"
            BinaryOperation using operator <=
               Type: bool
               Source: "store.getSetting(\"purchaseCap\") <= 0"
              FunctionCall
                 Type: uint256
                 Source: "store.getSetting(\"purchaseCap\")"
                MemberAccess to member getSetting
                   Type: function (string memory) view external returns (uint256)
                   Source: "store.getSetting"
                  Identifier store
                     Type: contract TokenStorage
                     Source: "store"
                Literal, token: [no token] value: purchaseCap
                   Type: literal_string "purchaseCap"
                   Source: "\"purchaseCap\""
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
          TupleExpression
             Type: bool
             Source: "(_tokens < store.getSetting(\"purchaseCap\"))"
            BinaryOperation using operator <
               Type: bool
               Source: "_tokens < store.getSetting(\"purchaseCap\")"
              Identifier _tokens
                 Type: uint256
                 Source: "_tokens"
              FunctionCall
                 Type: uint256
                 Source: "store.getSetting(\"purchaseCap\")"
                MemberAccess to member getSetting
                   Type: function (string memory) view external returns (uint256)
                   Source: "store.getSetting"
                  Identifier store
                     Type: contract TokenStorage
                     Source: "store"
                Literal, token: [no token] value: purchaseCap
                   Type: literal_string "purchaseCap"
                   Source: "\"purchaseCap\""
      Return
         Gas costs: 0
         Source: "return (purchaseTimeoutPassed, ownerBalancePassed, tokensNumberPassed, purchaseCapPassed)"
        TupleExpression
           Type: tuple(bool,bool,bool,bool)
           Source: "(purchaseTimeoutPassed, ownerBalancePassed, tokensNumberPassed, purchaseCapPassed)"
          Identifier purchaseTimeoutPassed
             Type: bool
             Source: "purchaseTimeoutPassed"
          Identifier ownerBalancePassed
             Type: bool
             Source: "ownerBalancePassed"
          Identifier tokensNumberPassed
             Type: bool
             Source: "tokensNumberPassed"
          Identifier purchaseCapPassed
             Type: bool
             Source: "purchaseCapPassed"
  FunctionDefinition "canTransfer" - public - const
     Source: "function canTransfer(address _owner, address _from, address /*_to*/, uint256 _amount) public view returns (bool, bool) {\r\n        uint256 _fee = getTransferFee(_owner, _from, _amount);\r\n\r\n        bool transferPositivePassed = (_amount + _fee) > 0;\r\n        bool ownerBalancePassed = store.getBalance(_from) >= (_amount + _fee);\r\n\r\n        return (transferPositivePassed, ownerBalancePassed);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, address _from, address /*_to*/, uint256 _amount)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(bool, bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        uint256 _fee = getTransferFee(_owner, _from, _amount);\r\n\r\n        bool transferPositivePassed = (_amount + _fee) > 0;\r\n        bool ownerBalancePassed = store.getBalance(_from) >= (_amount + _fee);\r\n\r\n        return (transferPositivePassed, ownerBalancePassed);\r\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 _fee = getTransferFee(_owner, _from, _amount)"
        VariableDeclaration "_fee"
           Type: uint256
           Source: "uint256 _fee"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "getTransferFee(_owner, _from, _amount)"
          Identifier getTransferFee
             Type: function (address,address,uint256) view returns (uint256)
             Source: "getTransferFee"
          Identifier _owner
             Type: address
             Source: "_owner"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "bool transferPositivePassed = (_amount + _fee) > 0"
        VariableDeclaration "transferPositivePassed"
           Type: bool
           Source: "bool transferPositivePassed"
          ElementaryTypeName bool
             Source: "bool"
        BinaryOperation using operator >
           Type: bool
           Source: "(_amount + _fee) > 0"
          TupleExpression
             Type: uint256
             Source: "(_amount + _fee)"
            BinaryOperation using operator +
               Type: uint256
               Source: "_amount + _fee"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
              Identifier _fee
                 Type: uint256
                 Source: "_fee"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "bool ownerBalancePassed = store.getBalance(_from) >= (_amount + _fee)"
        VariableDeclaration "ownerBalancePassed"
           Type: bool
           Source: "bool ownerBalancePassed"
          ElementaryTypeName bool
             Source: "bool"
        BinaryOperation using operator >=
           Type: bool
           Source: "store.getBalance(_from) >= (_amount + _fee)"
          FunctionCall
             Type: uint256
             Source: "store.getBalance(_from)"
            MemberAccess to member getBalance
               Type: function (address) view external returns (uint256)
               Source: "store.getBalance"
              Identifier store
                 Type: contract TokenStorage
                 Source: "store"
            Identifier _from
               Type: address
               Source: "_from"
          TupleExpression
             Type: uint256
             Source: "(_amount + _fee)"
            BinaryOperation using operator +
               Type: uint256
               Source: "_amount + _fee"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
              Identifier _fee
                 Type: uint256
                 Source: "_fee"
      Return
         Gas costs: 0
         Source: "return (transferPositivePassed, ownerBalancePassed)"
        TupleExpression
           Type: tuple(bool,bool)
           Source: "(transferPositivePassed, ownerBalancePassed)"
          Identifier transferPositivePassed
             Type: bool
             Source: "transferPositivePassed"
          Identifier ownerBalancePassed
             Type: bool
             Source: "ownerBalancePassed"
ContractDefinition "TokenFacade"
   Source: "contract TokenFacade is Permittable, Destructable, Withdrawable, ERC20Token {\r\n    TokenStorage private store;\r\n    TokenValidator validator;\r\n\r\n    address private owner;\r\n\r\n    // Just for information begin //\r\n    uint256 public infoAboveSpot = 400;\r\n    string public infoTier = \"Tier 1\";\r\n    string public infoTokenSilverRatio = \"1 : 1\";\r\n    // Just for information end //\r\n\r\n    event TokenSold(address _from, uint256 _amount);                            //fe2ff4cf36ff7d2c2b06eb960897ee0d76d9c3e58da12feb7b93e86b226dd344\r\n    event TokenPurchased(address _address, uint256 _amount, uint256 _tokens);   //3ceffd410054fdaed44f598ff5c1fb450658778e2241892da4aa646979dee617\r\n    event TokenPoolExhausting(uint256 _amount);                                 //29ba2e073781c1157a9b5d5edb561437a6181e92b79152fe776615159312e9cd\r\n    event FeeApplied(string _name, address _address, uint256 _amount);\r\n\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    function TokenFacade() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    ///@notice Token purchase function. Allows user to purchase amount of tokens acccording to passed amount of Ethers.\r\n    function () public payable {\r\n        purchase();\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint256) {\r\n        return store.getSetting(\"totalSupply\");\r\n    }\r\n\r\n    function balanceOf(address _address) public constant returns (uint256) {\r\n        return store.getBalance(_address);\r\n    }\r\n\r\n    string public constant symbol = \"SLVT\";\r\n    string public constant name = \"SilverToken\";\r\n    uint8 public constant decimals = 8;\r\n\r\n    ///@notice Transfer `_amount` of tokens (must be sent as floating point number of token and decimal parts)\r\n    ///to `_address` with preliminary approving amount + fee from transaction sender\r\n    ///@param _to Address of the recipient\r\n    ///@param _amount Amount of tokens to transfer. Passed as `Token.Decimals * 10^8`, @see `decimals`.\r\n    function transfer(address _to, uint256 _amount) public returns (bool) {\r\n        uint256 _fee = validator.validateAndGetTransferFee(owner, msg.sender, _to, _amount);\r\n\r\n        store.transfer(msg.sender, _to, _amount);\r\n\r\n        if (_fee > 0)\r\n            store.transfer(msg.sender, store.getSettingAddress(\"feeReturnAddress\"), _fee);\r\n\r\n        Transfer(msg.sender, _to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    ///@notice Transfer `_amount` of tokens (must be sent as floating point number of token and decimal parts)\r\n    ///to `_address` from address `_from` without autoapproving\r\n    ///@param _to Address of the recipient\r\n    ///@param _amount Amount of tokens to transfer. Passed as `Token.Decimals * 10^8`, @see `decimals`.\r\n    ///@return bool Success state\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool) {\r\n        require(allowed[_from][_to] >= _amount);\r\n\r\n        uint256 _fee = validator.validateAndGetTransferFee(owner, _from, _to, _amount);\r\n\r\n        store.transfer(_from, _to, _amount);\r\n\r\n        if (_fee > 0)\r\n            store.transfer(_from, store.getSettingAddress(\"feeReturnAddress\"), _fee);\r\n\r\n        allowed[_from][_to] -= _amount;\r\n\r\n        Transfer(_from, _to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    ///@notice Approve amount `_amount` of tokens to send from transaction creator to `_recipient`\r\n    ///@param _recipient Recipient\r\n    ///@param _amount Amount to approve `Token.Decimals * 10^8`, @see `decimals`\r\n    ///@return bool Success state\r\n    function approve(address _recipient, uint256 _amount) public returns (bool) {\r\n        return __approve_impl(msg.sender, _recipient, _amount);\r\n    }\r\n\r\n    ///@notice Return allowed transaction amount from `_from` to `_recipient`\r\n    ///@param _from Initiator of transaction\r\n    ///@param _recipient Recipient\r\n    ///@return uint256 Amount approved to transfer as `Token.Decimals * 10^8`, @see `decimals`\r\n    function allowance(address _from, address _recipient) public constant returns (uint256) {\r\n        return allowed[_from][_recipient];\r\n    }\r\n\r\n    ///@notice Token purchase function. Allows user to purchase amount of tokens acccording to passed amount of Ethers.\r\n    function purchase() public payable {\r\n        __purchase_impl(msg.sender, msg.value);\r\n    }\r\n\r\n    ///@notice Redeem required amount of tokens for the real asset\r\n    ///@param _tokens Amount of nano tokens provides as `Token.Decimals * 10^8`\r\n    function redeem(uint256 _tokens) public {\r\n        __redeem_impl(msg.sender, _tokens);\r\n    }\r\n\r\n    //@notice Get amount if tokens that actually available for purchase\r\n    //@returns amount if tokens\r\n    function getTokensInAction() public view returns (uint256) {\r\n        address deadTokensAddress = store.getSettingAddress(\"deadTokensAddress\");\r\n        return store.getBalance(owner) - store.getBalance(deadTokensAddress);\r\n    }\r\n\r\n    //@notice Get price of specified tokens amount. Depends on the second parameter returns price with fee or without\r\n    //@return price of specified tokens in Wei\r\n    function getTokensPrice(uint256 _amount, bool withFee) public constant returns (uint256) {\r\n        uint256 tokenPrice = store.getSetting(\"tokenPrice\");\r\n        uint256 result = _amount * tokenPrice / 10**uint256(decimals);\r\n\r\n        if (withFee) {\r\n            result = result + result * store.getSetting(\"purchaseFee\") / store.getSetting(\"percentage\");\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function resetDeadTokens(uint256 _amount) public onlyPermitted returns (bool) {\r\n        address deadTokensAddress = validator.validateResetDeadTokens(_amount);\r\n        store.transfer(deadTokensAddress, owner, _amount);\r\n    }\r\n\r\n    function canPurchase(address _address, uint256 _tokensAmount) public view returns(bool, bool, bool, bool) {\r\n        return validator.canPurchase(owner, _address, _tokensAmount);\r\n    }\r\n\r\n    function canTransfer(address _from, address _to, uint256 _amount) public view returns(bool, bool) {\r\n        return validator.canTransfer(owner, _from, _to, _amount);\r\n    }\r\n\r\n    function setInfoAboveSpot(uint256 newInfoAboveSpot) public onlyPermitted {\r\n        infoAboveSpot = newInfoAboveSpot;\r\n    }\r\n\r\n    function setInfoTier(string newInfoTier) public onlyPermitted {\r\n        infoTier = newInfoTier;\r\n    }\r\n\r\n    function setInfoTokenSilverRatio(string newInfoTokenSilverRatio) public onlyPermitted {\r\n        infoTokenSilverRatio = newInfoTokenSilverRatio;\r\n    }\r\n\r\n    function getSetting(string _name) public view returns (uint256) {\r\n        return store.getSetting(_name);\r\n    }\r\n\r\n    function getMegabox(uint256 index) public view onlyPermitted returns (address, uint256, uint256) {\r\n        return store.getMegabox(index);\r\n    }\r\n\r\n    function getMegaboxIndex() public view onlyPermitted returns (uint256) {\r\n        return store.getMegaboxIndex();\r\n    }\r\n\r\n    // Admin functions\r\n\r\n    function _approve(address _from, address _recipient, uint256 _amount) public onlyPermitted returns (bool) {\r\n        return __approve_impl(_from, _recipient, _amount);\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _amount) public onlyPermitted returns (bool) {\r\n        validator.validateAndGetTransferFee(owner, _from, _to, _amount);\r\n\r\n        store.transfer(_from, _to, _amount);\r\n\r\n        Transfer(_from, _to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _purchase(address _to, uint256 _amount) public onlyPermitted {\r\n        __purchase_impl(_to, _amount);\r\n    }\r\n\r\n    function _redeem(address _from, uint256 _tokens) public onlyPermitted {\r\n        __redeem_impl(_from, _tokens);\r\n    }\r\n\r\n    function _start() public onlyPermitted {\r\n        validator.validateStart(owner, store);\r\n\r\n        store.setBalance(owner, store.getSetting(\"totalSupply\"));\r\n        store.setSetting(\"icoTimestamp\", block.timestamp);\r\n    }\r\n\r\n    function _setStore(address _address) public onlyPermitted {\r\n        store = TokenStorage(_address);\r\n    }\r\n\r\n    function _setValidator(address _address) public onlyPermitted {\r\n        validator = TokenValidator(_address);\r\n    }\r\n\r\n    function _setSetting(string _name, uint256 _value) public onlyPermitted {\r\n        store.setSetting(_name, _value);\r\n    }\r\n\r\n    function _startMegabox(uint256 _tokens) public onlyPermitted {\r\n        validator.validateStartMegabox(owner, _tokens);\r\n        store.newMegabox(owner, _tokens, now);\r\n    }\r\n\r\n    //\r\n    // Shareable functions code implementation\r\n    //\r\n\r\n    function __approve_impl(address _sender, address _recipient, uint256 _amount) private returns (bool) {\r\n        allowed[_sender][_recipient] = _amount;\r\n        Approval(_sender, _recipient, _amount);\r\n        return true;\r\n    }\r\n\r\n    function __purchase_impl(address _to, uint256 _amount) private {\r\n        uint256 _amountWithoutFee = _amount * store.getSetting(\"percentage\") / (store.getSetting(\"purchaseFee\") + store.getSetting(\"percentage\"));\r\n        uint256 _fee = _amountWithoutFee * store.getSetting(\"purchaseFee\") / store.getSetting(\"percentage\");\r\n        uint256 _ownerBalance = store.getBalance(owner);\r\n        address _feeReturnAddress = store.getSettingAddress(\"feeReturnAddress\");\r\n        uint256 _tokens = validator.validateAndGetPurchaseTokens(owner, msg.sender, _amountWithoutFee);\r\n\r\n        store.increaseBalance(_to, _tokens);\r\n        store.decreaseBalance(owner, _tokens);\r\n\r\n        if (_fee > 0)\r\n            _feeReturnAddress.transfer(_fee);\r\n\r\n        validator.updateDateOfPurchase(_to, now);\r\n\r\n        if (_ownerBalance < store.getSetting(\"exhaustingNumber\")) {\r\n            TokenPoolExhausting(_ownerBalance);\r\n        }\r\n        TokenPurchased(_to, msg.value, _tokens);\r\n        Transfer(owner, _to, _tokens);\r\n    }\r\n\r\n    function __redeem_impl(address _from, uint256 _tokens) private {\r\n        address deadTokensAddress = store.getSettingAddress(\"deadTokensAddress\");\r\n        address feeReturnAddress = store.getSettingAddress(\"feeReturnAddress\");\r\n        uint256 _fee = validator.validateAndGetRedeemFee(owner, _from, _tokens);\r\n\r\n        store.transfer(_from, deadTokensAddress, _tokens);\r\n        store.transfer(_from, feeReturnAddress, _fee);\r\n\r\n        TokenSold(_from, _tokens);\r\n    }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Permittable"
    UserDefinedTypeName "Permittable"
       Source: "Permittable"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Destructable"
    UserDefinedTypeName "Destructable"
       Source: "Destructable"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Withdrawable"
    UserDefinedTypeName "Withdrawable"
       Source: "Withdrawable"
  InheritanceSpecifier
     Gas costs: 0
     Source: "ERC20Token"
    UserDefinedTypeName "ERC20Token"
       Source: "ERC20Token"
  VariableDeclaration "store"
     Type: contract TokenStorage
     Gas costs: 0
     Source: "TokenStorage private store"
    UserDefinedTypeName "TokenStorage"
       Source: "TokenStorage"
  VariableDeclaration "validator"
     Type: contract TokenValidator
     Gas costs: 0
     Source: "TokenValidator validator"
    UserDefinedTypeName "TokenValidator"
       Source: "TokenValidator"
  VariableDeclaration "owner"
     Type: address
     Gas costs: 0
     Source: "address private owner"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "infoAboveSpot"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public infoAboveSpot = 400"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 400
       Type: int_const 400
       Source: "400"
  VariableDeclaration "infoTier"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public infoTier = \"Tier 1\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: Tier 1
       Type: literal_string "Tier 1"
       Source: "\"Tier 1\""
  VariableDeclaration "infoTokenSilverRatio"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public infoTokenSilverRatio = \"1 : 1\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: 1 : 1
       Type: literal_string "1 : 1"
       Source: "\"1 : 1\""
  EventDefinition "TokenSold"
     Gas costs: 0
     Source: "event TokenSold(address _from, uint256 _amount);"
    ParameterList
       Source: "(address _from, uint256 _amount)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "TokenPurchased"
     Gas costs: 0
     Source: "event TokenPurchased(address _address, uint256 _amount, uint256 _tokens);"
    ParameterList
       Source: "(address _address, uint256 _amount, uint256 _tokens)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_tokens"
         Type: uint256
         Source: "uint256 _tokens"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "TokenPoolExhausting"
     Gas costs: 0
     Source: "event TokenPoolExhausting(uint256 _amount);"
    ParameterList
       Source: "(uint256 _amount)"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "FeeApplied"
     Gas costs: 0
     Source: "event FeeApplied(string _name, address _address, uint256 _amount);"
    ParameterList
       Source: "(string _name, address _address, uint256 _amount)"
      VariableDeclaration "_name"
         Type: string memory
         Source: "string _name"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
  VariableDeclaration "allowed"
     Type: mapping(address => mapping(address => uint256))
     Gas costs: 0
     Source: "mapping(address => mapping (address => uint256)) allowed"
    Mapping
       Source: "mapping(address => mapping (address => uint256))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping (address => uint256)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "TokenFacade" - public
     Source: "function TokenFacade() public {\r\n        owner = msg.sender;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        owner = msg.sender;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "owner = msg.sender"
        Assignment using operator =
           Type: address
           Source: "owner = msg.sender"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "" - public
     Source: "function () public payable {\r\n        purchase();\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        purchase();\r\n    }"
      ExpressionStatement
         Gas costs: 4
         Source: "purchase()"
        FunctionCall
           Type: tuple()
           Source: "purchase()"
          Identifier purchase
             Type: function ()
             Source: "purchase"
  FunctionDefinition "totalSupply" - public - const
     Source: "function totalSupply() public constant returns (uint256) {\r\n        return store.getSetting(\"totalSupply\");\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return store.getSetting(\"totalSupply\");\r\n    }"
      Return
         Gas costs: [???]
         Source: "return store.getSetting(\"totalSupply\")"
        FunctionCall
           Type: uint256
           Source: "store.getSetting(\"totalSupply\")"
          MemberAccess to member getSetting
             Type: function (string memory) view external returns (uint256)
             Source: "store.getSetting"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Literal, token: [no token] value: totalSupply
             Type: literal_string "totalSupply"
             Source: "\"totalSupply\""
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _address) public constant returns (uint256) {\r\n        return store.getBalance(_address);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _address)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return store.getBalance(_address);\r\n    }"
      Return
         Gas costs: [???]
         Source: "return store.getBalance(_address)"
        FunctionCall
           Type: uint256
           Source: "store.getBalance(_address)"
          MemberAccess to member getBalance
             Type: function (address) view external returns (uint256)
             Source: "store.getBalance"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Identifier _address
             Type: address
             Source: "_address"
  VariableDeclaration "symbol"
     Type: string memory
     Gas costs: [???]
     Source: "string public constant symbol = \"SLVT\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: SLVT
       Type: literal_string "SLVT"
       Source: "\"SLVT\""
  VariableDeclaration "name"
     Type: string memory
     Gas costs: [???]
     Source: "string public constant name = \"SilverToken\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: SilverToken
       Type: literal_string "SilverToken"
       Source: "\"SilverToken\""
  VariableDeclaration "decimals"
     Type: uint8
     Gas costs: [???]
     Source: "uint8 public constant decimals = 8"
    ElementaryTypeName uint8
       Source: "uint8"
    Literal, token: [no token] value: 8
       Type: int_const 8
       Source: "8"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _amount) public returns (bool) {\r\n        uint256 _fee = validator.validateAndGetTransferFee(owner, msg.sender, _to, _amount);\r\n\r\n        store.transfer(msg.sender, _to, _amount);\r\n\r\n        if (_fee > 0)\r\n            store.transfer(msg.sender, store.getSettingAddress(\"feeReturnAddress\"), _fee);\r\n\r\n        Transfer(msg.sender, _to, _amount);\r\n\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _amount)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        uint256 _fee = validator.validateAndGetTransferFee(owner, msg.sender, _to, _amount);\r\n\r\n        store.transfer(msg.sender, _to, _amount);\r\n\r\n        if (_fee > 0)\r\n            store.transfer(msg.sender, store.getSettingAddress(\"feeReturnAddress\"), _fee);\r\n\r\n        Transfer(msg.sender, _to, _amount);\r\n\r\n        return true;\r\n    }"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "uint256 _fee = validator.validateAndGetTransferFee(owner, msg.sender, _to, _amount)"
        VariableDeclaration "_fee"
           Type: uint256
           Source: "uint256 _fee"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "validator.validateAndGetTransferFee(owner, msg.sender, _to, _amount)"
          MemberAccess to member validateAndGetTransferFee
             Type: function (address,address,address,uint256) view external returns (uint256)
             Source: "validator.validateAndGetTransferFee"
            Identifier validator
               Type: contract TokenValidator
               Source: "validator"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      ExpressionStatement
         Gas costs: [???]
         Source: "store.transfer(msg.sender, _to, _amount)"
        FunctionCall
           Type: uint256
           Source: "store.transfer(msg.sender, _to, _amount)"
          MemberAccess to member transfer
             Type: function (address,address,uint256) external returns (uint256)
             Source: "store.transfer"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      IfStatement
         Source: "if (_fee > 0)\r\n            store.transfer(msg.sender, store.getSettingAddress(\"feeReturnAddress\"), _fee)"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 9
           Source: "_fee > 0"
          Identifier _fee
             Type: uint256
             Source: "_fee"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        ExpressionStatement
           Gas costs: [???]
           Source: "store.transfer(msg.sender, store.getSettingAddress(\"feeReturnAddress\"), _fee)"
          FunctionCall
             Type: uint256
             Source: "store.transfer(msg.sender, store.getSettingAddress(\"feeReturnAddress\"), _fee)"
            MemberAccess to member transfer
               Type: function (address,address,uint256) external returns (uint256)
               Source: "store.transfer"
              Identifier store
                 Type: contract TokenStorage
                 Source: "store"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            FunctionCall
               Type: address
               Source: "store.getSettingAddress(\"feeReturnAddress\")"
              MemberAccess to member getSettingAddress
                 Type: function (string memory) view external returns (address)
                 Source: "store.getSettingAddress"
                Identifier store
                   Type: contract TokenStorage
                   Source: "store"
              Literal, token: [no token] value: feeReturnAddress
                 Type: literal_string "feeReturnAddress"
                 Source: "\"feeReturnAddress\""
            Identifier _fee
               Type: uint256
               Source: "_fee"
      ExpressionStatement
         Gas costs: [???]
         Source: "Transfer(msg.sender, _to, _amount)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(msg.sender, _to, _amount)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _amount) public returns (bool) {\r\n        require(allowed[_from][_to] >= _amount);\r\n\r\n        uint256 _fee = validator.validateAndGetTransferFee(owner, _from, _to, _amount);\r\n\r\n        store.transfer(_from, _to, _amount);\r\n\r\n        if (_fee > 0)\r\n            store.transfer(_from, store.getSettingAddress(\"feeReturnAddress\"), _fee);\r\n\r\n        allowed[_from][_to] -= _amount;\r\n\r\n        Transfer(_from, _to, _amount);\r\n\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _amount)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        require(allowed[_from][_to] >= _amount);\r\n\r\n        uint256 _fee = validator.validateAndGetTransferFee(owner, _from, _to, _amount);\r\n\r\n        store.transfer(_from, _to, _amount);\r\n\r\n        if (_fee > 0)\r\n            store.transfer(_from, store.getSettingAddress(\"feeReturnAddress\"), _fee);\r\n\r\n        allowed[_from][_to] -= _amount;\r\n\r\n        Transfer(_from, _to, _amount);\r\n\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 424
         Source: "require(allowed[_from][_to] >= _amount)"
        FunctionCall
           Type: tuple()
           Source: "require(allowed[_from][_to] >= _amount)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "allowed[_from][_to] >= _amount"
            IndexAccess
               Type: uint256
               Source: "allowed[_from][_to]"
              IndexAccess
                 Type: mapping(address => uint256)
                 Source: "allowed[_from]"
                Identifier allowed
                   Type: mapping(address => mapping(address => uint256))
                   Source: "allowed"
                Identifier _from
                   Type: address
                   Source: "_from"
              Identifier _to
                 Type: address
                 Source: "_to"
            Identifier _amount
               Type: uint256
               Source: "_amount"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "uint256 _fee = validator.validateAndGetTransferFee(owner, _from, _to, _amount)"
        VariableDeclaration "_fee"
           Type: uint256
           Source: "uint256 _fee"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "validator.validateAndGetTransferFee(owner, _from, _to, _amount)"
          MemberAccess to member validateAndGetTransferFee
             Type: function (address,address,address,uint256) view external returns (uint256)
             Source: "validator.validateAndGetTransferFee"
            Identifier validator
               Type: contract TokenValidator
               Source: "validator"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      ExpressionStatement
         Gas costs: [???]
         Source: "store.transfer(_from, _to, _amount)"
        FunctionCall
           Type: uint256
           Source: "store.transfer(_from, _to, _amount)"
          MemberAccess to member transfer
             Type: function (address,address,uint256) external returns (uint256)
             Source: "store.transfer"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      IfStatement
         Source: "if (_fee > 0)\r\n            store.transfer(_from, store.getSettingAddress(\"feeReturnAddress\"), _fee)"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 9
           Source: "_fee > 0"
          Identifier _fee
             Type: uint256
             Source: "_fee"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        ExpressionStatement
           Gas costs: [???]
           Source: "store.transfer(_from, store.getSettingAddress(\"feeReturnAddress\"), _fee)"
          FunctionCall
             Type: uint256
             Source: "store.transfer(_from, store.getSettingAddress(\"feeReturnAddress\"), _fee)"
            MemberAccess to member transfer
               Type: function (address,address,uint256) external returns (uint256)
               Source: "store.transfer"
              Identifier store
                 Type: contract TokenStorage
                 Source: "store"
            Identifier _from
               Type: address
               Source: "_from"
            FunctionCall
               Type: address
               Source: "store.getSettingAddress(\"feeReturnAddress\")"
              MemberAccess to member getSettingAddress
                 Type: function (string memory) view external returns (address)
                 Source: "store.getSettingAddress"
                Identifier store
                   Type: contract TokenStorage
                   Source: "store"
              Literal, token: [no token] value: feeReturnAddress
                 Type: literal_string "feeReturnAddress"
                 Source: "\"feeReturnAddress\""
            Identifier _fee
               Type: uint256
               Source: "_fee"
      ExpressionStatement
         Gas costs: 20419
         Source: "allowed[_from][_to] -= _amount"
        Assignment using operator -=
           Type: uint256
           Source: "allowed[_from][_to] -= _amount"
          IndexAccess
             Type: uint256
             Source: "allowed[_from][_to]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[_from]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              Identifier _from
                 Type: address
                 Source: "_from"
            Identifier _to
               Type: address
               Source: "_to"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      ExpressionStatement
         Gas costs: [???]
         Source: "Transfer(_from, _to, _amount)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(_from, _to, _amount)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "approve" - public
     Source: "function approve(address _recipient, uint256 _amount) public returns (bool) {\r\n        return __approve_impl(msg.sender, _recipient, _amount);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _recipient, uint256 _amount)"
      VariableDeclaration "_recipient"
         Type: address
         Source: "address _recipient"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        return __approve_impl(msg.sender, _recipient, _amount);\r\n    }"
      Return
         Gas costs: 17
         Source: "return __approve_impl(msg.sender, _recipient, _amount)"
        FunctionCall
           Type: bool
           Source: "__approve_impl(msg.sender, _recipient, _amount)"
          Identifier __approve_impl
             Type: function (address,address,uint256) returns (bool)
             Source: "__approve_impl"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _recipient
             Type: address
             Source: "_recipient"
          Identifier _amount
             Type: uint256
             Source: "_amount"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _from, address _recipient) public constant returns (uint256) {\r\n        return allowed[_from][_recipient];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _recipient)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_recipient"
         Type: address
         Source: "address _recipient"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return allowed[_from][_recipient];\r\n    }"
      Return
         Gas costs: 394
         Source: "return allowed[_from][_recipient]"
        IndexAccess
           Type: uint256
           Source: "allowed[_from][_recipient]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowed[_from]"
            Identifier allowed
               Type: mapping(address => mapping(address => uint256))
               Source: "allowed"
            Identifier _from
               Type: address
               Source: "_from"
          Identifier _recipient
             Type: address
             Source: "_recipient"
  FunctionDefinition "purchase" - public
     Source: "function purchase() public payable {\r\n        __purchase_impl(msg.sender, msg.value);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        __purchase_impl(msg.sender, msg.value);\r\n    }"
      ExpressionStatement
         Gas costs: 8
         Source: "__purchase_impl(msg.sender, msg.value)"
        FunctionCall
           Type: tuple()
           Source: "__purchase_impl(msg.sender, msg.value)"
          Identifier __purchase_impl
             Type: function (address,uint256)
             Source: "__purchase_impl"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "redeem" - public
     Source: "function redeem(uint256 _tokens) public {\r\n        __redeem_impl(msg.sender, _tokens);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _tokens)"
      VariableDeclaration "_tokens"
         Type: uint256
         Source: "uint256 _tokens"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        __redeem_impl(msg.sender, _tokens);\r\n    }"
      ExpressionStatement
         Gas costs: 9
         Source: "__redeem_impl(msg.sender, _tokens)"
        FunctionCall
           Type: tuple()
           Source: "__redeem_impl(msg.sender, _tokens)"
          Identifier __redeem_impl
             Type: function (address,uint256)
             Source: "__redeem_impl"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _tokens
             Type: uint256
             Source: "_tokens"
  FunctionDefinition "getTokensInAction" - public - const
     Source: "function getTokensInAction() public view returns (uint256) {\r\n        address deadTokensAddress = store.getSettingAddress(\"deadTokensAddress\");\r\n        return store.getBalance(owner) - store.getBalance(deadTokensAddress);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        address deadTokensAddress = store.getSettingAddress(\"deadTokensAddress\");\r\n        return store.getBalance(owner) - store.getBalance(deadTokensAddress);\r\n    }"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "address deadTokensAddress = store.getSettingAddress(\"deadTokensAddress\")"
        VariableDeclaration "deadTokensAddress"
           Type: address
           Source: "address deadTokensAddress"
          ElementaryTypeName address
             Source: "address"
        FunctionCall
           Type: address
           Source: "store.getSettingAddress(\"deadTokensAddress\")"
          MemberAccess to member getSettingAddress
             Type: function (string memory) view external returns (address)
             Source: "store.getSettingAddress"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Literal, token: [no token] value: deadTokensAddress
             Type: literal_string "deadTokensAddress"
             Source: "\"deadTokensAddress\""
      Return
         Gas costs: [???]
         Source: "return store.getBalance(owner) - store.getBalance(deadTokensAddress)"
        BinaryOperation using operator -
           Type: uint256
           Source: "store.getBalance(owner) - store.getBalance(deadTokensAddress)"
          FunctionCall
             Type: uint256
             Source: "store.getBalance(owner)"
            MemberAccess to member getBalance
               Type: function (address) view external returns (uint256)
               Source: "store.getBalance"
              Identifier store
                 Type: contract TokenStorage
                 Source: "store"
            Identifier owner
               Type: address
               Source: "owner"
          FunctionCall
             Type: uint256
             Source: "store.getBalance(deadTokensAddress)"
            MemberAccess to member getBalance
               Type: function (address) view external returns (uint256)
               Source: "store.getBalance"
              Identifier store
                 Type: contract TokenStorage
                 Source: "store"
            Identifier deadTokensAddress
               Type: address
               Source: "deadTokensAddress"
  FunctionDefinition "getTokensPrice" - public - const
     Source: "function getTokensPrice(uint256 _amount, bool withFee) public constant returns (uint256) {\r\n        uint256 tokenPrice = store.getSetting(\"tokenPrice\");\r\n        uint256 result = _amount * tokenPrice / 10**uint256(decimals);\r\n\r\n        if (withFee) {\r\n            result = result + result * store.getSetting(\"purchaseFee\") / store.getSetting(\"percentage\");\r\n        }\r\n\r\n        return result;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _amount, bool withFee)"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "withFee"
         Type: bool
         Source: "bool withFee"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        uint256 tokenPrice = store.getSetting(\"tokenPrice\");\r\n        uint256 result = _amount * tokenPrice / 10**uint256(decimals);\r\n\r\n        if (withFee) {\r\n            result = result + result * store.getSetting(\"purchaseFee\") / store.getSetting(\"percentage\");\r\n        }\r\n\r\n        return result;\r\n    }"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "uint256 tokenPrice = store.getSetting(\"tokenPrice\")"
        VariableDeclaration "tokenPrice"
           Type: uint256
           Source: "uint256 tokenPrice"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "store.getSetting(\"tokenPrice\")"
          MemberAccess to member getSetting
             Type: function (string memory) view external returns (uint256)
             Source: "store.getSetting"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Literal, token: [no token] value: tokenPrice
             Type: literal_string "tokenPrice"
             Source: "\"tokenPrice\""
      VariableDeclarationStatement
         Gas costs: 116
         Source: "uint256 result = _amount * tokenPrice / 10**uint256(decimals)"
        VariableDeclaration "result"
           Type: uint256
           Source: "uint256 result"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator /
           Type: uint256
           Source: "_amount * tokenPrice / 10**uint256(decimals)"
          BinaryOperation using operator *
             Type: uint256
             Source: "_amount * tokenPrice"
            Identifier _amount
               Type: uint256
               Source: "_amount"
            Identifier tokenPrice
               Type: uint256
               Source: "tokenPrice"
          BinaryOperation using operator **
             Type: uint256
             Source: "10**uint256(decimals)"
            Literal, token: [no token] value: 10
               Type: int_const 10
               Source: "10"
            FunctionCall
               Type: uint256
               Source: "uint256(decimals)"
              ElementaryTypeNameExpression uint256
                 Type: type(uint256)
                 Source: "uint256"
              Identifier decimals
                 Type: uint8
                 Source: "decimals"
      IfStatement
         Source: "if (withFee) {\r\n            result = result + result * store.getSetting(\"purchaseFee\") / store.getSetting(\"percentage\");\r\n        }"
        Identifier withFee
           Type: bool
           Gas costs: 3
           Source: "withFee"
        Block
           Source: "{\r\n            result = result + result * store.getSetting(\"purchaseFee\") / store.getSetting(\"percentage\");\r\n        }"
          ExpressionStatement
             Gas costs: [???]
             Source: "result = result + result * store.getSetting(\"purchaseFee\") / store.getSetting(\"percentage\")"
            Assignment using operator =
               Type: uint256
               Source: "result = result + result * store.getSetting(\"purchaseFee\") / store.getSetting(\"percentage\")"
              Identifier result
                 Type: uint256
                 Source: "result"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "result + result * store.getSetting(\"purchaseFee\") / store.getSetting(\"percentage\")"
                Identifier result
                   Type: uint256
                   Source: "result"
                BinaryOperation using operator /
                   Type: uint256
                   Source: "result * store.getSetting(\"purchaseFee\") / store.getSetting(\"percentage\")"
                  BinaryOperation using operator *
                     Type: uint256
                     Source: "result * store.getSetting(\"purchaseFee\")"
                    Identifier result
                       Type: uint256
                       Source: "result"
                    FunctionCall
                       Type: uint256
                       Source: "store.getSetting(\"purchaseFee\")"
                      MemberAccess to member getSetting
                         Type: function (string memory) view external returns (uint256)
                         Source: "store.getSetting"
                        Identifier store
                           Type: contract TokenStorage
                           Source: "store"
                      Literal, token: [no token] value: purchaseFee
                         Type: literal_string "purchaseFee"
                         Source: "\"purchaseFee\""
                  FunctionCall
                     Type: uint256
                     Source: "store.getSetting(\"percentage\")"
                    MemberAccess to member getSetting
                       Type: function (string memory) view external returns (uint256)
                       Source: "store.getSetting"
                      Identifier store
                         Type: contract TokenStorage
                         Source: "store"
                    Literal, token: [no token] value: percentage
                       Type: literal_string "percentage"
                       Source: "\"percentage\""
      Return
         Gas costs: 8
         Source: "return result"
        Identifier result
           Type: uint256
           Source: "result"
  FunctionDefinition "resetDeadTokens" - public
     Source: "function resetDeadTokens(uint256 _amount) public onlyPermitted returns (bool) {\r\n        address deadTokensAddress = validator.validateResetDeadTokens(_amount);\r\n        store.transfer(deadTokensAddress, owner, _amount);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _amount)"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        address deadTokensAddress = validator.validateResetDeadTokens(_amount);\r\n        store.transfer(deadTokensAddress, owner, _amount);\r\n    }"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "address deadTokensAddress = validator.validateResetDeadTokens(_amount)"
        VariableDeclaration "deadTokensAddress"
           Type: address
           Source: "address deadTokensAddress"
          ElementaryTypeName address
             Source: "address"
        FunctionCall
           Type: address
           Source: "validator.validateResetDeadTokens(_amount)"
          MemberAccess to member validateResetDeadTokens
             Type: function (uint256) view external returns (address)
             Source: "validator.validateResetDeadTokens"
            Identifier validator
               Type: contract TokenValidator
               Source: "validator"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      ExpressionStatement
         Gas costs: [???]
         Source: "store.transfer(deadTokensAddress, owner, _amount)"
        FunctionCall
           Type: uint256
           Source: "store.transfer(deadTokensAddress, owner, _amount)"
          MemberAccess to member transfer
             Type: function (address,address,uint256) external returns (uint256)
             Source: "store.transfer"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Identifier deadTokensAddress
             Type: address
             Source: "deadTokensAddress"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier _amount
             Type: uint256
             Source: "_amount"
  FunctionDefinition "canPurchase" - public - const
     Source: "function canPurchase(address _address, uint256 _tokensAmount) public view returns(bool, bool, bool, bool) {\r\n        return validator.canPurchase(owner, _address, _tokensAmount);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _address, uint256 _tokensAmount)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_tokensAmount"
         Type: uint256
         Source: "uint256 _tokensAmount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 12
       Source: "(bool, bool, bool, bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        return validator.canPurchase(owner, _address, _tokensAmount);\r\n    }"
      Return
         Gas costs: [???]
         Source: "return validator.canPurchase(owner, _address, _tokensAmount)"
        FunctionCall
           Type: tuple(bool,bool,bool,bool)
           Source: "validator.canPurchase(owner, _address, _tokensAmount)"
          MemberAccess to member canPurchase
             Type: function (address,address,uint256) view external returns (bool,bool,bool,bool)
             Source: "validator.canPurchase"
            Identifier validator
               Type: contract TokenValidator
               Source: "validator"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier _address
             Type: address
             Source: "_address"
          Identifier _tokensAmount
             Type: uint256
             Source: "_tokensAmount"
  FunctionDefinition "canTransfer" - public - const
     Source: "function canTransfer(address _from, address _to, uint256 _amount) public view returns(bool, bool) {\r\n        return validator.canTransfer(owner, _from, _to, _amount);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _amount)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 6
       Source: "(bool, bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        return validator.canTransfer(owner, _from, _to, _amount);\r\n    }"
      Return
         Gas costs: [???]
         Source: "return validator.canTransfer(owner, _from, _to, _amount)"
        FunctionCall
           Type: tuple(bool,bool)
           Source: "validator.canTransfer(owner, _from, _to, _amount)"
          MemberAccess to member canTransfer
             Type: function (address,address,address,uint256) view external returns (bool,bool)
             Source: "validator.canTransfer"
            Identifier validator
               Type: contract TokenValidator
               Source: "validator"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _amount
             Type: uint256
             Source: "_amount"
  FunctionDefinition "setInfoAboveSpot" - public
     Source: "function setInfoAboveSpot(uint256 newInfoAboveSpot) public onlyPermitted {\r\n        infoAboveSpot = newInfoAboveSpot;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 newInfoAboveSpot)"
      VariableDeclaration "newInfoAboveSpot"
         Type: uint256
         Source: "uint256 newInfoAboveSpot"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        infoAboveSpot = newInfoAboveSpot;\r\n    }"
      ExpressionStatement
         Gas costs: 20014
         Source: "infoAboveSpot = newInfoAboveSpot"
        Assignment using operator =
           Type: uint256
           Source: "infoAboveSpot = newInfoAboveSpot"
          Identifier infoAboveSpot
             Type: uint256
             Source: "infoAboveSpot"
          Identifier newInfoAboveSpot
             Type: uint256
             Source: "newInfoAboveSpot"
  FunctionDefinition "setInfoTier" - public
     Source: "function setInfoTier(string newInfoTier) public onlyPermitted {\r\n        infoTier = newInfoTier;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(string newInfoTier)"
      VariableDeclaration "newInfoTier"
         Type: string memory
         Source: "string newInfoTier"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        infoTier = newInfoTier;\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "infoTier = newInfoTier"
        Assignment using operator =
           Type: string storage ref
           Source: "infoTier = newInfoTier"
          Identifier infoTier
             Type: string storage ref
             Source: "infoTier"
          Identifier newInfoTier
             Type: string memory
             Source: "newInfoTier"
  FunctionDefinition "setInfoTokenSilverRatio" - public
     Source: "function setInfoTokenSilverRatio(string newInfoTokenSilverRatio) public onlyPermitted {\r\n        infoTokenSilverRatio = newInfoTokenSilverRatio;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(string newInfoTokenSilverRatio)"
      VariableDeclaration "newInfoTokenSilverRatio"
         Type: string memory
         Source: "string newInfoTokenSilverRatio"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        infoTokenSilverRatio = newInfoTokenSilverRatio;\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "infoTokenSilverRatio = newInfoTokenSilverRatio"
        Assignment using operator =
           Type: string storage ref
           Source: "infoTokenSilverRatio = newInfoTokenSilverRatio"
          Identifier infoTokenSilverRatio
             Type: string storage ref
             Source: "infoTokenSilverRatio"
          Identifier newInfoTokenSilverRatio
             Type: string memory
             Source: "newInfoTokenSilverRatio"
  FunctionDefinition "getSetting" - public - const
     Source: "function getSetting(string _name) public view returns (uint256) {\r\n        return store.getSetting(_name);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(string _name)"
      VariableDeclaration "_name"
         Type: string memory
         Source: "string _name"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return store.getSetting(_name);\r\n    }"
      Return
         Gas costs: [???]
         Source: "return store.getSetting(_name)"
        FunctionCall
           Type: uint256
           Source: "store.getSetting(_name)"
          MemberAccess to member getSetting
             Type: function (string memory) view external returns (uint256)
             Source: "store.getSetting"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Identifier _name
             Type: string memory
             Source: "_name"
  FunctionDefinition "getMegabox" - public - const
     Source: "function getMegabox(uint256 index) public view onlyPermitted returns (address, uint256, uint256) {\r\n        return store.getMegabox(index);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 index)"
      VariableDeclaration "index"
         Type: uint256
         Source: "uint256 index"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 9
       Source: "(address, uint256, uint256)"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        return store.getMegabox(index);\r\n    }"
      Return
         Gas costs: [???]
         Source: "return store.getMegabox(index)"
        FunctionCall
           Type: tuple(address,uint256,uint256)
           Source: "store.getMegabox(index)"
          MemberAccess to member getMegabox
             Type: function (uint256) view external returns (address,uint256,uint256)
             Source: "store.getMegabox"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Identifier index
             Type: uint256
             Source: "index"
  FunctionDefinition "getMegaboxIndex" - public - const
     Source: "function getMegaboxIndex() public view onlyPermitted returns (uint256) {\r\n        return store.getMegaboxIndex();\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        return store.getMegaboxIndex();\r\n    }"
      Return
         Gas costs: [???]
         Source: "return store.getMegaboxIndex()"
        FunctionCall
           Type: uint256
           Source: "store.getMegaboxIndex()"
          MemberAccess to member getMegaboxIndex
             Type: function () view external returns (uint256)
             Source: "store.getMegaboxIndex"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
  FunctionDefinition "_approve" - public
     Source: "function _approve(address _from, address _recipient, uint256 _amount) public onlyPermitted returns (bool) {\r\n        return __approve_impl(_from, _recipient, _amount);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _recipient, uint256 _amount)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_recipient"
         Type: address
         Source: "address _recipient"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        return __approve_impl(_from, _recipient, _amount);\r\n    }"
      Return
         Gas costs: 29
         Source: "return __approve_impl(_from, _recipient, _amount)"
        FunctionCall
           Type: bool
           Source: "__approve_impl(_from, _recipient, _amount)"
          Identifier __approve_impl
             Type: function (address,address,uint256) returns (bool)
             Source: "__approve_impl"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _recipient
             Type: address
             Source: "_recipient"
          Identifier _amount
             Type: uint256
             Source: "_amount"
  FunctionDefinition "_transfer" - public
     Source: "function _transfer(address _from, address _to, uint256 _amount) public onlyPermitted returns (bool) {\r\n        validator.validateAndGetTransferFee(owner, _from, _to, _amount);\r\n\r\n        store.transfer(_from, _to, _amount);\r\n\r\n        Transfer(_from, _to, _amount);\r\n\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _amount)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        validator.validateAndGetTransferFee(owner, _from, _to, _amount);\r\n\r\n        store.transfer(_from, _to, _amount);\r\n\r\n        Transfer(_from, _to, _amount);\r\n\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "validator.validateAndGetTransferFee(owner, _from, _to, _amount)"
        FunctionCall
           Type: uint256
           Source: "validator.validateAndGetTransferFee(owner, _from, _to, _amount)"
          MemberAccess to member validateAndGetTransferFee
             Type: function (address,address,address,uint256) view external returns (uint256)
             Source: "validator.validateAndGetTransferFee"
            Identifier validator
               Type: contract TokenValidator
               Source: "validator"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      ExpressionStatement
         Gas costs: [???]
         Source: "store.transfer(_from, _to, _amount)"
        FunctionCall
           Type: uint256
           Source: "store.transfer(_from, _to, _amount)"
          MemberAccess to member transfer
             Type: function (address,address,uint256) external returns (uint256)
             Source: "store.transfer"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      ExpressionStatement
         Gas costs: [???]
         Source: "Transfer(_from, _to, _amount)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(_from, _to, _amount)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "_purchase" - public
     Source: "function _purchase(address _to, uint256 _amount) public onlyPermitted {\r\n        __purchase_impl(_to, _amount);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _amount)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        __purchase_impl(_to, _amount);\r\n    }"
      ExpressionStatement
         Gas costs: 21
         Source: "__purchase_impl(_to, _amount)"
        FunctionCall
           Type: tuple()
           Source: "__purchase_impl(_to, _amount)"
          Identifier __purchase_impl
             Type: function (address,uint256)
             Source: "__purchase_impl"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _amount
             Type: uint256
             Source: "_amount"
  FunctionDefinition "_redeem" - public
     Source: "function _redeem(address _from, uint256 _tokens) public onlyPermitted {\r\n        __redeem_impl(_from, _tokens);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, uint256 _tokens)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_tokens"
         Type: uint256
         Source: "uint256 _tokens"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        __redeem_impl(_from, _tokens);\r\n    }"
      ExpressionStatement
         Gas costs: 21
         Source: "__redeem_impl(_from, _tokens)"
        FunctionCall
           Type: tuple()
           Source: "__redeem_impl(_from, _tokens)"
          Identifier __redeem_impl
             Type: function (address,uint256)
             Source: "__redeem_impl"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _tokens
             Type: uint256
             Source: "_tokens"
  FunctionDefinition "_start" - public
     Source: "function _start() public onlyPermitted {\r\n        validator.validateStart(owner, store);\r\n\r\n        store.setBalance(owner, store.getSetting(\"totalSupply\"));\r\n        store.setSetting(\"icoTimestamp\", block.timestamp);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        validator.validateStart(owner, store);\r\n\r\n        store.setBalance(owner, store.getSetting(\"totalSupply\"));\r\n        store.setSetting(\"icoTimestamp\", block.timestamp);\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "validator.validateStart(owner, store)"
        FunctionCall
           Type: tuple()
           Source: "validator.validateStart(owner, store)"
          MemberAccess to member validateStart
             Type: function (address,address) view external
             Source: "validator.validateStart"
            Identifier validator
               Type: contract TokenValidator
               Source: "validator"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier store
             Type: contract TokenStorage
             Source: "store"
      ExpressionStatement
         Gas costs: [???]
         Source: "store.setBalance(owner, store.getSetting(\"totalSupply\"))"
        FunctionCall
           Type: uint256
           Source: "store.setBalance(owner, store.getSetting(\"totalSupply\"))"
          MemberAccess to member setBalance
             Type: function (address,uint256) external returns (uint256)
             Source: "store.setBalance"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Identifier owner
             Type: address
             Source: "owner"
          FunctionCall
             Type: uint256
             Source: "store.getSetting(\"totalSupply\")"
            MemberAccess to member getSetting
               Type: function (string memory) view external returns (uint256)
               Source: "store.getSetting"
              Identifier store
                 Type: contract TokenStorage
                 Source: "store"
            Literal, token: [no token] value: totalSupply
               Type: literal_string "totalSupply"
               Source: "\"totalSupply\""
      ExpressionStatement
         Gas costs: [???]
         Source: "store.setSetting(\"icoTimestamp\", block.timestamp)"
        FunctionCall
           Type: uint256
           Source: "store.setSetting(\"icoTimestamp\", block.timestamp)"
          MemberAccess to member setSetting
             Type: function (string memory,uint256) external returns (uint256)
             Source: "store.setSetting"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Literal, token: [no token] value: icoTimestamp
             Type: literal_string "icoTimestamp"
             Source: "\"icoTimestamp\""
          MemberAccess to member timestamp
             Type: uint256
             Source: "block.timestamp"
            Identifier block
               Type: block
               Source: "block"
  FunctionDefinition "_setStore" - public
     Source: "function _setStore(address _address) public onlyPermitted {\r\n        store = TokenStorage(_address);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _address)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        store = TokenStorage(_address);\r\n    }"
      ExpressionStatement
         Gas costs: 20267
         Source: "store = TokenStorage(_address)"
        Assignment using operator =
           Type: contract TokenStorage
           Source: "store = TokenStorage(_address)"
          Identifier store
             Type: contract TokenStorage
             Source: "store"
          FunctionCall
             Type: contract TokenStorage
             Source: "TokenStorage(_address)"
            Identifier TokenStorage
               Type: type(contract TokenStorage)
               Source: "TokenStorage"
            Identifier _address
               Type: address
               Source: "_address"
  FunctionDefinition "_setValidator" - public
     Source: "function _setValidator(address _address) public onlyPermitted {\r\n        validator = TokenValidator(_address);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _address)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        validator = TokenValidator(_address);\r\n    }"
      ExpressionStatement
         Gas costs: 20267
         Source: "validator = TokenValidator(_address)"
        Assignment using operator =
           Type: contract TokenValidator
           Source: "validator = TokenValidator(_address)"
          Identifier validator
             Type: contract TokenValidator
             Source: "validator"
          FunctionCall
             Type: contract TokenValidator
             Source: "TokenValidator(_address)"
            Identifier TokenValidator
               Type: type(contract TokenValidator)
               Source: "TokenValidator"
            Identifier _address
               Type: address
               Source: "_address"
  FunctionDefinition "_setSetting" - public
     Source: "function _setSetting(string _name, uint256 _value) public onlyPermitted {\r\n        store.setSetting(_name, _value);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(string _name, uint256 _value)"
      VariableDeclaration "_name"
         Type: string memory
         Source: "string _name"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        store.setSetting(_name, _value);\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "store.setSetting(_name, _value)"
        FunctionCall
           Type: uint256
           Source: "store.setSetting(_name, _value)"
          MemberAccess to member setSetting
             Type: function (string memory,uint256) external returns (uint256)
             Source: "store.setSetting"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Identifier _name
             Type: string memory
             Source: "_name"
          Identifier _value
             Type: uint256
             Source: "_value"
  FunctionDefinition "_startMegabox" - public
     Source: "function _startMegabox(uint256 _tokens) public onlyPermitted {\r\n        validator.validateStartMegabox(owner, _tokens);\r\n        store.newMegabox(owner, _tokens, now);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _tokens)"
      VariableDeclaration "_tokens"
         Type: uint256
         Source: "uint256 _tokens"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyPermitted"
       Gas costs: 0
       Source: "onlyPermitted"
      Identifier onlyPermitted
         Type: modifier ()
         Source: "onlyPermitted"
    Block
       Source: "{\r\n        validator.validateStartMegabox(owner, _tokens);\r\n        store.newMegabox(owner, _tokens, now);\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "validator.validateStartMegabox(owner, _tokens)"
        FunctionCall
           Type: tuple()
           Source: "validator.validateStartMegabox(owner, _tokens)"
          MemberAccess to member validateStartMegabox
             Type: function (address,uint256) view external
             Source: "validator.validateStartMegabox"
            Identifier validator
               Type: contract TokenValidator
               Source: "validator"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier _tokens
             Type: uint256
             Source: "_tokens"
      ExpressionStatement
         Gas costs: [???]
         Source: "store.newMegabox(owner, _tokens, now)"
        FunctionCall
           Type: tuple()
           Source: "store.newMegabox(owner, _tokens, now)"
          MemberAccess to member newMegabox
             Type: function (address,uint256,uint256) external
             Source: "store.newMegabox"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier _tokens
             Type: uint256
             Source: "_tokens"
          Identifier now
             Type: uint256
             Source: "now"
  FunctionDefinition "__approve_impl"
     Source: "function __approve_impl(address _sender, address _recipient, uint256 _amount) private returns (bool) {\r\n        allowed[_sender][_recipient] = _amount;\r\n        Approval(_sender, _recipient, _amount);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _sender, address _recipient, uint256 _amount)"
      VariableDeclaration "_sender"
         Type: address
         Source: "address _sender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_recipient"
         Type: address
         Source: "address _recipient"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        allowed[_sender][_recipient] = _amount;\r\n        Approval(_sender, _recipient, _amount);\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 20200
         Source: "allowed[_sender][_recipient] = _amount"
        Assignment using operator =
           Type: uint256
           Source: "allowed[_sender][_recipient] = _amount"
          IndexAccess
             Type: uint256
             Source: "allowed[_sender][_recipient]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[_sender]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              Identifier _sender
                 Type: address
                 Source: "_sender"
            Identifier _recipient
               Type: address
               Source: "_recipient"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      ExpressionStatement
         Gas costs: [???]
         Source: "Approval(_sender, _recipient, _amount)"
        FunctionCall
           Type: tuple()
           Source: "Approval(_sender, _recipient, _amount)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          Identifier _sender
             Type: address
             Source: "_sender"
          Identifier _recipient
             Type: address
             Source: "_recipient"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "__purchase_impl"
     Source: "function __purchase_impl(address _to, uint256 _amount) private {\r\n        uint256 _amountWithoutFee = _amount * store.getSetting(\"percentage\") / (store.getSetting(\"purchaseFee\") + store.getSetting(\"percentage\"));\r\n        uint256 _fee = _amountWithoutFee * store.getSetting(\"purchaseFee\") / store.getSetting(\"percentage\");\r\n        uint256 _ownerBalance = store.getBalance(owner);\r\n        address _feeReturnAddress = store.getSettingAddress(\"feeReturnAddress\");\r\n        uint256 _tokens = validator.validateAndGetPurchaseTokens(owner, msg.sender, _amountWithoutFee);\r\n\r\n        store.increaseBalance(_to, _tokens);\r\n        store.decreaseBalance(owner, _tokens);\r\n\r\n        if (_fee > 0)\r\n            _feeReturnAddress.transfer(_fee);\r\n\r\n        validator.updateDateOfPurchase(_to, now);\r\n\r\n        if (_ownerBalance < store.getSetting(\"exhaustingNumber\")) {\r\n            TokenPoolExhausting(_ownerBalance);\r\n        }\r\n        TokenPurchased(_to, msg.value, _tokens);\r\n        Transfer(owner, _to, _tokens);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _amount)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        uint256 _amountWithoutFee = _amount * store.getSetting(\"percentage\") / (store.getSetting(\"purchaseFee\") + store.getSetting(\"percentage\"));\r\n        uint256 _fee = _amountWithoutFee * store.getSetting(\"purchaseFee\") / store.getSetting(\"percentage\");\r\n        uint256 _ownerBalance = store.getBalance(owner);\r\n        address _feeReturnAddress = store.getSettingAddress(\"feeReturnAddress\");\r\n        uint256 _tokens = validator.validateAndGetPurchaseTokens(owner, msg.sender, _amountWithoutFee);\r\n\r\n        store.increaseBalance(_to, _tokens);\r\n        store.decreaseBalance(owner, _tokens);\r\n\r\n        if (_fee > 0)\r\n            _feeReturnAddress.transfer(_fee);\r\n\r\n        validator.updateDateOfPurchase(_to, now);\r\n\r\n        if (_ownerBalance < store.getSetting(\"exhaustingNumber\")) {\r\n            TokenPoolExhausting(_ownerBalance);\r\n        }\r\n        TokenPurchased(_to, msg.value, _tokens);\r\n        Transfer(owner, _to, _tokens);\r\n    }"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "uint256 _amountWithoutFee = _amount * store.getSetting(\"percentage\") / (store.getSetting(\"purchaseFee\") + store.getSetting(\"percentage\"))"
        VariableDeclaration "_amountWithoutFee"
           Type: uint256
           Source: "uint256 _amountWithoutFee"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator /
           Type: uint256
           Source: "_amount * store.getSetting(\"percentage\") / (store.getSetting(\"purchaseFee\") + store.getSetting(\"percentage\"))"
          BinaryOperation using operator *
             Type: uint256
             Source: "_amount * store.getSetting(\"percentage\")"
            Identifier _amount
               Type: uint256
               Source: "_amount"
            FunctionCall
               Type: uint256
               Source: "store.getSetting(\"percentage\")"
              MemberAccess to member getSetting
                 Type: function (string memory) view external returns (uint256)
                 Source: "store.getSetting"
                Identifier store
                   Type: contract TokenStorage
                   Source: "store"
              Literal, token: [no token] value: percentage
                 Type: literal_string "percentage"
                 Source: "\"percentage\""
          TupleExpression
             Type: uint256
             Source: "(store.getSetting(\"purchaseFee\") + store.getSetting(\"percentage\"))"
            BinaryOperation using operator +
               Type: uint256
               Source: "store.getSetting(\"purchaseFee\") + store.getSetting(\"percentage\")"
              FunctionCall
                 Type: uint256
                 Source: "store.getSetting(\"purchaseFee\")"
                MemberAccess to member getSetting
                   Type: function (string memory) view external returns (uint256)
                   Source: "store.getSetting"
                  Identifier store
                     Type: contract TokenStorage
                     Source: "store"
                Literal, token: [no token] value: purchaseFee
                   Type: literal_string "purchaseFee"
                   Source: "\"purchaseFee\""
              FunctionCall
                 Type: uint256
                 Source: "store.getSetting(\"percentage\")"
                MemberAccess to member getSetting
                   Type: function (string memory) view external returns (uint256)
                   Source: "store.getSetting"
                  Identifier store
                     Type: contract TokenStorage
                     Source: "store"
                Literal, token: [no token] value: percentage
                   Type: literal_string "percentage"
                   Source: "\"percentage\""
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "uint256 _fee = _amountWithoutFee * store.getSetting(\"purchaseFee\") / store.getSetting(\"percentage\")"
        VariableDeclaration "_fee"
           Type: uint256
           Source: "uint256 _fee"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator /
           Type: uint256
           Source: "_amountWithoutFee * store.getSetting(\"purchaseFee\") / store.getSetting(\"percentage\")"
          BinaryOperation using operator *
             Type: uint256
             Source: "_amountWithoutFee * store.getSetting(\"purchaseFee\")"
            Identifier _amountWithoutFee
               Type: uint256
               Source: "_amountWithoutFee"
            FunctionCall
               Type: uint256
               Source: "store.getSetting(\"purchaseFee\")"
              MemberAccess to member getSetting
                 Type: function (string memory) view external returns (uint256)
                 Source: "store.getSetting"
                Identifier store
                   Type: contract TokenStorage
                   Source: "store"
              Literal, token: [no token] value: purchaseFee
                 Type: literal_string "purchaseFee"
                 Source: "\"purchaseFee\""
          FunctionCall
             Type: uint256
             Source: "store.getSetting(\"percentage\")"
            MemberAccess to member getSetting
               Type: function (string memory) view external returns (uint256)
               Source: "store.getSetting"
              Identifier store
                 Type: contract TokenStorage
                 Source: "store"
            Literal, token: [no token] value: percentage
               Type: literal_string "percentage"
               Source: "\"percentage\""
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "uint256 _ownerBalance = store.getBalance(owner)"
        VariableDeclaration "_ownerBalance"
           Type: uint256
           Source: "uint256 _ownerBalance"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "store.getBalance(owner)"
          MemberAccess to member getBalance
             Type: function (address) view external returns (uint256)
             Source: "store.getBalance"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Identifier owner
             Type: address
             Source: "owner"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "address _feeReturnAddress = store.getSettingAddress(\"feeReturnAddress\")"
        VariableDeclaration "_feeReturnAddress"
           Type: address
           Source: "address _feeReturnAddress"
          ElementaryTypeName address
             Source: "address"
        FunctionCall
           Type: address
           Source: "store.getSettingAddress(\"feeReturnAddress\")"
          MemberAccess to member getSettingAddress
             Type: function (string memory) view external returns (address)
             Source: "store.getSettingAddress"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Literal, token: [no token] value: feeReturnAddress
             Type: literal_string "feeReturnAddress"
             Source: "\"feeReturnAddress\""
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "uint256 _tokens = validator.validateAndGetPurchaseTokens(owner, msg.sender, _amountWithoutFee)"
        VariableDeclaration "_tokens"
           Type: uint256
           Source: "uint256 _tokens"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "validator.validateAndGetPurchaseTokens(owner, msg.sender, _amountWithoutFee)"
          MemberAccess to member validateAndGetPurchaseTokens
             Type: function (address,address,uint256) view external returns (uint256)
             Source: "validator.validateAndGetPurchaseTokens"
            Identifier validator
               Type: contract TokenValidator
               Source: "validator"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _amountWithoutFee
             Type: uint256
             Source: "_amountWithoutFee"
      ExpressionStatement
         Gas costs: [???]
         Source: "store.increaseBalance(_to, _tokens)"
        FunctionCall
           Type: uint256
           Source: "store.increaseBalance(_to, _tokens)"
          MemberAccess to member increaseBalance
             Type: function (address,uint256) external returns (uint256)
             Source: "store.increaseBalance"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _tokens
             Type: uint256
             Source: "_tokens"
      ExpressionStatement
         Gas costs: [???]
         Source: "store.decreaseBalance(owner, _tokens)"
        FunctionCall
           Type: uint256
           Source: "store.decreaseBalance(owner, _tokens)"
          MemberAccess to member decreaseBalance
             Type: function (address,uint256) external returns (uint256)
             Source: "store.decreaseBalance"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier _tokens
             Type: uint256
             Source: "_tokens"
      IfStatement
         Source: "if (_fee > 0)\r\n            _feeReturnAddress.transfer(_fee)"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 9
           Source: "_fee > 0"
          Identifier _fee
             Type: uint256
             Source: "_fee"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        ExpressionStatement
           Gas costs: [???]
           Source: "_feeReturnAddress.transfer(_fee)"
          FunctionCall
             Type: tuple()
             Source: "_feeReturnAddress.transfer(_fee)"
            MemberAccess to member transfer
               Type: function (uint256)
               Source: "_feeReturnAddress.transfer"
              Identifier _feeReturnAddress
                 Type: address
                 Source: "_feeReturnAddress"
            Identifier _fee
               Type: uint256
               Source: "_fee"
      ExpressionStatement
         Gas costs: [???]
         Source: "validator.updateDateOfPurchase(_to, now)"
        FunctionCall
           Type: tuple()
           Source: "validator.updateDateOfPurchase(_to, now)"
          MemberAccess to member updateDateOfPurchase
             Type: function (address,uint256) external
             Source: "validator.updateDateOfPurchase"
            Identifier validator
               Type: contract TokenValidator
               Source: "validator"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier now
             Type: uint256
             Source: "now"
      IfStatement
         Source: "if (_ownerBalance < store.getSetting(\"exhaustingNumber\")) {\r\n            TokenPoolExhausting(_ownerBalance);\r\n        }"
        BinaryOperation using operator <
           Type: bool
           Gas costs: [???]
           Source: "_ownerBalance < store.getSetting(\"exhaustingNumber\")"
          Identifier _ownerBalance
             Type: uint256
             Source: "_ownerBalance"
          FunctionCall
             Type: uint256
             Source: "store.getSetting(\"exhaustingNumber\")"
            MemberAccess to member getSetting
               Type: function (string memory) view external returns (uint256)
               Source: "store.getSetting"
              Identifier store
                 Type: contract TokenStorage
                 Source: "store"
            Literal, token: [no token] value: exhaustingNumber
               Type: literal_string "exhaustingNumber"
               Source: "\"exhaustingNumber\""
        Block
           Source: "{\r\n            TokenPoolExhausting(_ownerBalance);\r\n        }"
          ExpressionStatement
             Gas costs: [???]
             Source: "TokenPoolExhausting(_ownerBalance)"
            FunctionCall
               Type: tuple()
               Source: "TokenPoolExhausting(_ownerBalance)"
              Identifier TokenPoolExhausting
                 Type: function (uint256)
                 Source: "TokenPoolExhausting"
              Identifier _ownerBalance
                 Type: uint256
                 Source: "_ownerBalance"
      ExpressionStatement
         Gas costs: [???]
         Source: "TokenPurchased(_to, msg.value, _tokens)"
        FunctionCall
           Type: tuple()
           Source: "TokenPurchased(_to, msg.value, _tokens)"
          Identifier TokenPurchased
             Type: function (address,uint256,uint256)
             Source: "TokenPurchased"
          Identifier _to
             Type: address
             Source: "_to"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _tokens
             Type: uint256
             Source: "_tokens"
      ExpressionStatement
         Gas costs: [???]
         Source: "Transfer(owner, _to, _tokens)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(owner, _to, _tokens)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _tokens
             Type: uint256
             Source: "_tokens"
  FunctionDefinition "__redeem_impl"
     Source: "function __redeem_impl(address _from, uint256 _tokens) private {\r\n        address deadTokensAddress = store.getSettingAddress(\"deadTokensAddress\");\r\n        address feeReturnAddress = store.getSettingAddress(\"feeReturnAddress\");\r\n        uint256 _fee = validator.validateAndGetRedeemFee(owner, _from, _tokens);\r\n\r\n        store.transfer(_from, deadTokensAddress, _tokens);\r\n        store.transfer(_from, feeReturnAddress, _fee);\r\n\r\n        TokenSold(_from, _tokens);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, uint256 _tokens)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_tokens"
         Type: uint256
         Source: "uint256 _tokens"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        address deadTokensAddress = store.getSettingAddress(\"deadTokensAddress\");\r\n        address feeReturnAddress = store.getSettingAddress(\"feeReturnAddress\");\r\n        uint256 _fee = validator.validateAndGetRedeemFee(owner, _from, _tokens);\r\n\r\n        store.transfer(_from, deadTokensAddress, _tokens);\r\n        store.transfer(_from, feeReturnAddress, _fee);\r\n\r\n        TokenSold(_from, _tokens);\r\n    }"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "address deadTokensAddress = store.getSettingAddress(\"deadTokensAddress\")"
        VariableDeclaration "deadTokensAddress"
           Type: address
           Source: "address deadTokensAddress"
          ElementaryTypeName address
             Source: "address"
        FunctionCall
           Type: address
           Source: "store.getSettingAddress(\"deadTokensAddress\")"
          MemberAccess to member getSettingAddress
             Type: function (string memory) view external returns (address)
             Source: "store.getSettingAddress"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Literal, token: [no token] value: deadTokensAddress
             Type: literal_string "deadTokensAddress"
             Source: "\"deadTokensAddress\""
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "address feeReturnAddress = store.getSettingAddress(\"feeReturnAddress\")"
        VariableDeclaration "feeReturnAddress"
           Type: address
           Source: "address feeReturnAddress"
          ElementaryTypeName address
             Source: "address"
        FunctionCall
           Type: address
           Source: "store.getSettingAddress(\"feeReturnAddress\")"
          MemberAccess to member getSettingAddress
             Type: function (string memory) view external returns (address)
             Source: "store.getSettingAddress"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Literal, token: [no token] value: feeReturnAddress
             Type: literal_string "feeReturnAddress"
             Source: "\"feeReturnAddress\""
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "uint256 _fee = validator.validateAndGetRedeemFee(owner, _from, _tokens)"
        VariableDeclaration "_fee"
           Type: uint256
           Source: "uint256 _fee"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "validator.validateAndGetRedeemFee(owner, _from, _tokens)"
          MemberAccess to member validateAndGetRedeemFee
             Type: function (address,address,uint256) view external returns (uint256)
             Source: "validator.validateAndGetRedeemFee"
            Identifier validator
               Type: contract TokenValidator
               Source: "validator"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _tokens
             Type: uint256
             Source: "_tokens"
      ExpressionStatement
         Gas costs: [???]
         Source: "store.transfer(_from, deadTokensAddress, _tokens)"
        FunctionCall
           Type: uint256
           Source: "store.transfer(_from, deadTokensAddress, _tokens)"
          MemberAccess to member transfer
             Type: function (address,address,uint256) external returns (uint256)
             Source: "store.transfer"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier deadTokensAddress
             Type: address
             Source: "deadTokensAddress"
          Identifier _tokens
             Type: uint256
             Source: "_tokens"
      ExpressionStatement
         Gas costs: [???]
         Source: "store.transfer(_from, feeReturnAddress, _fee)"
        FunctionCall
           Type: uint256
           Source: "store.transfer(_from, feeReturnAddress, _fee)"
          MemberAccess to member transfer
             Type: function (address,address,uint256) external returns (uint256)
             Source: "store.transfer"
            Identifier store
               Type: contract TokenStorage
               Source: "store"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier feeReturnAddress
             Type: address
             Source: "feeReturnAddress"
          Identifier _fee
             Type: uint256
             Source: "_fee"
      ExpressionStatement
         Gas costs: [???]
         Source: "TokenSold(_from, _tokens)"
        FunctionCall
           Type: tuple()
           Source: "TokenSold(_from, _tokens)"
          Identifier TokenSold
             Type: function (address,uint256)
             Source: "TokenSold"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _tokens
             Type: uint256
             Source: "_tokens"
