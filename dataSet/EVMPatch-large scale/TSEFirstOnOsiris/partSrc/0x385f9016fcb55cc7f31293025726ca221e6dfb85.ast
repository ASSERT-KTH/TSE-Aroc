Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0x385f9016fcb55cc7f31293025726ca221e6dfb85.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.8;"
ContractDefinition "Owned"
   Source: "contract Owned {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}"
  VariableDeclaration "owner"
     Type: address
     Gas costs: [???]
     Source: "address public owner"
    ElementaryTypeName address
       Source: "address"
  EventDefinition "OwnershipTransferred"
     Gas costs: 0
     Source: "event OwnershipTransferred(address indexed _from, address indexed _to);"
    ParameterList
       Source: "(address indexed _from, address indexed _to)"
      VariableDeclaration "_from"
         Type: address
         Source: "address indexed _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address indexed _to"
        ElementaryTypeName address
           Source: "address"
  FunctionDefinition "Owned" - public
     Source: "function Owned() {\r\n        owner = msg.sender;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        owner = msg.sender;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "owner = msg.sender"
        Assignment using operator =
           Type: address
           Source: "owner = msg.sender"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  ModifierDefinition "onlyOwner"
     Source: "modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }"
      IfStatement
         Source: "if (msg.sender != owner) throw"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 518
           Source: "msg.sender != owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier owner
             Type: address
             Source: "owner"
        Throw
           Gas costs: 12
           Source: "throw"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "transferOwnership" - public
     Source: "function transferOwnership(address newOwner) onlyOwner {\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address newOwner)"
      VariableDeclaration "newOwner"
         Type: address
         Source: "address newOwner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }"
      ExpressionStatement
         Gas costs: 1790
         Source: "OwnershipTransferred(owner, newOwner)"
        FunctionCall
           Type: tuple()
           Source: "OwnershipTransferred(owner, newOwner)"
          Identifier OwnershipTransferred
             Type: function (address,address)
             Source: "OwnershipTransferred"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier newOwner
             Type: address
             Source: "newOwner"
      ExpressionStatement
         Gas costs: 20267
         Source: "owner = newOwner"
        Assignment using operator =
           Type: address
           Source: "owner = newOwner"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier newOwner
             Type: address
             Source: "newOwner"
ContractDefinition "ERC20Token"
   Source: "contract ERC20Token is Owned {\r\n    uint256 _totalSupply = 0;\r\n\r\n    // Balances for each account\r\n    mapping(address => uint256) balances;\r\n\r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    // Get the total token supply\r\n    function totalSupply() constant returns (uint256 totalSupply) {\r\n        totalSupply = _totalSupply;\r\n    }\r\n\r\n    // Get the account balance of another account with address _owner\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // Send _value amount of tokens to address _to\r\n    function transfer(address _to, uint256 _amount) returns (bool success) {\r\n        if (balances[msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the\r\n    // _value amount. If this function is called again it overwrites the\r\n    // current allowance with _value.\r\n    function approve(\r\n        address _spender,\r\n        uint256 _amount\r\n    ) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    // Spender of tokens transfer an amount of tokens from the token owner's\r\n    // balance to the spender's account. The owner of the tokens must already\r\n    // have approve(...)-d this transfer\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) returns (bool success) {\r\n        if (balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    function allowance(\r\n        address _owner, \r\n        address _spender\r\n    ) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender,\r\n        uint256 _value);\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Owned"
    UserDefinedTypeName "Owned"
       Source: "Owned"
  VariableDeclaration "_totalSupply"
     Type: uint256
     Gas costs: 0
     Source: "uint256 _totalSupply = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping(address => uint256) balances"
    Mapping
       Source: "mapping(address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "allowed"
     Type: mapping(address => mapping(address => uint256))
     Gas costs: 0
     Source: "mapping(address => mapping (address => uint256)) allowed"
    Mapping
       Source: "mapping(address => mapping (address => uint256))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping (address => uint256)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "totalSupply" - public - const
     Source: "function totalSupply() constant returns (uint256 totalSupply) {\r\n        totalSupply = _totalSupply;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256 totalSupply)"
      VariableDeclaration "totalSupply"
         Type: uint256
         Source: "uint256 totalSupply"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        totalSupply = _totalSupply;\r\n    }"
      ExpressionStatement
         Gas costs: 208
         Source: "totalSupply = _totalSupply"
        Assignment using operator =
           Type: uint256
           Source: "totalSupply = _totalSupply"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          Identifier _totalSupply
             Type: uint256
             Source: "_totalSupply"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return balances[_owner];\r\n    }"
      Return
         Gas costs: 304
         Source: "return balances[_owner]"
        IndexAccess
           Type: uint256
           Source: "balances[_owner]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          Identifier _owner
             Type: address
             Source: "_owner"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _amount) returns (bool success) {\r\n        if (balances[msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _amount)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        if (balances[msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }"
      IfStatement
         Source: "if (balances[msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 961
           Source: "balances[msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]"
          BinaryOperation using operator &&
             Type: bool
             Source: "balances[msg.sender] >= _amount\r\n            && _amount > 0"
            BinaryOperation using operator >=
               Type: bool
               Source: "balances[msg.sender] >= _amount"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
            BinaryOperation using operator >
               Type: bool
               Source: "_amount > 0"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
          BinaryOperation using operator >
             Type: bool
             Source: "balances[_to] + _amount > balances[_to]"
            BinaryOperation using operator +
               Type: uint256
               Source: "balances[_to] + _amount"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
            IndexAccess
               Type: uint256
               Source: "balances[_to]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _to
                 Type: address
                 Source: "_to"
        Block
           Source: "{\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        }"
          ExpressionStatement
             Gas costs: 20328
             Source: "balances[msg.sender] -= _amount"
            Assignment using operator -=
               Type: uint256
               Source: "balances[msg.sender] -= _amount"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
          ExpressionStatement
             Gas costs: 20323
             Source: "balances[_to] += _amount"
            Assignment using operator +=
               Type: uint256
               Source: "balances[_to] += _amount"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
          ExpressionStatement
             Gas costs: [???]
             Source: "Transfer(msg.sender, _to, _amount)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(msg.sender, _to, _amount)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{\r\n            return false;\r\n        }"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "approve" - public
     Source: "function approve(\r\n        address _spender,\r\n        uint256 _amount\r\n    ) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(\r\n        address _spender,\r\n        uint256 _amount\r\n    )"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 20199
         Source: "allowed[msg.sender][_spender] = _amount"
        Assignment using operator =
           Type: uint256
           Source: "allowed[msg.sender][_spender] = _amount"
          IndexAccess
             Type: uint256
             Source: "allowed[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[msg.sender]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      ExpressionStatement
         Gas costs: [???]
         Source: "Approval(msg.sender, _spender, _amount)"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender, _spender, _amount)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) returns (bool success) {\r\n        if (balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    )"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        if (balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }"
      IfStatement
         Source: "if (balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 1381
           Source: "balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]"
          BinaryOperation using operator &&
             Type: bool
             Source: "balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0"
            BinaryOperation using operator &&
               Type: bool
               Source: "balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "balances[_from] >= _amount"
                IndexAccess
                   Type: uint256
                   Source: "balances[_from]"
                  Identifier balances
                     Type: mapping(address => uint256)
                     Source: "balances"
                  Identifier _from
                     Type: address
                     Source: "_from"
                Identifier _amount
                   Type: uint256
                   Source: "_amount"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "allowed[_from][msg.sender] >= _amount"
                IndexAccess
                   Type: uint256
                   Source: "allowed[_from][msg.sender]"
                  IndexAccess
                     Type: mapping(address => uint256)
                     Source: "allowed[_from]"
                    Identifier allowed
                       Type: mapping(address => mapping(address => uint256))
                       Source: "allowed"
                    Identifier _from
                       Type: address
                       Source: "_from"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
                Identifier _amount
                   Type: uint256
                   Source: "_amount"
            BinaryOperation using operator >
               Type: bool
               Source: "_amount > 0"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
          BinaryOperation using operator >
             Type: bool
             Source: "balances[_to] + _amount > balances[_to]"
            BinaryOperation using operator +
               Type: uint256
               Source: "balances[_to] + _amount"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
            IndexAccess
               Type: uint256
               Source: "balances[_to]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _to
                 Type: address
                 Source: "_to"
        Block
           Source: "{\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        }"
          ExpressionStatement
             Gas costs: 20329
             Source: "balances[_from] -= _amount"
            Assignment using operator -=
               Type: uint256
               Source: "balances[_from] -= _amount"
              IndexAccess
                 Type: uint256
                 Source: "balances[_from]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _from
                   Type: address
                   Source: "_from"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
          ExpressionStatement
             Gas costs: 20412
             Source: "allowed[_from][msg.sender] -= _amount"
            Assignment using operator -=
               Type: uint256
               Source: "allowed[_from][msg.sender] -= _amount"
              IndexAccess
                 Type: uint256
                 Source: "allowed[_from][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[_from]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  Identifier _from
                     Type: address
                     Source: "_from"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
          ExpressionStatement
             Gas costs: 20323
             Source: "balances[_to] += _amount"
            Assignment using operator +=
               Type: uint256
               Source: "balances[_to] += _amount"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
          ExpressionStatement
             Gas costs: [???]
             Source: "Transfer(_from, _to, _amount)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(_from, _to, _amount)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              Identifier _from
                 Type: address
                 Source: "_from"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{\r\n            return false;\r\n        }"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(\r\n        address _owner, \r\n        address _spender\r\n    ) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(\r\n        address _owner, \r\n        address _spender\r\n    )"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint256 remaining"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return allowed[_owner][_spender];\r\n    }"
      Return
         Gas costs: 394
         Source: "return allowed[_owner][_spender]"
        IndexAccess
           Type: uint256
           Source: "allowed[_owner][_spender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowed[_owner]"
            Identifier allowed
               Type: mapping(address => mapping(address => uint256))
               Source: "allowed"
            Identifier _owner
               Type: address
               Source: "_owner"
          Identifier _spender
             Type: address
             Source: "_spender"
  EventDefinition "Transfer"
     Gas costs: 0
     Source: "event Transfer(address indexed _from, address indexed _to, uint256 _value);"
    ParameterList
       Source: "(address indexed _from, address indexed _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address indexed _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address indexed _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Approval"
     Gas costs: 0
     Source: "event Approval(address indexed _owner, address indexed _spender,\r\n        uint256 _value);"
    ParameterList
       Source: "(address indexed _owner, address indexed _spender,\r\n        uint256 _value)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address indexed _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address indexed _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
ContractDefinition "BokkyPooBahsEtherRefundablePrize"
   Source: "contract BokkyPooBahsEtherRefundablePrize is ERC20Token {\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token information\r\n    // ------------------------------------------------------------------------\r\n    string public constant symbol = \"BERP\";\r\n    string public constant name = \"BokkyPooBah Ether Refundable Prize\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 public deployedAt;\r\n\r\n    function BokkyPooBahsEtherRefundablePrize() {\r\n        deployedAt = now;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Members buy tokens from this contract at this price\r\n    //\r\n    // This is a maximum price that the tokens should be bought at, as buyers\r\n    // can always buy tokens from this contract for this price\r\n    //\r\n    // Check out the BARF prices on https://cryptoderivatives.market/ to see\r\n    // if you can buy these tokens for less than this maximum price\r\n    // ------------------------------------------------------------------------\r\n    function buyPrice() constant returns (uint256) {\r\n        return buyPriceAt(now);\r\n    }\r\n\r\n    function buyPriceAt(uint256 at) constant returns (uint256) {\r\n        if (at < (deployedAt + 7 days)) {\r\n            return 10 * 10**14;\r\n        } else if (at < (deployedAt + 30 days)) {\r\n            return 11 * 10**14;\r\n        } else if (at < (deployedAt + 60 days)) {\r\n            return 12 * 10**15;\r\n        } else if (at < (deployedAt + 90 days)) {\r\n            return 13 * 10**15;\r\n        } else if (at < (deployedAt + 365 days)) {\r\n            return 15 * 10**16;\r\n        } else {\r\n            return 10**21;\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Members can always sell to the contract at 1 BARF = 0.01 ETH\r\n    //\r\n    // This is a minimum price that the tokens should sell for, as the owner of\r\n    // the token can always sell tokens to this contract at this price\r\n    //\r\n    // Check out the BARF prices on https://cryptoderivatives.market/ to see\r\n    // if you can sell these tokens for more than this minimum price\r\n    // ------------------------------------------------------------------------\r\n    function sellPrice() constant returns (uint256) {\r\n        return 10**15;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner Withdrawal\r\n    // ------------------------------------------------------------------------\r\n    function ownerWithdraw(uint256 amount) onlyOwner {\r\n        uint256 maxWithdrawalAmount = amountOfEthersOwnerCanWithdraw();\r\n        if (amount > maxWithdrawalAmount) {\r\n            amount = maxWithdrawalAmount;\r\n        }\r\n        if (!owner.send(amount)) throw;\r\n        Withdrawn(amount, maxWithdrawalAmount - amount);\r\n    }\r\n    event Withdrawn(uint256 amount, uint256 remainingWithdrawal);\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Receive deposits\r\n    // ------------------------------------------------------------------------\r\n    function deposit() payable {\r\n        Deposited(msg.value, this.balance);\r\n    }\r\n    event Deposited(uint256 amount, uint256 balance);\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Buy and Sell tokens from/to the contract\r\n    // ------------------------------------------------------------------------\r\n    function () payable {\r\n        buyTokens();\r\n    }\r\n\r\n    function buyTokens() payable {\r\n        if (msg.value > 0) {\r\n            uint tokens = msg.value * 1 ether / buyPrice();\r\n            _totalSupply += tokens;\r\n            balances[msg.sender] += tokens;\r\n            TokensBought(msg.sender, msg.value, this.balance, tokens,\r\n                 _totalSupply, buyPrice());\r\n        }\r\n    }\r\n    event TokensBought(address indexed buyer, uint256 ethers, \r\n        uint256 newEtherBalance, uint256 tokens, uint256 newTotalSupply, \r\n        uint256 buyPrice);\r\n\r\n    function sellTokens(uint256 amountOfTokens) {\r\n        if (amountOfTokens > balances[msg.sender]) throw;\r\n        balances[msg.sender] -= amountOfTokens;\r\n        _totalSupply -= amountOfTokens;\r\n        uint256 ethersToSend = amountOfTokens * sellPrice() / 1 ether;\r\n        if (!msg.sender.send(ethersToSend)) throw;\r\n        TokensSold(msg.sender, ethersToSend, this.balance, amountOfTokens,\r\n            _totalSupply, sellPrice());\r\n    }\r\n    event TokensSold(address indexed seller, uint256 ethers, \r\n        uint256 newEtherBalance, uint256 tokens, uint256 newTotalSupply, \r\n        uint256 sellPrice);\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Information function\r\n    // ------------------------------------------------------------------------\r\n    function amountOfEthersOwnerCanWithdraw() constant returns (uint256) {\r\n        uint256 etherBalance = this.balance;\r\n        uint256 ethersSupportingTokens = _totalSupply * sellPrice() / 1 ether;\r\n        if (etherBalance > ethersSupportingTokens) {\r\n            return etherBalance - ethersSupportingTokens;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function currentEtherBalance() constant returns (uint256) {\r\n        return this.balance;\r\n    }\r\n\r\n    function currentTokenBalance() constant returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "ERC20Token"
    UserDefinedTypeName "ERC20Token"
       Source: "ERC20Token"
  VariableDeclaration "symbol"
     Type: string memory
     Gas costs: [???]
     Source: "string public constant symbol = \"BERP\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: BERP
       Type: literal_string "BERP"
       Source: "\"BERP\""
  VariableDeclaration "name"
     Type: string memory
     Gas costs: [???]
     Source: "string public constant name = \"BokkyPooBah Ether Refundable Prize\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: BokkyPooBah Ether Refundable Prize
       Type: literal_string "BokkyPooBah Ether Refundable Prize"
       Source: "\"BokkyPooBah Ether Refundable Prize\""
  VariableDeclaration "decimals"
     Type: uint8
     Gas costs: [???]
     Source: "uint8 public constant decimals = 18"
    ElementaryTypeName uint8
       Source: "uint8"
    Literal, token: [no token] value: 18
       Type: int_const 18
       Source: "18"
  VariableDeclaration "deployedAt"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public deployedAt"
    ElementaryTypeName uint256
       Source: "uint256"
  FunctionDefinition "BokkyPooBahsEtherRefundablePrize" - public
     Source: "function BokkyPooBahsEtherRefundablePrize() {\r\n        deployedAt = now;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        deployedAt = now;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "deployedAt = now"
        Assignment using operator =
           Type: uint256
           Source: "deployedAt = now"
          Identifier deployedAt
             Type: uint256
             Source: "deployedAt"
          Identifier now
             Type: uint256
             Source: "now"
  FunctionDefinition "buyPrice" - public - const
     Source: "function buyPrice() constant returns (uint256) {\r\n        return buyPriceAt(now);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return buyPriceAt(now);\r\n    }"
      Return
         Gas costs: 22
         Source: "return buyPriceAt(now)"
        FunctionCall
           Type: uint256
           Source: "buyPriceAt(now)"
          Identifier buyPriceAt
             Type: function (uint256) view returns (uint256)
             Source: "buyPriceAt"
          Identifier now
             Type: uint256
             Source: "now"
  FunctionDefinition "buyPriceAt" - public - const
     Source: "function buyPriceAt(uint256 at) constant returns (uint256) {\r\n        if (at < (deployedAt + 7 days)) {\r\n            return 10 * 10**14;\r\n        } else if (at < (deployedAt + 30 days)) {\r\n            return 11 * 10**14;\r\n        } else if (at < (deployedAt + 60 days)) {\r\n            return 12 * 10**15;\r\n        } else if (at < (deployedAt + 90 days)) {\r\n            return 13 * 10**15;\r\n        } else if (at < (deployedAt + 365 days)) {\r\n            return 15 * 10**16;\r\n        } else {\r\n            return 10**21;\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 at)"
      VariableDeclaration "at"
         Type: uint256
         Source: "uint256 at"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        if (at < (deployedAt + 7 days)) {\r\n            return 10 * 10**14;\r\n        } else if (at < (deployedAt + 30 days)) {\r\n            return 11 * 10**14;\r\n        } else if (at < (deployedAt + 60 days)) {\r\n            return 12 * 10**15;\r\n        } else if (at < (deployedAt + 90 days)) {\r\n            return 13 * 10**15;\r\n        } else if (at < (deployedAt + 365 days)) {\r\n            return 15 * 10**16;\r\n        } else {\r\n            return 10**21;\r\n        }\r\n    }"
      IfStatement
         Source: "if (at < (deployedAt + 7 days)) {\r\n            return 10 * 10**14;\r\n        } else if (at < (deployedAt + 30 days)) {\r\n            return 11 * 10**14;\r\n        } else if (at < (deployedAt + 60 days)) {\r\n            return 12 * 10**15;\r\n        } else if (at < (deployedAt + 90 days)) {\r\n            return 13 * 10**15;\r\n        } else if (at < (deployedAt + 365 days)) {\r\n            return 15 * 10**16;\r\n        } else {\r\n            return 10**21;\r\n        }"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 215
           Source: "at < (deployedAt + 7 days)"
          Identifier at
             Type: uint256
             Source: "at"
          TupleExpression
             Type: uint256
             Source: "(deployedAt + 7 days)"
            BinaryOperation using operator +
               Type: uint256
               Source: "deployedAt + 7 days"
              Identifier deployedAt
                 Type: uint256
                 Source: "deployedAt"
              Literal, token: [no token] value: 7
                 Type: int_const 604800
                 Source: "7 days"
        Block
           Source: "{\r\n            return 10 * 10**14;\r\n        }"
          Return
             Gas costs: 19
             Source: "return 10 * 10**14"
            BinaryOperation using operator *
               Type: int_const 1000000000000000
               Source: "10 * 10**14"
              Literal, token: [no token] value: 10
                 Type: int_const 10
                 Source: "10"
              BinaryOperation using operator **
                 Type: int_const 100000000000000
                 Source: "10**14"
                Literal, token: [no token] value: 10
                   Type: int_const 10
                   Source: "10"
                Literal, token: [no token] value: 14
                   Type: int_const 14
                   Source: "14"
        IfStatement
           Source: "if (at < (deployedAt + 30 days)) {\r\n            return 11 * 10**14;\r\n        } else if (at < (deployedAt + 60 days)) {\r\n            return 12 * 10**15;\r\n        } else if (at < (deployedAt + 90 days)) {\r\n            return 13 * 10**15;\r\n        } else if (at < (deployedAt + 365 days)) {\r\n            return 15 * 10**16;\r\n        } else {\r\n            return 10**21;\r\n        }"
          BinaryOperation using operator <
             Type: bool
             Gas costs: 215
             Source: "at < (deployedAt + 30 days)"
            Identifier at
               Type: uint256
               Source: "at"
            TupleExpression
               Type: uint256
               Source: "(deployedAt + 30 days)"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "deployedAt + 30 days"
                Identifier deployedAt
                   Type: uint256
                   Source: "deployedAt"
                Literal, token: [no token] value: 30
                   Type: int_const 2592000
                   Source: "30 days"
          Block
             Source: "{\r\n            return 11 * 10**14;\r\n        }"
            Return
               Gas costs: 19
               Source: "return 11 * 10**14"
              BinaryOperation using operator *
                 Type: int_const 1100000000000000
                 Source: "11 * 10**14"
                Literal, token: [no token] value: 11
                   Type: int_const 11
                   Source: "11"
                BinaryOperation using operator **
                   Type: int_const 100000000000000
                   Source: "10**14"
                  Literal, token: [no token] value: 10
                     Type: int_const 10
                     Source: "10"
                  Literal, token: [no token] value: 14
                     Type: int_const 14
                     Source: "14"
          IfStatement
             Source: "if (at < (deployedAt + 60 days)) {\r\n            return 12 * 10**15;\r\n        } else if (at < (deployedAt + 90 days)) {\r\n            return 13 * 10**15;\r\n        } else if (at < (deployedAt + 365 days)) {\r\n            return 15 * 10**16;\r\n        } else {\r\n            return 10**21;\r\n        }"
            BinaryOperation using operator <
               Type: bool
               Gas costs: 215
               Source: "at < (deployedAt + 60 days)"
              Identifier at
                 Type: uint256
                 Source: "at"
              TupleExpression
                 Type: uint256
                 Source: "(deployedAt + 60 days)"
                BinaryOperation using operator +
                   Type: uint256
                   Source: "deployedAt + 60 days"
                  Identifier deployedAt
                     Type: uint256
                     Source: "deployedAt"
                  Literal, token: [no token] value: 60
                     Type: int_const 5184000
                     Source: "60 days"
            Block
               Source: "{\r\n            return 12 * 10**15;\r\n        }"
              Return
                 Gas costs: 19
                 Source: "return 12 * 10**15"
                BinaryOperation using operator *
                   Type: int_const 12000000000000000
                   Source: "12 * 10**15"
                  Literal, token: [no token] value: 12
                     Type: int_const 12
                     Source: "12"
                  BinaryOperation using operator **
                     Type: int_const 1000000000000000
                     Source: "10**15"
                    Literal, token: [no token] value: 10
                       Type: int_const 10
                       Source: "10"
                    Literal, token: [no token] value: 15
                       Type: int_const 15
                       Source: "15"
            IfStatement
               Source: "if (at < (deployedAt + 90 days)) {\r\n            return 13 * 10**15;\r\n        } else if (at < (deployedAt + 365 days)) {\r\n            return 15 * 10**16;\r\n        } else {\r\n            return 10**21;\r\n        }"
              BinaryOperation using operator <
                 Type: bool
                 Gas costs: 215
                 Source: "at < (deployedAt + 90 days)"
                Identifier at
                   Type: uint256
                   Source: "at"
                TupleExpression
                   Type: uint256
                   Source: "(deployedAt + 90 days)"
                  BinaryOperation using operator +
                     Type: uint256
                     Source: "deployedAt + 90 days"
                    Identifier deployedAt
                       Type: uint256
                       Source: "deployedAt"
                    Literal, token: [no token] value: 90
                       Type: int_const 7776000
                       Source: "90 days"
              Block
                 Source: "{\r\n            return 13 * 10**15;\r\n        }"
                Return
                   Gas costs: 19
                   Source: "return 13 * 10**15"
                  BinaryOperation using operator *
                     Type: int_const 13000000000000000
                     Source: "13 * 10**15"
                    Literal, token: [no token] value: 13
                       Type: int_const 13
                       Source: "13"
                    BinaryOperation using operator **
                       Type: int_const 1000000000000000
                       Source: "10**15"
                      Literal, token: [no token] value: 10
                         Type: int_const 10
                         Source: "10"
                      Literal, token: [no token] value: 15
                         Type: int_const 15
                         Source: "15"
              IfStatement
                 Source: "if (at < (deployedAt + 365 days)) {\r\n            return 15 * 10**16;\r\n        } else {\r\n            return 10**21;\r\n        }"
                BinaryOperation using operator <
                   Type: bool
                   Gas costs: 215
                   Source: "at < (deployedAt + 365 days)"
                  Identifier at
                     Type: uint256
                     Source: "at"
                  TupleExpression
                     Type: uint256
                     Source: "(deployedAt + 365 days)"
                    BinaryOperation using operator +
                       Type: uint256
                       Source: "deployedAt + 365 days"
                      Identifier deployedAt
                         Type: uint256
                         Source: "deployedAt"
                      Literal, token: [no token] value: 365
                         Type: int_const 31536000
                         Source: "365 days"
                Block
                   Source: "{\r\n            return 15 * 10**16;\r\n        }"
                  Return
                     Gas costs: 19
                     Source: "return 15 * 10**16"
                    BinaryOperation using operator *
                       Type: int_const 150000000000000000
                       Source: "15 * 10**16"
                      Literal, token: [no token] value: 15
                         Type: int_const 15
                         Source: "15"
                      BinaryOperation using operator **
                         Type: int_const 10000000000000000
                         Source: "10**16"
                        Literal, token: [no token] value: 10
                           Type: int_const 10
                           Source: "10"
                        Literal, token: [no token] value: 16
                           Type: int_const 16
                           Source: "16"
                Block
                   Source: "{\r\n            return 10**21;\r\n        }"
                  Return
                     Gas costs: 8
                     Source: "return 10**21"
                    BinaryOperation using operator **
                       Type: int_const 1000000000000000000000
                       Source: "10**21"
                      Literal, token: [no token] value: 10
                         Type: int_const 10
                         Source: "10"
                      Literal, token: [no token] value: 21
                         Type: int_const 21
                         Source: "21"
  FunctionDefinition "sellPrice" - public - const
     Source: "function sellPrice() constant returns (uint256) {\r\n        return 10**15;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return 10**15;\r\n    }"
      Return
         Gas costs: 8
         Source: "return 10**15"
        BinaryOperation using operator **
           Type: int_const 1000000000000000
           Source: "10**15"
          Literal, token: [no token] value: 10
             Type: int_const 10
             Source: "10"
          Literal, token: [no token] value: 15
             Type: int_const 15
             Source: "15"
  FunctionDefinition "ownerWithdraw" - public
     Source: "function ownerWithdraw(uint256 amount) onlyOwner {\r\n        uint256 maxWithdrawalAmount = amountOfEthersOwnerCanWithdraw();\r\n        if (amount > maxWithdrawalAmount) {\r\n            amount = maxWithdrawalAmount;\r\n        }\r\n        if (!owner.send(amount)) throw;\r\n        Withdrawn(amount, maxWithdrawalAmount - amount);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 amount)"
      VariableDeclaration "amount"
         Type: uint256
         Source: "uint256 amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        uint256 maxWithdrawalAmount = amountOfEthersOwnerCanWithdraw();\r\n        if (amount > maxWithdrawalAmount) {\r\n            amount = maxWithdrawalAmount;\r\n        }\r\n        if (!owner.send(amount)) throw;\r\n        Withdrawn(amount, maxWithdrawalAmount - amount);\r\n    }"
      VariableDeclarationStatement
         Gas costs: 23
         Source: "uint256 maxWithdrawalAmount = amountOfEthersOwnerCanWithdraw()"
        VariableDeclaration "maxWithdrawalAmount"
           Type: uint256
           Source: "uint256 maxWithdrawalAmount"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "amountOfEthersOwnerCanWithdraw()"
          Identifier amountOfEthersOwnerCanWithdraw
             Type: function () view returns (uint256)
             Source: "amountOfEthersOwnerCanWithdraw"
      IfStatement
         Source: "if (amount > maxWithdrawalAmount) {\r\n            amount = maxWithdrawalAmount;\r\n        }"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 9
           Source: "amount > maxWithdrawalAmount"
          Identifier amount
             Type: uint256
             Source: "amount"
          Identifier maxWithdrawalAmount
             Type: uint256
             Source: "maxWithdrawalAmount"
        Block
           Source: "{\r\n            amount = maxWithdrawalAmount;\r\n        }"
          ExpressionStatement
             Gas costs: 8
             Source: "amount = maxWithdrawalAmount"
            Assignment using operator =
               Type: uint256
               Source: "amount = maxWithdrawalAmount"
              Identifier amount
                 Type: uint256
                 Source: "amount"
              Identifier maxWithdrawalAmount
                 Type: uint256
                 Source: "maxWithdrawalAmount"
      IfStatement
         Source: "if (!owner.send(amount)) throw"
        UnaryOperation (prefix) !
           Type: bool
           Gas costs: [???]
           Source: "!owner.send(amount)"
          FunctionCall
             Type: bool
             Source: "owner.send(amount)"
            MemberAccess to member send
               Type: function (uint256) returns (bool)
               Source: "owner.send"
              Identifier owner
                 Type: address
                 Source: "owner"
            Identifier amount
               Type: uint256
               Source: "amount"
        Throw
           Gas costs: 6
           Source: "throw"
      ExpressionStatement
         Gas costs: [???]
         Source: "Withdrawn(amount, maxWithdrawalAmount - amount)"
        FunctionCall
           Type: tuple()
           Source: "Withdrawn(amount, maxWithdrawalAmount - amount)"
          Identifier Withdrawn
             Type: function (uint256,uint256)
             Source: "Withdrawn"
          Identifier amount
             Type: uint256
             Source: "amount"
          BinaryOperation using operator -
             Type: uint256
             Source: "maxWithdrawalAmount - amount"
            Identifier maxWithdrawalAmount
               Type: uint256
               Source: "maxWithdrawalAmount"
            Identifier amount
               Type: uint256
               Source: "amount"
  EventDefinition "Withdrawn"
     Gas costs: 0
     Source: "event Withdrawn(uint256 amount, uint256 remainingWithdrawal);"
    ParameterList
       Source: "(uint256 amount, uint256 remainingWithdrawal)"
      VariableDeclaration "amount"
         Type: uint256
         Source: "uint256 amount"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "remainingWithdrawal"
         Type: uint256
         Source: "uint256 remainingWithdrawal"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "deposit" - public
     Source: "function deposit() payable {\r\n        Deposited(msg.value, this.balance);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        Deposited(msg.value, this.balance);\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "Deposited(msg.value, this.balance)"
        FunctionCall
           Type: tuple()
           Source: "Deposited(msg.value, this.balance)"
          Identifier Deposited
             Type: function (uint256,uint256)
             Source: "Deposited"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
          MemberAccess to member balance
             Type: uint256
             Source: "this.balance"
            Identifier this
               Type: contract BokkyPooBahsEtherRefundablePrize
               Source: "this"
  EventDefinition "Deposited"
     Gas costs: 0
     Source: "event Deposited(uint256 amount, uint256 balance);"
    ParameterList
       Source: "(uint256 amount, uint256 balance)"
      VariableDeclaration "amount"
         Type: uint256
         Source: "uint256 amount"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "" - public
     Source: "function () payable {\r\n        buyTokens();\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        buyTokens();\r\n    }"
      ExpressionStatement
         Gas costs: 4
         Source: "buyTokens()"
        FunctionCall
           Type: tuple()
           Source: "buyTokens()"
          Identifier buyTokens
             Type: function ()
             Source: "buyTokens"
  FunctionDefinition "buyTokens" - public
     Source: "function buyTokens() payable {\r\n        if (msg.value > 0) {\r\n            uint tokens = msg.value * 1 ether / buyPrice();\r\n            _totalSupply += tokens;\r\n            balances[msg.sender] += tokens;\r\n            TokensBought(msg.sender, msg.value, this.balance, tokens,\r\n                 _totalSupply, buyPrice());\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if (msg.value > 0) {\r\n            uint tokens = msg.value * 1 ether / buyPrice();\r\n            _totalSupply += tokens;\r\n            balances[msg.sender] += tokens;\r\n            TokensBought(msg.sender, msg.value, this.balance, tokens,\r\n                 _totalSupply, buyPrice());\r\n        }\r\n    }"
      IfStatement
         Source: "if (msg.value > 0) {\r\n            uint tokens = msg.value * 1 ether / buyPrice();\r\n            _totalSupply += tokens;\r\n            balances[msg.sender] += tokens;\r\n            TokensBought(msg.sender, msg.value, this.balance, tokens,\r\n                 _totalSupply, buyPrice());\r\n        }"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 8
           Source: "msg.value > 0"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n            uint tokens = msg.value * 1 ether / buyPrice();\r\n            _totalSupply += tokens;\r\n            balances[msg.sender] += tokens;\r\n            TokensBought(msg.sender, msg.value, this.balance, tokens,\r\n                 _totalSupply, buyPrice());\r\n        }"
          VariableDeclarationStatement
             Gas costs: 61
             Source: "uint tokens = msg.value * 1 ether / buyPrice()"
            VariableDeclaration "tokens"
               Type: uint256
               Source: "uint tokens"
              ElementaryTypeName uint
                 Source: "uint"
            BinaryOperation using operator /
               Type: uint256
               Source: "msg.value * 1 ether / buyPrice()"
              BinaryOperation using operator *
                 Type: uint256
                 Source: "msg.value * 1 ether"
                MemberAccess to member value
                   Type: uint256
                   Source: "msg.value"
                  Identifier msg
                     Type: msg
                     Source: "msg"
                Literal, token: [no token] value: 1
                   Type: int_const 1000000000000000000
                   Source: "1 ether"
              FunctionCall
                 Type: uint256
                 Source: "buyPrice()"
                Identifier buyPrice
                   Type: function () view returns (uint256)
                   Source: "buyPrice"
          ExpressionStatement
             Gas costs: 20233
             Source: "_totalSupply += tokens"
            Assignment using operator +=
               Type: uint256
               Source: "_totalSupply += tokens"
              Identifier _totalSupply
                 Type: uint256
                 Source: "_totalSupply"
              Identifier tokens
                 Type: uint256
                 Source: "tokens"
          ExpressionStatement
             Gas costs: 20328
             Source: "balances[msg.sender] += tokens"
            Assignment using operator +=
               Type: uint256
               Source: "balances[msg.sender] += tokens"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier tokens
                 Type: uint256
                 Source: "tokens"
          ExpressionStatement
             Gas costs: [???]
             Source: "TokensBought(msg.sender, msg.value, this.balance, tokens,\r\n                 _totalSupply, buyPrice())"
            FunctionCall
               Type: tuple()
               Source: "TokensBought(msg.sender, msg.value, this.balance, tokens,\r\n                 _totalSupply, buyPrice())"
              Identifier TokensBought
                 Type: function (address,uint256,uint256,uint256,uint256,uint256)
                 Source: "TokensBought"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              MemberAccess to member value
                 Type: uint256
                 Source: "msg.value"
                Identifier msg
                   Type: msg
                   Source: "msg"
              MemberAccess to member balance
                 Type: uint256
                 Source: "this.balance"
                Identifier this
                   Type: contract BokkyPooBahsEtherRefundablePrize
                   Source: "this"
              Identifier tokens
                 Type: uint256
                 Source: "tokens"
              Identifier _totalSupply
                 Type: uint256
                 Source: "_totalSupply"
              FunctionCall
                 Type: uint256
                 Source: "buyPrice()"
                Identifier buyPrice
                   Type: function () view returns (uint256)
                   Source: "buyPrice"
  EventDefinition "TokensBought"
     Gas costs: 0
     Source: "event TokensBought(address indexed buyer, uint256 ethers, \r\n        uint256 newEtherBalance, uint256 tokens, uint256 newTotalSupply, \r\n        uint256 buyPrice);"
    ParameterList
       Source: "(address indexed buyer, uint256 ethers, \r\n        uint256 newEtherBalance, uint256 tokens, uint256 newTotalSupply, \r\n        uint256 buyPrice)"
      VariableDeclaration "buyer"
         Type: address
         Source: "address indexed buyer"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "ethers"
         Type: uint256
         Source: "uint256 ethers"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "newEtherBalance"
         Type: uint256
         Source: "uint256 newEtherBalance"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "tokens"
         Type: uint256
         Source: "uint256 tokens"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "newTotalSupply"
         Type: uint256
         Source: "uint256 newTotalSupply"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "buyPrice"
         Type: uint256
         Source: "uint256 buyPrice"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "sellTokens" - public
     Source: "function sellTokens(uint256 amountOfTokens) {\r\n        if (amountOfTokens > balances[msg.sender]) throw;\r\n        balances[msg.sender] -= amountOfTokens;\r\n        _totalSupply -= amountOfTokens;\r\n        uint256 ethersToSend = amountOfTokens * sellPrice() / 1 ether;\r\n        if (!msg.sender.send(ethersToSend)) throw;\r\n        TokensSold(msg.sender, ethersToSend, this.balance, amountOfTokens,\r\n            _totalSupply, sellPrice());\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 amountOfTokens)"
      VariableDeclaration "amountOfTokens"
         Type: uint256
         Source: "uint256 amountOfTokens"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if (amountOfTokens > balances[msg.sender]) throw;\r\n        balances[msg.sender] -= amountOfTokens;\r\n        _totalSupply -= amountOfTokens;\r\n        uint256 ethersToSend = amountOfTokens * sellPrice() / 1 ether;\r\n        if (!msg.sender.send(ethersToSend)) throw;\r\n        TokensSold(msg.sender, ethersToSend, this.balance, amountOfTokens,\r\n            _totalSupply, sellPrice());\r\n    }"
      IfStatement
         Source: "if (amountOfTokens > balances[msg.sender]) throw"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 304
           Source: "amountOfTokens > balances[msg.sender]"
          Identifier amountOfTokens
             Type: uint256
             Source: "amountOfTokens"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
        Throw
           Gas costs: 6
           Source: "throw"
      ExpressionStatement
         Gas costs: 20328
         Source: "balances[msg.sender] -= amountOfTokens"
        Assignment using operator -=
           Type: uint256
           Source: "balances[msg.sender] -= amountOfTokens"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier amountOfTokens
             Type: uint256
             Source: "amountOfTokens"
      ExpressionStatement
         Gas costs: 20233
         Source: "_totalSupply -= amountOfTokens"
        Assignment using operator -=
           Type: uint256
           Source: "_totalSupply -= amountOfTokens"
          Identifier _totalSupply
             Type: uint256
             Source: "_totalSupply"
          Identifier amountOfTokens
             Type: uint256
             Source: "amountOfTokens"
      VariableDeclarationStatement
         Gas costs: 62
         Source: "uint256 ethersToSend = amountOfTokens * sellPrice() / 1 ether"
        VariableDeclaration "ethersToSend"
           Type: uint256
           Source: "uint256 ethersToSend"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator /
           Type: uint256
           Source: "amountOfTokens * sellPrice() / 1 ether"
          BinaryOperation using operator *
             Type: uint256
             Source: "amountOfTokens * sellPrice()"
            Identifier amountOfTokens
               Type: uint256
               Source: "amountOfTokens"
            FunctionCall
               Type: uint256
               Source: "sellPrice()"
              Identifier sellPrice
                 Type: function () view returns (uint256)
                 Source: "sellPrice"
          Literal, token: [no token] value: 1
             Type: int_const 1000000000000000000
             Source: "1 ether"
      IfStatement
         Source: "if (!msg.sender.send(ethersToSend)) throw"
        UnaryOperation (prefix) !
           Type: bool
           Gas costs: [???]
           Source: "!msg.sender.send(ethersToSend)"
          FunctionCall
             Type: bool
             Source: "msg.sender.send(ethersToSend)"
            MemberAccess to member send
               Type: function (uint256) returns (bool)
               Source: "msg.sender.send"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier ethersToSend
               Type: uint256
               Source: "ethersToSend"
        Throw
           Gas costs: 6
           Source: "throw"
      ExpressionStatement
         Gas costs: [???]
         Source: "TokensSold(msg.sender, ethersToSend, this.balance, amountOfTokens,\r\n            _totalSupply, sellPrice())"
        FunctionCall
           Type: tuple()
           Source: "TokensSold(msg.sender, ethersToSend, this.balance, amountOfTokens,\r\n            _totalSupply, sellPrice())"
          Identifier TokensSold
             Type: function (address,uint256,uint256,uint256,uint256,uint256)
             Source: "TokensSold"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier ethersToSend
             Type: uint256
             Source: "ethersToSend"
          MemberAccess to member balance
             Type: uint256
             Source: "this.balance"
            Identifier this
               Type: contract BokkyPooBahsEtherRefundablePrize
               Source: "this"
          Identifier amountOfTokens
             Type: uint256
             Source: "amountOfTokens"
          Identifier _totalSupply
             Type: uint256
             Source: "_totalSupply"
          FunctionCall
             Type: uint256
             Source: "sellPrice()"
            Identifier sellPrice
               Type: function () view returns (uint256)
               Source: "sellPrice"
  EventDefinition "TokensSold"
     Gas costs: 0
     Source: "event TokensSold(address indexed seller, uint256 ethers, \r\n        uint256 newEtherBalance, uint256 tokens, uint256 newTotalSupply, \r\n        uint256 sellPrice);"
    ParameterList
       Source: "(address indexed seller, uint256 ethers, \r\n        uint256 newEtherBalance, uint256 tokens, uint256 newTotalSupply, \r\n        uint256 sellPrice)"
      VariableDeclaration "seller"
         Type: address
         Source: "address indexed seller"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "ethers"
         Type: uint256
         Source: "uint256 ethers"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "newEtherBalance"
         Type: uint256
         Source: "uint256 newEtherBalance"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "tokens"
         Type: uint256
         Source: "uint256 tokens"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "newTotalSupply"
         Type: uint256
         Source: "uint256 newTotalSupply"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "sellPrice"
         Type: uint256
         Source: "uint256 sellPrice"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "amountOfEthersOwnerCanWithdraw" - public - const
     Source: "function amountOfEthersOwnerCanWithdraw() constant returns (uint256) {\r\n        uint256 etherBalance = this.balance;\r\n        uint256 ethersSupportingTokens = _totalSupply * sellPrice() / 1 ether;\r\n        if (etherBalance > ethersSupportingTokens) {\r\n            return etherBalance - ethersSupportingTokens;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        uint256 etherBalance = this.balance;\r\n        uint256 ethersSupportingTokens = _totalSupply * sellPrice() / 1 ether;\r\n        if (etherBalance > ethersSupportingTokens) {\r\n            return etherBalance - ethersSupportingTokens;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }"
      VariableDeclarationStatement
         Gas costs: 416
         Source: "uint256 etherBalance = this.balance"
        VariableDeclaration "etherBalance"
           Type: uint256
           Source: "uint256 etherBalance"
          ElementaryTypeName uint256
             Source: "uint256"
        MemberAccess to member balance
           Type: uint256
           Source: "this.balance"
          Identifier this
             Type: contract BokkyPooBahsEtherRefundablePrize
             Source: "this"
      VariableDeclarationStatement
         Gas costs: 262
         Source: "uint256 ethersSupportingTokens = _totalSupply * sellPrice() / 1 ether"
        VariableDeclaration "ethersSupportingTokens"
           Type: uint256
           Source: "uint256 ethersSupportingTokens"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator /
           Type: uint256
           Source: "_totalSupply * sellPrice() / 1 ether"
          BinaryOperation using operator *
             Type: uint256
             Source: "_totalSupply * sellPrice()"
            Identifier _totalSupply
               Type: uint256
               Source: "_totalSupply"
            FunctionCall
               Type: uint256
               Source: "sellPrice()"
              Identifier sellPrice
                 Type: function () view returns (uint256)
                 Source: "sellPrice"
          Literal, token: [no token] value: 1
             Type: int_const 1000000000000000000
             Source: "1 ether"
      IfStatement
         Source: "if (etherBalance > ethersSupportingTokens) {\r\n            return etherBalance - ethersSupportingTokens;\r\n        } else {\r\n            return 0;\r\n        }"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 9
           Source: "etherBalance > ethersSupportingTokens"
          Identifier etherBalance
             Type: uint256
             Source: "etherBalance"
          Identifier ethersSupportingTokens
             Type: uint256
             Source: "ethersSupportingTokens"
        Block
           Source: "{\r\n            return etherBalance - ethersSupportingTokens;\r\n        }"
          Return
             Gas costs: 25
             Source: "return etherBalance - ethersSupportingTokens"
            BinaryOperation using operator -
               Type: uint256
               Source: "etherBalance - ethersSupportingTokens"
              Identifier etherBalance
                 Type: uint256
                 Source: "etherBalance"
              Identifier ethersSupportingTokens
                 Type: uint256
                 Source: "ethersSupportingTokens"
        Block
           Source: "{\r\n            return 0;\r\n        }"
          Return
             Gas costs: 8
             Source: "return 0"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
  FunctionDefinition "currentEtherBalance" - public - const
     Source: "function currentEtherBalance() constant returns (uint256) {\r\n        return this.balance;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return this.balance;\r\n    }"
      Return
         Gas costs: 413
         Source: "return this.balance"
        MemberAccess to member balance
           Type: uint256
           Source: "this.balance"
          Identifier this
             Type: contract BokkyPooBahsEtherRefundablePrize
             Source: "this"
  FunctionDefinition "currentTokenBalance" - public - const
     Source: "function currentTokenBalance() constant returns (uint256) {\r\n        return _totalSupply;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return _totalSupply;\r\n    }"
      Return
         Gas costs: 208
         Source: "return _totalSupply"
        Identifier _totalSupply
           Type: uint256
           Source: "_totalSupply"
