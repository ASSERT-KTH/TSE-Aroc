Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0x910dfc18d6ea3d6a7124a6f8b5458f281060fa4c.sol =======
ContractDefinition "SafeMath"
   Source: "contract SafeMath {\r\n    \r\n    uint256 constant public MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    function safeAdd(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        require(x <= MAX_UINT256 - y);\r\n        return x + y;\r\n    }\r\n\r\n    function safeSub(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        require(x >= y);\r\n        return x - y;\r\n    }\r\n\r\n    function safeMul(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        if (y == 0) {\r\n            return 0;\r\n        }\r\n        require(x <= (MAX_UINT256 / y));\r\n        return x * y;\r\n    }\r\n}"
  VariableDeclaration "MAX_UINT256"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 constant public MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
       Type: int_const 1157...(70 digits omitted)...9935
       Source: "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
  FunctionDefinition "safeAdd" - const
     Source: "function safeAdd(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        require(x <= MAX_UINT256 - y);\r\n        return x + y;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 x, uint256 y)"
      VariableDeclaration "x"
         Type: uint256
         Source: "uint256 x"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "y"
         Type: uint256
         Source: "uint256 y"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256 z)"
      VariableDeclaration "z"
         Type: uint256
         Source: "uint256 z"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        require(x <= MAX_UINT256 - y);\r\n        return x + y;\r\n    }"
      ExpressionStatement
         Gas costs: 41
         Source: "require(x <= MAX_UINT256 - y)"
        FunctionCall
           Type: tuple()
           Source: "require(x <= MAX_UINT256 - y)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator <=
             Type: bool
             Source: "x <= MAX_UINT256 - y"
            Identifier x
               Type: uint256
               Source: "x"
            BinaryOperation using operator -
               Type: uint256
               Source: "MAX_UINT256 - y"
              Identifier MAX_UINT256
                 Type: uint256
                 Source: "MAX_UINT256"
              Identifier y
                 Type: uint256
                 Source: "y"
      Return
         Gas costs: 14
         Source: "return x + y"
        BinaryOperation using operator +
           Type: uint256
           Source: "x + y"
          Identifier x
             Type: uint256
             Source: "x"
          Identifier y
             Type: uint256
             Source: "y"
  FunctionDefinition "safeSub" - const
     Source: "function safeSub(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        require(x >= y);\r\n        return x - y;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 x, uint256 y)"
      VariableDeclaration "x"
         Type: uint256
         Source: "uint256 x"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "y"
         Type: uint256
         Source: "uint256 y"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256 z)"
      VariableDeclaration "z"
         Type: uint256
         Source: "uint256 z"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        require(x >= y);\r\n        return x - y;\r\n    }"
      ExpressionStatement
         Gas costs: 38
         Source: "require(x >= y)"
        FunctionCall
           Type: tuple()
           Source: "require(x >= y)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "x >= y"
            Identifier x
               Type: uint256
               Source: "x"
            Identifier y
               Type: uint256
               Source: "y"
      Return
         Gas costs: 14
         Source: "return x - y"
        BinaryOperation using operator -
           Type: uint256
           Source: "x - y"
          Identifier x
             Type: uint256
             Source: "x"
          Identifier y
             Type: uint256
             Source: "y"
  FunctionDefinition "safeMul" - const
     Source: "function safeMul(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        if (y == 0) {\r\n            return 0;\r\n        }\r\n        require(x <= (MAX_UINT256 / y));\r\n        return x * y;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 x, uint256 y)"
      VariableDeclaration "x"
         Type: uint256
         Source: "uint256 x"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "y"
         Type: uint256
         Source: "uint256 y"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256 z)"
      VariableDeclaration "z"
         Type: uint256
         Source: "uint256 z"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        if (y == 0) {\r\n            return 0;\r\n        }\r\n        require(x <= (MAX_UINT256 / y));\r\n        return x * y;\r\n    }"
      IfStatement
         Source: "if (y == 0) {\r\n            return 0;\r\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 0
           Source: "y == 0"
          Identifier y
             Type: uint256
             Source: "y"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n            return 0;\r\n        }"
          Return
             Gas costs: 0
             Source: "return 0"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "require(x <= (MAX_UINT256 / y))"
        FunctionCall
           Type: tuple()
           Source: "require(x <= (MAX_UINT256 / y))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator <=
             Type: bool
             Source: "x <= (MAX_UINT256 / y)"
            Identifier x
               Type: uint256
               Source: "x"
            TupleExpression
               Type: uint256
               Source: "(MAX_UINT256 / y)"
              BinaryOperation using operator /
                 Type: uint256
                 Source: "MAX_UINT256 / y"
                Identifier MAX_UINT256
                   Type: uint256
                   Source: "MAX_UINT256"
                Identifier y
                   Type: uint256
                   Source: "y"
      Return
         Gas costs: 0
         Source: "return x * y"
        BinaryOperation using operator *
           Type: uint256
           Source: "x * y"
          Identifier x
             Type: uint256
             Source: "x"
          Identifier y
             Type: uint256
             Source: "y"
ContractDefinition "Owned"
   Source: "contract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = 0x0;\r\n    }\r\n\r\n    event OwnerUpdate(address _prevOwner, address _newOwner);\r\n}"
  VariableDeclaration "owner"
     Type: address
     Gas costs: [???]
     Source: "address public owner"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "newOwner"
     Type: address
     Gas costs: [???]
     Source: "address public newOwner"
    ElementaryTypeName address
       Source: "address"
  FunctionDefinition "Owned" - public
     Source: "function Owned() {\r\n        owner = msg.sender;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        owner = msg.sender;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "owner = msg.sender"
        Assignment using operator =
           Type: address
           Source: "owner = msg.sender"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  ModifierDefinition "onlyOwner"
     Source: "modifier onlyOwner {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }"
      ExpressionStatement
         Gas costs: 1104
         Source: "assert(msg.sender == owner)"
        FunctionCall
           Type: tuple()
           Source: "assert(msg.sender == owner)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == owner"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier owner
               Type: address
               Source: "owner"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "transferOwnership" - public
     Source: "function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _newOwner)"
      VariableDeclaration "_newOwner"
         Type: address
         Source: "address _newOwner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }"
      ExpressionStatement
         Gas costs: 286
         Source: "require(_newOwner != owner)"
        FunctionCall
           Type: tuple()
           Source: "require(_newOwner != owner)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "_newOwner != owner"
            Identifier _newOwner
               Type: address
               Source: "_newOwner"
            Identifier owner
               Type: address
               Source: "owner"
      ExpressionStatement
         Gas costs: 20267
         Source: "newOwner = _newOwner"
        Assignment using operator =
           Type: address
           Source: "newOwner = _newOwner"
          Identifier newOwner
             Type: address
             Source: "newOwner"
          Identifier _newOwner
             Type: address
             Source: "_newOwner"
  FunctionDefinition "acceptOwnership" - public
     Source: "function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = 0x0;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(msg.sender == newOwner);\r\n        OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = 0x0;\r\n    }"
      ExpressionStatement
         Gas costs: 282
         Source: "require(msg.sender == newOwner)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == newOwner)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == newOwner"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier newOwner
               Type: address
               Source: "newOwner"
      ExpressionStatement
         Gas costs: [???]
         Source: "OwnerUpdate(owner, newOwner)"
        FunctionCall
           Type: tuple()
           Source: "OwnerUpdate(owner, newOwner)"
          Identifier OwnerUpdate
             Type: function (address,address)
             Source: "OwnerUpdate"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier newOwner
             Type: address
             Source: "newOwner"
      ExpressionStatement
         Gas costs: 20503
         Source: "owner = newOwner"
        Assignment using operator =
           Type: address
           Source: "owner = newOwner"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier newOwner
             Type: address
             Source: "newOwner"
      ExpressionStatement
         Gas costs: 20267
         Source: "newOwner = 0x0"
        Assignment using operator =
           Type: address
           Source: "newOwner = 0x0"
          Identifier newOwner
             Type: address
             Source: "newOwner"
          Literal, token: [no token] value: 0x0
             Type: int_const 0
             Source: "0x0"
  EventDefinition "OwnerUpdate"
     Gas costs: 0
     Source: "event OwnerUpdate(address _prevOwner, address _newOwner);"
    ParameterList
       Source: "(address _prevOwner, address _newOwner)"
      VariableDeclaration "_prevOwner"
         Type: address
         Source: "address _prevOwner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_newOwner"
         Type: address
         Source: "address _newOwner"
        ElementaryTypeName address
           Source: "address"
ContractDefinition "Lockable"
   Source: "contract Lockable is Owned {\r\n\r\n    uint256 public lockedUntilBlock;\r\n\r\n    event ContractLocked(uint256 _untilBlock, string _reason);\r\n\r\n    modifier lockAffected {\r\n        require(block.number > lockedUntilBlock);\r\n        _;\r\n    }\r\n\r\n    function lockFromSelf(uint256 _untilBlock, string _reason) internal {\r\n        lockedUntilBlock = _untilBlock;\r\n        ContractLocked(_untilBlock, _reason);\r\n    }\r\n\r\n\r\n    function lockUntil(uint256 _untilBlock, string _reason) onlyOwner public {\r\n        lockedUntilBlock = _untilBlock;\r\n        ContractLocked(_untilBlock, _reason);\r\n    }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Owned"
    UserDefinedTypeName "Owned"
       Source: "Owned"
  VariableDeclaration "lockedUntilBlock"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public lockedUntilBlock"
    ElementaryTypeName uint256
       Source: "uint256"
  EventDefinition "ContractLocked"
     Gas costs: 0
     Source: "event ContractLocked(uint256 _untilBlock, string _reason);"
    ParameterList
       Source: "(uint256 _untilBlock, string _reason)"
      VariableDeclaration "_untilBlock"
         Type: uint256
         Source: "uint256 _untilBlock"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_reason"
         Type: string memory
         Source: "string _reason"
        ElementaryTypeName string
           Source: "string"
  ModifierDefinition "lockAffected"
     Source: "modifier lockAffected {\r\n        require(block.number > lockedUntilBlock);\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(block.number > lockedUntilBlock);\r\n        _;\r\n    }"
      ExpressionStatement
         Gas costs: 936
         Source: "require(block.number > lockedUntilBlock)"
        FunctionCall
           Type: tuple()
           Source: "require(block.number > lockedUntilBlock)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "block.number > lockedUntilBlock"
            MemberAccess to member number
               Type: uint256
               Source: "block.number"
              Identifier block
                 Type: block
                 Source: "block"
            Identifier lockedUntilBlock
               Type: uint256
               Source: "lockedUntilBlock"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "lockFromSelf"
     Source: "function lockFromSelf(uint256 _untilBlock, string _reason) internal {\r\n        lockedUntilBlock = _untilBlock;\r\n        ContractLocked(_untilBlock, _reason);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _untilBlock, string _reason)"
      VariableDeclaration "_untilBlock"
         Type: uint256
         Source: "uint256 _untilBlock"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_reason"
         Type: string memory
         Source: "string _reason"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        lockedUntilBlock = _untilBlock;\r\n        ContractLocked(_untilBlock, _reason);\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "lockedUntilBlock = _untilBlock"
        Assignment using operator =
           Type: uint256
           Source: "lockedUntilBlock = _untilBlock"
          Identifier lockedUntilBlock
             Type: uint256
             Source: "lockedUntilBlock"
          Identifier _untilBlock
             Type: uint256
             Source: "_untilBlock"
      ExpressionStatement
         Gas costs: 0
         Source: "ContractLocked(_untilBlock, _reason)"
        FunctionCall
           Type: tuple()
           Source: "ContractLocked(_untilBlock, _reason)"
          Identifier ContractLocked
             Type: function (uint256,string memory)
             Source: "ContractLocked"
          Identifier _untilBlock
             Type: uint256
             Source: "_untilBlock"
          Identifier _reason
             Type: string memory
             Source: "_reason"
  FunctionDefinition "lockUntil" - public
     Source: "function lockUntil(uint256 _untilBlock, string _reason) onlyOwner public {\r\n        lockedUntilBlock = _untilBlock;\r\n        ContractLocked(_untilBlock, _reason);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _untilBlock, string _reason)"
      VariableDeclaration "_untilBlock"
         Type: uint256
         Source: "uint256 _untilBlock"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_reason"
         Type: string memory
         Source: "string _reason"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        lockedUntilBlock = _untilBlock;\r\n        ContractLocked(_untilBlock, _reason);\r\n    }"
      ExpressionStatement
         Gas costs: 20014
         Source: "lockedUntilBlock = _untilBlock"
        Assignment using operator =
           Type: uint256
           Source: "lockedUntilBlock = _untilBlock"
          Identifier lockedUntilBlock
             Type: uint256
             Source: "lockedUntilBlock"
          Identifier _untilBlock
             Type: uint256
             Source: "_untilBlock"
      ExpressionStatement
         Gas costs: [???]
         Source: "ContractLocked(_untilBlock, _reason)"
        FunctionCall
           Type: tuple()
           Source: "ContractLocked(_untilBlock, _reason)"
          Identifier ContractLocked
             Type: function (uint256,string memory)
             Source: "ContractLocked"
          Identifier _untilBlock
             Type: uint256
             Source: "_untilBlock"
          Identifier _reason
             Type: string memory
             Source: "_reason"
ContractDefinition "tokenRecipientInterface"
   Gas costs: 0
   Source: "contract tokenRecipientInterface {\r\n  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\r\n}"
  FunctionDefinition "receiveApproval" - public
     Source: "function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);"
    ParameterList
       Source: "(address _from, uint256 _value, address _token, bytes _extraData)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_token"
         Type: address
         Source: "address _token"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_extraData"
         Type: bytes memory
         Source: "bytes _extraData"
        ElementaryTypeName bytes
           Source: "bytes"
    ParameterList
       Source: ""
ContractDefinition "OwnedInterface"
   Source: "contract OwnedInterface {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    modifier onlyOwner {\r\n        _;\r\n    }\r\n}"
  VariableDeclaration "owner"
     Type: address
     Gas costs: 0
     Source: "address public owner"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "newOwner"
     Type: address
     Gas costs: 0
     Source: "address public newOwner"
    ElementaryTypeName address
       Source: "address"
  ModifierDefinition "onlyOwner"
     Source: "modifier onlyOwner {\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        _;\r\n    }"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
ContractDefinition "ERC20TokenInterface"
   Gas costs: 0
   Source: "contract ERC20TokenInterface {\r\n  function totalSupply() public constant returns (uint256 _totalSupply);\r\n  function balanceOf(address _owner) public constant returns (uint256 balance);\r\n  function transfer(address _to, uint256 _value) public returns (bool success);\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n  function approve(address _spender, uint256 _value) public returns (bool success);\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}"
  FunctionDefinition "totalSupply" - public - const
     Source: "function totalSupply() public constant returns (uint256 _totalSupply);"
    ParameterList
       Source: "()"
    ParameterList
       Source: "(uint256 _totalSupply)"
      VariableDeclaration "_totalSupply"
         Type: uint256
         Source: "uint256 _totalSupply"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) public constant returns (uint256 balance);"
    ParameterList
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256 balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) public returns (bool success);"
    ParameterList
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);"
    ParameterList
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint256 _value) public returns (bool success);"
    ParameterList
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) public constant returns (uint256 remaining);"
    ParameterList
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256 remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint256 remaining"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Transfer"
     Source: "event Transfer(address indexed _from, address indexed _to, uint256 _value);"
    ParameterList
       Source: "(address indexed _from, address indexed _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address indexed _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address indexed _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Approval"
     Source: "event Approval(address indexed _owner, address indexed _spender, uint256 _value);"
    ParameterList
       Source: "(address indexed _owner, address indexed _spender, uint256 _value)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address indexed _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address indexed _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
ContractDefinition "ERC20PrivateInterface"
   Gas costs: 0
   Source: "contract ERC20PrivateInterface {\r\n    uint256 supply;\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowances;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}"
  VariableDeclaration "supply"
     Type: uint256
     Source: "uint256 supply"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Source: "mapping (address => uint256) balances"
    Mapping
       Source: "mapping (address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "allowances"
     Type: mapping(address => mapping(address => uint256))
     Source: "mapping (address => mapping (address => uint256)) allowances"
    Mapping
       Source: "mapping (address => mapping (address => uint256))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping (address => uint256)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Transfer"
     Source: "event Transfer(address indexed _from, address indexed _to, uint256 _value);"
    ParameterList
       Source: "(address indexed _from, address indexed _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address indexed _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address indexed _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Approval"
     Source: "event Approval(address indexed _owner, address indexed _spender, uint256 _value);"
    ParameterList
       Source: "(address indexed _owner, address indexed _spender, uint256 _value)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address indexed _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address indexed _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
ContractDefinition "MintableToken"
   Source: "contract MintableToken is SafeMath, Owned, ERC20PrivateInterface {\r\n\r\n    uint public totalSupplyLimit;\r\n\r\n    event Mint(address indexed _to, uint256 _value);\r\n\r\n    function mintTokens(address _to, uint256 _amount) onlyOwner {\r\n        require(supply + _amount <= totalSupplyLimit);\r\n        supply = safeAdd(supply, _amount);\r\n        balances[_to] = safeAdd(balances[_to], _amount);\r\n        Mint(_to, _amount);\r\n        Transfer(0x0, _to, _amount);\r\n    }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "SafeMath"
    UserDefinedTypeName "SafeMath"
       Source: "SafeMath"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Owned"
    UserDefinedTypeName "Owned"
       Source: "Owned"
  InheritanceSpecifier
     Gas costs: 0
     Source: "ERC20PrivateInterface"
    UserDefinedTypeName "ERC20PrivateInterface"
       Source: "ERC20PrivateInterface"
  VariableDeclaration "totalSupplyLimit"
     Type: uint256
     Gas costs: 0
     Source: "uint public totalSupplyLimit"
    ElementaryTypeName uint
       Source: "uint"
  EventDefinition "Mint"
     Gas costs: 0
     Source: "event Mint(address indexed _to, uint256 _value);"
    ParameterList
       Source: "(address indexed _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address indexed _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "mintTokens" - public
     Source: "function mintTokens(address _to, uint256 _amount) onlyOwner {\r\n        require(supply + _amount <= totalSupplyLimit);\r\n        supply = safeAdd(supply, _amount);\r\n        balances[_to] = safeAdd(balances[_to], _amount);\r\n        Mint(_to, _amount);\r\n        Transfer(0x0, _to, _amount);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _amount)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        require(supply + _amount <= totalSupplyLimit);\r\n        supply = safeAdd(supply, _amount);\r\n        balances[_to] = safeAdd(balances[_to], _amount);\r\n        Mint(_to, _amount);\r\n        Transfer(0x0, _to, _amount);\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "require(supply + _amount <= totalSupplyLimit)"
        FunctionCall
           Type: tuple()
           Source: "require(supply + _amount <= totalSupplyLimit)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator <=
             Type: bool
             Source: "supply + _amount <= totalSupplyLimit"
            BinaryOperation using operator +
               Type: uint256
               Source: "supply + _amount"
              Identifier supply
                 Type: uint256
                 Source: "supply"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
            Identifier totalSupplyLimit
               Type: uint256
               Source: "totalSupplyLimit"
      ExpressionStatement
         Gas costs: 0
         Source: "supply = safeAdd(supply, _amount)"
        Assignment using operator =
           Type: uint256
           Source: "supply = safeAdd(supply, _amount)"
          Identifier supply
             Type: uint256
             Source: "supply"
          FunctionCall
             Type: uint256
             Source: "safeAdd(supply, _amount)"
            Identifier safeAdd
               Type: function (uint256,uint256) view returns (uint256)
               Source: "safeAdd"
            Identifier supply
               Type: uint256
               Source: "supply"
            Identifier _amount
               Type: uint256
               Source: "_amount"
      ExpressionStatement
         Gas costs: 0
         Source: "balances[_to] = safeAdd(balances[_to], _amount)"
        Assignment using operator =
           Type: uint256
           Source: "balances[_to] = safeAdd(balances[_to], _amount)"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
          FunctionCall
             Type: uint256
             Source: "safeAdd(balances[_to], _amount)"
            Identifier safeAdd
               Type: function (uint256,uint256) view returns (uint256)
               Source: "safeAdd"
            IndexAccess
               Type: uint256
               Source: "balances[_to]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _to
                 Type: address
                 Source: "_to"
            Identifier _amount
               Type: uint256
               Source: "_amount"
      ExpressionStatement
         Gas costs: 0
         Source: "Mint(_to, _amount)"
        FunctionCall
           Type: tuple()
           Source: "Mint(_to, _amount)"
          Identifier Mint
             Type: function (address,uint256)
             Source: "Mint"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      ExpressionStatement
         Gas costs: 0
         Source: "Transfer(0x0, _to, _amount)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(0x0, _to, _amount)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          Literal, token: [no token] value: 0x0
             Type: int_const 0
             Source: "0x0"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _amount
             Type: uint256
             Source: "_amount"
ContractDefinition "ERC20Token"
   Source: "contract ERC20Token is ERC20TokenInterface, SafeMath, Owned, Lockable {\r\n\r\n    /* Public variables of the token */\r\n    string public standard;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupplyLimit;\r\n\r\n    /* Private variables of the token */\r\n    uint256 supply = 0;\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowances;\r\n\r\n    event Mint(address indexed _to, uint256 _value);\r\n\r\n    /* Returns total supply of issued tokens */\r\n    function totalSupply() constant returns (uint256) {\r\n        return supply;\r\n    }\r\n\r\n    /* Returns balance of address */\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /* Transfers tokens from your address to other */\r\n    function transfer(address _to, uint256 _value) lockAffected returns (bool success) {\r\n        require(_to != 0x0 && _to != address(this));\r\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);  // Deduct senders balance\r\n        balances[_to] = safeAdd(balanceOf(_to), _value);                // Add recivers blaance\r\n        Transfer(msg.sender, _to, _value);                              // Raise Transfer event\r\n        return true;\r\n    }\r\n\r\n    /* Approve other address to spend tokens on your account */\r\n    function approve(address _spender, uint256 _value) lockAffected returns (bool success) {\r\n        allowances[msg.sender][_spender] = _value;        // Set allowance\r\n        Approval(msg.sender, _spender, _value);           // Raise Approval event\r\n        return true; \r\n    }\r\n\r\n    /* Approve and then communicate the approved contract in a single tx */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) lockAffected returns (bool success) {\r\n        tokenRecipientInterface spender = tokenRecipientInterface(_spender);    // Cast spender to tokenRecipient contract\r\n        approve(_spender, _value);                                              // Set approval to contract for _value\r\n        spender.receiveApproval(msg.sender, _value, this, _extraData);          // Raise method on _spender contract\r\n        return true;\r\n    }\r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) lockAffected returns (bool success) {\r\n        require(_to != 0x0 && _to != address(this));\r\n        balances[_from] = safeSub(balanceOf(_from), _value);                            // Deduct senders balance\r\n        balances[_to] = safeAdd(balanceOf(_to), _value);                                // Add recipient blaance\r\n        allowances[_from][msg.sender] = safeSub(allowances[_from][msg.sender], _value); // Deduct allowance for this address\r\n        Transfer(_from, _to, _value);                                                   // Raise Transfer event\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowances[_owner][_spender];\r\n    }\r\n\r\n    function mintTokens(address _to, uint256 _amount) onlyOwner {\r\n        require(supply + _amount <= totalSupplyLimit);\r\n        supply = safeAdd(supply, _amount);\r\n        balances[_to] = safeAdd(balances[_to], _amount);\r\n        Mint(_to, _amount);\r\n        Transfer(0x0, _to, _amount);\r\n    }\r\n\r\n    function salvageTokensFromContract(address _tokenAddress, address _to, uint _amount) onlyOwner{\r\n        ERC20TokenInterface(_tokenAddress).transfer(_to, _amount);\r\n    }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "ERC20TokenInterface"
    UserDefinedTypeName "ERC20TokenInterface"
       Source: "ERC20TokenInterface"
  InheritanceSpecifier
     Gas costs: 0
     Source: "SafeMath"
    UserDefinedTypeName "SafeMath"
       Source: "SafeMath"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Owned"
    UserDefinedTypeName "Owned"
       Source: "Owned"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Lockable"
    UserDefinedTypeName "Lockable"
       Source: "Lockable"
  VariableDeclaration "standard"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public standard"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "name"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public name"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "symbol"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public symbol"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "decimals"
     Type: uint8
     Gas costs: [???]
     Source: "uint8 public decimals"
    ElementaryTypeName uint8
       Source: "uint8"
  VariableDeclaration "totalSupplyLimit"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public totalSupplyLimit"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "supply"
     Type: uint256
     Gas costs: 0
     Source: "uint256 supply = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping (address => uint256) balances"
    Mapping
       Source: "mapping (address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "allowances"
     Type: mapping(address => mapping(address => uint256))
     Gas costs: 0
     Source: "mapping (address => mapping (address => uint256)) allowances"
    Mapping
       Source: "mapping (address => mapping (address => uint256))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping (address => uint256)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Mint"
     Gas costs: 0
     Source: "event Mint(address indexed _to, uint256 _value);"
    ParameterList
       Source: "(address indexed _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address indexed _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "totalSupply" - public - const
     Source: "function totalSupply() constant returns (uint256) {\r\n        return supply;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return supply;\r\n    }"
      Return
         Gas costs: 208
         Source: "return supply"
        Identifier supply
           Type: uint256
           Source: "supply"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return balances[_owner];\r\n    }"
      Return
         Gas costs: 304
         Source: "return balances[_owner]"
        IndexAccess
           Type: uint256
           Source: "balances[_owner]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          Identifier _owner
             Type: address
             Source: "_owner"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) lockAffected returns (bool success) {\r\n        require(_to != 0x0 && _to != address(this));\r\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);  // Deduct senders balance\r\n        balances[_to] = safeAdd(balanceOf(_to), _value);                // Add recivers blaance\r\n        Transfer(msg.sender, _to, _value);                              // Raise Transfer event\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "lockAffected"
       Gas costs: 0
       Source: "lockAffected"
      Identifier lockAffected
         Type: modifier ()
         Source: "lockAffected"
    Block
       Source: "{\r\n        require(_to != 0x0 && _to != address(this));\r\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);  // Deduct senders balance\r\n        balances[_to] = safeAdd(balanceOf(_to), _value);                // Add recivers blaance\r\n        Transfer(msg.sender, _to, _value);                              // Raise Transfer event\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 89
         Source: "require(_to != 0x0 && _to != address(this))"
        FunctionCall
           Type: tuple()
           Source: "require(_to != 0x0 && _to != address(this))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator &&
             Type: bool
             Source: "_to != 0x0 && _to != address(this)"
            BinaryOperation using operator !=
               Type: bool
               Source: "_to != 0x0"
              Identifier _to
                 Type: address
                 Source: "_to"
              Literal, token: [no token] value: 0x0
                 Type: int_const 0
                 Source: "0x0"
            BinaryOperation using operator !=
               Type: bool
               Source: "_to != address(this)"
              Identifier _to
                 Type: address
                 Source: "_to"
              FunctionCall
                 Type: address
                 Source: "address(this)"
                ElementaryTypeNameExpression address
                   Type: type(address)
                   Source: "address"
                Identifier this
                   Type: contract ERC20Token
                   Source: "this"
      ExpressionStatement
         Gas costs: 20141
         Source: "balances[msg.sender] = safeSub(balanceOf(msg.sender), _value)"
        Assignment using operator =
           Type: uint256
           Source: "balances[msg.sender] = safeSub(balanceOf(msg.sender), _value)"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          FunctionCall
             Type: uint256
             Source: "safeSub(balanceOf(msg.sender), _value)"
            Identifier safeSub
               Type: function (uint256,uint256) view returns (uint256)
               Source: "safeSub"
            FunctionCall
               Type: uint256
               Source: "balanceOf(msg.sender)"
              Identifier balanceOf
                 Type: function (address) view returns (uint256)
                 Source: "balanceOf"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 20143
         Source: "balances[_to] = safeAdd(balanceOf(_to), _value)"
        Assignment using operator =
           Type: uint256
           Source: "balances[_to] = safeAdd(balanceOf(_to), _value)"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
          FunctionCall
             Type: uint256
             Source: "safeAdd(balanceOf(_to), _value)"
            Identifier safeAdd
               Type: function (uint256,uint256) view returns (uint256)
               Source: "safeAdd"
            FunctionCall
               Type: uint256
               Source: "balanceOf(_to)"
              Identifier balanceOf
                 Type: function (address) view returns (uint256)
                 Source: "balanceOf"
              Identifier _to
                 Type: address
                 Source: "_to"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: [???]
         Source: "Transfer(msg.sender, _to, _value)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(msg.sender, _to, _value)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint256 _value) lockAffected returns (bool success) {\r\n        allowances[msg.sender][_spender] = _value;        // Set allowance\r\n        Approval(msg.sender, _spender, _value);           // Raise Approval event\r\n        return true; \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "lockAffected"
       Gas costs: 0
       Source: "lockAffected"
      Identifier lockAffected
         Type: modifier ()
         Source: "lockAffected"
    Block
       Source: "{\r\n        allowances[msg.sender][_spender] = _value;        // Set allowance\r\n        Approval(msg.sender, _spender, _value);           // Raise Approval event\r\n        return true; \r\n    }"
      ExpressionStatement
         Gas costs: 20199
         Source: "allowances[msg.sender][_spender] = _value"
        Assignment using operator =
           Type: uint256
           Source: "allowances[msg.sender][_spender] = _value"
          IndexAccess
             Type: uint256
             Source: "allowances[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowances[msg.sender]"
              Identifier allowances
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowances"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: [???]
         Source: "Approval(msg.sender, _spender, _value)"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender, _spender, _value)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "approveAndCall" - public
     Source: "function approveAndCall(address _spender, uint256 _value, bytes _extraData) lockAffected returns (bool success) {\r\n        tokenRecipientInterface spender = tokenRecipientInterface(_spender);    // Cast spender to tokenRecipient contract\r\n        approve(_spender, _value);                                              // Set approval to contract for _value\r\n        spender.receiveApproval(msg.sender, _value, this, _extraData);          // Raise method on _spender contract\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint256 _value, bytes _extraData)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_extraData"
         Type: bytes memory
         Source: "bytes _extraData"
        ElementaryTypeName bytes
           Source: "bytes"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "lockAffected"
       Gas costs: 0
       Source: "lockAffected"
      Identifier lockAffected
         Type: modifier ()
         Source: "lockAffected"
    Block
       Source: "{\r\n        tokenRecipientInterface spender = tokenRecipientInterface(_spender);    // Cast spender to tokenRecipient contract\r\n        approve(_spender, _value);                                              // Set approval to contract for _value\r\n        spender.receiveApproval(msg.sender, _value, this, _extraData);          // Raise method on _spender contract\r\n        return true;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 11
         Source: "tokenRecipientInterface spender = tokenRecipientInterface(_spender)"
        VariableDeclaration "spender"
           Type: contract tokenRecipientInterface
           Source: "tokenRecipientInterface spender"
          UserDefinedTypeName "tokenRecipientInterface"
             Source: "tokenRecipientInterface"
        FunctionCall
           Type: contract tokenRecipientInterface
           Source: "tokenRecipientInterface(_spender)"
          Identifier tokenRecipientInterface
             Type: type(contract tokenRecipientInterface)
             Source: "tokenRecipientInterface"
          Identifier _spender
             Type: address
             Source: "_spender"
      ExpressionStatement
         Gas costs: 23
         Source: "approve(_spender, _value)"
        FunctionCall
           Type: bool
           Source: "approve(_spender, _value)"
          Identifier approve
             Type: function (address,uint256) returns (bool)
             Source: "approve"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: [???]
         Source: "spender.receiveApproval(msg.sender, _value, this, _extraData)"
        FunctionCall
           Type: tuple()
           Source: "spender.receiveApproval(msg.sender, _value, this, _extraData)"
          MemberAccess to member receiveApproval
             Type: function (address,uint256,address,bytes memory) external
             Source: "spender.receiveApproval"
            Identifier spender
               Type: contract tokenRecipientInterface
               Source: "spender"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
          Identifier this
             Type: contract ERC20Token
             Source: "this"
          Identifier _extraData
             Type: bytes memory
             Source: "_extraData"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _value) lockAffected returns (bool success) {\r\n        require(_to != 0x0 && _to != address(this));\r\n        balances[_from] = safeSub(balanceOf(_from), _value);                            // Deduct senders balance\r\n        balances[_to] = safeAdd(balanceOf(_to), _value);                                // Add recipient blaance\r\n        allowances[_from][msg.sender] = safeSub(allowances[_from][msg.sender], _value); // Deduct allowance for this address\r\n        Transfer(_from, _to, _value);                                                   // Raise Transfer event\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "lockAffected"
       Gas costs: 0
       Source: "lockAffected"
      Identifier lockAffected
         Type: modifier ()
         Source: "lockAffected"
    Block
       Source: "{\r\n        require(_to != 0x0 && _to != address(this));\r\n        balances[_from] = safeSub(balanceOf(_from), _value);                            // Deduct senders balance\r\n        balances[_to] = safeAdd(balanceOf(_to), _value);                                // Add recipient blaance\r\n        allowances[_from][msg.sender] = safeSub(allowances[_from][msg.sender], _value); // Deduct allowance for this address\r\n        Transfer(_from, _to, _value);                                                   // Raise Transfer event\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 89
         Source: "require(_to != 0x0 && _to != address(this))"
        FunctionCall
           Type: tuple()
           Source: "require(_to != 0x0 && _to != address(this))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator &&
             Type: bool
             Source: "_to != 0x0 && _to != address(this)"
            BinaryOperation using operator !=
               Type: bool
               Source: "_to != 0x0"
              Identifier _to
                 Type: address
                 Source: "_to"
              Literal, token: [no token] value: 0x0
                 Type: int_const 0
                 Source: "0x0"
            BinaryOperation using operator !=
               Type: bool
               Source: "_to != address(this)"
              Identifier _to
                 Type: address
                 Source: "_to"
              FunctionCall
                 Type: address
                 Source: "address(this)"
                ElementaryTypeNameExpression address
                   Type: type(address)
                   Source: "address"
                Identifier this
                   Type: contract ERC20Token
                   Source: "this"
      ExpressionStatement
         Gas costs: 20132
         Source: "balances[_from] = safeSub(balanceOf(_from), _value)"
        Assignment using operator =
           Type: uint256
           Source: "balances[_from] = safeSub(balanceOf(_from), _value)"
          IndexAccess
             Type: uint256
             Source: "balances[_from]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _from
               Type: address
               Source: "_from"
          FunctionCall
             Type: uint256
             Source: "safeSub(balanceOf(_from), _value)"
            Identifier safeSub
               Type: function (uint256,uint256) view returns (uint256)
               Source: "safeSub"
            FunctionCall
               Type: uint256
               Source: "balanceOf(_from)"
              Identifier balanceOf
                 Type: function (address) view returns (uint256)
                 Source: "balanceOf"
              Identifier _from
                 Type: address
                 Source: "_from"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 20132
         Source: "balances[_to] = safeAdd(balanceOf(_to), _value)"
        Assignment using operator =
           Type: uint256
           Source: "balances[_to] = safeAdd(balanceOf(_to), _value)"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
          FunctionCall
             Type: uint256
             Source: "safeAdd(balanceOf(_to), _value)"
            Identifier safeAdd
               Type: function (uint256,uint256) view returns (uint256)
               Source: "safeAdd"
            FunctionCall
               Type: uint256
               Source: "balanceOf(_to)"
              Identifier balanceOf
                 Type: function (address) view returns (uint256)
                 Source: "balanceOf"
              Identifier _to
                 Type: address
                 Source: "_to"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 20596
         Source: "allowances[_from][msg.sender] = safeSub(allowances[_from][msg.sender], _value)"
        Assignment using operator =
           Type: uint256
           Source: "allowances[_from][msg.sender] = safeSub(allowances[_from][msg.sender], _value)"
          IndexAccess
             Type: uint256
             Source: "allowances[_from][msg.sender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowances[_from]"
              Identifier allowances
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowances"
              Identifier _from
                 Type: address
                 Source: "_from"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          FunctionCall
             Type: uint256
             Source: "safeSub(allowances[_from][msg.sender], _value)"
            Identifier safeSub
               Type: function (uint256,uint256) view returns (uint256)
               Source: "safeSub"
            IndexAccess
               Type: uint256
               Source: "allowances[_from][msg.sender]"
              IndexAccess
                 Type: mapping(address => uint256)
                 Source: "allowances[_from]"
                Identifier allowances
                   Type: mapping(address => mapping(address => uint256))
                   Source: "allowances"
                Identifier _from
                   Type: address
                   Source: "_from"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: [???]
         Source: "Transfer(_from, _to, _value)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(_from, _to, _value)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowances[_owner][_spender];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint256 remaining"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return allowances[_owner][_spender];\r\n    }"
      Return
         Gas costs: 394
         Source: "return allowances[_owner][_spender]"
        IndexAccess
           Type: uint256
           Source: "allowances[_owner][_spender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowances[_owner]"
            Identifier allowances
               Type: mapping(address => mapping(address => uint256))
               Source: "allowances"
            Identifier _owner
               Type: address
               Source: "_owner"
          Identifier _spender
             Type: address
             Source: "_spender"
  FunctionDefinition "mintTokens" - public
     Source: "function mintTokens(address _to, uint256 _amount) onlyOwner {\r\n        require(supply + _amount <= totalSupplyLimit);\r\n        supply = safeAdd(supply, _amount);\r\n        balances[_to] = safeAdd(balances[_to], _amount);\r\n        Mint(_to, _amount);\r\n        Transfer(0x0, _to, _amount);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _amount)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        require(supply + _amount <= totalSupplyLimit);\r\n        supply = safeAdd(supply, _amount);\r\n        balances[_to] = safeAdd(balances[_to], _amount);\r\n        Mint(_to, _amount);\r\n        Transfer(0x0, _to, _amount);\r\n    }"
      ExpressionStatement
         Gas costs: 444
         Source: "require(supply + _amount <= totalSupplyLimit)"
        FunctionCall
           Type: tuple()
           Source: "require(supply + _amount <= totalSupplyLimit)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator <=
             Type: bool
             Source: "supply + _amount <= totalSupplyLimit"
            BinaryOperation using operator +
               Type: uint256
               Source: "supply + _amount"
              Identifier supply
                 Type: uint256
                 Source: "supply"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
            Identifier totalSupplyLimit
               Type: uint256
               Source: "totalSupplyLimit"
      ExpressionStatement
         Gas costs: 20232
         Source: "supply = safeAdd(supply, _amount)"
        Assignment using operator =
           Type: uint256
           Source: "supply = safeAdd(supply, _amount)"
          Identifier supply
             Type: uint256
             Source: "supply"
          FunctionCall
             Type: uint256
             Source: "safeAdd(supply, _amount)"
            Identifier safeAdd
               Type: function (uint256,uint256) view returns (uint256)
               Source: "safeAdd"
            Identifier supply
               Type: uint256
               Source: "supply"
            Identifier _amount
               Type: uint256
               Source: "_amount"
      ExpressionStatement
         Gas costs: 20424
         Source: "balances[_to] = safeAdd(balances[_to], _amount)"
        Assignment using operator =
           Type: uint256
           Source: "balances[_to] = safeAdd(balances[_to], _amount)"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
          FunctionCall
             Type: uint256
             Source: "safeAdd(balances[_to], _amount)"
            Identifier safeAdd
               Type: function (uint256,uint256) view returns (uint256)
               Source: "safeAdd"
            IndexAccess
               Type: uint256
               Source: "balances[_to]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _to
                 Type: address
                 Source: "_to"
            Identifier _amount
               Type: uint256
               Source: "_amount"
      ExpressionStatement
         Gas costs: [???]
         Source: "Mint(_to, _amount)"
        FunctionCall
           Type: tuple()
           Source: "Mint(_to, _amount)"
          Identifier Mint
             Type: function (address,uint256)
             Source: "Mint"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      ExpressionStatement
         Gas costs: [???]
         Source: "Transfer(0x0, _to, _amount)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(0x0, _to, _amount)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          Literal, token: [no token] value: 0x0
             Type: int_const 0
             Source: "0x0"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _amount
             Type: uint256
             Source: "_amount"
  FunctionDefinition "salvageTokensFromContract" - public
     Source: "function salvageTokensFromContract(address _tokenAddress, address _to, uint _amount) onlyOwner{\r\n        ERC20TokenInterface(_tokenAddress).transfer(_to, _amount);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _tokenAddress, address _to, uint _amount)"
      VariableDeclaration "_tokenAddress"
         Type: address
         Source: "address _tokenAddress"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint _amount"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        ERC20TokenInterface(_tokenAddress).transfer(_to, _amount);\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "ERC20TokenInterface(_tokenAddress).transfer(_to, _amount)"
        FunctionCall
           Type: bool
           Source: "ERC20TokenInterface(_tokenAddress).transfer(_to, _amount)"
          MemberAccess to member transfer
             Type: function (address,uint256) external returns (bool)
             Source: "ERC20TokenInterface(_tokenAddress).transfer"
            FunctionCall
               Type: contract ERC20TokenInterface
               Source: "ERC20TokenInterface(_tokenAddress)"
              Identifier ERC20TokenInterface
                 Type: type(contract ERC20TokenInterface)
                 Source: "ERC20TokenInterface"
              Identifier _tokenAddress
                 Type: address
                 Source: "_tokenAddress"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _amount
             Type: uint256
             Source: "_amount"
ContractDefinition "X8XToken"
   Source: "contract X8XToken is ERC20Token {\r\n\r\n    /* Initializes contract */\r\n    function X8XToken() {\r\n        standard = \"X8X token v1.0\";\r\n        name = \"X8XToken\";\r\n        symbol = \"X8X\";\r\n        decimals = 18;\r\n        totalSupplyLimit = 100000000 * 10**18;\r\n        lockFromSelf(4894000, \"Lock before crowdsale starts\");\r\n    }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "ERC20Token"
    UserDefinedTypeName "ERC20Token"
       Source: "ERC20Token"
  FunctionDefinition "X8XToken" - public
     Source: "function X8XToken() {\r\n        standard = \"X8X token v1.0\";\r\n        name = \"X8XToken\";\r\n        symbol = \"X8X\";\r\n        decimals = 18;\r\n        totalSupplyLimit = 100000000 * 10**18;\r\n        lockFromSelf(4894000, \"Lock before crowdsale starts\");\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        standard = \"X8X token v1.0\";\r\n        name = \"X8XToken\";\r\n        symbol = \"X8X\";\r\n        decimals = 18;\r\n        totalSupplyLimit = 100000000 * 10**18;\r\n        lockFromSelf(4894000, \"Lock before crowdsale starts\");\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "standard = \"X8X token v1.0\""
        Assignment using operator =
           Type: string storage ref
           Source: "standard = \"X8X token v1.0\""
          Identifier standard
             Type: string storage ref
             Source: "standard"
          Literal, token: [no token] value: X8X token v1.0
             Type: literal_string "X8X token v1.0"
             Source: "\"X8X token v1.0\""
      ExpressionStatement
         Gas costs: 0
         Source: "name = \"X8XToken\""
        Assignment using operator =
           Type: string storage ref
           Source: "name = \"X8XToken\""
          Identifier name
             Type: string storage ref
             Source: "name"
          Literal, token: [no token] value: X8XToken
             Type: literal_string "X8XToken"
             Source: "\"X8XToken\""
      ExpressionStatement
         Gas costs: 0
         Source: "symbol = \"X8X\""
        Assignment using operator =
           Type: string storage ref
           Source: "symbol = \"X8X\""
          Identifier symbol
             Type: string storage ref
             Source: "symbol"
          Literal, token: [no token] value: X8X
             Type: literal_string "X8X"
             Source: "\"X8X\""
      ExpressionStatement
         Gas costs: 0
         Source: "decimals = 18"
        Assignment using operator =
           Type: uint8
           Source: "decimals = 18"
          Identifier decimals
             Type: uint8
             Source: "decimals"
          Literal, token: [no token] value: 18
             Type: int_const 18
             Source: "18"
      ExpressionStatement
         Gas costs: 0
         Source: "totalSupplyLimit = 100000000 * 10**18"
        Assignment using operator =
           Type: uint256
           Source: "totalSupplyLimit = 100000000 * 10**18"
          Identifier totalSupplyLimit
             Type: uint256
             Source: "totalSupplyLimit"
          BinaryOperation using operator *
             Type: int_const 100000000000000000000000000
             Source: "100000000 * 10**18"
            Literal, token: [no token] value: 100000000
               Type: int_const 100000000
               Source: "100000000"
            BinaryOperation using operator **
               Type: int_const 1000000000000000000
               Source: "10**18"
              Literal, token: [no token] value: 10
                 Type: int_const 10
                 Source: "10"
              Literal, token: [no token] value: 18
                 Type: int_const 18
                 Source: "18"
      ExpressionStatement
         Gas costs: 0
         Source: "lockFromSelf(4894000, \"Lock before crowdsale starts\")"
        FunctionCall
           Type: tuple()
           Source: "lockFromSelf(4894000, \"Lock before crowdsale starts\")"
          Identifier lockFromSelf
             Type: function (uint256,string memory)
             Source: "lockFromSelf"
          Literal, token: [no token] value: 4894000
             Type: int_const 4894000
             Source: "4894000"
          Literal, token: [no token] value: Lock before crowdsale starts
             Type: literal_string "Lock before crowdsale starts"
             Source: "\"Lock before crowdsale starts\""
