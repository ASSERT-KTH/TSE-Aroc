Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0x5951924bb16e69bfe272491202ff3597a456af25.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.11;"
ContractDefinition "SafeMath"
   Source: "library SafeMath {\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}"
  FunctionDefinition "sub" - const
     Source: "function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        assert(b <= a);\r\n        return a - b;\r\n    }"
      ExpressionStatement
         Gas costs: 32
         Source: "assert(b <= a)"
        FunctionCall
           Type: tuple()
           Source: "assert(b <= a)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator <=
             Type: bool
             Source: "b <= a"
            Identifier b
               Type: uint256
               Source: "b"
            Identifier a
               Type: uint256
               Source: "a"
      Return
         Gas costs: 14
         Source: "return a - b"
        BinaryOperation using operator -
           Type: uint256
           Source: "a - b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
  FunctionDefinition "add" - const
     Source: "function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 17
         Source: "uint256 c = a + b"
        VariableDeclaration "c"
           Type: uint256
           Source: "uint256 c"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator +
           Type: uint256
           Source: "a + b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
      ExpressionStatement
         Gas costs: 32
         Source: "assert(c >= a)"
        FunctionCall
           Type: tuple()
           Source: "assert(c >= a)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator >=
             Type: bool
             Source: "c >= a"
            Identifier c
               Type: uint256
               Source: "c"
            Identifier a
               Type: uint256
               Source: "a"
      Return
         Gas costs: 8
         Source: "return c"
        Identifier c
           Type: uint256
           Source: "c"
ContractDefinition "admined"
   Source: "contract admined { //This token contract is administered\r\n    address public admin; //Admin address is public\r\n    uint public lockThreshold; //Lock tiime is public\r\n    address public allowedAddr; //There can be an address that can use the token during a lock, its public\r\n\r\n    function admined() internal {\r\n        admin = msg.sender; //Set initial admin to contract creator\r\n        Admined(admin);\r\n    }\r\n\r\n    modifier onlyAdmin() { //A modifier to define admin-only functions\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    modifier endOfLock() { //A modifier to lock transactions until finish of time (or being allowed)\r\n        require(now > lockThreshold || msg.sender == allowedAddr);\r\n        _;\r\n    }\r\n\r\n    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\r\n        admin = _newAdmin;\r\n        TransferAdminship(admin);\r\n    }\r\n\r\n    function addAllowedToTransfer (address _allowedAddr) onlyAdmin public { //Here the special address that can transfer during a lock is set\r\n        allowedAddr = _allowedAddr;\r\n        AddAllowedToTransfer (allowedAddr);\r\n    }\r\n\r\n    function setLock(uint _timeInMins) onlyAdmin public { //Only the admin can set a lock on transfers\r\n        require(_timeInMins > 0);\r\n        uint mins = _timeInMins * 1 minutes;\r\n        lockThreshold = SafeMath.add(now,mins);\r\n        SetLock(lockThreshold);\r\n    }\r\n\r\n    //All admin actions have a log for public review\r\n    event SetLock(uint timeInMins);\r\n    event AddAllowedToTransfer (address allowedAddress);\r\n    event TransferAdminship(address newAdminister);\r\n    event Admined(address administer);\r\n\r\n}"
  VariableDeclaration "admin"
     Type: address
     Gas costs: [???]
     Source: "address public admin"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "lockThreshold"
     Type: uint256
     Gas costs: [???]
     Source: "uint public lockThreshold"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "allowedAddr"
     Type: address
     Gas costs: [???]
     Source: "address public allowedAddr"
    ElementaryTypeName address
       Source: "address"
  FunctionDefinition "admined"
     Source: "function admined() internal {\r\n        admin = msg.sender; //Set initial admin to contract creator\r\n        Admined(admin);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        admin = msg.sender; //Set initial admin to contract creator\r\n        Admined(admin);\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "admin = msg.sender"
        Assignment using operator =
           Type: address
           Source: "admin = msg.sender"
          Identifier admin
             Type: address
             Source: "admin"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 0
         Source: "Admined(admin)"
        FunctionCall
           Type: tuple()
           Source: "Admined(admin)"
          Identifier Admined
             Type: function (address)
             Source: "Admined"
          Identifier admin
             Type: address
             Source: "admin"
  ModifierDefinition "onlyAdmin"
     Source: "modifier onlyAdmin() { //A modifier to define admin-only functions\r\n        require(msg.sender == admin);\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{ //A modifier to define admin-only functions\r\n        require(msg.sender == admin);\r\n        _;\r\n    }"
      ExpressionStatement
         Gas costs: 1692
         Source: "require(msg.sender == admin)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == admin)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == admin"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier admin
               Type: address
               Source: "admin"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "endOfLock"
     Source: "modifier endOfLock() { //A modifier to lock transactions until finish of time (or being allowed)\r\n        require(now > lockThreshold || msg.sender == allowedAddr);\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{ //A modifier to lock transactions until finish of time (or being allowed)\r\n        require(now > lockThreshold || msg.sender == allowedAddr);\r\n        _;\r\n    }"
      ExpressionStatement
         Gas costs: 2545
         Source: "require(now > lockThreshold || msg.sender == allowedAddr)"
        FunctionCall
           Type: tuple()
           Source: "require(now > lockThreshold || msg.sender == allowedAddr)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ||
             Type: bool
             Source: "now > lockThreshold || msg.sender == allowedAddr"
            BinaryOperation using operator >
               Type: bool
               Source: "now > lockThreshold"
              Identifier now
                 Type: uint256
                 Source: "now"
              Identifier lockThreshold
                 Type: uint256
                 Source: "lockThreshold"
            BinaryOperation using operator ==
               Type: bool
               Source: "msg.sender == allowedAddr"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier allowedAddr
                 Type: address
                 Source: "allowedAddr"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "transferAdminship" - public
     Source: "function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\r\n        admin = _newAdmin;\r\n        TransferAdminship(admin);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _newAdmin)"
      VariableDeclaration "_newAdmin"
         Type: address
         Source: "address _newAdmin"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyAdmin"
       Gas costs: 0
       Source: "onlyAdmin"
      Identifier onlyAdmin
         Type: modifier ()
         Source: "onlyAdmin"
    Block
       Source: "{ //Admin can be transfered\r\n        admin = _newAdmin;\r\n        TransferAdminship(admin);\r\n    }"
      ExpressionStatement
         Gas costs: 20267
         Source: "admin = _newAdmin"
        Assignment using operator =
           Type: address
           Source: "admin = _newAdmin"
          Identifier admin
             Type: address
             Source: "admin"
          Identifier _newAdmin
             Type: address
             Source: "_newAdmin"
      ExpressionStatement
         Gas costs: [???]
         Source: "TransferAdminship(admin)"
        FunctionCall
           Type: tuple()
           Source: "TransferAdminship(admin)"
          Identifier TransferAdminship
             Type: function (address)
             Source: "TransferAdminship"
          Identifier admin
             Type: address
             Source: "admin"
  FunctionDefinition "addAllowedToTransfer" - public
     Source: "function addAllowedToTransfer (address _allowedAddr) onlyAdmin public { //Here the special address that can transfer during a lock is set\r\n        allowedAddr = _allowedAddr;\r\n        AddAllowedToTransfer (allowedAddr);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _allowedAddr)"
      VariableDeclaration "_allowedAddr"
         Type: address
         Source: "address _allowedAddr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyAdmin"
       Gas costs: 0
       Source: "onlyAdmin"
      Identifier onlyAdmin
         Type: modifier ()
         Source: "onlyAdmin"
    Block
       Source: "{ //Here the special address that can transfer during a lock is set\r\n        allowedAddr = _allowedAddr;\r\n        AddAllowedToTransfer (allowedAddr);\r\n    }"
      ExpressionStatement
         Gas costs: 20267
         Source: "allowedAddr = _allowedAddr"
        Assignment using operator =
           Type: address
           Source: "allowedAddr = _allowedAddr"
          Identifier allowedAddr
             Type: address
             Source: "allowedAddr"
          Identifier _allowedAddr
             Type: address
             Source: "_allowedAddr"
      ExpressionStatement
         Gas costs: [???]
         Source: "AddAllowedToTransfer (allowedAddr)"
        FunctionCall
           Type: tuple()
           Source: "AddAllowedToTransfer (allowedAddr)"
          Identifier AddAllowedToTransfer
             Type: function (address)
             Source: "AddAllowedToTransfer"
          Identifier allowedAddr
             Type: address
             Source: "allowedAddr"
  FunctionDefinition "setLock" - public
     Source: "function setLock(uint _timeInMins) onlyAdmin public { //Only the admin can set a lock on transfers\r\n        require(_timeInMins > 0);\r\n        uint mins = _timeInMins * 1 minutes;\r\n        lockThreshold = SafeMath.add(now,mins);\r\n        SetLock(lockThreshold);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint _timeInMins)"
      VariableDeclaration "_timeInMins"
         Type: uint256
         Source: "uint _timeInMins"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyAdmin"
       Gas costs: 0
       Source: "onlyAdmin"
      Identifier onlyAdmin
         Type: modifier ()
         Source: "onlyAdmin"
    Block
       Source: "{ //Only the admin can set a lock on transfers\r\n        require(_timeInMins > 0);\r\n        uint mins = _timeInMins * 1 minutes;\r\n        lockThreshold = SafeMath.add(now,mins);\r\n        SetLock(lockThreshold);\r\n    }"
      ExpressionStatement
         Gas costs: 35
         Source: "require(_timeInMins > 0)"
        FunctionCall
           Type: tuple()
           Source: "require(_timeInMins > 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "_timeInMins > 0"
            Identifier _timeInMins
               Type: uint256
               Source: "_timeInMins"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      VariableDeclarationStatement
         Gas costs: 19
         Source: "uint mins = _timeInMins * 1 minutes"
        VariableDeclaration "mins"
           Type: uint256
           Source: "uint mins"
          ElementaryTypeName uint
             Source: "uint"
        BinaryOperation using operator *
           Type: uint256
           Source: "_timeInMins * 1 minutes"
          Identifier _timeInMins
             Type: uint256
             Source: "_timeInMins"
          Literal, token: [no token] value: 1
             Type: int_const 60
             Source: "1 minutes"
      ExpressionStatement
         Gas costs: 20031
         Source: "lockThreshold = SafeMath.add(now,mins)"
        Assignment using operator =
           Type: uint256
           Source: "lockThreshold = SafeMath.add(now,mins)"
          Identifier lockThreshold
             Type: uint256
             Source: "lockThreshold"
          FunctionCall
             Type: uint256
             Source: "SafeMath.add(now,mins)"
            MemberAccess to member add
               Type: function (uint256,uint256) view returns (uint256)
               Source: "SafeMath.add"
              Identifier SafeMath
                 Type: type(library SafeMath)
                 Source: "SafeMath"
            Identifier now
               Type: uint256
               Source: "now"
            Identifier mins
               Type: uint256
               Source: "mins"
      ExpressionStatement
         Gas costs: [???]
         Source: "SetLock(lockThreshold)"
        FunctionCall
           Type: tuple()
           Source: "SetLock(lockThreshold)"
          Identifier SetLock
             Type: function (uint256)
             Source: "SetLock"
          Identifier lockThreshold
             Type: uint256
             Source: "lockThreshold"
  EventDefinition "SetLock"
     Gas costs: 0
     Source: "event SetLock(uint timeInMins);"
    ParameterList
       Source: "(uint timeInMins)"
      VariableDeclaration "timeInMins"
         Type: uint256
         Source: "uint timeInMins"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "AddAllowedToTransfer"
     Gas costs: 0
     Source: "event AddAllowedToTransfer (address allowedAddress);"
    ParameterList
       Source: "(address allowedAddress)"
      VariableDeclaration "allowedAddress"
         Type: address
         Source: "address allowedAddress"
        ElementaryTypeName address
           Source: "address"
  EventDefinition "TransferAdminship"
     Gas costs: 0
     Source: "event TransferAdminship(address newAdminister);"
    ParameterList
       Source: "(address newAdminister)"
      VariableDeclaration "newAdminister"
         Type: address
         Source: "address newAdminister"
        ElementaryTypeName address
           Source: "address"
  EventDefinition "Admined"
     Gas costs: 0
     Source: "event Admined(address administer);"
    ParameterList
       Source: "(address administer)"
      VariableDeclaration "administer"
         Type: address
         Source: "address administer"
        ElementaryTypeName address
           Source: "address"
ContractDefinition "Token"
   Source: "contract Token is admined {\r\n\r\n    uint256 public totalSupply;\r\n    mapping (address => uint256) balances; //Balances mapping\r\n    mapping (address => mapping (address => uint256)) allowed; //Allowance mapping\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 bal) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) endOfLock public returns (bool success) {\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\r\n        balances[_to] = SafeMath.add(balances[_to], _value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) endOfLock public returns (bool success) {\r\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\r\n        balances[_to] = SafeMath.add(balances[_to], _value);\r\n        balances[_from] = SafeMath.sub(balances[_from], _value);\r\n        allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) endOfLock public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function mintToken(address _target, uint256 _mintedAmount) onlyAdmin endOfLock public {\r\n        balances[_target] = SafeMath.add(balances[_target], _mintedAmount);\r\n        totalSupply = SafeMath.add(totalSupply, _mintedAmount);\r\n        Transfer(0, this, _mintedAmount);\r\n        Transfer(this, _target, _mintedAmount);\r\n    }\r\n\r\n    function burnToken(address _target, uint256 _burnedAmount) onlyAdmin endOfLock public {\r\n        balances[_target] = SafeMath.sub(balances[_target], _burnedAmount);\r\n        totalSupply = SafeMath.sub(totalSupply, _burnedAmount);\r\n        Burned(_target, _burnedAmount);\r\n    }\r\n    //This is an especial Admin-only function to make massive tokens assignments\r\n    function batch(address[] data,uint256 amount) onlyAdmin public { //It takes an array of addresses and an amount\r\n        require(balances[this] >= data.length*amount); //The contract must hold the needed tokens\r\n        for (uint i=0; i<data.length; i++) { //It moves over the array\r\n            address target = data[i]; //Take an address\r\n            balances[target] = SafeMath.add(balances[target], amount); //Add an amount to the target address\r\n            balances[this] = SafeMath.sub(balances[this], amount); //Sub that amount from the contract\r\n            allowed[this][msg.sender] = SafeMath.sub(allowed[this][msg.sender], amount); //Sub allowance from the contract creator over the contract\r\n            Transfer(this, target, amount); //log every transfer\r\n        }\r\n    }\r\n\r\n    //Events to log transactions\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Burned(address indexed _target, uint256 _value);\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "admined"
    UserDefinedTypeName "admined"
       Source: "admined"
  VariableDeclaration "totalSupply"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public totalSupply"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping (address => uint256) balances"
    Mapping
       Source: "mapping (address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "allowed"
     Type: mapping(address => mapping(address => uint256))
     Gas costs: 0
     Source: "mapping (address => mapping (address => uint256)) allowed"
    Mapping
       Source: "mapping (address => mapping (address => uint256))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping (address => uint256)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) public constant returns (uint256 bal) {\r\n        return balances[_owner];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 bal)"
      VariableDeclaration "bal"
         Type: uint256
         Source: "uint256 bal"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return balances[_owner];\r\n    }"
      Return
         Gas costs: 304
         Source: "return balances[_owner]"
        IndexAccess
           Type: uint256
           Source: "balances[_owner]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          Identifier _owner
             Type: address
             Source: "_owner"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) endOfLock public returns (bool success) {\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\r\n        balances[_to] = SafeMath.add(balances[_to], _value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "endOfLock"
       Gas costs: 0
       Source: "endOfLock"
      Identifier endOfLock
         Type: modifier ()
         Source: "endOfLock"
    Block
       Source: "{\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\r\n        balances[_to] = SafeMath.add(balances[_to], _value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 333
         Source: "require(balances[msg.sender] >= _value)"
        FunctionCall
           Type: tuple()
           Source: "require(balances[msg.sender] >= _value)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "balances[msg.sender] >= _value"
            IndexAccess
               Type: uint256
               Source: "balances[msg.sender]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 20422
         Source: "balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value)"
        Assignment using operator =
           Type: uint256
           Source: "balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value)"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          FunctionCall
             Type: uint256
             Source: "SafeMath.sub(balances[msg.sender], _value)"
            MemberAccess to member sub
               Type: function (uint256,uint256) view returns (uint256)
               Source: "SafeMath.sub"
              Identifier SafeMath
                 Type: type(library SafeMath)
                 Source: "SafeMath"
            IndexAccess
               Type: uint256
               Source: "balances[msg.sender]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 20418
         Source: "balances[_to] = SafeMath.add(balances[_to], _value)"
        Assignment using operator =
           Type: uint256
           Source: "balances[_to] = SafeMath.add(balances[_to], _value)"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
          FunctionCall
             Type: uint256
             Source: "SafeMath.add(balances[_to], _value)"
            MemberAccess to member add
               Type: function (uint256,uint256) view returns (uint256)
               Source: "SafeMath.add"
              Identifier SafeMath
                 Type: type(library SafeMath)
                 Source: "SafeMath"
            IndexAccess
               Type: uint256
               Source: "balances[_to]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _to
                 Type: address
                 Source: "_to"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: [???]
         Source: "Transfer(msg.sender, _to, _value)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(msg.sender, _to, _value)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _value) endOfLock public returns (bool success) {\r\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\r\n        balances[_to] = SafeMath.add(balances[_to], _value);\r\n        balances[_from] = SafeMath.sub(balances[_from], _value);\r\n        allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "endOfLock"
       Gas costs: 0
       Source: "endOfLock"
      Identifier endOfLock
         Type: modifier ()
         Source: "endOfLock"
    Block
       Source: "{\r\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\r\n        balances[_to] = SafeMath.add(balances[_to], _value);\r\n        balances[_from] = SafeMath.sub(balances[_from], _value);\r\n        allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 753
         Source: "require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value)"
        FunctionCall
           Type: tuple()
           Source: "require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator &&
             Type: bool
             Source: "balances[_from] >= _value && allowed[_from][msg.sender] >= _value"
            BinaryOperation using operator >=
               Type: bool
               Source: "balances[_from] >= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_from]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _from
                   Type: address
                   Source: "_from"
              Identifier _value
                 Type: uint256
                 Source: "_value"
            BinaryOperation using operator >=
               Type: bool
               Source: "allowed[_from][msg.sender] >= _value"
              IndexAccess
                 Type: uint256
                 Source: "allowed[_from][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[_from]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  Identifier _from
                     Type: address
                     Source: "_from"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
      ExpressionStatement
         Gas costs: 20413
         Source: "balances[_to] = SafeMath.add(balances[_to], _value)"
        Assignment using operator =
           Type: uint256
           Source: "balances[_to] = SafeMath.add(balances[_to], _value)"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
          FunctionCall
             Type: uint256
             Source: "SafeMath.add(balances[_to], _value)"
            MemberAccess to member add
               Type: function (uint256,uint256) view returns (uint256)
               Source: "SafeMath.add"
              Identifier SafeMath
                 Type: type(library SafeMath)
                 Source: "SafeMath"
            IndexAccess
               Type: uint256
               Source: "balances[_to]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _to
                 Type: address
                 Source: "_to"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 20407
         Source: "balances[_from] = SafeMath.sub(balances[_from], _value)"
        Assignment using operator =
           Type: uint256
           Source: "balances[_from] = SafeMath.sub(balances[_from], _value)"
          IndexAccess
             Type: uint256
             Source: "balances[_from]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _from
               Type: address
               Source: "_from"
          FunctionCall
             Type: uint256
             Source: "SafeMath.sub(balances[_from], _value)"
            MemberAccess to member sub
               Type: function (uint256,uint256) view returns (uint256)
               Source: "SafeMath.sub"
              Identifier SafeMath
                 Type: type(library SafeMath)
                 Source: "SafeMath"
            IndexAccess
               Type: uint256
               Source: "balances[_from]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _from
                 Type: address
                 Source: "_from"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 20596
         Source: "allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value)"
        Assignment using operator =
           Type: uint256
           Source: "allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value)"
          IndexAccess
             Type: uint256
             Source: "allowed[_from][msg.sender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[_from]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              Identifier _from
                 Type: address
                 Source: "_from"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          FunctionCall
             Type: uint256
             Source: "SafeMath.sub(allowed[_from][msg.sender], _value)"
            MemberAccess to member sub
               Type: function (uint256,uint256) view returns (uint256)
               Source: "SafeMath.sub"
              Identifier SafeMath
                 Type: type(library SafeMath)
                 Source: "SafeMath"
            IndexAccess
               Type: uint256
               Source: "allowed[_from][msg.sender]"
              IndexAccess
                 Type: mapping(address => uint256)
                 Source: "allowed[_from]"
                Identifier allowed
                   Type: mapping(address => mapping(address => uint256))
                   Source: "allowed"
                Identifier _from
                   Type: address
                   Source: "_from"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: [???]
         Source: "Transfer(_from, _to, _value)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(_from, _to, _value)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint256 _value) endOfLock public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "endOfLock"
       Gas costs: 0
       Source: "endOfLock"
      Identifier endOfLock
         Type: modifier ()
         Source: "endOfLock"
    Block
       Source: "{\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 20199
         Source: "allowed[msg.sender][_spender] = _value"
        Assignment using operator =
           Type: uint256
           Source: "allowed[msg.sender][_spender] = _value"
          IndexAccess
             Type: uint256
             Source: "allowed[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[msg.sender]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: [???]
         Source: "Approval(msg.sender, _spender, _value)"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender, _spender, _value)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint256 remaining"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return allowed[_owner][_spender];\r\n    }"
      Return
         Gas costs: 394
         Source: "return allowed[_owner][_spender]"
        IndexAccess
           Type: uint256
           Source: "allowed[_owner][_spender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowed[_owner]"
            Identifier allowed
               Type: mapping(address => mapping(address => uint256))
               Source: "allowed"
            Identifier _owner
               Type: address
               Source: "_owner"
          Identifier _spender
             Type: address
             Source: "_spender"
  FunctionDefinition "mintToken" - public
     Source: "function mintToken(address _target, uint256 _mintedAmount) onlyAdmin endOfLock public {\r\n        balances[_target] = SafeMath.add(balances[_target], _mintedAmount);\r\n        totalSupply = SafeMath.add(totalSupply, _mintedAmount);\r\n        Transfer(0, this, _mintedAmount);\r\n        Transfer(this, _target, _mintedAmount);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _target, uint256 _mintedAmount)"
      VariableDeclaration "_target"
         Type: address
         Source: "address _target"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_mintedAmount"
         Type: uint256
         Source: "uint256 _mintedAmount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyAdmin"
       Gas costs: 0
       Source: "onlyAdmin"
      Identifier onlyAdmin
         Type: modifier ()
         Source: "onlyAdmin"
    ModifierInvocation "endOfLock"
       Gas costs: 0
       Source: "endOfLock"
      Identifier endOfLock
         Type: modifier ()
         Source: "endOfLock"
    Block
       Source: "{\r\n        balances[_target] = SafeMath.add(balances[_target], _mintedAmount);\r\n        totalSupply = SafeMath.add(totalSupply, _mintedAmount);\r\n        Transfer(0, this, _mintedAmount);\r\n        Transfer(this, _target, _mintedAmount);\r\n    }"
      ExpressionStatement
         Gas costs: 20424
         Source: "balances[_target] = SafeMath.add(balances[_target], _mintedAmount)"
        Assignment using operator =
           Type: uint256
           Source: "balances[_target] = SafeMath.add(balances[_target], _mintedAmount)"
          IndexAccess
             Type: uint256
             Source: "balances[_target]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _target
               Type: address
               Source: "_target"
          FunctionCall
             Type: uint256
             Source: "SafeMath.add(balances[_target], _mintedAmount)"
            MemberAccess to member add
               Type: function (uint256,uint256) view returns (uint256)
               Source: "SafeMath.add"
              Identifier SafeMath
                 Type: type(library SafeMath)
                 Source: "SafeMath"
            IndexAccess
               Type: uint256
               Source: "balances[_target]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _target
                 Type: address
                 Source: "_target"
            Identifier _mintedAmount
               Type: uint256
               Source: "_mintedAmount"
      ExpressionStatement
         Gas costs: 20232
         Source: "totalSupply = SafeMath.add(totalSupply, _mintedAmount)"
        Assignment using operator =
           Type: uint256
           Source: "totalSupply = SafeMath.add(totalSupply, _mintedAmount)"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          FunctionCall
             Type: uint256
             Source: "SafeMath.add(totalSupply, _mintedAmount)"
            MemberAccess to member add
               Type: function (uint256,uint256) view returns (uint256)
               Source: "SafeMath.add"
              Identifier SafeMath
                 Type: type(library SafeMath)
                 Source: "SafeMath"
            Identifier totalSupply
               Type: uint256
               Source: "totalSupply"
            Identifier _mintedAmount
               Type: uint256
               Source: "_mintedAmount"
      ExpressionStatement
         Gas costs: [???]
         Source: "Transfer(0, this, _mintedAmount)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(0, this, _mintedAmount)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
          Identifier this
             Type: contract Token
             Source: "this"
          Identifier _mintedAmount
             Type: uint256
             Source: "_mintedAmount"
      ExpressionStatement
         Gas costs: [???]
         Source: "Transfer(this, _target, _mintedAmount)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(this, _target, _mintedAmount)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          Identifier this
             Type: contract Token
             Source: "this"
          Identifier _target
             Type: address
             Source: "_target"
          Identifier _mintedAmount
             Type: uint256
             Source: "_mintedAmount"
  FunctionDefinition "burnToken" - public
     Source: "function burnToken(address _target, uint256 _burnedAmount) onlyAdmin endOfLock public {\r\n        balances[_target] = SafeMath.sub(balances[_target], _burnedAmount);\r\n        totalSupply = SafeMath.sub(totalSupply, _burnedAmount);\r\n        Burned(_target, _burnedAmount);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _target, uint256 _burnedAmount)"
      VariableDeclaration "_target"
         Type: address
         Source: "address _target"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_burnedAmount"
         Type: uint256
         Source: "uint256 _burnedAmount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyAdmin"
       Gas costs: 0
       Source: "onlyAdmin"
      Identifier onlyAdmin
         Type: modifier ()
         Source: "onlyAdmin"
    ModifierInvocation "endOfLock"
       Gas costs: 0
       Source: "endOfLock"
      Identifier endOfLock
         Type: modifier ()
         Source: "endOfLock"
    Block
       Source: "{\r\n        balances[_target] = SafeMath.sub(balances[_target], _burnedAmount);\r\n        totalSupply = SafeMath.sub(totalSupply, _burnedAmount);\r\n        Burned(_target, _burnedAmount);\r\n    }"
      ExpressionStatement
         Gas costs: 20424
         Source: "balances[_target] = SafeMath.sub(balances[_target], _burnedAmount)"
        Assignment using operator =
           Type: uint256
           Source: "balances[_target] = SafeMath.sub(balances[_target], _burnedAmount)"
          IndexAccess
             Type: uint256
             Source: "balances[_target]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _target
               Type: address
               Source: "_target"
          FunctionCall
             Type: uint256
             Source: "SafeMath.sub(balances[_target], _burnedAmount)"
            MemberAccess to member sub
               Type: function (uint256,uint256) view returns (uint256)
               Source: "SafeMath.sub"
              Identifier SafeMath
                 Type: type(library SafeMath)
                 Source: "SafeMath"
            IndexAccess
               Type: uint256
               Source: "balances[_target]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _target
                 Type: address
                 Source: "_target"
            Identifier _burnedAmount
               Type: uint256
               Source: "_burnedAmount"
      ExpressionStatement
         Gas costs: 20232
         Source: "totalSupply = SafeMath.sub(totalSupply, _burnedAmount)"
        Assignment using operator =
           Type: uint256
           Source: "totalSupply = SafeMath.sub(totalSupply, _burnedAmount)"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          FunctionCall
             Type: uint256
             Source: "SafeMath.sub(totalSupply, _burnedAmount)"
            MemberAccess to member sub
               Type: function (uint256,uint256) view returns (uint256)
               Source: "SafeMath.sub"
              Identifier SafeMath
                 Type: type(library SafeMath)
                 Source: "SafeMath"
            Identifier totalSupply
               Type: uint256
               Source: "totalSupply"
            Identifier _burnedAmount
               Type: uint256
               Source: "_burnedAmount"
      ExpressionStatement
         Gas costs: [???]
         Source: "Burned(_target, _burnedAmount)"
        FunctionCall
           Type: tuple()
           Source: "Burned(_target, _burnedAmount)"
          Identifier Burned
             Type: function (address,uint256)
             Source: "Burned"
          Identifier _target
             Type: address
             Source: "_target"
          Identifier _burnedAmount
             Type: uint256
             Source: "_burnedAmount"
  FunctionDefinition "batch" - public
     Source: "function batch(address[] data,uint256 amount) onlyAdmin public { //It takes an array of addresses and an amount\r\n        require(balances[this] >= data.length*amount); //The contract must hold the needed tokens\r\n        for (uint i=0; i<data.length; i++) { //It moves over the array\r\n            address target = data[i]; //Take an address\r\n            balances[target] = SafeMath.add(balances[target], amount); //Add an amount to the target address\r\n            balances[this] = SafeMath.sub(balances[this], amount); //Sub that amount from the contract\r\n            allowed[this][msg.sender] = SafeMath.sub(allowed[this][msg.sender], amount); //Sub allowance from the contract creator over the contract\r\n            Transfer(this, target, amount); //log every transfer\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address[] data,uint256 amount)"
      VariableDeclaration "data"
         Type: address[] memory
         Source: "address[] data"
        ArrayTypeName
           Source: "address[]"
          ElementaryTypeName address
             Source: "address"
      VariableDeclaration "amount"
         Type: uint256
         Source: "uint256 amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyAdmin"
       Gas costs: 0
       Source: "onlyAdmin"
      Identifier onlyAdmin
         Type: modifier ()
         Source: "onlyAdmin"
    Block
       Source: "{ //It takes an array of addresses and an amount\r\n        require(balances[this] >= data.length*amount); //The contract must hold the needed tokens\r\n        for (uint i=0; i<data.length; i++) { //It moves over the array\r\n            address target = data[i]; //Take an address\r\n            balances[target] = SafeMath.add(balances[target], amount); //Add an amount to the target address\r\n            balances[this] = SafeMath.sub(balances[this], amount); //Sub that amount from the contract\r\n            allowed[this][msg.sender] = SafeMath.sub(allowed[this][msg.sender], amount); //Sub allowance from the contract creator over the contract\r\n            Transfer(this, target, amount); //log every transfer\r\n        }\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(balances[this] >= data.length*amount)"
        FunctionCall
           Type: tuple()
           Source: "require(balances[this] >= data.length*amount)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "balances[this] >= data.length*amount"
            IndexAccess
               Type: uint256
               Source: "balances[this]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier this
                 Type: contract Token
                 Source: "this"
            BinaryOperation using operator *
               Type: uint256
               Source: "data.length*amount"
              MemberAccess to member length
                 Type: uint256
                 Source: "data.length"
                Identifier data
                   Type: address[] memory
                   Source: "data"
              Identifier amount
                 Type: uint256
                 Source: "amount"
      ForStatement
         Source: "for (uint i=0; i<data.length; i++) { //It moves over the array\r\n            address target = data[i]; //Take an address\r\n            balances[target] = SafeMath.add(balances[target], amount); //Add an amount to the target address\r\n            balances[this] = SafeMath.sub(balances[this], amount); //Sub that amount from the contract\r\n            allowed[this][msg.sender] = SafeMath.sub(allowed[this][msg.sender], amount); //Sub allowance from the contract creator over the contract\r\n            Transfer(this, target, amount); //log every transfer\r\n        }"
        VariableDeclarationStatement
           Gas costs: 11
           Source: "uint i=0"
          VariableDeclaration "i"
             Type: uint256
             Source: "uint i"
            ElementaryTypeName uint
               Source: "uint"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        BinaryOperation using operator <
           Type: bool
           Gas costs: [???]
           Source: "i<data.length"
          Identifier i
             Type: uint256
             Source: "i"
          MemberAccess to member length
             Type: uint256
             Source: "data.length"
            Identifier data
               Type: address[] memory
               Source: "data"
        ExpressionStatement
           Gas costs: 19
           Source: "i++"
          UnaryOperation (postfix) ++
             Type: uint256
             Source: "i++"
            Identifier i
               Type: uint256
               Source: "i"
        Block
           Source: "{ //It moves over the array\r\n            address target = data[i]; //Take an address\r\n            balances[target] = SafeMath.add(balances[target], amount); //Add an amount to the target address\r\n            balances[this] = SafeMath.sub(balances[this], amount); //Sub that amount from the contract\r\n            allowed[this][msg.sender] = SafeMath.sub(allowed[this][msg.sender], amount); //Sub allowance from the contract creator over the contract\r\n            Transfer(this, target, amount); //log every transfer\r\n        }"
          VariableDeclarationStatement
             Gas costs: [???]
             Source: "address target = data[i]"
            VariableDeclaration "target"
               Type: address
               Source: "address target"
              ElementaryTypeName address
                 Source: "address"
            IndexAccess
               Type: address
               Source: "data[i]"
              Identifier data
                 Type: address[] memory
                 Source: "data"
              Identifier i
                 Type: uint256
                 Source: "i"
          ExpressionStatement
             Gas costs: 20424
             Source: "balances[target] = SafeMath.add(balances[target], amount)"
            Assignment using operator =
               Type: uint256
               Source: "balances[target] = SafeMath.add(balances[target], amount)"
              IndexAccess
                 Type: uint256
                 Source: "balances[target]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier target
                   Type: address
                   Source: "target"
              FunctionCall
                 Type: uint256
                 Source: "SafeMath.add(balances[target], amount)"
                MemberAccess to member add
                   Type: function (uint256,uint256) view returns (uint256)
                   Source: "SafeMath.add"
                  Identifier SafeMath
                     Type: type(library SafeMath)
                     Source: "SafeMath"
                IndexAccess
                   Type: uint256
                   Source: "balances[target]"
                  Identifier balances
                     Type: mapping(address => uint256)
                     Source: "balances"
                  Identifier target
                     Type: address
                     Source: "target"
                Identifier amount
                   Type: uint256
                   Source: "amount"
          ExpressionStatement
             Gas costs: 20416
             Source: "balances[this] = SafeMath.sub(balances[this], amount)"
            Assignment using operator =
               Type: uint256
               Source: "balances[this] = SafeMath.sub(balances[this], amount)"
              IndexAccess
                 Type: uint256
                 Source: "balances[this]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier this
                   Type: contract Token
                   Source: "this"
              FunctionCall
                 Type: uint256
                 Source: "SafeMath.sub(balances[this], amount)"
                MemberAccess to member sub
                   Type: function (uint256,uint256) view returns (uint256)
                   Source: "SafeMath.sub"
                  Identifier SafeMath
                     Type: type(library SafeMath)
                     Source: "SafeMath"
                IndexAccess
                   Type: uint256
                   Source: "balances[this]"
                  Identifier balances
                     Type: mapping(address => uint256)
                     Source: "balances"
                  Identifier this
                     Type: contract Token
                     Source: "this"
                Identifier amount
                   Type: uint256
                   Source: "amount"
          ExpressionStatement
             Gas costs: 20594
             Source: "allowed[this][msg.sender] = SafeMath.sub(allowed[this][msg.sender], amount)"
            Assignment using operator =
               Type: uint256
               Source: "allowed[this][msg.sender] = SafeMath.sub(allowed[this][msg.sender], amount)"
              IndexAccess
                 Type: uint256
                 Source: "allowed[this][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[this]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  Identifier this
                     Type: contract Token
                     Source: "this"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              FunctionCall
                 Type: uint256
                 Source: "SafeMath.sub(allowed[this][msg.sender], amount)"
                MemberAccess to member sub
                   Type: function (uint256,uint256) view returns (uint256)
                   Source: "SafeMath.sub"
                  Identifier SafeMath
                     Type: type(library SafeMath)
                     Source: "SafeMath"
                IndexAccess
                   Type: uint256
                   Source: "allowed[this][msg.sender]"
                  IndexAccess
                     Type: mapping(address => uint256)
                     Source: "allowed[this]"
                    Identifier allowed
                       Type: mapping(address => mapping(address => uint256))
                       Source: "allowed"
                    Identifier this
                       Type: contract Token
                       Source: "this"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
                Identifier amount
                   Type: uint256
                   Source: "amount"
          ExpressionStatement
             Gas costs: [???]
             Source: "Transfer(this, target, amount)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(this, target, amount)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              Identifier this
                 Type: contract Token
                 Source: "this"
              Identifier target
                 Type: address
                 Source: "target"
              Identifier amount
                 Type: uint256
                 Source: "amount"
  EventDefinition "Transfer"
     Gas costs: 0
     Source: "event Transfer(address indexed _from, address indexed _to, uint256 _value);"
    ParameterList
       Source: "(address indexed _from, address indexed _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address indexed _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address indexed _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Approval"
     Gas costs: 0
     Source: "event Approval(address indexed _owner, address indexed _spender, uint256 _value);"
    ParameterList
       Source: "(address indexed _owner, address indexed _spender, uint256 _value)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address indexed _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address indexed _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Burned"
     Gas costs: 0
     Source: "event Burned(address indexed _target, uint256 _value);"
    ParameterList
       Source: "(address indexed _target, uint256 _value)"
      VariableDeclaration "_target"
         Type: address
         Source: "address indexed _target"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
ContractDefinition "Asset"
   Source: "contract Asset is admined, Token {\r\n\r\n    string public name;\r\n    uint8 public decimals = 18;\r\n    string public symbol;\r\n    string public version = '0.1';\r\n    uint256 initialAmount = 80000000000000000000000000; //80Million tonkens to be created\r\n\r\n    function Asset(\r\n        string _tokenName,\r\n        string _tokenSymbol\r\n        ) public {\r\n        balances[this] = 79920000000000000000000000; // Initial 99.9% stay on the contract\r\n        balances[0xFAB6368b0F7be60c573a6562d82469B5ED9e7eE6] = 80000000000000000000000; //Initial 0.1% for contract writer\r\n        allowed[this][msg.sender] = 79920000000000000000000000; //Set allowance for the contract creator/administer over the contract holded amount\r\n        totalSupply = initialAmount; //Total supply is the initial amount at Asset\r\n        name = _tokenName; //Name set on deployment\r\n        symbol = _tokenSymbol; //Simbol set on deployment\r\n        Transfer(0, this, initialAmount);\r\n        Transfer(this, 0xFAB6368b0F7be60c573a6562d82469B5ED9e7eE6, 80000000000000000000000);\r\n        Approval(this, msg.sender, 79920000000000000000000000);\r\n    }\r\n\r\n    function() {\r\n        revert();\r\n    }\r\n\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "admined"
    UserDefinedTypeName "admined"
       Source: "admined"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Token"
    UserDefinedTypeName "Token"
       Source: "Token"
  VariableDeclaration "name"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public name"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "decimals"
     Type: uint8
     Gas costs: [???]
     Source: "uint8 public decimals = 18"
    ElementaryTypeName uint8
       Source: "uint8"
    Literal, token: [no token] value: 18
       Type: int_const 18
       Source: "18"
  VariableDeclaration "symbol"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public symbol"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "version"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public version = '0.1'"
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: 0.1
       Type: literal_string "0.1"
       Source: "'0.1'"
  VariableDeclaration "initialAmount"
     Type: uint256
     Gas costs: 0
     Source: "uint256 initialAmount = 80000000000000000000000000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 80000000000000000000000000
       Type: int_const 80000000000000000000000000
       Source: "80000000000000000000000000"
  FunctionDefinition "Asset" - public
     Source: "function Asset(\r\n        string _tokenName,\r\n        string _tokenSymbol\r\n        ) public {\r\n        balances[this] = 79920000000000000000000000; // Initial 99.9% stay on the contract\r\n        balances[0xFAB6368b0F7be60c573a6562d82469B5ED9e7eE6] = 80000000000000000000000; //Initial 0.1% for contract writer\r\n        allowed[this][msg.sender] = 79920000000000000000000000; //Set allowance for the contract creator/administer over the contract holded amount\r\n        totalSupply = initialAmount; //Total supply is the initial amount at Asset\r\n        name = _tokenName; //Name set on deployment\r\n        symbol = _tokenSymbol; //Simbol set on deployment\r\n        Transfer(0, this, initialAmount);\r\n        Transfer(this, 0xFAB6368b0F7be60c573a6562d82469B5ED9e7eE6, 80000000000000000000000);\r\n        Approval(this, msg.sender, 79920000000000000000000000);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(\r\n        string _tokenName,\r\n        string _tokenSymbol\r\n        )"
      VariableDeclaration "_tokenName"
         Type: string memory
         Source: "string _tokenName"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "_tokenSymbol"
         Type: string memory
         Source: "string _tokenSymbol"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        balances[this] = 79920000000000000000000000; // Initial 99.9% stay on the contract\r\n        balances[0xFAB6368b0F7be60c573a6562d82469B5ED9e7eE6] = 80000000000000000000000; //Initial 0.1% for contract writer\r\n        allowed[this][msg.sender] = 79920000000000000000000000; //Set allowance for the contract creator/administer over the contract holded amount\r\n        totalSupply = initialAmount; //Total supply is the initial amount at Asset\r\n        name = _tokenName; //Name set on deployment\r\n        symbol = _tokenSymbol; //Simbol set on deployment\r\n        Transfer(0, this, initialAmount);\r\n        Transfer(this, 0xFAB6368b0F7be60c573a6562d82469B5ED9e7eE6, 80000000000000000000000);\r\n        Approval(this, msg.sender, 79920000000000000000000000);\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "balances[this] = 79920000000000000000000000"
        Assignment using operator =
           Type: uint256
           Source: "balances[this] = 79920000000000000000000000"
          IndexAccess
             Type: uint256
             Source: "balances[this]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier this
               Type: contract Asset
               Source: "this"
          Literal, token: [no token] value: 79920000000000000000000000
             Type: int_const 79920000000000000000000000
             Source: "79920000000000000000000000"
      ExpressionStatement
         Gas costs: 0
         Source: "balances[0xFAB6368b0F7be60c573a6562d82469B5ED9e7eE6] = 80000000000000000000000"
        Assignment using operator =
           Type: uint256
           Source: "balances[0xFAB6368b0F7be60c573a6562d82469B5ED9e7eE6] = 80000000000000000000000"
          IndexAccess
             Type: uint256
             Source: "balances[0xFAB6368b0F7be60c573a6562d82469B5ED9e7eE6]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Literal, token: [no token] value: 0xFAB6368b0F7be60c573a6562d82469B5ED9e7eE6
               Type: address
               Source: "0xFAB6368b0F7be60c573a6562d82469B5ED9e7eE6"
          Literal, token: [no token] value: 80000000000000000000000
             Type: int_const 80000000000000000000000
             Source: "80000000000000000000000"
      ExpressionStatement
         Gas costs: 0
         Source: "allowed[this][msg.sender] = 79920000000000000000000000"
        Assignment using operator =
           Type: uint256
           Source: "allowed[this][msg.sender] = 79920000000000000000000000"
          IndexAccess
             Type: uint256
             Source: "allowed[this][msg.sender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[this]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              Identifier this
                 Type: contract Asset
                 Source: "this"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Literal, token: [no token] value: 79920000000000000000000000
             Type: int_const 79920000000000000000000000
             Source: "79920000000000000000000000"
      ExpressionStatement
         Gas costs: 0
         Source: "totalSupply = initialAmount"
        Assignment using operator =
           Type: uint256
           Source: "totalSupply = initialAmount"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          Identifier initialAmount
             Type: uint256
             Source: "initialAmount"
      ExpressionStatement
         Gas costs: 0
         Source: "name = _tokenName"
        Assignment using operator =
           Type: string storage ref
           Source: "name = _tokenName"
          Identifier name
             Type: string storage ref
             Source: "name"
          Identifier _tokenName
             Type: string memory
             Source: "_tokenName"
      ExpressionStatement
         Gas costs: 0
         Source: "symbol = _tokenSymbol"
        Assignment using operator =
           Type: string storage ref
           Source: "symbol = _tokenSymbol"
          Identifier symbol
             Type: string storage ref
             Source: "symbol"
          Identifier _tokenSymbol
             Type: string memory
             Source: "_tokenSymbol"
      ExpressionStatement
         Gas costs: 0
         Source: "Transfer(0, this, initialAmount)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(0, this, initialAmount)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
          Identifier this
             Type: contract Asset
             Source: "this"
          Identifier initialAmount
             Type: uint256
             Source: "initialAmount"
      ExpressionStatement
         Gas costs: 0
         Source: "Transfer(this, 0xFAB6368b0F7be60c573a6562d82469B5ED9e7eE6, 80000000000000000000000)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(this, 0xFAB6368b0F7be60c573a6562d82469B5ED9e7eE6, 80000000000000000000000)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          Identifier this
             Type: contract Asset
             Source: "this"
          Literal, token: [no token] value: 0xFAB6368b0F7be60c573a6562d82469B5ED9e7eE6
             Type: address
             Source: "0xFAB6368b0F7be60c573a6562d82469B5ED9e7eE6"
          Literal, token: [no token] value: 80000000000000000000000
             Type: int_const 80000000000000000000000
             Source: "80000000000000000000000"
      ExpressionStatement
         Gas costs: 0
         Source: "Approval(this, msg.sender, 79920000000000000000000000)"
        FunctionCall
           Type: tuple()
           Source: "Approval(this, msg.sender, 79920000000000000000000000)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          Identifier this
             Type: contract Asset
             Source: "this"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Literal, token: [no token] value: 79920000000000000000000000
             Type: int_const 79920000000000000000000000
             Source: "79920000000000000000000000"
  FunctionDefinition "" - public
     Source: "function() {\r\n        revert();\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        revert();\r\n    }"
      ExpressionStatement
         Gas costs: 6
         Source: "revert()"
        FunctionCall
           Type: tuple()
           Source: "revert()"
          Identifier revert
             Type: function () pure
             Source: "revert"
