Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0x1443616b940aea9fd52add2ebdc6966a4ac5f27d.sol =======
ContractDefinition "ForeignToken"
   Gas costs: 0
   Source: "contract ForeignToken {\r\n    function balanceOf(address _owner) constant returns (uint256);\r\n    function transfer(address _to, uint256 _value) returns (bool);\r\n}"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) constant returns (uint256);"
    ParameterList
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) returns (bool);"
    ParameterList
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
ContractDefinition "UselessEthereumToken2"
   Source: "contract UselessEthereumToken2 {\r\n    address owner = msg.sender;\r\n\r\n    bool public purchasingAllowed = false;\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    uint256 public totalContribution = 0;\r\n    uint256 public totalBonusTokensIssued = 0;\r\n\r\n    uint256 public totalSupply = 0;\r\n\r\n    function name() constant returns (string) { return \"Useless Ethereum Token 2\"; }\r\n    function symbol() constant returns (string) { return \"UET2\"; }\r\n    function decimals() constant returns (uint8) { return 18; }\r\n    \r\n    function balanceOf(address _owner) constant returns (uint256) { return balances[_owner]; }\r\n    \r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        // mitigates the ERC20 short address attack\r\n        if(msg.data.length < (2 * 32) + 4) { throw; }\r\n\r\n        if (_value == 0) { return false; }\r\n\r\n        uint256 fromBalance = balances[msg.sender];\r\n\r\n        bool sufficientFunds = fromBalance >= _value;\r\n        bool overflowed = balances[_to] + _value < balances[_to];\r\n        \r\n        if (sufficientFunds && !overflowed) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            \r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        // mitigates the ERC20 short address attack\r\n        if(msg.data.length < (3 * 32) + 4) { throw; }\r\n\r\n        if (_value == 0) { return false; }\r\n        \r\n        uint256 fromBalance = balances[_from];\r\n        uint256 allowance = allowed[_from][msg.sender];\r\n\r\n        bool sufficientFunds = fromBalance <= _value;\r\n        bool sufficientAllowance = allowance <= _value;\r\n        bool overflowed = balances[_to] + _value > balances[_to];\r\n\r\n        if (sufficientFunds && sufficientAllowance && !overflowed) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            \r\n            allowed[_from][msg.sender] -= _value;\r\n            \r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        // mitigates the ERC20 spend/approval race condition\r\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\r\n        \r\n        allowed[msg.sender][_spender] = _value;\r\n        \r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) constant returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function enablePurchasing() {\r\n        if (msg.sender != owner) { throw; }\r\n\r\n        purchasingAllowed = true;\r\n    }\r\n\r\n    function disablePurchasing() {\r\n        if (msg.sender != owner) { throw; }\r\n\r\n        purchasingAllowed = false;\r\n    }\r\n\r\n    function withdrawForeignTokens(address _tokenContract) returns (bool) {\r\n        if (msg.sender != owner) { throw; }\r\n\r\n        ForeignToken token = ForeignToken(_tokenContract);\r\n\r\n        uint256 amount = token.balanceOf(address(this));\r\n        return token.transfer(owner, amount);\r\n    }\r\n\r\n    function getStats() constant returns (uint256, uint256, uint256, bool) {\r\n        return (totalContribution, totalSupply, totalBonusTokensIssued, purchasingAllowed);\r\n    }\r\n\r\n    function() payable {\r\n        if (!purchasingAllowed) { throw; }\r\n        \r\n        if (msg.value == 0) { return; }\r\n\r\n        owner.transfer(msg.value);\r\n        totalContribution += msg.value;\r\n\r\n        uint256 tokensIssued = (msg.value * 100);\r\n\r\n        if (msg.value >= 10 finney) {\r\n            tokensIssued += totalContribution;\r\n\r\n            bytes20 bonusHash = ripemd160(block.coinbase, block.number, block.timestamp);\r\n            if (bonusHash[1] == 0) {\r\n                uint8 bonusMultiplier =\r\n                    ((bonusHash[2] & 0x01 != 0) ? 1 : 0) + ((bonusHash[2] & 0x02 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x04 != 0) ? 1 : 0) + ((bonusHash[2] & 0x08 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x10 != 0) ? 1 : 0) + ((bonusHash[2] & 0x20 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x40 != 0) ? 1 : 0) + ((bonusHash[2] & 0x80 != 0) ? 1 : 0);\r\n                \r\n                uint256 bonusTokensIssued = (msg.value * 100) * bonusMultiplier;\r\n                tokensIssued += bonusTokensIssued;\r\n\r\n                totalBonusTokensIssued += bonusTokensIssued;\r\n            }\r\n        }\r\n\r\n        totalSupply += tokensIssued;\r\n        balances[msg.sender] += tokensIssued;\r\n        \r\n        Transfer(address(this), msg.sender, tokensIssued);\r\n    }\r\n}"
  VariableDeclaration "owner"
     Type: address
     Gas costs: 0
     Source: "address owner = msg.sender"
    ElementaryTypeName address
       Source: "address"
    MemberAccess to member sender
       Type: address
       Source: "msg.sender"
      Identifier msg
         Type: msg
         Source: "msg"
  VariableDeclaration "purchasingAllowed"
     Type: bool
     Gas costs: 385
     Source: "bool public purchasingAllowed = false"
    ElementaryTypeName bool
       Source: "bool"
    Literal, token: false value: false
       Type: bool
       Source: "false"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping (address => uint256) balances"
    Mapping
       Source: "mapping (address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "allowed"
     Type: mapping(address => mapping(address => uint256))
     Gas costs: 0
     Source: "mapping (address => mapping (address => uint256)) allowed"
    Mapping
       Source: "mapping (address => mapping (address => uint256))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping (address => uint256)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint256
           Source: "uint256"
  VariableDeclaration "totalContribution"
     Type: uint256
     Gas costs: 287
     Source: "uint256 public totalContribution = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "totalBonusTokensIssued"
     Type: uint256
     Gas costs: 287
     Source: "uint256 public totalBonusTokensIssued = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "totalSupply"
     Type: uint256
     Gas costs: 287
     Source: "uint256 public totalSupply = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  FunctionDefinition "name" - public - const
     Source: "function name() constant returns (string) { return \"Useless Ethereum Token 2\"; }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(string)"
      VariableDeclaration ""
         Type: string memory
         Source: "string"
        ElementaryTypeName string
           Source: "string"
    Block
       Source: "{ return \"Useless Ethereum Token 2\"; }"
      Return
         Gas costs: 76
         Source: "return \"Useless Ethereum Token 2\""
        Literal, token: [no token] value: Useless Ethereum Token 2
           Type: literal_string "Useless Ethereum Token 2"
           Source: "\"Useless Ethereum Token 2\""
  FunctionDefinition "symbol" - public - const
     Source: "function symbol() constant returns (string) { return \"UET2\"; }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(string)"
      VariableDeclaration ""
         Type: string memory
         Source: "string"
        ElementaryTypeName string
           Source: "string"
    Block
       Source: "{ return \"UET2\"; }"
      Return
         Gas costs: 76
         Source: "return \"UET2\""
        Literal, token: [no token] value: UET2
           Type: literal_string "UET2"
           Source: "\"UET2\""
  FunctionDefinition "decimals" - public - const
     Source: "function decimals() constant returns (uint8) { return 18; }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint8)"
      VariableDeclaration ""
         Type: uint8
         Source: "uint8"
        ElementaryTypeName uint8
           Source: "uint8"
    Block
       Source: "{ return 18; }"
      Return
         Gas costs: 8
         Source: "return 18"
        Literal, token: [no token] value: 18
           Type: int_const 18
           Source: "18"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) constant returns (uint256) { return balances[_owner]; }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{ return balances[_owner]; }"
      Return
         Gas costs: 304
         Source: "return balances[_owner]"
        IndexAccess
           Type: uint256
           Source: "balances[_owner]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          Identifier _owner
             Type: address
             Source: "_owner"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) returns (bool success) {\r\n        // mitigates the ERC20 short address attack\r\n        if(msg.data.length < (2 * 32) + 4) { throw; }\r\n\r\n        if (_value == 0) { return false; }\r\n\r\n        uint256 fromBalance = balances[msg.sender];\r\n\r\n        bool sufficientFunds = fromBalance >= _value;\r\n        bool overflowed = balances[_to] + _value < balances[_to];\r\n        \r\n        if (sufficientFunds && !overflowed) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            \r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        // mitigates the ERC20 short address attack\r\n        if(msg.data.length < (2 * 32) + 4) { throw; }\r\n\r\n        if (_value == 0) { return false; }\r\n\r\n        uint256 fromBalance = balances[msg.sender];\r\n\r\n        bool sufficientFunds = fromBalance >= _value;\r\n        bool overflowed = balances[_to] + _value < balances[_to];\r\n        \r\n        if (sufficientFunds && !overflowed) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            \r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }"
      IfStatement
         Source: "if(msg.data.length < (2 * 32) + 4) { throw; }"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 16
           Source: "msg.data.length < (2 * 32) + 4"
          MemberAccess to member length
             Type: uint256
             Source: "msg.data.length"
            MemberAccess to member data
               Type: bytes calldata
               Source: "msg.data"
              Identifier msg
                 Type: msg
                 Source: "msg"
          BinaryOperation using operator +
             Type: int_const 68
             Source: "(2 * 32) + 4"
            TupleExpression
               Type: int_const 64
               Source: "(2 * 32)"
              BinaryOperation using operator *
                 Type: int_const 64
                 Source: "2 * 32"
                Literal, token: [no token] value: 2
                   Type: int_const 2
                   Source: "2"
                Literal, token: [no token] value: 32
                   Type: int_const 32
                   Source: "32"
            Literal, token: [no token] value: 4
               Type: int_const 4
               Source: "4"
        Block
           Source: "{ throw; }"
          Throw
             Gas costs: 6
             Source: "throw"
      IfStatement
         Source: "if (_value == 0) { return false; }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "_value == 0"
          Identifier _value
             Type: uint256
             Source: "_value"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{ return false; }"
          Return
             Gas costs: 19
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
      VariableDeclarationStatement
         Gas costs: 306
         Source: "uint256 fromBalance = balances[msg.sender]"
        VariableDeclaration "fromBalance"
           Type: uint256
           Source: "uint256 fromBalance"
          ElementaryTypeName uint256
             Source: "uint256"
        IndexAccess
           Type: uint256
           Source: "balances[msg.sender]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      VariableDeclarationStatement
         Gas costs: 20
         Source: "bool sufficientFunds = fromBalance >= _value"
        VariableDeclaration "sufficientFunds"
           Type: bool
           Source: "bool sufficientFunds"
          ElementaryTypeName bool
             Source: "bool"
        BinaryOperation using operator >=
           Type: bool
           Source: "fromBalance >= _value"
          Identifier fromBalance
             Type: uint256
             Source: "fromBalance"
          Identifier _value
             Type: uint256
             Source: "_value"
      VariableDeclarationStatement
         Gas costs: 603
         Source: "bool overflowed = balances[_to] + _value < balances[_to]"
        VariableDeclaration "overflowed"
           Type: bool
           Source: "bool overflowed"
          ElementaryTypeName bool
             Source: "bool"
        BinaryOperation using operator <
           Type: bool
           Source: "balances[_to] + _value < balances[_to]"
          BinaryOperation using operator +
             Type: uint256
             Source: "balances[_to] + _value"
            IndexAccess
               Type: uint256
               Source: "balances[_to]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _to
                 Type: address
                 Source: "_to"
            Identifier _value
               Type: uint256
               Source: "_value"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
      IfStatement
         Source: "if (sufficientFunds && !overflowed) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            \r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 31
           Source: "sufficientFunds && !overflowed"
          Identifier sufficientFunds
             Type: bool
             Source: "sufficientFunds"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!overflowed"
            Identifier overflowed
               Type: bool
               Source: "overflowed"
        Block
           Source: "{\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            \r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }"
          ExpressionStatement
             Gas costs: 20328
             Source: "balances[msg.sender] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "balances[msg.sender] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20323
             Source: "balances[_to] += _value"
            Assignment using operator +=
               Type: uint256
               Source: "balances[_to] += _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 1837
             Source: "Transfer(msg.sender, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(msg.sender, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{ return false; }"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        // mitigates the ERC20 short address attack\r\n        if(msg.data.length < (3 * 32) + 4) { throw; }\r\n\r\n        if (_value == 0) { return false; }\r\n        \r\n        uint256 fromBalance = balances[_from];\r\n        uint256 allowance = allowed[_from][msg.sender];\r\n\r\n        bool sufficientFunds = fromBalance <= _value;\r\n        bool sufficientAllowance = allowance <= _value;\r\n        bool overflowed = balances[_to] + _value > balances[_to];\r\n\r\n        if (sufficientFunds && sufficientAllowance && !overflowed) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            \r\n            allowed[_from][msg.sender] -= _value;\r\n            \r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        // mitigates the ERC20 short address attack\r\n        if(msg.data.length < (3 * 32) + 4) { throw; }\r\n\r\n        if (_value == 0) { return false; }\r\n        \r\n        uint256 fromBalance = balances[_from];\r\n        uint256 allowance = allowed[_from][msg.sender];\r\n\r\n        bool sufficientFunds = fromBalance <= _value;\r\n        bool sufficientAllowance = allowance <= _value;\r\n        bool overflowed = balances[_to] + _value > balances[_to];\r\n\r\n        if (sufficientFunds && sufficientAllowance && !overflowed) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            \r\n            allowed[_from][msg.sender] -= _value;\r\n            \r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }"
      IfStatement
         Source: "if(msg.data.length < (3 * 32) + 4) { throw; }"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 16
           Source: "msg.data.length < (3 * 32) + 4"
          MemberAccess to member length
             Type: uint256
             Source: "msg.data.length"
            MemberAccess to member data
               Type: bytes calldata
               Source: "msg.data"
              Identifier msg
                 Type: msg
                 Source: "msg"
          BinaryOperation using operator +
             Type: int_const 100
             Source: "(3 * 32) + 4"
            TupleExpression
               Type: int_const 96
               Source: "(3 * 32)"
              BinaryOperation using operator *
                 Type: int_const 96
                 Source: "3 * 32"
                Literal, token: [no token] value: 3
                   Type: int_const 3
                   Source: "3"
                Literal, token: [no token] value: 32
                   Type: int_const 32
                   Source: "32"
            Literal, token: [no token] value: 4
               Type: int_const 4
               Source: "4"
        Block
           Source: "{ throw; }"
          Throw
             Gas costs: 6
             Source: "throw"
      IfStatement
         Source: "if (_value == 0) { return false; }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "_value == 0"
          Identifier _value
             Type: uint256
             Source: "_value"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{ return false; }"
          Return
             Gas costs: 19
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
      VariableDeclarationStatement
         Gas costs: 307
         Source: "uint256 fromBalance = balances[_from]"
        VariableDeclaration "fromBalance"
           Type: uint256
           Source: "uint256 fromBalance"
          ElementaryTypeName uint256
             Source: "uint256"
        IndexAccess
           Type: uint256
           Source: "balances[_from]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          Identifier _from
             Type: address
             Source: "_from"
      VariableDeclarationStatement
         Gas costs: 390
         Source: "uint256 allowance = allowed[_from][msg.sender]"
        VariableDeclaration "allowance"
           Type: uint256
           Source: "uint256 allowance"
          ElementaryTypeName uint256
             Source: "uint256"
        IndexAccess
           Type: uint256
           Source: "allowed[_from][msg.sender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowed[_from]"
            Identifier allowed
               Type: mapping(address => mapping(address => uint256))
               Source: "allowed"
            Identifier _from
               Type: address
               Source: "_from"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      VariableDeclarationStatement
         Gas costs: 20
         Source: "bool sufficientFunds = fromBalance <= _value"
        VariableDeclaration "sufficientFunds"
           Type: bool
           Source: "bool sufficientFunds"
          ElementaryTypeName bool
             Source: "bool"
        BinaryOperation using operator <=
           Type: bool
           Source: "fromBalance <= _value"
          Identifier fromBalance
             Type: uint256
             Source: "fromBalance"
          Identifier _value
             Type: uint256
             Source: "_value"
      VariableDeclarationStatement
         Gas costs: 20
         Source: "bool sufficientAllowance = allowance <= _value"
        VariableDeclaration "sufficientAllowance"
           Type: bool
           Source: "bool sufficientAllowance"
          ElementaryTypeName bool
             Source: "bool"
        BinaryOperation using operator <=
           Type: bool
           Source: "allowance <= _value"
          Identifier allowance
             Type: uint256
             Source: "allowance"
          Identifier _value
             Type: uint256
             Source: "_value"
      VariableDeclarationStatement
         Gas costs: 603
         Source: "bool overflowed = balances[_to] + _value > balances[_to]"
        VariableDeclaration "overflowed"
           Type: bool
           Source: "bool overflowed"
          ElementaryTypeName bool
             Source: "bool"
        BinaryOperation using operator >
           Type: bool
           Source: "balances[_to] + _value > balances[_to]"
          BinaryOperation using operator +
             Type: uint256
             Source: "balances[_to] + _value"
            IndexAccess
               Type: uint256
               Source: "balances[_to]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _to
                 Type: address
                 Source: "_to"
            Identifier _value
               Type: uint256
               Source: "_value"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
      IfStatement
         Source: "if (sufficientFunds && sufficientAllowance && !overflowed) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            \r\n            allowed[_from][msg.sender] -= _value;\r\n            \r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 56
           Source: "sufficientFunds && sufficientAllowance && !overflowed"
          BinaryOperation using operator &&
             Type: bool
             Source: "sufficientFunds && sufficientAllowance"
            Identifier sufficientFunds
               Type: bool
               Source: "sufficientFunds"
            Identifier sufficientAllowance
               Type: bool
               Source: "sufficientAllowance"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!overflowed"
            Identifier overflowed
               Type: bool
               Source: "overflowed"
        Block
           Source: "{\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            \r\n            allowed[_from][msg.sender] -= _value;\r\n            \r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }"
          ExpressionStatement
             Gas costs: 20329
             Source: "balances[_to] += _value"
            Assignment using operator +=
               Type: uint256
               Source: "balances[_to] += _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20323
             Source: "balances[_from] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "balances[_from] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_from]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _from
                   Type: address
                   Source: "_from"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20412
             Source: "allowed[_from][msg.sender] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "allowed[_from][msg.sender] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "allowed[_from][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[_from]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  Identifier _from
                     Type: address
                     Source: "_from"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 1838
             Source: "Transfer(_from, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(_from, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              Identifier _from
                 Type: address
                 Source: "_from"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{ return false; }"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint256 _value) returns (bool success) {\r\n        // mitigates the ERC20 spend/approval race condition\r\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\r\n        \r\n        allowed[msg.sender][_spender] = _value;\r\n        \r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        // mitigates the ERC20 spend/approval race condition\r\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\r\n        \r\n        allowed[msg.sender][_spender] = _value;\r\n        \r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }"
      IfStatement
         Source: "if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 431
           Source: "_value != 0 && allowed[msg.sender][_spender] != 0"
          BinaryOperation using operator !=
             Type: bool
             Source: "_value != 0"
            Identifier _value
               Type: uint256
               Source: "_value"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
          BinaryOperation using operator !=
             Type: bool
             Source: "allowed[msg.sender][_spender] != 0"
            IndexAccess
               Type: uint256
               Source: "allowed[msg.sender][_spender]"
              IndexAccess
                 Type: mapping(address => uint256)
                 Source: "allowed[msg.sender]"
                Identifier allowed
                   Type: mapping(address => mapping(address => uint256))
                   Source: "allowed"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _spender
                 Type: address
                 Source: "_spender"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
        Block
           Source: "{ return false; }"
          Return
             Gas costs: 19
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
      ExpressionStatement
         Gas costs: 20199
         Source: "allowed[msg.sender][_spender] = _value"
        Assignment using operator =
           Type: uint256
           Source: "allowed[msg.sender][_spender] = _value"
          IndexAccess
             Type: uint256
             Source: "allowed[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[msg.sender]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 1837
         Source: "Approval(msg.sender, _spender, _value)"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender, _spender, _value)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) constant returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return allowed[_owner][_spender];\r\n    }"
      Return
         Gas costs: 394
         Source: "return allowed[_owner][_spender]"
        IndexAccess
           Type: uint256
           Source: "allowed[_owner][_spender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowed[_owner]"
            Identifier allowed
               Type: mapping(address => mapping(address => uint256))
               Source: "allowed"
            Identifier _owner
               Type: address
               Source: "_owner"
          Identifier _spender
             Type: address
             Source: "_spender"
  EventDefinition "Transfer"
     Gas costs: 0
     Source: "event Transfer(address indexed _from, address indexed _to, uint256 _value);"
    ParameterList
       Source: "(address indexed _from, address indexed _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address indexed _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address indexed _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Approval"
     Gas costs: 0
     Source: "event Approval(address indexed _owner, address indexed _spender, uint256 _value);"
    ParameterList
       Source: "(address indexed _owner, address indexed _spender, uint256 _value)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address indexed _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address indexed _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "enablePurchasing" - public
     Source: "function enablePurchasing() {\r\n        if (msg.sender != owner) { throw; }\r\n\r\n        purchasingAllowed = true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if (msg.sender != owner) { throw; }\r\n\r\n        purchasingAllowed = true;\r\n    }"
      IfStatement
         Source: "if (msg.sender != owner) { throw; }"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 259
           Source: "msg.sender != owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier owner
             Type: address
             Source: "owner"
        Block
           Source: "{ throw; }"
          Throw
             Gas costs: 6
             Source: "throw"
      ExpressionStatement
         Gas costs: 20317
         Source: "purchasingAllowed = true"
        Assignment using operator =
           Type: bool
           Source: "purchasingAllowed = true"
          Identifier purchasingAllowed
             Type: bool
             Source: "purchasingAllowed"
          Literal, token: true value: true
             Type: bool
             Source: "true"
  FunctionDefinition "disablePurchasing" - public
     Source: "function disablePurchasing() {\r\n        if (msg.sender != owner) { throw; }\r\n\r\n        purchasingAllowed = false;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if (msg.sender != owner) { throw; }\r\n\r\n        purchasingAllowed = false;\r\n    }"
      IfStatement
         Source: "if (msg.sender != owner) { throw; }"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 259
           Source: "msg.sender != owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier owner
             Type: address
             Source: "owner"
        Block
           Source: "{ throw; }"
          Throw
             Gas costs: 6
             Source: "throw"
      ExpressionStatement
         Gas costs: 20317
         Source: "purchasingAllowed = false"
        Assignment using operator =
           Type: bool
           Source: "purchasingAllowed = false"
          Identifier purchasingAllowed
             Type: bool
             Source: "purchasingAllowed"
          Literal, token: false value: false
             Type: bool
             Source: "false"
  FunctionDefinition "withdrawForeignTokens" - public
     Source: "function withdrawForeignTokens(address _tokenContract) returns (bool) {\r\n        if (msg.sender != owner) { throw; }\r\n\r\n        ForeignToken token = ForeignToken(_tokenContract);\r\n\r\n        uint256 amount = token.balanceOf(address(this));\r\n        return token.transfer(owner, amount);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _tokenContract)"
      VariableDeclaration "_tokenContract"
         Type: address
         Source: "address _tokenContract"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        if (msg.sender != owner) { throw; }\r\n\r\n        ForeignToken token = ForeignToken(_tokenContract);\r\n\r\n        uint256 amount = token.balanceOf(address(this));\r\n        return token.transfer(owner, amount);\r\n    }"
      IfStatement
         Source: "if (msg.sender != owner) { throw; }"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 259
           Source: "msg.sender != owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier owner
             Type: address
             Source: "owner"
        Block
           Source: "{ throw; }"
          Throw
             Gas costs: 6
             Source: "throw"
      VariableDeclarationStatement
         Gas costs: 11
         Source: "ForeignToken token = ForeignToken(_tokenContract)"
        VariableDeclaration "token"
           Type: contract ForeignToken
           Source: "ForeignToken token"
          UserDefinedTypeName "ForeignToken"
             Source: "ForeignToken"
        FunctionCall
           Type: contract ForeignToken
           Source: "ForeignToken(_tokenContract)"
          Identifier ForeignToken
             Type: type(contract ForeignToken)
             Source: "ForeignToken"
          Identifier _tokenContract
             Type: address
             Source: "_tokenContract"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "uint256 amount = token.balanceOf(address(this))"
        VariableDeclaration "amount"
           Type: uint256
           Source: "uint256 amount"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "token.balanceOf(address(this))"
          MemberAccess to member balanceOf
             Type: function (address) view external returns (uint256)
             Source: "token.balanceOf"
            Identifier token
               Type: contract ForeignToken
               Source: "token"
          FunctionCall
             Type: address
             Source: "address(this)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Identifier this
               Type: contract UselessEthereumToken2
               Source: "this"
      Return
         Gas costs: [???]
         Source: "return token.transfer(owner, amount)"
        FunctionCall
           Type: bool
           Source: "token.transfer(owner, amount)"
          MemberAccess to member transfer
             Type: function (address,uint256) external returns (bool)
             Source: "token.transfer"
            Identifier token
               Type: contract ForeignToken
               Source: "token"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier amount
             Type: uint256
             Source: "amount"
  FunctionDefinition "getStats" - public - const
     Source: "function getStats() constant returns (uint256, uint256, uint256, bool) {\r\n        return (totalContribution, totalSupply, totalBonusTokensIssued, purchasingAllowed);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 12
       Source: "(uint256, uint256, uint256, bool)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        return (totalContribution, totalSupply, totalBonusTokensIssued, purchasingAllowed);\r\n    }"
      Return
         Gas costs: 918
         Source: "return (totalContribution, totalSupply, totalBonusTokensIssued, purchasingAllowed)"
        TupleExpression
           Type: tuple(uint256,uint256,uint256,bool)
           Source: "(totalContribution, totalSupply, totalBonusTokensIssued, purchasingAllowed)"
          Identifier totalContribution
             Type: uint256
             Source: "totalContribution"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          Identifier totalBonusTokensIssued
             Type: uint256
             Source: "totalBonusTokensIssued"
          Identifier purchasingAllowed
             Type: bool
             Source: "purchasingAllowed"
  FunctionDefinition "" - public
     Source: "function() payable {\r\n        if (!purchasingAllowed) { throw; }\r\n        \r\n        if (msg.value == 0) { return; }\r\n\r\n        owner.transfer(msg.value);\r\n        totalContribution += msg.value;\r\n\r\n        uint256 tokensIssued = (msg.value * 100);\r\n\r\n        if (msg.value >= 10 finney) {\r\n            tokensIssued += totalContribution;\r\n\r\n            bytes20 bonusHash = ripemd160(block.coinbase, block.number, block.timestamp);\r\n            if (bonusHash[1] == 0) {\r\n                uint8 bonusMultiplier =\r\n                    ((bonusHash[2] & 0x01 != 0) ? 1 : 0) + ((bonusHash[2] & 0x02 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x04 != 0) ? 1 : 0) + ((bonusHash[2] & 0x08 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x10 != 0) ? 1 : 0) + ((bonusHash[2] & 0x20 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x40 != 0) ? 1 : 0) + ((bonusHash[2] & 0x80 != 0) ? 1 : 0);\r\n                \r\n                uint256 bonusTokensIssued = (msg.value * 100) * bonusMultiplier;\r\n                tokensIssued += bonusTokensIssued;\r\n\r\n                totalBonusTokensIssued += bonusTokensIssued;\r\n            }\r\n        }\r\n\r\n        totalSupply += tokensIssued;\r\n        balances[msg.sender] += tokensIssued;\r\n        \r\n        Transfer(address(this), msg.sender, tokensIssued);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if (!purchasingAllowed) { throw; }\r\n        \r\n        if (msg.value == 0) { return; }\r\n\r\n        owner.transfer(msg.value);\r\n        totalContribution += msg.value;\r\n\r\n        uint256 tokensIssued = (msg.value * 100);\r\n\r\n        if (msg.value >= 10 finney) {\r\n            tokensIssued += totalContribution;\r\n\r\n            bytes20 bonusHash = ripemd160(block.coinbase, block.number, block.timestamp);\r\n            if (bonusHash[1] == 0) {\r\n                uint8 bonusMultiplier =\r\n                    ((bonusHash[2] & 0x01 != 0) ? 1 : 0) + ((bonusHash[2] & 0x02 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x04 != 0) ? 1 : 0) + ((bonusHash[2] & 0x08 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x10 != 0) ? 1 : 0) + ((bonusHash[2] & 0x20 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x40 != 0) ? 1 : 0) + ((bonusHash[2] & 0x80 != 0) ? 1 : 0);\r\n                \r\n                uint256 bonusTokensIssued = (msg.value * 100) * bonusMultiplier;\r\n                tokensIssued += bonusTokensIssued;\r\n\r\n                totalBonusTokensIssued += bonusTokensIssued;\r\n            }\r\n        }\r\n\r\n        totalSupply += tokensIssued;\r\n        balances[msg.sender] += tokensIssued;\r\n        \r\n        Transfer(address(this), msg.sender, tokensIssued);\r\n    }"
      IfStatement
         Source: "if (!purchasingAllowed) { throw; }"
        UnaryOperation (prefix) !
           Type: bool
           Gas costs: 292
           Source: "!purchasingAllowed"
          Identifier purchasingAllowed
             Type: bool
             Source: "purchasingAllowed"
        Block
           Source: "{ throw; }"
          Throw
             Gas costs: 6
             Source: "throw"
      IfStatement
         Source: "if (msg.value == 0) { return; }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 8
           Source: "msg.value == 0"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{ return; }"
          Return
             Gas costs: 11
             Source: "return;"
      ExpressionStatement
         Gas costs: [???]
         Source: "owner.transfer(msg.value)"
        FunctionCall
           Type: tuple()
           Source: "owner.transfer(msg.value)"
          MemberAccess to member transfer
             Type: function (uint256)
             Source: "owner.transfer"
            Identifier owner
               Type: address
               Source: "owner"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 20232
         Source: "totalContribution += msg.value"
        Assignment using operator +=
           Type: uint256
           Source: "totalContribution += msg.value"
          Identifier totalContribution
             Type: uint256
             Source: "totalContribution"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
      VariableDeclarationStatement
         Gas costs: 18
         Source: "uint256 tokensIssued = (msg.value * 100)"
        VariableDeclaration "tokensIssued"
           Type: uint256
           Source: "uint256 tokensIssued"
          ElementaryTypeName uint256
             Source: "uint256"
        TupleExpression
           Type: uint256
           Source: "(msg.value * 100)"
          BinaryOperation using operator *
             Type: uint256
             Source: "msg.value * 100"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Literal, token: [no token] value: 100
               Type: int_const 100
               Source: "100"
      IfStatement
         Source: "if (msg.value >= 10 finney) {\r\n            tokensIssued += totalContribution;\r\n\r\n            bytes20 bonusHash = ripemd160(block.coinbase, block.number, block.timestamp);\r\n            if (bonusHash[1] == 0) {\r\n                uint8 bonusMultiplier =\r\n                    ((bonusHash[2] & 0x01 != 0) ? 1 : 0) + ((bonusHash[2] & 0x02 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x04 != 0) ? 1 : 0) + ((bonusHash[2] & 0x08 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x10 != 0) ? 1 : 0) + ((bonusHash[2] & 0x20 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x40 != 0) ? 1 : 0) + ((bonusHash[2] & 0x80 != 0) ? 1 : 0);\r\n                \r\n                uint256 bonusTokensIssued = (msg.value * 100) * bonusMultiplier;\r\n                tokensIssued += bonusTokensIssued;\r\n\r\n                totalBonusTokensIssued += bonusTokensIssued;\r\n            }\r\n        }"
        BinaryOperation using operator >=
           Type: bool
           Gas costs: 11
           Source: "msg.value >= 10 finney"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
          Literal, token: [no token] value: 10
             Type: int_const 10000000000000000
             Source: "10 finney"
        Block
           Source: "{\r\n            tokensIssued += totalContribution;\r\n\r\n            bytes20 bonusHash = ripemd160(block.coinbase, block.number, block.timestamp);\r\n            if (bonusHash[1] == 0) {\r\n                uint8 bonusMultiplier =\r\n                    ((bonusHash[2] & 0x01 != 0) ? 1 : 0) + ((bonusHash[2] & 0x02 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x04 != 0) ? 1 : 0) + ((bonusHash[2] & 0x08 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x10 != 0) ? 1 : 0) + ((bonusHash[2] & 0x20 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x40 != 0) ? 1 : 0) + ((bonusHash[2] & 0x80 != 0) ? 1 : 0);\r\n                \r\n                uint256 bonusTokensIssued = (msg.value * 100) * bonusMultiplier;\r\n                tokensIssued += bonusTokensIssued;\r\n\r\n                totalBonusTokensIssued += bonusTokensIssued;\r\n            }\r\n        }"
          ExpressionStatement
             Gas costs: 214
             Source: "tokensIssued += totalContribution"
            Assignment using operator +=
               Type: uint256
               Source: "tokensIssued += totalContribution"
              Identifier tokensIssued
                 Type: uint256
                 Source: "tokensIssued"
              Identifier totalContribution
                 Type: uint256
                 Source: "totalContribution"
          VariableDeclarationStatement
             Gas costs: [???]
             Source: "bytes20 bonusHash = ripemd160(block.coinbase, block.number, block.timestamp)"
            VariableDeclaration "bonusHash"
               Type: bytes20
               Source: "bytes20 bonusHash"
              ElementaryTypeName bytes20
                 Source: "bytes20"
            FunctionCall
               Type: bytes20
               Source: "ripemd160(block.coinbase, block.number, block.timestamp)"
              Identifier ripemd160
                 Type: function () pure returns (bytes20)
                 Source: "ripemd160"
              MemberAccess to member coinbase
                 Type: address
                 Source: "block.coinbase"
                Identifier block
                   Type: block
                   Source: "block"
              MemberAccess to member number
                 Type: uint256
                 Source: "block.number"
                Identifier block
                   Type: block
                   Source: "block"
              MemberAccess to member timestamp
                 Type: uint256
                 Source: "block.timestamp"
                Identifier block
                   Type: block
                   Source: "block"
          IfStatement
             Source: "if (bonusHash[1] == 0) {\r\n                uint8 bonusMultiplier =\r\n                    ((bonusHash[2] & 0x01 != 0) ? 1 : 0) + ((bonusHash[2] & 0x02 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x04 != 0) ? 1 : 0) + ((bonusHash[2] & 0x08 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x10 != 0) ? 1 : 0) + ((bonusHash[2] & 0x20 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x40 != 0) ? 1 : 0) + ((bonusHash[2] & 0x80 != 0) ? 1 : 0);\r\n                \r\n                uint256 bonusTokensIssued = (msg.value * 100) * bonusMultiplier;\r\n                tokensIssued += bonusTokensIssued;\r\n\r\n                totalBonusTokensIssued += bonusTokensIssued;\r\n            }"
            BinaryOperation using operator ==
               Type: bool
               Gas costs: 69
               Source: "bonusHash[1] == 0"
              IndexAccess
                 Type: bytes1
                 Source: "bonusHash[1]"
                Identifier bonusHash
                   Type: bytes20
                   Source: "bonusHash"
                Literal, token: [no token] value: 1
                   Type: int_const 1
                   Source: "1"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
            Block
               Source: "{\r\n                uint8 bonusMultiplier =\r\n                    ((bonusHash[2] & 0x01 != 0) ? 1 : 0) + ((bonusHash[2] & 0x02 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x04 != 0) ? 1 : 0) + ((bonusHash[2] & 0x08 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x10 != 0) ? 1 : 0) + ((bonusHash[2] & 0x20 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x40 != 0) ? 1 : 0) + ((bonusHash[2] & 0x80 != 0) ? 1 : 0);\r\n                \r\n                uint256 bonusTokensIssued = (msg.value * 100) * bonusMultiplier;\r\n                tokensIssued += bonusTokensIssued;\r\n\r\n                totalBonusTokensIssued += bonusTokensIssued;\r\n            }"
              VariableDeclarationStatement
                 Gas costs: 973
                 Source: "uint8 bonusMultiplier =\r\n                    ((bonusHash[2] & 0x01 != 0) ? 1 : 0) + ((bonusHash[2] & 0x02 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x04 != 0) ? 1 : 0) + ((bonusHash[2] & 0x08 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x10 != 0) ? 1 : 0) + ((bonusHash[2] & 0x20 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x40 != 0) ? 1 : 0) + ((bonusHash[2] & 0x80 != 0) ? 1 : 0)"
                VariableDeclaration "bonusMultiplier"
                   Type: uint8
                   Source: "uint8 bonusMultiplier"
                  ElementaryTypeName uint8
                     Source: "uint8"
                BinaryOperation using operator +
                   Type: uint8
                   Source: "((bonusHash[2] & 0x01 != 0) ? 1 : 0) + ((bonusHash[2] & 0x02 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x04 != 0) ? 1 : 0) + ((bonusHash[2] & 0x08 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x10 != 0) ? 1 : 0) + ((bonusHash[2] & 0x20 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x40 != 0) ? 1 : 0) + ((bonusHash[2] & 0x80 != 0) ? 1 : 0)"
                  BinaryOperation using operator +
                     Type: uint8
                     Source: "((bonusHash[2] & 0x01 != 0) ? 1 : 0) + ((bonusHash[2] & 0x02 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x04 != 0) ? 1 : 0) + ((bonusHash[2] & 0x08 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x10 != 0) ? 1 : 0) + ((bonusHash[2] & 0x20 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x40 != 0) ? 1 : 0)"
                    BinaryOperation using operator +
                       Type: uint8
                       Source: "((bonusHash[2] & 0x01 != 0) ? 1 : 0) + ((bonusHash[2] & 0x02 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x04 != 0) ? 1 : 0) + ((bonusHash[2] & 0x08 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x10 != 0) ? 1 : 0) + ((bonusHash[2] & 0x20 != 0) ? 1 : 0)"
                      BinaryOperation using operator +
                         Type: uint8
                         Source: "((bonusHash[2] & 0x01 != 0) ? 1 : 0) + ((bonusHash[2] & 0x02 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x04 != 0) ? 1 : 0) + ((bonusHash[2] & 0x08 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x10 != 0) ? 1 : 0)"
                        BinaryOperation using operator +
                           Type: uint8
                           Source: "((bonusHash[2] & 0x01 != 0) ? 1 : 0) + ((bonusHash[2] & 0x02 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x04 != 0) ? 1 : 0) + ((bonusHash[2] & 0x08 != 0) ? 1 : 0)"
                          BinaryOperation using operator +
                             Type: uint8
                             Source: "((bonusHash[2] & 0x01 != 0) ? 1 : 0) + ((bonusHash[2] & 0x02 != 0) ? 1 : 0) +\r\n                    ((bonusHash[2] & 0x04 != 0) ? 1 : 0)"
                            BinaryOperation using operator +
                               Type: uint8
                               Source: "((bonusHash[2] & 0x01 != 0) ? 1 : 0) + ((bonusHash[2] & 0x02 != 0) ? 1 : 0)"
                              TupleExpression
                                 Type: uint8
                                 Source: "((bonusHash[2] & 0x01 != 0) ? 1 : 0)"
                                Conditional
                                   Type: uint8
                                   Source: "(bonusHash[2] & 0x01 != 0) ? 1 : 0"
                                  TupleExpression
                                     Type: bool
                                     Source: "(bonusHash[2] & 0x01 != 0)"
                                    BinaryOperation using operator !=
                                       Type: bool
                                       Source: "bonusHash[2] & 0x01 != 0"
                                      BinaryOperation using operator &
                                         Type: bytes1
                                         Source: "bonusHash[2] & 0x01"
                                        IndexAccess
                                           Type: bytes1
                                           Source: "bonusHash[2]"
                                          Identifier bonusHash
                                             Type: bytes20
                                             Source: "bonusHash"
                                          Literal, token: [no token] value: 2
                                             Type: int_const 2
                                             Source: "2"
                                        Literal, token: [no token] value: 0x01
                                           Type: int_const 1
                                           Source: "0x01"
                                      Literal, token: [no token] value: 0
                                         Type: int_const 0
                                         Source: "0"
                                  Literal, token: [no token] value: 1
                                     Type: int_const 1
                                     Source: "1"
                                  Literal, token: [no token] value: 0
                                     Type: int_const 0
                                     Source: "0"
                              TupleExpression
                                 Type: uint8
                                 Source: "((bonusHash[2] & 0x02 != 0) ? 1 : 0)"
                                Conditional
                                   Type: uint8
                                   Source: "(bonusHash[2] & 0x02 != 0) ? 1 : 0"
                                  TupleExpression
                                     Type: bool
                                     Source: "(bonusHash[2] & 0x02 != 0)"
                                    BinaryOperation using operator !=
                                       Type: bool
                                       Source: "bonusHash[2] & 0x02 != 0"
                                      BinaryOperation using operator &
                                         Type: bytes1
                                         Source: "bonusHash[2] & 0x02"
                                        IndexAccess
                                           Type: bytes1
                                           Source: "bonusHash[2]"
                                          Identifier bonusHash
                                             Type: bytes20
                                             Source: "bonusHash"
                                          Literal, token: [no token] value: 2
                                             Type: int_const 2
                                             Source: "2"
                                        Literal, token: [no token] value: 0x02
                                           Type: int_const 2
                                           Source: "0x02"
                                      Literal, token: [no token] value: 0
                                         Type: int_const 0
                                         Source: "0"
                                  Literal, token: [no token] value: 1
                                     Type: int_const 1
                                     Source: "1"
                                  Literal, token: [no token] value: 0
                                     Type: int_const 0
                                     Source: "0"
                            TupleExpression
                               Type: uint8
                               Source: "((bonusHash[2] & 0x04 != 0) ? 1 : 0)"
                              Conditional
                                 Type: uint8
                                 Source: "(bonusHash[2] & 0x04 != 0) ? 1 : 0"
                                TupleExpression
                                   Type: bool
                                   Source: "(bonusHash[2] & 0x04 != 0)"
                                  BinaryOperation using operator !=
                                     Type: bool
                                     Source: "bonusHash[2] & 0x04 != 0"
                                    BinaryOperation using operator &
                                       Type: bytes1
                                       Source: "bonusHash[2] & 0x04"
                                      IndexAccess
                                         Type: bytes1
                                         Source: "bonusHash[2]"
                                        Identifier bonusHash
                                           Type: bytes20
                                           Source: "bonusHash"
                                        Literal, token: [no token] value: 2
                                           Type: int_const 2
                                           Source: "2"
                                      Literal, token: [no token] value: 0x04
                                         Type: int_const 4
                                         Source: "0x04"
                                    Literal, token: [no token] value: 0
                                       Type: int_const 0
                                       Source: "0"
                                Literal, token: [no token] value: 1
                                   Type: int_const 1
                                   Source: "1"
                                Literal, token: [no token] value: 0
                                   Type: int_const 0
                                   Source: "0"
                          TupleExpression
                             Type: uint8
                             Source: "((bonusHash[2] & 0x08 != 0) ? 1 : 0)"
                            Conditional
                               Type: uint8
                               Source: "(bonusHash[2] & 0x08 != 0) ? 1 : 0"
                              TupleExpression
                                 Type: bool
                                 Source: "(bonusHash[2] & 0x08 != 0)"
                                BinaryOperation using operator !=
                                   Type: bool
                                   Source: "bonusHash[2] & 0x08 != 0"
                                  BinaryOperation using operator &
                                     Type: bytes1
                                     Source: "bonusHash[2] & 0x08"
                                    IndexAccess
                                       Type: bytes1
                                       Source: "bonusHash[2]"
                                      Identifier bonusHash
                                         Type: bytes20
                                         Source: "bonusHash"
                                      Literal, token: [no token] value: 2
                                         Type: int_const 2
                                         Source: "2"
                                    Literal, token: [no token] value: 0x08
                                       Type: int_const 8
                                       Source: "0x08"
                                  Literal, token: [no token] value: 0
                                     Type: int_const 0
                                     Source: "0"
                              Literal, token: [no token] value: 1
                                 Type: int_const 1
                                 Source: "1"
                              Literal, token: [no token] value: 0
                                 Type: int_const 0
                                 Source: "0"
                        TupleExpression
                           Type: uint8
                           Source: "((bonusHash[2] & 0x10 != 0) ? 1 : 0)"
                          Conditional
                             Type: uint8
                             Source: "(bonusHash[2] & 0x10 != 0) ? 1 : 0"
                            TupleExpression
                               Type: bool
                               Source: "(bonusHash[2] & 0x10 != 0)"
                              BinaryOperation using operator !=
                                 Type: bool
                                 Source: "bonusHash[2] & 0x10 != 0"
                                BinaryOperation using operator &
                                   Type: bytes1
                                   Source: "bonusHash[2] & 0x10"
                                  IndexAccess
                                     Type: bytes1
                                     Source: "bonusHash[2]"
                                    Identifier bonusHash
                                       Type: bytes20
                                       Source: "bonusHash"
                                    Literal, token: [no token] value: 2
                                       Type: int_const 2
                                       Source: "2"
                                  Literal, token: [no token] value: 0x10
                                     Type: int_const 16
                                     Source: "0x10"
                                Literal, token: [no token] value: 0
                                   Type: int_const 0
                                   Source: "0"
                            Literal, token: [no token] value: 1
                               Type: int_const 1
                               Source: "1"
                            Literal, token: [no token] value: 0
                               Type: int_const 0
                               Source: "0"
                      TupleExpression
                         Type: uint8
                         Source: "((bonusHash[2] & 0x20 != 0) ? 1 : 0)"
                        Conditional
                           Type: uint8
                           Source: "(bonusHash[2] & 0x20 != 0) ? 1 : 0"
                          TupleExpression
                             Type: bool
                             Source: "(bonusHash[2] & 0x20 != 0)"
                            BinaryOperation using operator !=
                               Type: bool
                               Source: "bonusHash[2] & 0x20 != 0"
                              BinaryOperation using operator &
                                 Type: bytes1
                                 Source: "bonusHash[2] & 0x20"
                                IndexAccess
                                   Type: bytes1
                                   Source: "bonusHash[2]"
                                  Identifier bonusHash
                                     Type: bytes20
                                     Source: "bonusHash"
                                  Literal, token: [no token] value: 2
                                     Type: int_const 2
                                     Source: "2"
                                Literal, token: [no token] value: 0x20
                                   Type: int_const 32
                                   Source: "0x20"
                              Literal, token: [no token] value: 0
                                 Type: int_const 0
                                 Source: "0"
                          Literal, token: [no token] value: 1
                             Type: int_const 1
                             Source: "1"
                          Literal, token: [no token] value: 0
                             Type: int_const 0
                             Source: "0"
                    TupleExpression
                       Type: uint8
                       Source: "((bonusHash[2] & 0x40 != 0) ? 1 : 0)"
                      Conditional
                         Type: uint8
                         Source: "(bonusHash[2] & 0x40 != 0) ? 1 : 0"
                        TupleExpression
                           Type: bool
                           Source: "(bonusHash[2] & 0x40 != 0)"
                          BinaryOperation using operator !=
                             Type: bool
                             Source: "bonusHash[2] & 0x40 != 0"
                            BinaryOperation using operator &
                               Type: bytes1
                               Source: "bonusHash[2] & 0x40"
                              IndexAccess
                                 Type: bytes1
                                 Source: "bonusHash[2]"
                                Identifier bonusHash
                                   Type: bytes20
                                   Source: "bonusHash"
                                Literal, token: [no token] value: 2
                                   Type: int_const 2
                                   Source: "2"
                              Literal, token: [no token] value: 0x40
                                 Type: int_const 64
                                 Source: "0x40"
                            Literal, token: [no token] value: 0
                               Type: int_const 0
                               Source: "0"
                        Literal, token: [no token] value: 1
                           Type: int_const 1
                           Source: "1"
                        Literal, token: [no token] value: 0
                           Type: int_const 0
                           Source: "0"
                  TupleExpression
                     Type: uint8
                     Source: "((bonusHash[2] & 0x80 != 0) ? 1 : 0)"
                    Conditional
                       Type: uint8
                       Source: "(bonusHash[2] & 0x80 != 0) ? 1 : 0"
                      TupleExpression
                         Type: bool
                         Source: "(bonusHash[2] & 0x80 != 0)"
                        BinaryOperation using operator !=
                           Type: bool
                           Source: "bonusHash[2] & 0x80 != 0"
                          BinaryOperation using operator &
                             Type: bytes1
                             Source: "bonusHash[2] & 0x80"
                            IndexAccess
                               Type: bytes1
                               Source: "bonusHash[2]"
                              Identifier bonusHash
                                 Type: bytes20
                                 Source: "bonusHash"
                              Literal, token: [no token] value: 2
                                 Type: int_const 2
                                 Source: "2"
                            Literal, token: [no token] value: 0x80
                               Type: int_const 128
                               Source: "0x80"
                          Literal, token: [no token] value: 0
                             Type: int_const 0
                             Source: "0"
                      Literal, token: [no token] value: 1
                         Type: int_const 1
                         Source: "1"
                      Literal, token: [no token] value: 0
                         Type: int_const 0
                         Source: "0"
              VariableDeclarationStatement
                 Gas costs: 32
                 Source: "uint256 bonusTokensIssued = (msg.value * 100) * bonusMultiplier"
                VariableDeclaration "bonusTokensIssued"
                   Type: uint256
                   Source: "uint256 bonusTokensIssued"
                  ElementaryTypeName uint256
                     Source: "uint256"
                BinaryOperation using operator *
                   Type: uint256
                   Source: "(msg.value * 100) * bonusMultiplier"
                  TupleExpression
                     Type: uint256
                     Source: "(msg.value * 100)"
                    BinaryOperation using operator *
                       Type: uint256
                       Source: "msg.value * 100"
                      MemberAccess to member value
                         Type: uint256
                         Source: "msg.value"
                        Identifier msg
                           Type: msg
                           Source: "msg"
                      Literal, token: [no token] value: 100
                         Type: int_const 100
                         Source: "100"
                  Identifier bonusMultiplier
                     Type: uint8
                     Source: "bonusMultiplier"
              ExpressionStatement
                 Gas costs: 14
                 Source: "tokensIssued += bonusTokensIssued"
                Assignment using operator +=
                   Type: uint256
                   Source: "tokensIssued += bonusTokensIssued"
                  Identifier tokensIssued
                     Type: uint256
                     Source: "tokensIssued"
                  Identifier bonusTokensIssued
                     Type: uint256
                     Source: "bonusTokensIssued"
              ExpressionStatement
                 Gas costs: 20233
                 Source: "totalBonusTokensIssued += bonusTokensIssued"
                Assignment using operator +=
                   Type: uint256
                   Source: "totalBonusTokensIssued += bonusTokensIssued"
                  Identifier totalBonusTokensIssued
                     Type: uint256
                     Source: "totalBonusTokensIssued"
                  Identifier bonusTokensIssued
                     Type: uint256
                     Source: "bonusTokensIssued"
      ExpressionStatement
         Gas costs: 20233
         Source: "totalSupply += tokensIssued"
        Assignment using operator +=
           Type: uint256
           Source: "totalSupply += tokensIssued"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          Identifier tokensIssued
             Type: uint256
             Source: "tokensIssued"
      ExpressionStatement
         Gas costs: 20328
         Source: "balances[msg.sender] += tokensIssued"
        Assignment using operator +=
           Type: uint256
           Source: "balances[msg.sender] += tokensIssued"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier tokensIssued
             Type: uint256
             Source: "tokensIssued"
      ExpressionStatement
         Gas costs: [???]
         Source: "Transfer(address(this), msg.sender, tokensIssued)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(address(this), msg.sender, tokensIssued)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          FunctionCall
             Type: address
             Source: "address(this)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Identifier this
               Type: contract UselessEthereumToken2
               Source: "this"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier tokensIssued
             Type: uint256
             Source: "tokensIssued"
