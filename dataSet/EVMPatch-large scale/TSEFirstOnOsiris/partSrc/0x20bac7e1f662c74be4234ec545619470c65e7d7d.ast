Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0x20bac7e1f662c74be4234ec545619470c65e7d7d.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.11;"
ContractDefinition "ERC20"
   Gas costs: 0
   Source: "contract ERC20 {\r\n\t//Sets functions and events to comply with ERC20\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\tevent Transfer(address indexed _from, address indexed _to, uint _value);\r\n\t\r\n    function allowance(address _owner, address _spender) constant returns (uint remaining);\r\n\tfunction approve(address _spender, uint _value) returns (bool success);\r\n    function balanceOf(address _owner) constant returns (uint balance);\r\n    function transfer(address _to, uint _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool success);\r\n}"
  EventDefinition "Approval"
     Source: "event Approval(address indexed _owner, address indexed _spender, uint _value);"
    ParameterList
       Source: "(address indexed _owner, address indexed _spender, uint _value)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address indexed _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address indexed _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "Transfer"
     Source: "event Transfer(address indexed _from, address indexed _to, uint _value);"
    ParameterList
       Source: "(address indexed _from, address indexed _to, uint _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address indexed _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address indexed _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) constant returns (uint remaining);"
    ParameterList
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint remaining"
        ElementaryTypeName uint
           Source: "uint"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint _value) returns (bool success);"
    ParameterList
       Source: "(address _spender, uint _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) constant returns (uint balance);"
    ParameterList
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint balance"
        ElementaryTypeName uint
           Source: "uint"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint _value) returns (bool success);"
    ParameterList
       Source: "(address _to, uint _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint _value) returns (bool success);"
    ParameterList
       Source: "(address _from, address _to, uint _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
ContractDefinition "Owned"
   Source: "contract Owned {\r\n\t//Public variable\r\n    address public owner;\r\n\r\n\t//Sets contract creator as the owner\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\t\r\n\t//Sets onlyOwner modifier for specified functions\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n\r\n\t//Allows for transfer of contract ownership\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}"
  VariableDeclaration "owner"
     Type: address
     Gas costs: 335
     Source: "address public owner"
    ElementaryTypeName address
       Source: "address"
  FunctionDefinition "Owned" - public
     Source: "function Owned() {\r\n        owner = msg.sender;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        owner = msg.sender;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "owner = msg.sender"
        Assignment using operator =
           Type: address
           Source: "owner = msg.sender"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  ModifierDefinition "onlyOwner"
     Source: "modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }"
      IfStatement
         Source: "if (msg.sender != owner) throw"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 518
           Source: "msg.sender != owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier owner
             Type: address
             Source: "owner"
        Throw
           Gas costs: 12
           Source: "throw"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "transferOwnership" - public
     Source: "function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address newOwner)"
      VariableDeclaration "newOwner"
         Type: address
         Source: "address newOwner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        owner = newOwner;\r\n    }"
      ExpressionStatement
         Gas costs: 20267
         Source: "owner = newOwner"
        Assignment using operator =
           Type: address
           Source: "owner = newOwner"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier newOwner
             Type: address
             Source: "newOwner"
ContractDefinition "Token"
   Source: "contract Token is ERC20, Owned {\r\n\t//Public variables\r\n\tstring public name; \r\n\tstring public symbol; \r\n\tuint8 public decimals; \r\n\tuint256 public totalSupply; \r\n\t\r\n\t//Creates arrays for balances\r\n    mapping (address => uint256) balance;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\t\r\n\tfunction Token(string tokenName, string tokenSymbol, uint8 decimalUnits, uint256 initialSupply) {\r\n\t\tname = tokenName; \r\n\t\tsymbol = tokenSymbol; \r\n\t\tdecimals = decimalUnits; \r\n\t\ttotalSupply = initialSupply; \r\n\t}\r\n\t\r\n\t//Provides the remaining balance of approved tokens from function approve \r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n\t//Allows for a certain amount of tokens to be spent on behalf of the account owner\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\t//Returns the account balance \r\n    function balanceOf(address _owner) constant returns (uint256 remainingBalance) {\r\n        return balance[_owner];\r\n    }\r\n\r\n\t//Sends tokens from sender's account\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balance[msg.sender] >= _value && balance[_to] + _value > balance[_to]) {\r\n            balance[msg.sender] -= _value;\r\n            balance[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { \r\n\t\t\treturn false; \r\n\t\t}\r\n    }\r\n\t\r\n\t//Transfers tokens an approved account \r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balance[_from] >= _value && allowed[_from][msg.sender] >= _value && balance[_to] + _value > balance[_to]) {\r\n            balance[_to] += _value;\r\n            balance[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { \r\n\t\t\treturn false; \r\n\t\t}\r\n    }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "ERC20"
    UserDefinedTypeName "ERC20"
       Source: "ERC20"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Owned"
    UserDefinedTypeName "Owned"
       Source: "Owned"
  VariableDeclaration "name"
     Type: string storage ref
     Gas costs: 0
     Source: "string public name"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "symbol"
     Type: string storage ref
     Gas costs: 0
     Source: "string public symbol"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "decimals"
     Type: uint8
     Gas costs: 0
     Source: "uint8 public decimals"
    ElementaryTypeName uint8
       Source: "uint8"
  VariableDeclaration "totalSupply"
     Type: uint256
     Gas costs: 287
     Source: "uint256 public totalSupply"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "balance"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping (address => uint256) balance"
    Mapping
       Source: "mapping (address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "allowed"
     Type: mapping(address => mapping(address => uint256))
     Gas costs: 0
     Source: "mapping (address => mapping (address => uint256)) allowed"
    Mapping
       Source: "mapping (address => mapping (address => uint256))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping (address => uint256)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "Token" - public
     Source: "function Token(string tokenName, string tokenSymbol, uint8 decimalUnits, uint256 initialSupply) {\r\n\t\tname = tokenName; \r\n\t\tsymbol = tokenSymbol; \r\n\t\tdecimals = decimalUnits; \r\n\t\ttotalSupply = initialSupply; \r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "(string tokenName, string tokenSymbol, uint8 decimalUnits, uint256 initialSupply)"
      VariableDeclaration "tokenName"
         Type: string memory
         Source: "string tokenName"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "tokenSymbol"
         Type: string memory
         Source: "string tokenSymbol"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "decimalUnits"
         Type: uint8
         Source: "uint8 decimalUnits"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "initialSupply"
         Type: uint256
         Source: "uint256 initialSupply"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n\t\tname = tokenName; \r\n\t\tsymbol = tokenSymbol; \r\n\t\tdecimals = decimalUnits; \r\n\t\ttotalSupply = initialSupply; \r\n\t}"
      ExpressionStatement
         Gas costs: 0
         Source: "name = tokenName"
        Assignment using operator =
           Type: string storage ref
           Source: "name = tokenName"
          Identifier name
             Type: string storage ref
             Source: "name"
          Identifier tokenName
             Type: string memory
             Source: "tokenName"
      ExpressionStatement
         Gas costs: 0
         Source: "symbol = tokenSymbol"
        Assignment using operator =
           Type: string storage ref
           Source: "symbol = tokenSymbol"
          Identifier symbol
             Type: string storage ref
             Source: "symbol"
          Identifier tokenSymbol
             Type: string memory
             Source: "tokenSymbol"
      ExpressionStatement
         Gas costs: 0
         Source: "decimals = decimalUnits"
        Assignment using operator =
           Type: uint8
           Source: "decimals = decimalUnits"
          Identifier decimals
             Type: uint8
             Source: "decimals"
          Identifier decimalUnits
             Type: uint8
             Source: "decimalUnits"
      ExpressionStatement
         Gas costs: 0
         Source: "totalSupply = initialSupply"
        Assignment using operator =
           Type: uint256
           Source: "totalSupply = initialSupply"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          Identifier initialSupply
             Type: uint256
             Source: "initialSupply"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint256 remaining"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n      return allowed[_owner][_spender];\r\n    }"
      Return
         Gas costs: 394
         Source: "return allowed[_owner][_spender]"
        IndexAccess
           Type: uint256
           Source: "allowed[_owner][_spender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowed[_owner]"
            Identifier allowed
               Type: mapping(address => mapping(address => uint256))
               Source: "allowed"
            Identifier _owner
               Type: address
               Source: "_owner"
          Identifier _spender
             Type: address
             Source: "_spender"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 20199
         Source: "allowed[msg.sender][_spender] = _value"
        Assignment using operator =
           Type: uint256
           Source: "allowed[msg.sender][_spender] = _value"
          IndexAccess
             Type: uint256
             Source: "allowed[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[msg.sender]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 1837
         Source: "Approval(msg.sender, _spender, _value)"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender, _spender, _value)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) constant returns (uint256 remainingBalance) {\r\n        return balance[_owner];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 remainingBalance)"
      VariableDeclaration "remainingBalance"
         Type: uint256
         Source: "uint256 remainingBalance"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return balance[_owner];\r\n    }"
      Return
         Gas costs: 304
         Source: "return balance[_owner]"
        IndexAccess
           Type: uint256
           Source: "balance[_owner]"
          Identifier balance
             Type: mapping(address => uint256)
             Source: "balance"
          Identifier _owner
             Type: address
             Source: "_owner"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balance[msg.sender] >= _value && balance[_to] + _value > balance[_to]) {\r\n            balance[msg.sender] -= _value;\r\n            balance[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { \r\n\t\t\treturn false; \r\n\t\t}\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        if (balance[msg.sender] >= _value && balance[_to] + _value > balance[_to]) {\r\n            balance[msg.sender] -= _value;\r\n            balance[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { \r\n\t\t\treturn false; \r\n\t\t}\r\n    }"
      IfStatement
         Source: "if (balance[msg.sender] >= _value && balance[_to] + _value > balance[_to]) {\r\n            balance[msg.sender] -= _value;\r\n            balance[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { \r\n\t\t\treturn false; \r\n\t\t}"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 930
           Source: "balance[msg.sender] >= _value && balance[_to] + _value > balance[_to]"
          BinaryOperation using operator >=
             Type: bool
             Source: "balance[msg.sender] >= _value"
            IndexAccess
               Type: uint256
               Source: "balance[msg.sender]"
              Identifier balance
                 Type: mapping(address => uint256)
                 Source: "balance"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
          BinaryOperation using operator >
             Type: bool
             Source: "balance[_to] + _value > balance[_to]"
            BinaryOperation using operator +
               Type: uint256
               Source: "balance[_to] + _value"
              IndexAccess
                 Type: uint256
                 Source: "balance[_to]"
                Identifier balance
                   Type: mapping(address => uint256)
                   Source: "balance"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
            IndexAccess
               Type: uint256
               Source: "balance[_to]"
              Identifier balance
                 Type: mapping(address => uint256)
                 Source: "balance"
              Identifier _to
                 Type: address
                 Source: "_to"
        Block
           Source: "{\r\n            balance[msg.sender] -= _value;\r\n            balance[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }"
          ExpressionStatement
             Gas costs: 20328
             Source: "balance[msg.sender] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "balance[msg.sender] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "balance[msg.sender]"
                Identifier balance
                   Type: mapping(address => uint256)
                   Source: "balance"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20323
             Source: "balance[_to] += _value"
            Assignment using operator +=
               Type: uint256
               Source: "balance[_to] += _value"
              IndexAccess
                 Type: uint256
                 Source: "balance[_to]"
                Identifier balance
                   Type: mapping(address => uint256)
                   Source: "balance"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 1837
             Source: "Transfer(msg.sender, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(msg.sender, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{ \r\n\t\t\treturn false; \r\n\t\t}"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balance[_from] >= _value && allowed[_from][msg.sender] >= _value && balance[_to] + _value > balance[_to]) {\r\n            balance[_to] += _value;\r\n            balance[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { \r\n\t\t\treturn false; \r\n\t\t}\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        if (balance[_from] >= _value && allowed[_from][msg.sender] >= _value && balance[_to] + _value > balance[_to]) {\r\n            balance[_to] += _value;\r\n            balance[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { \r\n\t\t\treturn false; \r\n\t\t}\r\n    }"
      IfStatement
         Source: "if (balance[_from] >= _value && allowed[_from][msg.sender] >= _value && balance[_to] + _value > balance[_to]) {\r\n            balance[_to] += _value;\r\n            balance[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { \r\n\t\t\treturn false; \r\n\t\t}"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 1350
           Source: "balance[_from] >= _value && allowed[_from][msg.sender] >= _value && balance[_to] + _value > balance[_to]"
          BinaryOperation using operator &&
             Type: bool
             Source: "balance[_from] >= _value && allowed[_from][msg.sender] >= _value"
            BinaryOperation using operator >=
               Type: bool
               Source: "balance[_from] >= _value"
              IndexAccess
                 Type: uint256
                 Source: "balance[_from]"
                Identifier balance
                   Type: mapping(address => uint256)
                   Source: "balance"
                Identifier _from
                   Type: address
                   Source: "_from"
              Identifier _value
                 Type: uint256
                 Source: "_value"
            BinaryOperation using operator >=
               Type: bool
               Source: "allowed[_from][msg.sender] >= _value"
              IndexAccess
                 Type: uint256
                 Source: "allowed[_from][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[_from]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  Identifier _from
                     Type: address
                     Source: "_from"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          BinaryOperation using operator >
             Type: bool
             Source: "balance[_to] + _value > balance[_to]"
            BinaryOperation using operator +
               Type: uint256
               Source: "balance[_to] + _value"
              IndexAccess
                 Type: uint256
                 Source: "balance[_to]"
                Identifier balance
                   Type: mapping(address => uint256)
                   Source: "balance"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
            IndexAccess
               Type: uint256
               Source: "balance[_to]"
              Identifier balance
                 Type: mapping(address => uint256)
                 Source: "balance"
              Identifier _to
                 Type: address
                 Source: "_to"
        Block
           Source: "{\r\n            balance[_to] += _value;\r\n            balance[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }"
          ExpressionStatement
             Gas costs: 20329
             Source: "balance[_to] += _value"
            Assignment using operator +=
               Type: uint256
               Source: "balance[_to] += _value"
              IndexAccess
                 Type: uint256
                 Source: "balance[_to]"
                Identifier balance
                   Type: mapping(address => uint256)
                   Source: "balance"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20323
             Source: "balance[_from] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "balance[_from] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "balance[_from]"
                Identifier balance
                   Type: mapping(address => uint256)
                   Source: "balance"
                Identifier _from
                   Type: address
                   Source: "_from"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20412
             Source: "allowed[_from][msg.sender] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "allowed[_from][msg.sender] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "allowed[_from][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[_from]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  Identifier _from
                     Type: address
                     Source: "_from"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 1838
             Source: "Transfer(_from, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(_from, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              Identifier _from
                 Type: address
                 Source: "_from"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{ \r\n\t\t\treturn false; \r\n\t\t}"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
ContractDefinition "Prether"
   Source: "contract Prether is Token {\r\n    //Public variables\r\n    string public constant name = \"PRETHER\";\r\n    string public constant symbol = \"PTH\"; \r\n    uint8 public constant decimals = 0; \r\n    uint256 public constant supply = 10000000; \r\n    \r\n\t//Initializes Prether as a Token\r\n\tfunction Prether()\r\n\t    Token(name, symbol, decimals, supply) {\r\n\t\t\tbalance[msg.sender] = supply;                                           \r\n    }\r\n\t\r\n\t//Prevents sending Ether to the contract\r\n\tfunction() {\r\n\t\tthrow; \r\n\t}\r\n\t\r\n\t//Allows contract owner to mint new tokens, prevents numerical overflow\r\n\tfunction mintToken(address target, uint256 mintedAmount) onlyOwner returns (bool success) {\r\n\t\tif ((totalSupply + mintedAmount) < totalSupply) {\r\n\t\t\tthrow; \r\n\t\t} else {\r\n\t\t\tbalance[target] += mintedAmount;\r\n\t\t\ttotalSupply += mintedAmount;\r\n\t\t\tTransfer(0, target, mintedAmount);\r\n\t\t\treturn true; \r\n\t\t}\r\n\t}\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Token"
    UserDefinedTypeName "Token"
       Source: "Token"
  VariableDeclaration "name"
     Type: string memory
     Gas costs: [???]
     Source: "string public constant name = \"PRETHER\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: PRETHER
       Type: literal_string "PRETHER"
       Source: "\"PRETHER\""
  VariableDeclaration "symbol"
     Type: string memory
     Gas costs: [???]
     Source: "string public constant symbol = \"PTH\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: PTH
       Type: literal_string "PTH"
       Source: "\"PTH\""
  VariableDeclaration "decimals"
     Type: uint8
     Gas costs: 99
     Source: "uint8 public constant decimals = 0"
    ElementaryTypeName uint8
       Source: "uint8"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "supply"
     Type: uint256
     Gas costs: 87
     Source: "uint256 public constant supply = 10000000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 10000000
       Type: int_const 10000000
       Source: "10000000"
  FunctionDefinition "Prether" - public
     Source: "function Prether()\r\n\t    Token(name, symbol, decimals, supply) {\r\n\t\t\tbalance[msg.sender] = supply;                                           \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "Token"
       Gas costs: 0
       Source: "Token(name, symbol, decimals, supply)"
      Identifier Token
         Type: type(contract Token)
         Source: "Token"
      Identifier name
         Type: string memory
         Source: "name"
      Identifier symbol
         Type: string memory
         Source: "symbol"
      Identifier decimals
         Type: uint8
         Source: "decimals"
      Identifier supply
         Type: uint256
         Source: "supply"
    Block
       Source: "{\r\n\t\t\tbalance[msg.sender] = supply;                                           \r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "balance[msg.sender] = supply"
        Assignment using operator =
           Type: uint256
           Source: "balance[msg.sender] = supply"
          IndexAccess
             Type: uint256
             Source: "balance[msg.sender]"
            Identifier balance
               Type: mapping(address => uint256)
               Source: "balance"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier supply
             Type: uint256
             Source: "supply"
  FunctionDefinition "" - public
     Source: "function() {\r\n\t\tthrow; \r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n\t\tthrow; \r\n\t}"
      Throw
         Gas costs: 6
         Source: "throw"
  FunctionDefinition "mintToken" - public
     Source: "function mintToken(address target, uint256 mintedAmount) onlyOwner returns (bool success) {\r\n\t\tif ((totalSupply + mintedAmount) < totalSupply) {\r\n\t\t\tthrow; \r\n\t\t} else {\r\n\t\t\tbalance[target] += mintedAmount;\r\n\t\t\ttotalSupply += mintedAmount;\r\n\t\t\tTransfer(0, target, mintedAmount);\r\n\t\t\treturn true; \r\n\t\t}\r\n\t}"
    ParameterList
       Gas costs: 0
       Source: "(address target, uint256 mintedAmount)"
      VariableDeclaration "target"
         Type: address
         Source: "address target"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "mintedAmount"
         Type: uint256
         Source: "uint256 mintedAmount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n\t\tif ((totalSupply + mintedAmount) < totalSupply) {\r\n\t\t\tthrow; \r\n\t\t} else {\r\n\t\t\tbalance[target] += mintedAmount;\r\n\t\t\ttotalSupply += mintedAmount;\r\n\t\t\tTransfer(0, target, mintedAmount);\r\n\t\t\treturn true; \r\n\t\t}\r\n\t}"
      IfStatement
         Source: "if ((totalSupply + mintedAmount) < totalSupply) {\r\n\t\t\tthrow; \r\n\t\t} else {\r\n\t\t\tbalance[target] += mintedAmount;\r\n\t\t\ttotalSupply += mintedAmount;\r\n\t\t\tTransfer(0, target, mintedAmount);\r\n\t\t\treturn true; \r\n\t\t}"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 415
           Source: "(totalSupply + mintedAmount) < totalSupply"
          TupleExpression
             Type: uint256
             Source: "(totalSupply + mintedAmount)"
            BinaryOperation using operator +
               Type: uint256
               Source: "totalSupply + mintedAmount"
              Identifier totalSupply
                 Type: uint256
                 Source: "totalSupply"
              Identifier mintedAmount
                 Type: uint256
                 Source: "mintedAmount"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
        Block
           Source: "{\r\n\t\t\tthrow; \r\n\t\t}"
          Throw
             Gas costs: 6
             Source: "throw"
        Block
           Source: "{\r\n\t\t\tbalance[target] += mintedAmount;\r\n\t\t\ttotalSupply += mintedAmount;\r\n\t\t\tTransfer(0, target, mintedAmount);\r\n\t\t\treturn true; \r\n\t\t}"
          ExpressionStatement
             Gas costs: 20329
             Source: "balance[target] += mintedAmount"
            Assignment using operator +=
               Type: uint256
               Source: "balance[target] += mintedAmount"
              IndexAccess
                 Type: uint256
                 Source: "balance[target]"
                Identifier balance
                   Type: mapping(address => uint256)
                   Source: "balance"
                Identifier target
                   Type: address
                   Source: "target"
              Identifier mintedAmount
                 Type: uint256
                 Source: "mintedAmount"
          ExpressionStatement
             Gas costs: 20233
             Source: "totalSupply += mintedAmount"
            Assignment using operator +=
               Type: uint256
               Source: "totalSupply += mintedAmount"
              Identifier totalSupply
                 Type: uint256
                 Source: "totalSupply"
              Identifier mintedAmount
                 Type: uint256
                 Source: "mintedAmount"
          ExpressionStatement
             Gas costs: 1832
             Source: "Transfer(0, target, mintedAmount)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(0, target, mintedAmount)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
              Identifier target
                 Type: address
                 Source: "target"
              Identifier mintedAmount
                 Type: uint256
                 Source: "mintedAmount"
          Return
             Gas costs: 8
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
