Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0xf1d9139c6512452db91f25635457b844d7e22b8b.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.8;"
ContractDefinition "ERC20"
   Gas costs: 0
   Source: "contract ERC20 {\r\n\r\n    uint public totalSupply;\r\n\r\n    function totalSupply() constant returns(uint totalSupply);\r\n\r\n    function balanceOf(address who) constant returns(uint256);\r\n\r\n    function transfer(address to, uint value) returns(bool ok);\r\n\r\n    function transferFrom(address from, address to, uint value) returns(bool ok);\r\n\r\n    function approve(address spender, uint value) returns(bool ok);\r\n\r\n    function allowance(address owner, address spender) constant returns(uint);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n}"
  VariableDeclaration "totalSupply"
     Type: uint256
     Source: "uint public totalSupply"
    ElementaryTypeName uint
       Source: "uint"
  FunctionDefinition "totalSupply" - public - const
     Source: "function totalSupply() constant returns(uint totalSupply);"
    ParameterList
       Source: "()"
    ParameterList
       Source: "(uint totalSupply)"
      VariableDeclaration "totalSupply"
         Type: uint256
         Source: "uint totalSupply"
        ElementaryTypeName uint
           Source: "uint"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address who) constant returns(uint256);"
    ParameterList
       Source: "(address who)"
      VariableDeclaration "who"
         Type: address
         Source: "address who"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address to, uint value) returns(bool ok);"
    ParameterList
       Source: "(address to, uint value)"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(bool ok)"
      VariableDeclaration "ok"
         Type: bool
         Source: "bool ok"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address from, address to, uint value) returns(bool ok);"
    ParameterList
       Source: "(address from, address to, uint value)"
      VariableDeclaration "from"
         Type: address
         Source: "address from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(bool ok)"
      VariableDeclaration "ok"
         Type: bool
         Source: "bool ok"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "approve" - public
     Source: "function approve(address spender, uint value) returns(bool ok);"
    ParameterList
       Source: "(address spender, uint value)"
      VariableDeclaration "spender"
         Type: address
         Source: "address spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(bool ok)"
      VariableDeclaration "ok"
         Type: bool
         Source: "bool ok"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address owner, address spender) constant returns(uint);"
    ParameterList
       Source: "(address owner, address spender)"
      VariableDeclaration "owner"
         Type: address
         Source: "address owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "spender"
         Type: address
         Source: "address spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "Transfer"
     Source: "event Transfer(address indexed from, address indexed to, uint value);"
    ParameterList
       Source: "(address indexed from, address indexed to, uint value)"
      VariableDeclaration "from"
         Type: address
         Source: "address indexed from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "to"
         Type: address
         Source: "address indexed to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "Approval"
     Source: "event Approval(address indexed owner, address indexed spender, uint value);"
    ParameterList
       Source: "(address indexed owner, address indexed spender, uint value)"
      VariableDeclaration "owner"
         Type: address
         Source: "address indexed owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "spender"
         Type: address
         Source: "address indexed spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
ContractDefinition "SafeMath"
   Source: "library SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}"
  FunctionDefinition "mul" - const
     Source: "function mul(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 c = a * b"
        VariableDeclaration "c"
           Type: uint256
           Source: "uint256 c"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator *
           Type: uint256
           Source: "a * b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
      ExpressionStatement
         Gas costs: 0
         Source: "assert(a == 0 || c / a == b)"
        FunctionCall
           Type: tuple()
           Source: "assert(a == 0 || c / a == b)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator ||
             Type: bool
             Source: "a == 0 || c / a == b"
            BinaryOperation using operator ==
               Type: bool
               Source: "a == 0"
              Identifier a
                 Type: uint256
                 Source: "a"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
            BinaryOperation using operator ==
               Type: bool
               Source: "c / a == b"
              BinaryOperation using operator /
                 Type: uint256
                 Source: "c / a"
                Identifier c
                   Type: uint256
                   Source: "c"
                Identifier a
                   Type: uint256
                   Source: "a"
              Identifier b
                 Type: uint256
                 Source: "b"
      Return
         Gas costs: 0
         Source: "return c"
        Identifier c
           Type: uint256
           Source: "c"
  FunctionDefinition "div" - const
     Source: "function div(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 42
         Source: "uint256 c = a / b"
        VariableDeclaration "c"
           Type: uint256
           Source: "uint256 c"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator /
           Type: uint256
           Source: "a / b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
      Return
         Gas costs: 8
         Source: "return c"
        Identifier c
           Type: uint256
           Source: "c"
  FunctionDefinition "sub" - const
     Source: "function sub(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        assert(b <= a);\r\n        return a - b;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "assert(b <= a)"
        FunctionCall
           Type: tuple()
           Source: "assert(b <= a)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator <=
             Type: bool
             Source: "b <= a"
            Identifier b
               Type: uint256
               Source: "b"
            Identifier a
               Type: uint256
               Source: "a"
      Return
         Gas costs: 0
         Source: "return a - b"
        BinaryOperation using operator -
           Type: uint256
           Source: "a - b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
  FunctionDefinition "add" - const
     Source: "function add(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 c = a + b"
        VariableDeclaration "c"
           Type: uint256
           Source: "uint256 c"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator +
           Type: uint256
           Source: "a + b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
      ExpressionStatement
         Gas costs: 0
         Source: "assert(c >= a)"
        FunctionCall
           Type: tuple()
           Source: "assert(c >= a)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator >=
             Type: bool
             Source: "c >= a"
            Identifier c
               Type: uint256
               Source: "c"
            Identifier a
               Type: uint256
               Source: "a"
      Return
         Gas costs: 0
         Source: "return c"
        Identifier c
           Type: uint256
           Source: "c"
ContractDefinition "CarbonTOKEN"
   Source: "contract CarbonTOKEN is ERC20\r\n{\r\n    using SafeMath\r\n    for uint256;\r\n    /* Public variables of the token */\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    address central_account;\r\n    address public owner;\r\n\r\n    /* This creates an array with all balances */\r\n    mapping(address => uint256) public balances;\r\n     /* This notifies clients about the amount burnt */\r\n    event Burn(address indexed from, uint256 value);\r\n    // transfer fees event\r\n    event TransferFees(address from, uint256 value);\r\n    \r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier onlycentralAccount {\r\n        require(msg.sender == central_account);\r\n        _;\r\n    }\r\n\r\n    function CarbonTOKEN()\r\n    {\r\n        totalSupply = 100000000 *10**4; // 100 million, Update total supply includes 4 0's more to go for the decimals\r\n        name = \"CARBON TOKEN CLASSIC\"; // Set the name for display purposes\r\n        symbol = \"CTC\"; // Set the symbol for display purposes\r\n        decimals = 4; // Amount of decimals for display purposes\r\n        owner = msg.sender;\r\n        balances[owner] = totalSupply;\r\n    }\r\n    \r\n      // Function allows for external access to tokenHoler's Balance\r\n   function balanceOf(address tokenHolder) constant returns(uint256) \r\n   {\r\n       return balances[tokenHolder];\r\n    }\r\n\r\n    function totalSupply() constant returns(uint256) {\r\n       return totalSupply;\r\n    }\r\n    \r\n    function set_centralAccount(address central_Acccount) onlyOwner\r\n    {\r\n        central_account = central_Acccount;\r\n    }\r\n\r\n  \r\n    /* Send coins during transactions*/\r\n    function transfer(address _to, uint256 _value) returns(bool ok) \r\n    {\r\n        if (_to == 0x0) revert(); // Prevent transfer to 0x0 address. Use burn() instead\r\n        if (balances[msg.sender] < _value) revert(); // Check if the sender has enough\r\n        if (balances[_to] + _value < balances[_to]) revert(); // Check for overflows\r\n        if(msg.sender == owner)\r\n        {\r\n        balances[msg.sender] -= _value; // Subtract from the sender\r\n        balances[_to] += _value; // Add the same to the recipient\r\n        }\r\n        else\r\n        {\r\n            uint256 trans_fees = SafeMath.div(_value,1000); // implementing transaction fees .001% and adding to owner balance\r\n            if(balances[msg.sender] > (_value + trans_fees))\r\n            {\r\n            balances[msg.sender] -= (_value + trans_fees);\r\n            balances[_to] += _value;\r\n            balances[owner] += trans_fees; \r\n            TransferFees(msg.sender,trans_fees);\r\n            }\r\n            else\r\n            {\r\n                revert();\r\n            }\r\n        }\r\n        Transfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place\r\n        return true;\r\n    }\r\n    \r\n     /* Send coins during ICO*/\r\n    function transferCoins(address _to, uint256 _value) returns(bool ok) \r\n    {\r\n        if (_to == 0x0) revert(); // Prevent transfer to 0x0 address. Use burn() instead\r\n        if (balances[msg.sender] < _value) revert(); // Check if the sender has enough\r\n        if (balances[_to] + _value < balances[_to]) revert(); // Check for overflows\r\n        balances[msg.sender] -= _value; // Subtract from the sender\r\n        balances[_to] += _value; // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place\r\n        return true;\r\n    }\r\n    \r\n\r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value)\r\n    returns(bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\r\n        return allowance[_owner][_spender];\r\n    }\r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {\r\n        uint256 trans_fees = SafeMath.div(_value,1000);\r\n        if (_to == 0x0) revert(); // Prevent transfer to 0x0 address. Use burn() instead\r\n        if (balances[_from] < (_value + trans_fees)) revert(); // Check if the sender has enough\r\n        if (balances[_to] + _value < balances[_to]) revert(); // Check for overflows\r\n        if ((_value + trans_fees) > allowance[_from][msg.sender]) revert(); // Check allowance\r\n        \r\n\r\n        balances[_from] -= (_value + trans_fees); // Subtract from the sender\r\n        balances[_to] += _value; // Add the same to the recipient\r\n        balances[owner] += trans_fees;\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function zeroFeesTransfer(address _from, address _to, uint _value) onlycentralAccount returns(bool success) \r\n    {\r\n        uint256 trans_fees = SafeMath.div(_value,1000); // implementing transaction fees .001% and adding to owner balance\r\n        if(balances[_from] > (_value + trans_fees) && _value > 0)\r\n        {\r\n        balances[_from] -= (_value + trans_fees); // Subtract from the sender\r\n        balances[_to] += _value; // Add the same to the recipient\r\n        balances[owner] += trans_fees; \r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n        }\r\n        else\r\n        {\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    function transferby(address _from,address _to,uint256 _amount) onlycentralAccount returns(bool success) {\r\n        if (balances[_from] >= _amount &&\r\n            _amount > 0 &&\r\n            balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n  \r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n      balances[newOwner] += balances[owner];\r\n      balances[owner] = 0;\r\n      owner = newOwner;\r\n\r\n    }\r\n    \r\n     // Failsafe drain\r\n\r\n    function drain() onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }\r\n    \r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "ERC20"
    UserDefinedTypeName "ERC20"
       Source: "ERC20"
  UsingForDirective
     Gas costs: 0
     Source: "using SafeMath\r\n    for uint256;"
    UserDefinedTypeName "SafeMath"
       Source: "SafeMath"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "name"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public name"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "symbol"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public symbol"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "decimals"
     Type: uint8
     Gas costs: [???]
     Source: "uint8 public decimals"
    ElementaryTypeName uint8
       Source: "uint8"
  VariableDeclaration "totalSupply"
     Type: uint256
     Gas costs: 0
     Source: "uint256 public totalSupply"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "central_account"
     Type: address
     Gas costs: 0
     Source: "address central_account"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "owner"
     Type: address
     Gas costs: [???]
     Source: "address public owner"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: [???]
     Source: "mapping(address => uint256) public balances"
    Mapping
       Source: "mapping(address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  EventDefinition "Burn"
     Gas costs: 0
     Source: "event Burn(address indexed from, uint256 value);"
    ParameterList
       Source: "(address indexed from, uint256 value)"
      VariableDeclaration "from"
         Type: address
         Source: "address indexed from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "TransferFees"
     Gas costs: 0
     Source: "event TransferFees(address from, uint256 value);"
    ParameterList
       Source: "(address from, uint256 value)"
      VariableDeclaration "from"
         Type: address
         Source: "address from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
  VariableDeclaration "allowance"
     Type: mapping(address => mapping(address => uint256))
     Gas costs: 0
     Source: "mapping(address => mapping(address => uint256)) public allowance"
    Mapping
       Source: "mapping(address => mapping(address => uint256))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping(address => uint256)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint256
           Source: "uint256"
  ModifierDefinition "onlyOwner"
     Source: "modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(msg.sender == owner);\r\n        _;\r\n    }"
      ExpressionStatement
         Gas costs: 846
         Source: "require(msg.sender == owner)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == owner)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == owner"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier owner
               Type: address
               Source: "owner"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "onlycentralAccount"
     Source: "modifier onlycentralAccount {\r\n        require(msg.sender == central_account);\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(msg.sender == central_account);\r\n        _;\r\n    }"
      ExpressionStatement
         Gas costs: 564
         Source: "require(msg.sender == central_account)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == central_account)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == central_account"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier central_account
               Type: address
               Source: "central_account"
      PlaceholderStatement
         Gas costs: 1
         Source: "_"
  FunctionDefinition "CarbonTOKEN" - public
     Source: "function CarbonTOKEN()\r\n    {\r\n        totalSupply = 100000000 *10**4; // 100 million, Update total supply includes 4 0's more to go for the decimals\r\n        name = \"CARBON TOKEN CLASSIC\"; // Set the name for display purposes\r\n        symbol = \"CTC\"; // Set the symbol for display purposes\r\n        decimals = 4; // Amount of decimals for display purposes\r\n        owner = msg.sender;\r\n        balances[owner] = totalSupply;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        totalSupply = 100000000 *10**4; // 100 million, Update total supply includes 4 0's more to go for the decimals\r\n        name = \"CARBON TOKEN CLASSIC\"; // Set the name for display purposes\r\n        symbol = \"CTC\"; // Set the symbol for display purposes\r\n        decimals = 4; // Amount of decimals for display purposes\r\n        owner = msg.sender;\r\n        balances[owner] = totalSupply;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "totalSupply = 100000000 *10**4"
        Assignment using operator =
           Type: uint256
           Source: "totalSupply = 100000000 *10**4"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          BinaryOperation using operator *
             Type: int_const 1000000000000
             Source: "100000000 *10**4"
            Literal, token: [no token] value: 100000000
               Type: int_const 100000000
               Source: "100000000"
            BinaryOperation using operator **
               Type: int_const 10000
               Source: "10**4"
              Literal, token: [no token] value: 10
                 Type: int_const 10
                 Source: "10"
              Literal, token: [no token] value: 4
                 Type: int_const 4
                 Source: "4"
      ExpressionStatement
         Gas costs: 0
         Source: "name = \"CARBON TOKEN CLASSIC\""
        Assignment using operator =
           Type: string storage ref
           Source: "name = \"CARBON TOKEN CLASSIC\""
          Identifier name
             Type: string storage ref
             Source: "name"
          Literal, token: [no token] value: CARBON TOKEN CLASSIC
             Type: literal_string "CARBON TOKEN CLASSIC"
             Source: "\"CARBON TOKEN CLASSIC\""
      ExpressionStatement
         Gas costs: 0
         Source: "symbol = \"CTC\""
        Assignment using operator =
           Type: string storage ref
           Source: "symbol = \"CTC\""
          Identifier symbol
             Type: string storage ref
             Source: "symbol"
          Literal, token: [no token] value: CTC
             Type: literal_string "CTC"
             Source: "\"CTC\""
      ExpressionStatement
         Gas costs: 0
         Source: "decimals = 4"
        Assignment using operator =
           Type: uint8
           Source: "decimals = 4"
          Identifier decimals
             Type: uint8
             Source: "decimals"
          Literal, token: [no token] value: 4
             Type: int_const 4
             Source: "4"
      ExpressionStatement
         Gas costs: 0
         Source: "owner = msg.sender"
        Assignment using operator =
           Type: address
           Source: "owner = msg.sender"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 0
         Source: "balances[owner] = totalSupply"
        Assignment using operator =
           Type: uint256
           Source: "balances[owner] = totalSupply"
          IndexAccess
             Type: uint256
             Source: "balances[owner]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier owner
               Type: address
               Source: "owner"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address tokenHolder) constant returns(uint256) \r\n   {\r\n       return balances[tokenHolder];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address tokenHolder)"
      VariableDeclaration "tokenHolder"
         Type: address
         Source: "address tokenHolder"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n       return balances[tokenHolder];\r\n    }"
      Return
         Gas costs: 304
         Source: "return balances[tokenHolder]"
        IndexAccess
           Type: uint256
           Source: "balances[tokenHolder]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          Identifier tokenHolder
             Type: address
             Source: "tokenHolder"
  FunctionDefinition "totalSupply" - public - const
     Source: "function totalSupply() constant returns(uint256) {\r\n       return totalSupply;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n       return totalSupply;\r\n    }"
      Return
         Gas costs: 208
         Source: "return totalSupply"
        Identifier totalSupply
           Type: uint256
           Source: "totalSupply"
  FunctionDefinition "set_centralAccount" - public
     Source: "function set_centralAccount(address central_Acccount) onlyOwner\r\n    {\r\n        central_account = central_Acccount;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address central_Acccount)"
      VariableDeclaration "central_Acccount"
         Type: address
         Source: "address central_Acccount"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        central_account = central_Acccount;\r\n    }"
      ExpressionStatement
         Gas costs: 20267
         Source: "central_account = central_Acccount"
        Assignment using operator =
           Type: address
           Source: "central_account = central_Acccount"
          Identifier central_account
             Type: address
             Source: "central_account"
          Identifier central_Acccount
             Type: address
             Source: "central_Acccount"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) returns(bool ok) \r\n    {\r\n        if (_to == 0x0) revert(); // Prevent transfer to 0x0 address. Use burn() instead\r\n        if (balances[msg.sender] < _value) revert(); // Check if the sender has enough\r\n        if (balances[_to] + _value < balances[_to]) revert(); // Check for overflows\r\n        if(msg.sender == owner)\r\n        {\r\n        balances[msg.sender] -= _value; // Subtract from the sender\r\n        balances[_to] += _value; // Add the same to the recipient\r\n        }\r\n        else\r\n        {\r\n            uint256 trans_fees = SafeMath.div(_value,1000); // implementing transaction fees .001% and adding to owner balance\r\n            if(balances[msg.sender] > (_value + trans_fees))\r\n            {\r\n            balances[msg.sender] -= (_value + trans_fees);\r\n            balances[_to] += _value;\r\n            balances[owner] += trans_fees; \r\n            TransferFees(msg.sender,trans_fees);\r\n            }\r\n            else\r\n            {\r\n                revert();\r\n            }\r\n        }\r\n        Transfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool ok)"
      VariableDeclaration "ok"
         Type: bool
         Source: "bool ok"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        if (_to == 0x0) revert(); // Prevent transfer to 0x0 address. Use burn() instead\r\n        if (balances[msg.sender] < _value) revert(); // Check if the sender has enough\r\n        if (balances[_to] + _value < balances[_to]) revert(); // Check for overflows\r\n        if(msg.sender == owner)\r\n        {\r\n        balances[msg.sender] -= _value; // Subtract from the sender\r\n        balances[_to] += _value; // Add the same to the recipient\r\n        }\r\n        else\r\n        {\r\n            uint256 trans_fees = SafeMath.div(_value,1000); // implementing transaction fees .001% and adding to owner balance\r\n            if(balances[msg.sender] > (_value + trans_fees))\r\n            {\r\n            balances[msg.sender] -= (_value + trans_fees);\r\n            balances[_to] += _value;\r\n            balances[owner] += trans_fees; \r\n            TransferFees(msg.sender,trans_fees);\r\n            }\r\n            else\r\n            {\r\n                revert();\r\n            }\r\n        }\r\n        Transfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place\r\n        return true;\r\n    }"
      IfStatement
         Source: "if (_to == 0x0) revert()"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 15
           Source: "_to == 0x0"
          Identifier _to
             Type: address
             Source: "_to"
          Literal, token: [no token] value: 0x0
             Type: int_const 0
             Source: "0x0"
        ExpressionStatement
           Gas costs: 6
           Source: "revert()"
          FunctionCall
             Type: tuple()
             Source: "revert()"
            Identifier revert
               Type: function () pure
               Source: "revert"
      IfStatement
         Source: "if (balances[msg.sender] < _value) revert()"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 304
           Source: "balances[msg.sender] < _value"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
        ExpressionStatement
           Gas costs: 6
           Source: "revert()"
          FunctionCall
             Type: tuple()
             Source: "revert()"
            Identifier revert
               Type: function () pure
               Source: "revert"
      IfStatement
         Source: "if (balances[_to] + _value < balances[_to]) revert()"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 601
           Source: "balances[_to] + _value < balances[_to]"
          BinaryOperation using operator +
             Type: uint256
             Source: "balances[_to] + _value"
            IndexAccess
               Type: uint256
               Source: "balances[_to]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _to
                 Type: address
                 Source: "_to"
            Identifier _value
               Type: uint256
               Source: "_value"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
        ExpressionStatement
           Gas costs: 6
           Source: "revert()"
          FunctionCall
             Type: tuple()
             Source: "revert()"
            Identifier revert
               Type: function () pure
               Source: "revert"
      IfStatement
         Source: "if(msg.sender == owner)\r\n        {\r\n        balances[msg.sender] -= _value; // Subtract from the sender\r\n        balances[_to] += _value; // Add the same to the recipient\r\n        }\r\n        else\r\n        {\r\n            uint256 trans_fees = SafeMath.div(_value,1000); // implementing transaction fees .001% and adding to owner balance\r\n            if(balances[msg.sender] > (_value + trans_fees))\r\n            {\r\n            balances[msg.sender] -= (_value + trans_fees);\r\n            balances[_to] += _value;\r\n            balances[owner] += trans_fees; \r\n            TransferFees(msg.sender,trans_fees);\r\n            }\r\n            else\r\n            {\r\n                revert();\r\n            }\r\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 256
           Source: "msg.sender == owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier owner
             Type: address
             Source: "owner"
        Block
           Source: "{\r\n        balances[msg.sender] -= _value; // Subtract from the sender\r\n        balances[_to] += _value; // Add the same to the recipient\r\n        }"
          ExpressionStatement
             Gas costs: 20328
             Source: "balances[msg.sender] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "balances[msg.sender] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20323
             Source: "balances[_to] += _value"
            Assignment using operator +=
               Type: uint256
               Source: "balances[_to] += _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
        Block
           Source: "{\r\n            uint256 trans_fees = SafeMath.div(_value,1000); // implementing transaction fees .001% and adding to owner balance\r\n            if(balances[msg.sender] > (_value + trans_fees))\r\n            {\r\n            balances[msg.sender] -= (_value + trans_fees);\r\n            balances[_to] += _value;\r\n            balances[owner] += trans_fees; \r\n            TransferFees(msg.sender,trans_fees);\r\n            }\r\n            else\r\n            {\r\n                revert();\r\n            }\r\n        }"
          VariableDeclarationStatement
             Gas costs: 29
             Source: "uint256 trans_fees = SafeMath.div(_value,1000)"
            VariableDeclaration "trans_fees"
               Type: uint256
               Source: "uint256 trans_fees"
              ElementaryTypeName uint256
                 Source: "uint256"
            FunctionCall
               Type: uint256
               Source: "SafeMath.div(_value,1000)"
              MemberAccess to member div
                 Type: function (uint256,uint256) view returns (uint256)
                 Source: "SafeMath.div"
                Identifier SafeMath
                   Type: type(library SafeMath)
                   Source: "SafeMath"
              Identifier _value
                 Type: uint256
                 Source: "_value"
              Literal, token: [no token] value: 1000
                 Type: int_const 1000
                 Source: "1000"
          IfStatement
             Source: "if(balances[msg.sender] > (_value + trans_fees))\r\n            {\r\n            balances[msg.sender] -= (_value + trans_fees);\r\n            balances[_to] += _value;\r\n            balances[owner] += trans_fees; \r\n            TransferFees(msg.sender,trans_fees);\r\n            }\r\n            else\r\n            {\r\n                revert();\r\n            }"
            BinaryOperation using operator >
               Type: bool
               Gas costs: 310
               Source: "balances[msg.sender] > (_value + trans_fees)"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              TupleExpression
                 Type: uint256
                 Source: "(_value + trans_fees)"
                BinaryOperation using operator +
                   Type: uint256
                   Source: "_value + trans_fees"
                  Identifier _value
                     Type: uint256
                     Source: "_value"
                  Identifier trans_fees
                     Type: uint256
                     Source: "trans_fees"
            Block
               Source: "{\r\n            balances[msg.sender] -= (_value + trans_fees);\r\n            balances[_to] += _value;\r\n            balances[owner] += trans_fees; \r\n            TransferFees(msg.sender,trans_fees);\r\n            }"
              ExpressionStatement
                 Gas costs: 20334
                 Source: "balances[msg.sender] -= (_value + trans_fees)"
                Assignment using operator -=
                   Type: uint256
                   Source: "balances[msg.sender] -= (_value + trans_fees)"
                  IndexAccess
                     Type: uint256
                     Source: "balances[msg.sender]"
                    Identifier balances
                       Type: mapping(address => uint256)
                       Source: "balances"
                    MemberAccess to member sender
                       Type: address
                       Source: "msg.sender"
                      Identifier msg
                         Type: msg
                         Source: "msg"
                  TupleExpression
                     Type: uint256
                     Source: "(_value + trans_fees)"
                    BinaryOperation using operator +
                       Type: uint256
                       Source: "_value + trans_fees"
                      Identifier _value
                         Type: uint256
                         Source: "_value"
                      Identifier trans_fees
                         Type: uint256
                         Source: "trans_fees"
              ExpressionStatement
                 Gas costs: 20323
                 Source: "balances[_to] += _value"
                Assignment using operator +=
                   Type: uint256
                   Source: "balances[_to] += _value"
                  IndexAccess
                     Type: uint256
                     Source: "balances[_to]"
                    Identifier balances
                       Type: mapping(address => uint256)
                       Source: "balances"
                    Identifier _to
                       Type: address
                       Source: "_to"
                  Identifier _value
                     Type: uint256
                     Source: "_value"
              ExpressionStatement
                 Gas costs: 20559
                 Source: "balances[owner] += trans_fees"
                Assignment using operator +=
                   Type: uint256
                   Source: "balances[owner] += trans_fees"
                  IndexAccess
                     Type: uint256
                     Source: "balances[owner]"
                    Identifier balances
                       Type: mapping(address => uint256)
                       Source: "balances"
                    Identifier owner
                       Type: address
                       Source: "owner"
                  Identifier trans_fees
                     Type: uint256
                     Source: "trans_fees"
              ExpressionStatement
                 Gas costs: [???]
                 Source: "TransferFees(msg.sender,trans_fees)"
                FunctionCall
                   Type: tuple()
                   Source: "TransferFees(msg.sender,trans_fees)"
                  Identifier TransferFees
                     Type: function (address,uint256)
                     Source: "TransferFees"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
                  Identifier trans_fees
                     Type: uint256
                     Source: "trans_fees"
            Block
               Source: "{\r\n                revert();\r\n            }"
              ExpressionStatement
                 Gas costs: 6
                 Source: "revert()"
                FunctionCall
                   Type: tuple()
                   Source: "revert()"
                  Identifier revert
                     Type: function () pure
                     Source: "revert"
      ExpressionStatement
         Gas costs: [???]
         Source: "Transfer(msg.sender, _to, _value)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(msg.sender, _to, _value)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "transferCoins" - public
     Source: "function transferCoins(address _to, uint256 _value) returns(bool ok) \r\n    {\r\n        if (_to == 0x0) revert(); // Prevent transfer to 0x0 address. Use burn() instead\r\n        if (balances[msg.sender] < _value) revert(); // Check if the sender has enough\r\n        if (balances[_to] + _value < balances[_to]) revert(); // Check for overflows\r\n        balances[msg.sender] -= _value; // Subtract from the sender\r\n        balances[_to] += _value; // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool ok)"
      VariableDeclaration "ok"
         Type: bool
         Source: "bool ok"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        if (_to == 0x0) revert(); // Prevent transfer to 0x0 address. Use burn() instead\r\n        if (balances[msg.sender] < _value) revert(); // Check if the sender has enough\r\n        if (balances[_to] + _value < balances[_to]) revert(); // Check for overflows\r\n        balances[msg.sender] -= _value; // Subtract from the sender\r\n        balances[_to] += _value; // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place\r\n        return true;\r\n    }"
      IfStatement
         Source: "if (_to == 0x0) revert()"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 15
           Source: "_to == 0x0"
          Identifier _to
             Type: address
             Source: "_to"
          Literal, token: [no token] value: 0x0
             Type: int_const 0
             Source: "0x0"
        ExpressionStatement
           Gas costs: 6
           Source: "revert()"
          FunctionCall
             Type: tuple()
             Source: "revert()"
            Identifier revert
               Type: function () pure
               Source: "revert"
      IfStatement
         Source: "if (balances[msg.sender] < _value) revert()"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 304
           Source: "balances[msg.sender] < _value"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
        ExpressionStatement
           Gas costs: 6
           Source: "revert()"
          FunctionCall
             Type: tuple()
             Source: "revert()"
            Identifier revert
               Type: function () pure
               Source: "revert"
      IfStatement
         Source: "if (balances[_to] + _value < balances[_to]) revert()"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 601
           Source: "balances[_to] + _value < balances[_to]"
          BinaryOperation using operator +
             Type: uint256
             Source: "balances[_to] + _value"
            IndexAccess
               Type: uint256
               Source: "balances[_to]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _to
                 Type: address
                 Source: "_to"
            Identifier _value
               Type: uint256
               Source: "_value"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
        ExpressionStatement
           Gas costs: 6
           Source: "revert()"
          FunctionCall
             Type: tuple()
             Source: "revert()"
            Identifier revert
               Type: function () pure
               Source: "revert"
      ExpressionStatement
         Gas costs: 20328
         Source: "balances[msg.sender] -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "balances[msg.sender] -= _value"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 20323
         Source: "balances[_to] += _value"
        Assignment using operator +=
           Type: uint256
           Source: "balances[_to] += _value"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: [???]
         Source: "Transfer(msg.sender, _to, _value)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(msg.sender, _to, _value)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint256 _value)\r\n    returns(bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 20199
         Source: "allowance[msg.sender][_spender] = _value"
        Assignment using operator =
           Type: uint256
           Source: "allowance[msg.sender][_spender] = _value"
          IndexAccess
             Type: uint256
             Source: "allowance[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowance[msg.sender]"
              Identifier allowance
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowance"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\r\n        return allowance[_owner][_spender];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint256 remaining"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return allowance[_owner][_spender];\r\n    }"
      Return
         Gas costs: 394
         Source: "return allowance[_owner][_spender]"
        IndexAccess
           Type: uint256
           Source: "allowance[_owner][_spender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowance[_owner]"
            Identifier allowance
               Type: mapping(address => mapping(address => uint256))
               Source: "allowance"
            Identifier _owner
               Type: address
               Source: "_owner"
          Identifier _spender
             Type: address
             Source: "_spender"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {\r\n        uint256 trans_fees = SafeMath.div(_value,1000);\r\n        if (_to == 0x0) revert(); // Prevent transfer to 0x0 address. Use burn() instead\r\n        if (balances[_from] < (_value + trans_fees)) revert(); // Check if the sender has enough\r\n        if (balances[_to] + _value < balances[_to]) revert(); // Check for overflows\r\n        if ((_value + trans_fees) > allowance[_from][msg.sender]) revert(); // Check allowance\r\n        \r\n\r\n        balances[_from] -= (_value + trans_fees); // Subtract from the sender\r\n        balances[_to] += _value; // Add the same to the recipient\r\n        balances[owner] += trans_fees;\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        uint256 trans_fees = SafeMath.div(_value,1000);\r\n        if (_to == 0x0) revert(); // Prevent transfer to 0x0 address. Use burn() instead\r\n        if (balances[_from] < (_value + trans_fees)) revert(); // Check if the sender has enough\r\n        if (balances[_to] + _value < balances[_to]) revert(); // Check for overflows\r\n        if ((_value + trans_fees) > allowance[_from][msg.sender]) revert(); // Check allowance\r\n        \r\n\r\n        balances[_from] -= (_value + trans_fees); // Subtract from the sender\r\n        balances[_to] += _value; // Add the same to the recipient\r\n        balances[owner] += trans_fees;\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 18
         Source: "uint256 trans_fees = SafeMath.div(_value,1000)"
        VariableDeclaration "trans_fees"
           Type: uint256
           Source: "uint256 trans_fees"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "SafeMath.div(_value,1000)"
          MemberAccess to member div
             Type: function (uint256,uint256) view returns (uint256)
             Source: "SafeMath.div"
            Identifier SafeMath
               Type: type(library SafeMath)
               Source: "SafeMath"
          Identifier _value
             Type: uint256
             Source: "_value"
          Literal, token: [no token] value: 1000
             Type: int_const 1000
             Source: "1000"
      IfStatement
         Source: "if (_to == 0x0) revert()"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 15
           Source: "_to == 0x0"
          Identifier _to
             Type: address
             Source: "_to"
          Literal, token: [no token] value: 0x0
             Type: int_const 0
             Source: "0x0"
        ExpressionStatement
           Gas costs: 6
           Source: "revert()"
          FunctionCall
             Type: tuple()
             Source: "revert()"
            Identifier revert
               Type: function () pure
               Source: "revert"
      IfStatement
         Source: "if (balances[_from] < (_value + trans_fees)) revert()"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 311
           Source: "balances[_from] < (_value + trans_fees)"
          IndexAccess
             Type: uint256
             Source: "balances[_from]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _from
               Type: address
               Source: "_from"
          TupleExpression
             Type: uint256
             Source: "(_value + trans_fees)"
            BinaryOperation using operator +
               Type: uint256
               Source: "_value + trans_fees"
              Identifier _value
                 Type: uint256
                 Source: "_value"
              Identifier trans_fees
                 Type: uint256
                 Source: "trans_fees"
        ExpressionStatement
           Gas costs: 6
           Source: "revert()"
          FunctionCall
             Type: tuple()
             Source: "revert()"
            Identifier revert
               Type: function () pure
               Source: "revert"
      IfStatement
         Source: "if (balances[_to] + _value < balances[_to]) revert()"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 601
           Source: "balances[_to] + _value < balances[_to]"
          BinaryOperation using operator +
             Type: uint256
             Source: "balances[_to] + _value"
            IndexAccess
               Type: uint256
               Source: "balances[_to]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _to
                 Type: address
                 Source: "_to"
            Identifier _value
               Type: uint256
               Source: "_value"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
        ExpressionStatement
           Gas costs: 6
           Source: "revert()"
          FunctionCall
             Type: tuple()
             Source: "revert()"
            Identifier revert
               Type: function () pure
               Source: "revert"
      IfStatement
         Source: "if ((_value + trans_fees) > allowance[_from][msg.sender]) revert()"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 400
           Source: "(_value + trans_fees) > allowance[_from][msg.sender]"
          TupleExpression
             Type: uint256
             Source: "(_value + trans_fees)"
            BinaryOperation using operator +
               Type: uint256
               Source: "_value + trans_fees"
              Identifier _value
                 Type: uint256
                 Source: "_value"
              Identifier trans_fees
                 Type: uint256
                 Source: "trans_fees"
          IndexAccess
             Type: uint256
             Source: "allowance[_from][msg.sender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowance[_from]"
              Identifier allowance
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowance"
              Identifier _from
                 Type: address
                 Source: "_from"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
        ExpressionStatement
           Gas costs: 6
           Source: "revert()"
          FunctionCall
             Type: tuple()
             Source: "revert()"
            Identifier revert
               Type: function () pure
               Source: "revert"
      ExpressionStatement
         Gas costs: 20335
         Source: "balances[_from] -= (_value + trans_fees)"
        Assignment using operator -=
           Type: uint256
           Source: "balances[_from] -= (_value + trans_fees)"
          IndexAccess
             Type: uint256
             Source: "balances[_from]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _from
               Type: address
               Source: "_from"
          TupleExpression
             Type: uint256
             Source: "(_value + trans_fees)"
            BinaryOperation using operator +
               Type: uint256
               Source: "_value + trans_fees"
              Identifier _value
                 Type: uint256
                 Source: "_value"
              Identifier trans_fees
                 Type: uint256
                 Source: "trans_fees"
      ExpressionStatement
         Gas costs: 20323
         Source: "balances[_to] += _value"
        Assignment using operator +=
           Type: uint256
           Source: "balances[_to] += _value"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 20559
         Source: "balances[owner] += trans_fees"
        Assignment using operator +=
           Type: uint256
           Source: "balances[owner] += trans_fees"
          IndexAccess
             Type: uint256
             Source: "balances[owner]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier owner
               Type: address
               Source: "owner"
          Identifier trans_fees
             Type: uint256
             Source: "trans_fees"
      ExpressionStatement
         Gas costs: 20412
         Source: "allowance[_from][msg.sender] -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "allowance[_from][msg.sender] -= _value"
          IndexAccess
             Type: uint256
             Source: "allowance[_from][msg.sender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowance[_from]"
              Identifier allowance
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowance"
              Identifier _from
                 Type: address
                 Source: "_from"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: [???]
         Source: "Transfer(_from, _to, _value)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(_from, _to, _value)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "zeroFeesTransfer" - public
     Source: "function zeroFeesTransfer(address _from, address _to, uint _value) onlycentralAccount returns(bool success) \r\n    {\r\n        uint256 trans_fees = SafeMath.div(_value,1000); // implementing transaction fees .001% and adding to owner balance\r\n        if(balances[_from] > (_value + trans_fees) && _value > 0)\r\n        {\r\n        balances[_from] -= (_value + trans_fees); // Subtract from the sender\r\n        balances[_to] += _value; // Add the same to the recipient\r\n        balances[owner] += trans_fees; \r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n        }\r\n        else\r\n        {\r\n            revert();\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "onlycentralAccount"
       Gas costs: 0
       Source: "onlycentralAccount"
      Identifier onlycentralAccount
         Type: modifier ()
         Source: "onlycentralAccount"
    Block
       Source: "{\r\n        uint256 trans_fees = SafeMath.div(_value,1000); // implementing transaction fees .001% and adding to owner balance\r\n        if(balances[_from] > (_value + trans_fees) && _value > 0)\r\n        {\r\n        balances[_from] -= (_value + trans_fees); // Subtract from the sender\r\n        balances[_to] += _value; // Add the same to the recipient\r\n        balances[owner] += trans_fees; \r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n        }\r\n        else\r\n        {\r\n            revert();\r\n        }\r\n    }"
      VariableDeclarationStatement
         Gas costs: 29
         Source: "uint256 trans_fees = SafeMath.div(_value,1000)"
        VariableDeclaration "trans_fees"
           Type: uint256
           Source: "uint256 trans_fees"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "SafeMath.div(_value,1000)"
          MemberAccess to member div
             Type: function (uint256,uint256) view returns (uint256)
             Source: "SafeMath.div"
            Identifier SafeMath
               Type: type(library SafeMath)
               Source: "SafeMath"
          Identifier _value
             Type: uint256
             Source: "_value"
          Literal, token: [no token] value: 1000
             Type: int_const 1000
             Source: "1000"
      IfStatement
         Source: "if(balances[_from] > (_value + trans_fees) && _value > 0)\r\n        {\r\n        balances[_from] -= (_value + trans_fees); // Subtract from the sender\r\n        balances[_to] += _value; // Add the same to the recipient\r\n        balances[owner] += trans_fees; \r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n        }\r\n        else\r\n        {\r\n            revert();\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 342
           Source: "balances[_from] > (_value + trans_fees) && _value > 0"
          BinaryOperation using operator >
             Type: bool
             Source: "balances[_from] > (_value + trans_fees)"
            IndexAccess
               Type: uint256
               Source: "balances[_from]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _from
                 Type: address
                 Source: "_from"
            TupleExpression
               Type: uint256
               Source: "(_value + trans_fees)"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "_value + trans_fees"
                Identifier _value
                   Type: uint256
                   Source: "_value"
                Identifier trans_fees
                   Type: uint256
                   Source: "trans_fees"
          BinaryOperation using operator >
             Type: bool
             Source: "_value > 0"
            Identifier _value
               Type: uint256
               Source: "_value"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
        Block
           Source: "{\r\n        balances[_from] -= (_value + trans_fees); // Subtract from the sender\r\n        balances[_to] += _value; // Add the same to the recipient\r\n        balances[owner] += trans_fees; \r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n        }"
          ExpressionStatement
             Gas costs: 20335
             Source: "balances[_from] -= (_value + trans_fees)"
            Assignment using operator -=
               Type: uint256
               Source: "balances[_from] -= (_value + trans_fees)"
              IndexAccess
                 Type: uint256
                 Source: "balances[_from]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _from
                   Type: address
                   Source: "_from"
              TupleExpression
                 Type: uint256
                 Source: "(_value + trans_fees)"
                BinaryOperation using operator +
                   Type: uint256
                   Source: "_value + trans_fees"
                  Identifier _value
                     Type: uint256
                     Source: "_value"
                  Identifier trans_fees
                     Type: uint256
                     Source: "trans_fees"
          ExpressionStatement
             Gas costs: 20323
             Source: "balances[_to] += _value"
            Assignment using operator +=
               Type: uint256
               Source: "balances[_to] += _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20559
             Source: "balances[owner] += trans_fees"
            Assignment using operator +=
               Type: uint256
               Source: "balances[owner] += trans_fees"
              IndexAccess
                 Type: uint256
                 Source: "balances[owner]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier owner
                   Type: address
                   Source: "owner"
              Identifier trans_fees
                 Type: uint256
                 Source: "trans_fees"
          ExpressionStatement
             Gas costs: [???]
             Source: "Transfer(_from, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(_from, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              Identifier _from
                 Type: address
                 Source: "_from"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          Return
             Gas costs: 8
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{\r\n            revert();\r\n        }"
          ExpressionStatement
             Gas costs: 6
             Source: "revert()"
            FunctionCall
               Type: tuple()
               Source: "revert()"
              Identifier revert
                 Type: function () pure
                 Source: "revert"
  FunctionDefinition "transferby" - public
     Source: "function transferby(address _from,address _to,uint256 _amount) onlycentralAccount returns(bool success) {\r\n        if (balances[_from] >= _amount &&\r\n            _amount > 0 &&\r\n            balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from,address _to,uint256 _amount)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "onlycentralAccount"
       Gas costs: 0
       Source: "onlycentralAccount"
      Identifier onlycentralAccount
         Type: modifier ()
         Source: "onlycentralAccount"
    Block
       Source: "{\r\n        if (balances[_from] >= _amount &&\r\n            _amount > 0 &&\r\n            balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }"
      IfStatement
         Source: "if (balances[_from] >= _amount &&\r\n            _amount > 0 &&\r\n            balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 962
           Source: "balances[_from] >= _amount &&\r\n            _amount > 0 &&\r\n            balances[_to] + _amount > balances[_to]"
          BinaryOperation using operator &&
             Type: bool
             Source: "balances[_from] >= _amount &&\r\n            _amount > 0"
            BinaryOperation using operator >=
               Type: bool
               Source: "balances[_from] >= _amount"
              IndexAccess
                 Type: uint256
                 Source: "balances[_from]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _from
                   Type: address
                   Source: "_from"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
            BinaryOperation using operator >
               Type: bool
               Source: "_amount > 0"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
          BinaryOperation using operator >
             Type: bool
             Source: "balances[_to] + _amount > balances[_to]"
            BinaryOperation using operator +
               Type: uint256
               Source: "balances[_to] + _amount"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
            IndexAccess
               Type: uint256
               Source: "balances[_to]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _to
                 Type: address
                 Source: "_to"
        Block
           Source: "{\r\n            balances[_from] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        }"
          ExpressionStatement
             Gas costs: 20329
             Source: "balances[_from] -= _amount"
            Assignment using operator -=
               Type: uint256
               Source: "balances[_from] -= _amount"
              IndexAccess
                 Type: uint256
                 Source: "balances[_from]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _from
                   Type: address
                   Source: "_from"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
          ExpressionStatement
             Gas costs: 20323
             Source: "balances[_to] += _amount"
            Assignment using operator +=
               Type: uint256
               Source: "balances[_to] += _amount"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
          ExpressionStatement
             Gas costs: [???]
             Source: "Transfer(_from, _to, _amount)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(_from, _to, _amount)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              Identifier _from
                 Type: address
                 Source: "_from"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{\r\n            return false;\r\n        }"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "transferOwnership" - public
     Source: "function transferOwnership(address newOwner) onlyOwner {\r\n      balances[newOwner] += balances[owner];\r\n      balances[owner] = 0;\r\n      owner = newOwner;\r\n\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address newOwner)"
      VariableDeclaration "newOwner"
         Type: address
         Source: "address newOwner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n      balances[newOwner] += balances[owner];\r\n      balances[owner] = 0;\r\n      owner = newOwner;\r\n\r\n    }"
      ExpressionStatement
         Gas costs: 20855
         Source: "balances[newOwner] += balances[owner]"
        Assignment using operator +=
           Type: uint256
           Source: "balances[newOwner] += balances[owner]"
          IndexAccess
             Type: uint256
             Source: "balances[newOwner]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier newOwner
               Type: address
               Source: "newOwner"
          IndexAccess
             Type: uint256
             Source: "balances[owner]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier owner
               Type: address
               Source: "owner"
      ExpressionStatement
         Gas costs: 5340
         Source: "balances[owner] = 0"
        Assignment using operator =
           Type: uint256
           Source: "balances[owner] = 0"
          IndexAccess
             Type: uint256
             Source: "balances[owner]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier owner
               Type: address
               Source: "owner"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 20267
         Source: "owner = newOwner"
        Assignment using operator =
           Type: address
           Source: "owner = newOwner"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier newOwner
             Type: address
             Source: "newOwner"
  FunctionDefinition "drain" - public
     Source: "function drain() onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        owner.transfer(this.balance);\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "owner.transfer(this.balance)"
        FunctionCall
           Type: tuple()
           Source: "owner.transfer(this.balance)"
          MemberAccess to member transfer
             Type: function (uint256)
             Source: "owner.transfer"
            Identifier owner
               Type: address
               Source: "owner"
          MemberAccess to member balance
             Type: uint256
             Source: "this.balance"
            Identifier this
               Type: contract CarbonTOKEN
               Source: "this"
