Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0xad347f4f87259fc11bacfe4814275845b98aba0f.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.15;"
ContractDefinition "SafeMath"
   Source: "library SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n \r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n \r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n \r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}"
  FunctionDefinition "mul" - const
     Source: "function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }"
      VariableDeclarationStatement
         Gas costs: 19
         Source: "uint256 c = a * b"
        VariableDeclaration "c"
           Type: uint256
           Source: "uint256 c"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator *
           Type: uint256
           Source: "a * b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
      ExpressionStatement
         Gas costs: 88
         Source: "assert(a == 0 || c / a == b)"
        FunctionCall
           Type: tuple()
           Source: "assert(a == 0 || c / a == b)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator ||
             Type: bool
             Source: "a == 0 || c / a == b"
            BinaryOperation using operator ==
               Type: bool
               Source: "a == 0"
              Identifier a
                 Type: uint256
                 Source: "a"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
            BinaryOperation using operator ==
               Type: bool
               Source: "c / a == b"
              BinaryOperation using operator /
                 Type: uint256
                 Source: "c / a"
                Identifier c
                   Type: uint256
                   Source: "c"
                Identifier a
                   Type: uint256
                   Source: "a"
              Identifier b
                 Type: uint256
                 Source: "b"
      Return
         Gas costs: 8
         Source: "return c"
        Identifier c
           Type: uint256
           Source: "c"
  FunctionDefinition "div" - const
     Source: "function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    uint256 c = a / b;\r\n    return c;\r\n  }"
      VariableDeclarationStatement
         Gas costs: 42
         Source: "uint256 c = a / b"
        VariableDeclaration "c"
           Type: uint256
           Source: "uint256 c"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator /
           Type: uint256
           Source: "a / b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
      Return
         Gas costs: 8
         Source: "return c"
        Identifier c
           Type: uint256
           Source: "c"
  FunctionDefinition "sub" - const
     Source: "function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    assert(b <= a);\r\n    return a - b;\r\n  }"
      ExpressionStatement
         Gas costs: 0
         Source: "assert(b <= a)"
        FunctionCall
           Type: tuple()
           Source: "assert(b <= a)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator <=
             Type: bool
             Source: "b <= a"
            Identifier b
               Type: uint256
               Source: "b"
            Identifier a
               Type: uint256
               Source: "a"
      Return
         Gas costs: 0
         Source: "return a - b"
        BinaryOperation using operator -
           Type: uint256
           Source: "a - b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
  FunctionDefinition "add" - const
     Source: "function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }"
      VariableDeclarationStatement
         Gas costs: 17
         Source: "uint256 c = a + b"
        VariableDeclaration "c"
           Type: uint256
           Source: "uint256 c"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator +
           Type: uint256
           Source: "a + b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
      ExpressionStatement
         Gas costs: 32
         Source: "assert(c >= a)"
        FunctionCall
           Type: tuple()
           Source: "assert(c >= a)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator >=
             Type: bool
             Source: "c >= a"
            Identifier c
               Type: uint256
               Source: "c"
            Identifier a
               Type: uint256
               Source: "a"
      Return
         Gas costs: 8
         Source: "return c"
        Identifier c
           Type: uint256
           Source: "c"
ContractDefinition "Ownable"
   Source: "contract Ownable {\r\n    \r\n  address public owner;\r\n \r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n \r\n}"
  VariableDeclaration "owner"
     Type: address
     Gas costs: [???]
     Source: "address public owner"
    ElementaryTypeName address
       Source: "address"
  FunctionDefinition "Ownable" - public
     Source: "function Ownable() {\r\n    owner = msg.sender;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    owner = msg.sender;\r\n  }"
      ExpressionStatement
         Gas costs: 0
         Source: "owner = msg.sender"
        Assignment using operator =
           Type: address
           Source: "owner = msg.sender"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  ModifierDefinition "onlyOwner"
     Source: "modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n    require(msg.sender == owner);\r\n    _;\r\n  }"
      ExpressionStatement
         Gas costs: 4512
         Source: "require(msg.sender == owner)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == owner)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == owner"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier owner
               Type: address
               Source: "owner"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "transferOwnership" - public
     Source: "function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address newOwner)"
      VariableDeclaration "newOwner"
         Type: address
         Source: "address newOwner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }"
      ExpressionStatement
         Gas costs: 50
         Source: "require(newOwner != address(0))"
        FunctionCall
           Type: tuple()
           Source: "require(newOwner != address(0))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "newOwner != address(0)"
            Identifier newOwner
               Type: address
               Source: "newOwner"
            FunctionCall
               Type: address
               Source: "address(0)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      ExpressionStatement
         Gas costs: 20267
         Source: "owner = newOwner"
        Assignment using operator =
           Type: address
           Source: "owner = newOwner"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier newOwner
             Type: address
             Source: "newOwner"
ContractDefinition "SingleTokenCoin"
   Gas costs: 0
   Source: "contract SingleTokenCoin {\r\n  function totalSupply() constant returns(uint256);\r\n  function finishMinting();\r\n  function moveUnsold(address _addr);\r\n  function setFreeze(address _addr);\r\n  function removeFreeze(address _addr);\r\n  function transfer(address _to, uint256 _value);\r\n  function newTransferManualTokensnewTransfer(address _from, address _to, uint256 _value) returns (bool);\r\n  function transferTokens(address _to, uint256 _amount, uint256 freezeTime, uint256 _type);\r\n  function transferTokens(address _from, address _to, uint256 _amount, uint256 freezeTime, uint256 _type);\r\n  function withdrowTokens(address _address, uint256 _tokens);\r\n  function setTotalSupply(address _addr);\r\n  function tokenTransferOwnership(address _address);\r\n  function getOwnerToken() constant returns(address);\r\n}"
  FunctionDefinition "totalSupply" - public - const
     Source: "function totalSupply() constant returns(uint256);"
    ParameterList
       Source: "()"
    ParameterList
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "finishMinting" - public
     Source: "function finishMinting();"
    ParameterList
       Source: "()"
    ParameterList
       Source: ""
  FunctionDefinition "moveUnsold" - public
     Source: "function moveUnsold(address _addr);"
    ParameterList
       Source: "(address _addr)"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
  FunctionDefinition "setFreeze" - public
     Source: "function setFreeze(address _addr);"
    ParameterList
       Source: "(address _addr)"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
  FunctionDefinition "removeFreeze" - public
     Source: "function removeFreeze(address _addr);"
    ParameterList
       Source: "(address _addr)"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value);"
    ParameterList
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
  FunctionDefinition "newTransferManualTokensnewTransfer" - public
     Source: "function newTransferManualTokensnewTransfer(address _from, address _to, uint256 _value) returns (bool);"
    ParameterList
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "transferTokens" - public
     Source: "function transferTokens(address _to, uint256 _amount, uint256 freezeTime, uint256 _type);"
    ParameterList
       Source: "(address _to, uint256 _amount, uint256 freezeTime, uint256 _type)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "freezeTime"
         Type: uint256
         Source: "uint256 freezeTime"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_type"
         Type: uint256
         Source: "uint256 _type"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
  FunctionDefinition "transferTokens" - public
     Source: "function transferTokens(address _from, address _to, uint256 _amount, uint256 freezeTime, uint256 _type);"
    ParameterList
       Source: "(address _from, address _to, uint256 _amount, uint256 freezeTime, uint256 _type)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "freezeTime"
         Type: uint256
         Source: "uint256 freezeTime"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_type"
         Type: uint256
         Source: "uint256 _type"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
  FunctionDefinition "withdrowTokens" - public
     Source: "function withdrowTokens(address _address, uint256 _tokens);"
    ParameterList
       Source: "(address _address, uint256 _tokens)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_tokens"
         Type: uint256
         Source: "uint256 _tokens"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
  FunctionDefinition "setTotalSupply" - public
     Source: "function setTotalSupply(address _addr);"
    ParameterList
       Source: "(address _addr)"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
  FunctionDefinition "tokenTransferOwnership" - public
     Source: "function tokenTransferOwnership(address _address);"
    ParameterList
       Source: "(address _address)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
  FunctionDefinition "getOwnerToken" - public - const
     Source: "function getOwnerToken() constant returns(address);"
    ParameterList
       Source: "()"
    ParameterList
       Source: "(address)"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
ContractDefinition "WrapperOraclize"
   Gas costs: 0
   Source: "contract WrapperOraclize {\r\n  function update(string datasource, string arg) payable;\r\n  function getWrapperData() constant returns(bytes32);\r\n  function() external payable;\r\n}"
  FunctionDefinition "update" - public
     Source: "function update(string datasource, string arg) payable;"
    ParameterList
       Source: "(string datasource, string arg)"
      VariableDeclaration "datasource"
         Type: string memory
         Source: "string datasource"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "arg"
         Type: string memory
         Source: "string arg"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
  FunctionDefinition "getWrapperData" - public - const
     Source: "function getWrapperData() constant returns(bytes32);"
    ParameterList
       Source: "()"
    ParameterList
       Source: "(bytes32)"
      VariableDeclaration ""
         Type: bytes32
         Source: "bytes32"
        ElementaryTypeName bytes32
           Source: "bytes32"
  FunctionDefinition "" - public
     Source: "function() external payable;"
    ParameterList
       Source: "()"
    ParameterList
       Source: ""
ContractDefinition "Crowdsale"
   Source: "contract Crowdsale is Ownable {\r\n\r\n  //string public ETHUSD;\r\n\r\n  using SafeMath for uint256;\r\n\r\n  //SingleTokenCoin public token = SingleTokenCoin(0xf579F37FE3129c4C897d2a9561f9D8DbEa3A0943);\r\n    SingleTokenCoin public token;\r\n\r\n  //Address from testnet\r\n  //WrapperOraclize private wrapper = WrapperOraclize(0x676b33cdcc3fa7b994ca6d16cd3c9dfe3c64ec52);\r\n\r\n  //Address from mainnet\r\n  WrapperOraclize private wrapper = WrapperOraclize(0xfC484c66daE464CC6055d7a4782Ec8761dc9842F);\r\n\r\n  uint256 private angel_sale_start;\r\n  uint256 private angel_sale_finish;\r\n\r\n  uint256 private pre_sale_start;\r\n  uint256 private pre_sale_finish;\r\n\r\n  uint256 private public_sale_start;\r\n  uint256 private public_sale_finish;\r\n\r\n  bool private isAngel;\r\n  bool private isPreSale;\r\n  bool private isPublic;\r\n\r\n  uint256 private angel_rate;\r\n  uint256 private public_rate;\r\n\r\n  uint256 private decimals;\r\n\r\n  uint256 private totalETH;\r\n\r\n  address public coreTeamAddr;\r\n  address public itDevAddr;\r\n  address public futDevAddr;\r\n  address public commFoundAddr;\r\n  address public socWarefareAddr;\r\n  address public marketingAddr;\r\n\r\n  address public unsoldAddr;\r\n  address public collectAddr;  \r\n  \r\n  bool public mintingFinished = false;\r\n\r\n  //Storage for Founding Buyers Token\r\n  mapping(address => uint256) private founding_buyers_token;  // 0\r\n\r\n  //Storage for Angel Buyers ETH\r\n  mapping(address => uint256) private angel_buyers_eth;       // 2\r\n\r\n  //Storage for Angel Buyers Token\r\n  mapping(address => uint256) private angel_buyers_token;     // 2\r\n\r\n  //Storage for Angel Buyers ETH\r\n  mapping(address => uint256) private pre_sale_buyers_eth;    // 1\r\n\r\n  //Storage for Angel Buyers Token\r\n  mapping(address => uint256) private pre_sale_buyers_token;  // 1\r\n\r\n  //Storage for Angel Buyers Token\r\n  mapping(address => uint256) private pe_buyers_token;        // 3\r\n\r\n  //Storage for Angel Buyers ETH\r\n  mapping(address => uint256) private public_buyers_eth;      // 4\r\n\r\n  //Storage for Angel Buyers Token\r\n  mapping(address => uint256) private public_buyers_token;    // 4\r\n\r\n  address[] private founding_investors; // 0\r\n  address[] private pre_sale_investors; // 1\r\n  address[] private angel_investors;    // 2\r\n  address[] private pe_investors;       // 3\r\n  address[] private public_investors;   // 4\r\n\r\n  uint256 private soldTokens;\r\n  \r\n  uint256 private maxcup;\r\n\r\n  uint256 private totalAmount; \r\n  uint256 private foundingAmount; \r\n  uint256 private angelAmount;  \r\n  uint256 private preSaleAmount;\r\n  uint256 private PEInvestorAmount;\r\n  uint256 private publicSaleAmount;\r\n\r\n  uint256 private coreTeamAmount;\r\n  uint256 private coreTeamAuto;\r\n  uint256 private coreTeamManual;\r\n  uint256 private itDevAmount;  \r\n  uint256 private futDevAmount; \r\n  uint256 private commFoundAmount;\r\n  uint256 private socWarefareAmount;\r\n  uint256 private marketingAmount;\r\n\r\n  uint256 private angel_sale_sold;\r\n  uint256 private pre_sale_sold;\r\n  uint256 private public_sale_sold;\r\n  uint256 private founding_sold;\r\n  uint256 private peInvestors_sold;\r\n\r\n  uint256 private angel_sale_totalETH;\r\n  uint256 private pre_sale_totalETH;\r\n  uint256 private public_sale_totalETH;\r\n\r\n  uint256 private firstPhaseAmount;\r\n  uint256 private secondPhaseAmount; \r\n  uint256 private thirdPhaseAmount;  \r\n  uint256 private fourPhaseAmount;\r\n\r\n  uint256 private firstPhaseDiscount;\r\n  uint256 private secondPhaseDiscount;\r\n  uint256 private thirdPhaseDiscount;\r\n  uint256 private fourPhaseDiscount;\r\n\r\n  uint256 private currentPhase;\r\n\r\n  bool private moveTokens;\r\n\r\n  bool withdrowTokensComplete = false;  \r\n\r\n  function Crowdsale(address token_addr) {\r\n\r\n    token = SingleTokenCoin(token_addr);\r\n\r\n    //set calculate rate from USD\r\n    public_rate = 3546099290780141; // ~ 1 USD\r\n\r\n    angel_rate = 20;\r\n\r\n    decimals = 35460992907801; // 18 decimals\r\n\r\n    //now\r\n    angel_sale_start = now - 3 days;\r\n    //06.12.2017 08:30 AM\r\n    angel_sale_finish = 1510488000;\r\n\r\n    //07.12.2017 08:30 AM\r\n    pre_sale_start = 1510491600;\r\n    //06 .01.2018 08:30 AM\r\n    pre_sale_finish = 1512561600;\r\n\r\n    //07.01.2018 08:30 AM\r\n    //public_sale_start = 1512565200;\r\n    public_sale_start = 1512565200;\r\n    //10.01.2018 08:30 AM\r\n    public_sale_finish = public_sale_start + 14 days;\r\n\r\n    moveTokens = false;\r\n    \r\n    isAngel = true;\r\n    isPreSale = false;\r\n    isPublic = false;\r\n\r\n    currentPhase = 1;\r\n\r\n    founding_sold = 0;\r\n    peInvestors_sold = 0;\r\n    angel_sale_sold = 0;\r\n    pre_sale_sold = 0;\r\n    public_sale_sold = 0;\r\n\r\n    angel_sale_totalETH = 0;\r\n    pre_sale_totalETH = 0;\r\n    public_sale_totalETH = 0;\r\n\r\n    firstPhaseAmount = 18750000E18;     // 18 750 000;  // with 18 decimals\r\n    secondPhaseAmount = 37500000E18;    // 37 500 000;  // with 18 decimals\r\n    thirdPhaseAmount = 56250000E18;     // 56 250 000;  // with 18 decimals-\r\n    fourPhaseAmount = 75000000E18;      // 75 000 000;  // with 18 decimals\r\n\r\n    firstPhaseDiscount = 30;\r\n    secondPhaseDiscount = 40;\r\n    thirdPhaseDiscount = 50;\r\n    fourPhaseDiscount = 60;\r\n\r\n    totalAmount = 500000000E18;         // 500 000 000;  // with 18 decimals\r\n    foundingAmount = 10000000E18;       //  10 000 000;  // with 18 decimals\r\n    angelAmount = 25000000E18;          //  25 000 000;  // with 18 decimals\r\n    preSaleAmount = 75000000E18;        //  75 000 000;  // with 18 decimals\r\n    PEInvestorAmount = 50000000E18;     //  50 000 000;  // with 18 decimals\r\n    publicSaleAmount = 100000000E18;    // 100 000 000;  // with 18 decimals\r\n\r\n    coreTeamAmount = 100000000E18;      // 100 000 000;  // with 18 decimals\r\n    coreTeamAuto = 60000000E18;         //  60 000 000;  // with 18 decimals\r\n    coreTeamManual = 40000000E18;       //  40 000 000;  // with 18 decimals\r\n    itDevAmount = 50000000E18;          //  50 000 000;  // with 18 decimals\r\n    futDevAmount = 50000000E18;         //  50 000 000;  // with 18 decimals\r\n    commFoundAmount = 15000000E18;      //  15 000 000;  // with 18 decimals\r\n    socWarefareAmount = 10000000E18;    //  10 000 000;  // with 18 decimals\r\n    marketingAmount = 15000000E18;      //  15 000 000;  // with 18 decimals\r\n\r\n    mintingFinished = false;\r\n\r\n    coreTeamAddr = 0xB0A3A845cfA5e2baCD3925Af85c59dE4D32D874f;\r\n    itDevAddr = 0x61528ffdCd4BC26c81c88423018780b399Fbb8e7;\r\n    futDevAddr = 0xA1f9C3F137496e6b8bA4445d15b0986CaA22FDe3;\r\n    commFoundAddr = 0xC30a0E7FFad754A9AD2A1C1cFeB10e05f7C7aB6A;\r\n    socWarefareAddr = 0xd5d692C89C83313579d02C94F4faE600fe30D1d9;\r\n    marketingAddr = 0x5490510072b929273F65dba4B72c96cd45A99b5A;\r\n\r\n    unsoldAddr = 0x18051b5b0F1FDb4D44eACF2FA49f19bB80105Fc1;\r\n    collectAddr = 0xB338121B8e5dA0900a6E8580321293f3CF52E58D;\r\n\r\n  }\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  function setFreeze(address _addr) public onlyOwner {\r\n    token.setFreeze(_addr);\r\n  }\r\n\r\n  function removeFreeze(address _addr) public onlyOwner {\r\n    token.removeFreeze(_addr);\r\n  }\r\n\r\n  function moveUnsold() public onlyOwner {\r\n    angelAmount = 0;\r\n    preSaleAmount = 0;\r\n    publicSaleAmount = 0;\r\n\r\n    angel_sale_sold = 0;\r\n    pre_sale_sold = 0;\r\n    public_sale_sold = 0;\r\n    token.moveUnsold(unsoldAddr);\r\n  }\r\n\r\n  function newTransferManualTokensnewTransfer(address _from, address _to, uint256 _value) onlyOwner returns (bool) {\r\n    return token.newTransferManualTokensnewTransfer(_from, _to, _value);\r\n  }\r\n\r\n  function() external payable {\r\n    mint();    \r\n  }\r\n\r\n  function bytesToUInt(bytes32 v) private constant returns (uint ret) {\r\n    if (v == 0x0) {\r\n        revert();\r\n    }\r\n\r\n    uint digit;\r\n\r\n    for (uint i = 0; i < 32; i++) {\r\n      digit = uint((uint(v) / (2 ** (8 * (31 - i)))) & 0xff);\r\n      if (digit == 0 || digit == 46) {\r\n          break;\r\n      }\r\n      else if (digit < 48 || digit > 57) {\r\n          revert();\r\n      }\r\n      ret *= 10;\r\n      ret += (digit - 48);\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  function calculateRate() public constant returns(uint256) {\r\n    bytes32 result = getWrapperData();\r\n    uint256 usd = bytesToUInt(result);\r\n\r\n    uint256 price = 1 ether / usd; //price for 1 BMC //4545454545454546;\r\n\r\n    return price;\r\n  }\r\n\r\n  function calculatePrice(uint256 _usd, uint256 _pre_sale_sold) private constant returns(uint256) {\r\n    \r\n    if (currentPhase == 1 && pre_sale_sold + _pre_sale_sold <= firstPhaseAmount) {\r\n      return _usd.mul(firstPhaseDiscount).div(100);\r\n    }\r\n\r\n    if (currentPhase == 2 && pre_sale_sold + _pre_sale_sold > firstPhaseAmount && pre_sale_sold + _pre_sale_sold <= secondPhaseAmount) {\r\n      return _usd.mul(secondPhaseDiscount).div(100);\r\n    }\r\n\r\n    if (currentPhase == 3 && pre_sale_sold + _pre_sale_sold > secondPhaseAmount && pre_sale_sold + _pre_sale_sold <= thirdPhaseAmount) {\r\n      return _usd.mul(thirdPhaseDiscount).div(100);\r\n    }\r\n\r\n    if (currentPhase == 4 && pre_sale_sold + _pre_sale_sold > thirdPhaseAmount && pre_sale_sold + _pre_sale_sold <= fourPhaseAmount) {\r\n      return _usd.mul(fourPhaseDiscount).div(100);\r\n    }\r\n\r\n    return _usd;\r\n  }\r\n\r\n  function sendToAddress(address _address, uint256 _tokens, uint256 _type) canMint onlyOwner public {\r\n\r\n   if (_type != 1 && _type != 2 && _type != 3) {\r\n     revert();\r\n   }\r\n\r\n    //Founding\r\n    if (_type == 1) {\r\n      if (founding_sold + _tokens > foundingAmount) {\r\n        revert();\r\n      }\r\n\r\n      if (founding_buyers_token[_address] == 0) {\r\n        founding_investors.push(_address);\r\n      }\r\n\r\n      require(foundingAmount >= _tokens);\r\n\r\n      founding_buyers_token[_address] = founding_buyers_token[_address].add(_tokens);\r\n    \r\n      founding_sold = founding_sold + _tokens;\r\n\r\n      token.transferTokens(_address, _tokens, public_sale_start, 1);\r\n\r\n      foundingAmount = foundingAmount - _tokens;\r\n    }\r\n    // PE Investors\r\n    if (_type == 2) {\r\n      if (peInvestors_sold + _tokens > PEInvestorAmount) {\r\n        revert();\r\n      }\r\n\r\n      if (pe_buyers_token[_address] == 0) {\r\n        pe_investors.push(_address);\r\n      }\r\n\r\n      require(PEInvestorAmount >= _tokens);\r\n\r\n      pe_buyers_token[_address] = pe_buyers_token[_address].add(_tokens);\r\n    \r\n      peInvestors_sold = peInvestors_sold + _tokens;\r\n      \r\n      token.transferTokens(_address, _tokens, public_sale_start, 2);\r\n\r\n      PEInvestorAmount = PEInvestorAmount - _tokens;\r\n    }\r\n    //Core Team\r\n    if (_type == 3) {\r\n      require(coreTeamAmount >= _tokens);\r\n      token.transferTokens(coreTeamAddr, _address, _tokens, public_sale_start, 3);\r\n      coreTeamAmount = coreTeamAmount - _tokens;\r\n    } else {\r\n      soldTokens = soldTokens + _tokens;\r\n    }\r\n  }\r\n\r\n  modifier isICOFinished() {\r\n    if (now > public_sale_finish) {\r\n      finishMinting();\r\n    }\r\n    _;\r\n  }\r\n\r\n  modifier isAnyStage() {\r\n    if (now > angel_sale_finish && now > pre_sale_finish && now > public_sale_finish) {\r\n      revert();\r\n    }\r\n\r\n    if (now < angel_sale_start && now < pre_sale_start && now < public_sale_start) {\r\n      revert();\r\n    }\r\n\r\n    _;\r\n  }\r\n\r\n  function setTransferOwnership(address _address) public onlyOwner {\r\n\r\n    transferOwnership(_address);\r\n  }\r\n\r\n  //only for demonstrate Test Version\r\n  function setAngelDate(uint256 _time) public onlyOwner {\r\n    angel_sale_start = _time;\r\n  }\r\n\r\n  //only for demonstrate Test Version\r\n  function setPreSaleDate(uint256 _time) public onlyOwner {\r\n    pre_sale_start = _time;\r\n  }\r\n\r\n  //only for demonstrate Test Version\r\n  function setPublicSaleDate(uint256 _time) public onlyOwner {\r\n    public_sale_start = _time;\r\n  }\r\n\r\n  function getStartDates() public constant returns(uint256 _angel_sale_start, uint256 _pre_sale_start, uint256 _public_sale_start) {\r\n    return (angel_sale_start, pre_sale_start, public_sale_start);\r\n  }\r\n\r\n  //only for demonstrate Test Version\r\n  function setAngelFinishDate(uint256 _time) public onlyOwner {\r\n    angel_sale_finish = _time;\r\n  }\r\n\r\n  //only for demonstrate Test Version\r\n  function setPreSaleFinishDate(uint256 _time) public onlyOwner {\r\n    pre_sale_finish = _time;\r\n  }\r\n\r\n  //only for demonstrate Test Version\r\n  function setPublicSaleFinishDate(uint256 _time) public onlyOwner {\r\n    public_sale_finish = _time;\r\n  }\r\n\r\n  function getFinishDates() public constant returns(uint256 _angel_sale_finish, uint256 _pre_sale_finish, uint256 _public_sale_finish) {\r\n    return (angel_sale_finish, pre_sale_finish, public_sale_finish);\r\n  }\r\n\r\n  function mint() public canMint isICOFinished isAnyStage payable {\r\n\r\n    if (now > angel_sale_finish && now < pre_sale_finish) {\r\n      isPreSale = true;\r\n      isAngel = false;\r\n    }\r\n\r\n    if (now > pre_sale_finish && now < public_sale_finish) {\r\n      isPreSale = false;\r\n      isAngel = false;\r\n      isPublic = true;\r\n    }\r\n\r\n    if (now > angel_sale_finish && now < pre_sale_start) {\r\n      revert();\r\n    }\r\n\r\n    if (now > pre_sale_finish && now < public_sale_start) {\r\n      revert();\r\n    }\r\n\r\n    if (isAngel && angelAmount == angel_sale_sold) {\r\n      revert();\r\n    }\r\n\r\n    if (isPreSale && preSaleAmount == pre_sale_sold) {\r\n      revert();\r\n    }\r\n\r\n    if (isPublic && publicSaleAmount == public_sale_sold) {\r\n      revert();\r\n    }\r\n\r\n    public_rate = calculateRate();\r\n\r\n    uint256 eth = msg.value * 1E18;\r\n\r\n    uint256 discountPrice = 0;\r\n\r\n    if (isPreSale) {\r\n      discountPrice = calculatePrice(public_rate, 0);\r\n      pre_sale_totalETH = pre_sale_totalETH + eth;\r\n    }\r\n\r\n    if (isAngel) {\r\n      discountPrice = public_rate.mul(angel_rate).div(100);\r\n      angel_sale_totalETH = angel_sale_totalETH + eth;\r\n    }\r\n\r\n    uint currentRate = 0;\r\n\r\n    if (isPublic) {\r\n      currentRate = public_rate;\r\n      public_sale_totalETH = public_sale_totalETH + eth;\r\n    } else {\r\n      currentRate = discountPrice;\r\n    }\r\n\r\n    if (eth < currentRate) {\r\n      revert();\r\n    }\r\n\r\n    uint256 tokens = eth.div(currentRate);\r\n\r\n    if (isPublic && !moveTokens) {\r\n      if (angelAmount > angel_sale_sold) {\r\n        uint256 angelRemainder = angelAmount - angel_sale_sold;\r\n        publicSaleAmount = publicSaleAmount + angelRemainder;\r\n      }\r\n      if (preSaleAmount > pre_sale_sold) {\r\n        uint256 preSaleRemainder = preSaleAmount - pre_sale_sold;\r\n        publicSaleAmount = publicSaleAmount + preSaleRemainder;\r\n      }\r\n      moveTokens = true;\r\n    }\r\n\r\n    if (isPreSale) {\r\n      uint256 availableTokensPhase = 0;\r\n      uint256 ethToRefundPhase = 0;\r\n\r\n      uint256 remETH = 0;\r\n\r\n      uint256 totalTokensPhase = 0;\r\n\r\n      if (currentPhase == 1 && pre_sale_sold + tokens > firstPhaseAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(firstPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = availableTokensPhase;\r\n\r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 2;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }\r\n\r\n      if (currentPhase == 2 && pre_sale_sold + tokens + totalTokensPhase > secondPhaseAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(secondPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = totalTokensPhase + availableTokensPhase;\r\n        \r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 3;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }\r\n\r\n      if (currentPhase == 3 && pre_sale_sold + tokens + totalTokensPhase > thirdPhaseAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(thirdPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = totalTokensPhase + availableTokensPhase;\r\n        \r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 4;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }\r\n\r\n      if (currentPhase == 4 && pre_sale_sold + tokens + totalTokensPhase > fourPhaseAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(fourPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = totalTokensPhase + availableTokensPhase;\r\n        \r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 0;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }\r\n\r\n      tokens = tokens + totalTokensPhase;\r\n    }\r\n\r\n    if (isPreSale) {\r\n      if (pre_sale_sold + tokens > preSaleAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(preSaleAmount, pre_sale_sold, currentRate, tokens);\r\n        tokens = availableTokensPhase;\r\n        eth = eth - ethToRefundPhase;\r\n        refund(ethToRefundPhase);\r\n      }\r\n    }\r\n\r\n    if (isAngel) {\r\n      if (angel_sale_sold + tokens > angelAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(angelAmount, angel_sale_sold, currentRate, tokens);\r\n        tokens = availableTokensPhase;\r\n        eth = eth - ethToRefundPhase;\r\n        refund(ethToRefundPhase);\r\n        \r\n      }    \r\n    }\r\n\r\n    if (isPublic) {\r\n      if (public_sale_sold + tokens > publicSaleAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(publicSaleAmount, public_sale_sold, currentRate, tokens);\r\n        tokens = availableTokensPhase;\r\n        eth = eth - ethToRefundPhase;\r\n        refund(ethToRefundPhase);\r\n        \r\n      }\r\n    }\r\n\r\n    saveInfoAboutInvestors(msg.sender, eth, tokens);\r\n\r\n    if (isAngel) {\r\n      token.transferTokens(msg.sender, tokens, public_sale_start, 0);\r\n    } else {\r\n      // 0 - not freeze time; 4 - not freeze type currently;\r\n      token.transferTokens(msg.sender, tokens, 0, 4);\r\n    }\r\n\r\n    soldTokens = soldTokens + tokens;\r\n    \r\n    totalETH = totalETH + eth;\r\n  }\r\n\r\n  function calculateMinorRefund(uint256 _maxcup, uint256 _sold, uint256 _rate, uint256 _tokens) private returns(uint256 _availableTokens, uint256 _ethToRefund) {\r\n    uint256 availableTokens = _maxcup - _sold;\r\n    uint256 tokensForRefund = _tokens - availableTokens;\r\n    uint256 refundETH = tokensForRefund * _rate;\r\n\r\n    return (availableTokens, refundETH);\r\n  }\r\n\r\n  function withdrowETH() public onlyOwner {\r\n    require(now > public_sale_finish);\r\n\r\n    collectAddr.transfer(this.balance);\r\n  }\r\n\r\n  function withdrowTokens() public onlyOwner {    \r\n    if (!withdrowTokensComplete) {\r\n      \r\n      token.withdrowTokens(coreTeamAddr, coreTeamAmount);\r\n      token.withdrowTokens(itDevAddr, itDevAmount);\r\n      token.withdrowTokens(futDevAddr, futDevAmount);\r\n      token.withdrowTokens(commFoundAddr, commFoundAmount);\r\n      token.withdrowTokens(socWarefareAddr, socWarefareAmount);\r\n      token.withdrowTokens(marketingAddr, marketingAmount);\r\n\r\n      withdrowTokensComplete = true;\r\n    }\r\n  }\r\n\r\n  function saveInfoAboutInvestors(address _address, uint256 _amount, uint256 _tokens) private {\r\n    if (isAngel) {\r\n      if (angel_buyers_token[_address] == 0) {\r\n        angel_investors.push(_address);\r\n      }\r\n\r\n      angel_buyers_eth[_address] = angel_buyers_eth[_address].add(_amount);\r\n\r\n      angel_buyers_token[_address] = angel_buyers_token[_address].add(_tokens);\r\n\r\n      angel_sale_sold = angel_sale_sold + _tokens;\r\n    }\r\n\r\n    if (isPreSale) {\r\n      if (pre_sale_buyers_token[_address] == 0) {\r\n        pre_sale_investors.push(_address);\r\n      }\r\n\r\n      pre_sale_buyers_eth[_address] = pre_sale_buyers_eth[_address].add(_amount);\r\n\r\n      pre_sale_buyers_token[_address] = pre_sale_buyers_token[_address].add(_tokens);\r\n    \r\n      pre_sale_sold = pre_sale_sold + _tokens;\r\n    }\r\n\r\n    if (isPublic) {\r\n      if (public_buyers_token[_address] == 0) {\r\n        public_investors.push(_address);\r\n      }\r\n\r\n      public_buyers_eth[_address] = public_buyers_eth[_address].add(_amount);\r\n\r\n      public_buyers_token[_address] = public_buyers_token[_address].add(_tokens);\r\n    \r\n      public_sale_sold = public_sale_sold + _tokens;\r\n    }\r\n  }\r\n\r\n  // Change for private when deploy to main net\r\n  function finishMinting() public onlyOwner {\r\n\r\n    if (mintingFinished) {\r\n      revert();\r\n    }\r\n\r\n    token.finishMinting();\r\n\r\n    mintingFinished = true;\r\n  }\r\n\r\n  function getFinishStatus() public constant returns(bool) {\r\n    return mintingFinished;\r\n  }\r\n\r\n  function refund(uint256 _amount) private {\r\n    msg.sender.transfer(_amount);\r\n  }\r\n\r\n  function getBalanceContract() public constant returns(uint256) {\r\n    return this.balance;\r\n  }\r\n\r\n  function getSoldToken() public constant returns(uint256 _soldTokens, uint256 _angel_sale_sold, uint256 _pre_sale_sold, uint256 _public_sale_sold, uint256 _founding_sold, uint256 _peInvestors_sold) {\r\n    return (soldTokens, angel_sale_sold, pre_sale_sold, public_sale_sold, founding_sold, peInvestors_sold);\r\n  }\r\n\r\n  function getInvestorsTokens(address _address, uint256 _type) public constant returns(uint256) {\r\n    if (_type == 0) {\r\n      return founding_buyers_token[_address];\r\n    }\r\n    if (_type == 1) {\r\n      return pre_sale_buyers_token[_address];\r\n    }\r\n    if (_type == 2) {\r\n      return angel_buyers_token[_address];\r\n    }\r\n    if (_type == 3) {\r\n      return pe_buyers_token[_address];\r\n    }\r\n    if (_type == 4) {\r\n      return public_buyers_token[_address];\r\n    }\r\n  }\r\n\r\n  function getInvestorsCount(uint256 _type) public constant returns(uint256) {\r\n    if (_type == 0) {\r\n      return founding_investors.length;\r\n    }\r\n    if (_type == 1) {\r\n      return pre_sale_investors.length;\r\n    }\r\n    if (_type == 2) {\r\n      return angel_investors.length;\r\n    }\r\n    if (_type == 3) {\r\n      return pe_investors.length;\r\n    }\r\n    if (_type == 4) {\r\n      return public_investors.length;\r\n    }\r\n  }\r\n\r\n  function getInvestorByIndex(uint256 _index, uint256 _type) public constant returns(address) {\r\n    if (_type == 0) {\r\n      return founding_investors[_index];\r\n    }\r\n    if (_type == 1) {\r\n      return pre_sale_investors[_index];\r\n    }\r\n    if (_type == 2) {\r\n      return angel_investors[_index];\r\n    }\r\n    if (_type == 3) {\r\n      return pe_investors[_index];\r\n    }\r\n    if (_type == 4) {\r\n      return public_investors[_index];\r\n    }\r\n  }\r\n\r\n  function getLeftToken() public constant returns(uint256 _all_left, uint256 _founding_left, uint256 _angel_left, uint256 _preSaleAmount_left, uint256 _PEInvestorAmount_left, uint256 _publicSaleAmount_left) {\r\n    uint256 all_left = token.totalSupply() != 0 ? token.totalSupply() - soldTokens : token.totalSupply();\r\n    uint256 founding_left = foundingAmount != 0 ? foundingAmount - founding_sold : foundingAmount;\r\n    uint256 angel_left = angelAmount != 0 ? angelAmount - angel_sale_sold : angelAmount;\r\n    uint256 preSaleAmount_left = preSaleAmount != 0 ? preSaleAmount - pre_sale_sold : preSaleAmount;\r\n    uint256 PEInvestorAmount_left = PEInvestorAmount != 0 ? PEInvestorAmount - peInvestors_sold : PEInvestorAmount;\r\n    uint256 publicSaleAmount_left = publicSaleAmount != 0 ? publicSaleAmount - public_sale_sold : publicSaleAmount;\r\n\r\n    return (all_left, founding_left, angel_left, preSaleAmount_left, PEInvestorAmount_left, publicSaleAmount_left);\r\n  }\r\n\r\n  function getTotalToken() public constant returns(uint256 _totalToken, uint256 _foundingAmount, uint256 _angelAmount, uint256 _preSaleAmount, uint256 _PEInvestorAmount, uint256 _publicSaleAmount) {\r\n    return (token.totalSupply(), foundingAmount, angelAmount, preSaleAmount, PEInvestorAmount, publicSaleAmount);\r\n  }\r\n\r\n  function getTotalETH() public constant returns(uint256 _totalETH, uint256 _angel_sale_totalETH, uint256 _pre_sale_totalETH, uint256 _public_sale_totalETH) {\r\n    return (totalETH, angel_sale_totalETH, pre_sale_totalETH, public_sale_totalETH);\r\n  }\r\n\r\n  function getCurrentPrice() public constant returns(uint256) {  \r\n    uint256 price = calculateRate();\r\n    return calculatePrice(price, 0);\r\n  }\r\n\r\n  function getContractAddress() public constant returns(address) {\r\n    return this;\r\n  }\r\n\r\n  function getOwner() public constant returns(address) {\r\n    return owner;\r\n  }\r\n\r\n  function sendOracleData() public payable {\r\n    if (msg.value != 0) {\r\n        wrapper.transfer(msg.value);\r\n    }\r\n    \r\n    wrapper.update(\"URL\", \"json(https://api.kraken.com/0/public/Ticker?pair=ETHUSD).result.XETHZUSD.c.0\");\r\n  }\r\n\r\n  function getWrapperData() public constant returns(bytes32) {\r\n    return wrapper.getWrapperData();\r\n  }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Ownable"
    UserDefinedTypeName "Ownable"
       Source: "Ownable"
  UsingForDirective
     Gas costs: 0
     Source: "using SafeMath for uint256;"
    UserDefinedTypeName "SafeMath"
       Source: "SafeMath"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "token"
     Type: contract SingleTokenCoin
     Gas costs: [???]
     Source: "SingleTokenCoin public token"
    UserDefinedTypeName "SingleTokenCoin"
       Source: "SingleTokenCoin"
  VariableDeclaration "wrapper"
     Type: contract WrapperOraclize
     Gas costs: 0
     Source: "WrapperOraclize private wrapper = WrapperOraclize(0xfC484c66daE464CC6055d7a4782Ec8761dc9842F)"
    UserDefinedTypeName "WrapperOraclize"
       Source: "WrapperOraclize"
    FunctionCall
       Type: contract WrapperOraclize
       Source: "WrapperOraclize(0xfC484c66daE464CC6055d7a4782Ec8761dc9842F)"
      Identifier WrapperOraclize
         Type: type(contract WrapperOraclize)
         Source: "WrapperOraclize"
      Literal, token: [no token] value: 0xfC484c66daE464CC6055d7a4782Ec8761dc9842F
         Type: address
         Source: "0xfC484c66daE464CC6055d7a4782Ec8761dc9842F"
  VariableDeclaration "angel_sale_start"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private angel_sale_start"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "angel_sale_finish"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private angel_sale_finish"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "pre_sale_start"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private pre_sale_start"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "pre_sale_finish"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private pre_sale_finish"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "public_sale_start"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private public_sale_start"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "public_sale_finish"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private public_sale_finish"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "isAngel"
     Type: bool
     Gas costs: 0
     Source: "bool private isAngel"
    ElementaryTypeName bool
       Source: "bool"
  VariableDeclaration "isPreSale"
     Type: bool
     Gas costs: 0
     Source: "bool private isPreSale"
    ElementaryTypeName bool
       Source: "bool"
  VariableDeclaration "isPublic"
     Type: bool
     Gas costs: 0
     Source: "bool private isPublic"
    ElementaryTypeName bool
       Source: "bool"
  VariableDeclaration "angel_rate"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private angel_rate"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "public_rate"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private public_rate"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "decimals"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private decimals"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "totalETH"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private totalETH"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "coreTeamAddr"
     Type: address
     Gas costs: [???]
     Source: "address public coreTeamAddr"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "itDevAddr"
     Type: address
     Gas costs: [???]
     Source: "address public itDevAddr"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "futDevAddr"
     Type: address
     Gas costs: [???]
     Source: "address public futDevAddr"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "commFoundAddr"
     Type: address
     Gas costs: [???]
     Source: "address public commFoundAddr"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "socWarefareAddr"
     Type: address
     Gas costs: [???]
     Source: "address public socWarefareAddr"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "marketingAddr"
     Type: address
     Gas costs: [???]
     Source: "address public marketingAddr"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "unsoldAddr"
     Type: address
     Gas costs: [???]
     Source: "address public unsoldAddr"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "collectAddr"
     Type: address
     Gas costs: [???]
     Source: "address public collectAddr"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "mintingFinished"
     Type: bool
     Gas costs: [???]
     Source: "bool public mintingFinished = false"
    ElementaryTypeName bool
       Source: "bool"
    Literal, token: false value: false
       Type: bool
       Source: "false"
  VariableDeclaration "founding_buyers_token"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping(address => uint256) private founding_buyers_token"
    Mapping
       Source: "mapping(address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "angel_buyers_eth"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping(address => uint256) private angel_buyers_eth"
    Mapping
       Source: "mapping(address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "angel_buyers_token"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping(address => uint256) private angel_buyers_token"
    Mapping
       Source: "mapping(address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "pre_sale_buyers_eth"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping(address => uint256) private pre_sale_buyers_eth"
    Mapping
       Source: "mapping(address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "pre_sale_buyers_token"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping(address => uint256) private pre_sale_buyers_token"
    Mapping
       Source: "mapping(address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "pe_buyers_token"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping(address => uint256) private pe_buyers_token"
    Mapping
       Source: "mapping(address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "public_buyers_eth"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping(address => uint256) private public_buyers_eth"
    Mapping
       Source: "mapping(address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "public_buyers_token"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping(address => uint256) private public_buyers_token"
    Mapping
       Source: "mapping(address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "founding_investors"
     Type: address[] storage ref
     Gas costs: 0
     Source: "address[] private founding_investors"
    ArrayTypeName
       Source: "address[]"
      ElementaryTypeName address
         Source: "address"
  VariableDeclaration "pre_sale_investors"
     Type: address[] storage ref
     Gas costs: 0
     Source: "address[] private pre_sale_investors"
    ArrayTypeName
       Source: "address[]"
      ElementaryTypeName address
         Source: "address"
  VariableDeclaration "angel_investors"
     Type: address[] storage ref
     Gas costs: 0
     Source: "address[] private angel_investors"
    ArrayTypeName
       Source: "address[]"
      ElementaryTypeName address
         Source: "address"
  VariableDeclaration "pe_investors"
     Type: address[] storage ref
     Gas costs: 0
     Source: "address[] private pe_investors"
    ArrayTypeName
       Source: "address[]"
      ElementaryTypeName address
         Source: "address"
  VariableDeclaration "public_investors"
     Type: address[] storage ref
     Gas costs: 0
     Source: "address[] private public_investors"
    ArrayTypeName
       Source: "address[]"
      ElementaryTypeName address
         Source: "address"
  VariableDeclaration "soldTokens"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private soldTokens"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "maxcup"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private maxcup"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "totalAmount"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private totalAmount"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "foundingAmount"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private foundingAmount"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "angelAmount"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private angelAmount"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "preSaleAmount"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private preSaleAmount"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "PEInvestorAmount"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private PEInvestorAmount"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "publicSaleAmount"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private publicSaleAmount"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "coreTeamAmount"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private coreTeamAmount"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "coreTeamAuto"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private coreTeamAuto"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "coreTeamManual"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private coreTeamManual"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "itDevAmount"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private itDevAmount"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "futDevAmount"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private futDevAmount"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "commFoundAmount"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private commFoundAmount"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "socWarefareAmount"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private socWarefareAmount"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "marketingAmount"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private marketingAmount"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "angel_sale_sold"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private angel_sale_sold"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "pre_sale_sold"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private pre_sale_sold"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "public_sale_sold"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private public_sale_sold"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "founding_sold"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private founding_sold"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "peInvestors_sold"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private peInvestors_sold"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "angel_sale_totalETH"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private angel_sale_totalETH"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "pre_sale_totalETH"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private pre_sale_totalETH"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "public_sale_totalETH"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private public_sale_totalETH"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "firstPhaseAmount"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private firstPhaseAmount"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "secondPhaseAmount"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private secondPhaseAmount"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "thirdPhaseAmount"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private thirdPhaseAmount"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "fourPhaseAmount"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private fourPhaseAmount"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "firstPhaseDiscount"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private firstPhaseDiscount"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "secondPhaseDiscount"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private secondPhaseDiscount"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "thirdPhaseDiscount"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private thirdPhaseDiscount"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "fourPhaseDiscount"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private fourPhaseDiscount"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "currentPhase"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private currentPhase"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "moveTokens"
     Type: bool
     Gas costs: 0
     Source: "bool private moveTokens"
    ElementaryTypeName bool
       Source: "bool"
  VariableDeclaration "withdrowTokensComplete"
     Type: bool
     Gas costs: 0
     Source: "bool withdrowTokensComplete = false"
    ElementaryTypeName bool
       Source: "bool"
    Literal, token: false value: false
       Type: bool
       Source: "false"
  FunctionDefinition "Crowdsale" - public
     Source: "function Crowdsale(address token_addr) {\r\n\r\n    token = SingleTokenCoin(token_addr);\r\n\r\n    //set calculate rate from USD\r\n    public_rate = 3546099290780141; // ~ 1 USD\r\n\r\n    angel_rate = 20;\r\n\r\n    decimals = 35460992907801; // 18 decimals\r\n\r\n    //now\r\n    angel_sale_start = now - 3 days;\r\n    //06.12.2017 08:30 AM\r\n    angel_sale_finish = 1510488000;\r\n\r\n    //07.12.2017 08:30 AM\r\n    pre_sale_start = 1510491600;\r\n    //06 .01.2018 08:30 AM\r\n    pre_sale_finish = 1512561600;\r\n\r\n    //07.01.2018 08:30 AM\r\n    //public_sale_start = 1512565200;\r\n    public_sale_start = 1512565200;\r\n    //10.01.2018 08:30 AM\r\n    public_sale_finish = public_sale_start + 14 days;\r\n\r\n    moveTokens = false;\r\n    \r\n    isAngel = true;\r\n    isPreSale = false;\r\n    isPublic = false;\r\n\r\n    currentPhase = 1;\r\n\r\n    founding_sold = 0;\r\n    peInvestors_sold = 0;\r\n    angel_sale_sold = 0;\r\n    pre_sale_sold = 0;\r\n    public_sale_sold = 0;\r\n\r\n    angel_sale_totalETH = 0;\r\n    pre_sale_totalETH = 0;\r\n    public_sale_totalETH = 0;\r\n\r\n    firstPhaseAmount = 18750000E18;     // 18 750 000;  // with 18 decimals\r\n    secondPhaseAmount = 37500000E18;    // 37 500 000;  // with 18 decimals\r\n    thirdPhaseAmount = 56250000E18;     // 56 250 000;  // with 18 decimals-\r\n    fourPhaseAmount = 75000000E18;      // 75 000 000;  // with 18 decimals\r\n\r\n    firstPhaseDiscount = 30;\r\n    secondPhaseDiscount = 40;\r\n    thirdPhaseDiscount = 50;\r\n    fourPhaseDiscount = 60;\r\n\r\n    totalAmount = 500000000E18;         // 500 000 000;  // with 18 decimals\r\n    foundingAmount = 10000000E18;       //  10 000 000;  // with 18 decimals\r\n    angelAmount = 25000000E18;          //  25 000 000;  // with 18 decimals\r\n    preSaleAmount = 75000000E18;        //  75 000 000;  // with 18 decimals\r\n    PEInvestorAmount = 50000000E18;     //  50 000 000;  // with 18 decimals\r\n    publicSaleAmount = 100000000E18;    // 100 000 000;  // with 18 decimals\r\n\r\n    coreTeamAmount = 100000000E18;      // 100 000 000;  // with 18 decimals\r\n    coreTeamAuto = 60000000E18;         //  60 000 000;  // with 18 decimals\r\n    coreTeamManual = 40000000E18;       //  40 000 000;  // with 18 decimals\r\n    itDevAmount = 50000000E18;          //  50 000 000;  // with 18 decimals\r\n    futDevAmount = 50000000E18;         //  50 000 000;  // with 18 decimals\r\n    commFoundAmount = 15000000E18;      //  15 000 000;  // with 18 decimals\r\n    socWarefareAmount = 10000000E18;    //  10 000 000;  // with 18 decimals\r\n    marketingAmount = 15000000E18;      //  15 000 000;  // with 18 decimals\r\n\r\n    mintingFinished = false;\r\n\r\n    coreTeamAddr = 0xB0A3A845cfA5e2baCD3925Af85c59dE4D32D874f;\r\n    itDevAddr = 0x61528ffdCd4BC26c81c88423018780b399Fbb8e7;\r\n    futDevAddr = 0xA1f9C3F137496e6b8bA4445d15b0986CaA22FDe3;\r\n    commFoundAddr = 0xC30a0E7FFad754A9AD2A1C1cFeB10e05f7C7aB6A;\r\n    socWarefareAddr = 0xd5d692C89C83313579d02C94F4faE600fe30D1d9;\r\n    marketingAddr = 0x5490510072b929273F65dba4B72c96cd45A99b5A;\r\n\r\n    unsoldAddr = 0x18051b5b0F1FDb4D44eACF2FA49f19bB80105Fc1;\r\n    collectAddr = 0xB338121B8e5dA0900a6E8580321293f3CF52E58D;\r\n\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address token_addr)"
      VariableDeclaration "token_addr"
         Type: address
         Source: "address token_addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n\r\n    token = SingleTokenCoin(token_addr);\r\n\r\n    //set calculate rate from USD\r\n    public_rate = 3546099290780141; // ~ 1 USD\r\n\r\n    angel_rate = 20;\r\n\r\n    decimals = 35460992907801; // 18 decimals\r\n\r\n    //now\r\n    angel_sale_start = now - 3 days;\r\n    //06.12.2017 08:30 AM\r\n    angel_sale_finish = 1510488000;\r\n\r\n    //07.12.2017 08:30 AM\r\n    pre_sale_start = 1510491600;\r\n    //06 .01.2018 08:30 AM\r\n    pre_sale_finish = 1512561600;\r\n\r\n    //07.01.2018 08:30 AM\r\n    //public_sale_start = 1512565200;\r\n    public_sale_start = 1512565200;\r\n    //10.01.2018 08:30 AM\r\n    public_sale_finish = public_sale_start + 14 days;\r\n\r\n    moveTokens = false;\r\n    \r\n    isAngel = true;\r\n    isPreSale = false;\r\n    isPublic = false;\r\n\r\n    currentPhase = 1;\r\n\r\n    founding_sold = 0;\r\n    peInvestors_sold = 0;\r\n    angel_sale_sold = 0;\r\n    pre_sale_sold = 0;\r\n    public_sale_sold = 0;\r\n\r\n    angel_sale_totalETH = 0;\r\n    pre_sale_totalETH = 0;\r\n    public_sale_totalETH = 0;\r\n\r\n    firstPhaseAmount = 18750000E18;     // 18 750 000;  // with 18 decimals\r\n    secondPhaseAmount = 37500000E18;    // 37 500 000;  // with 18 decimals\r\n    thirdPhaseAmount = 56250000E18;     // 56 250 000;  // with 18 decimals-\r\n    fourPhaseAmount = 75000000E18;      // 75 000 000;  // with 18 decimals\r\n\r\n    firstPhaseDiscount = 30;\r\n    secondPhaseDiscount = 40;\r\n    thirdPhaseDiscount = 50;\r\n    fourPhaseDiscount = 60;\r\n\r\n    totalAmount = 500000000E18;         // 500 000 000;  // with 18 decimals\r\n    foundingAmount = 10000000E18;       //  10 000 000;  // with 18 decimals\r\n    angelAmount = 25000000E18;          //  25 000 000;  // with 18 decimals\r\n    preSaleAmount = 75000000E18;        //  75 000 000;  // with 18 decimals\r\n    PEInvestorAmount = 50000000E18;     //  50 000 000;  // with 18 decimals\r\n    publicSaleAmount = 100000000E18;    // 100 000 000;  // with 18 decimals\r\n\r\n    coreTeamAmount = 100000000E18;      // 100 000 000;  // with 18 decimals\r\n    coreTeamAuto = 60000000E18;         //  60 000 000;  // with 18 decimals\r\n    coreTeamManual = 40000000E18;       //  40 000 000;  // with 18 decimals\r\n    itDevAmount = 50000000E18;          //  50 000 000;  // with 18 decimals\r\n    futDevAmount = 50000000E18;         //  50 000 000;  // with 18 decimals\r\n    commFoundAmount = 15000000E18;      //  15 000 000;  // with 18 decimals\r\n    socWarefareAmount = 10000000E18;    //  10 000 000;  // with 18 decimals\r\n    marketingAmount = 15000000E18;      //  15 000 000;  // with 18 decimals\r\n\r\n    mintingFinished = false;\r\n\r\n    coreTeamAddr = 0xB0A3A845cfA5e2baCD3925Af85c59dE4D32D874f;\r\n    itDevAddr = 0x61528ffdCd4BC26c81c88423018780b399Fbb8e7;\r\n    futDevAddr = 0xA1f9C3F137496e6b8bA4445d15b0986CaA22FDe3;\r\n    commFoundAddr = 0xC30a0E7FFad754A9AD2A1C1cFeB10e05f7C7aB6A;\r\n    socWarefareAddr = 0xd5d692C89C83313579d02C94F4faE600fe30D1d9;\r\n    marketingAddr = 0x5490510072b929273F65dba4B72c96cd45A99b5A;\r\n\r\n    unsoldAddr = 0x18051b5b0F1FDb4D44eACF2FA49f19bB80105Fc1;\r\n    collectAddr = 0xB338121B8e5dA0900a6E8580321293f3CF52E58D;\r\n\r\n  }"
      ExpressionStatement
         Gas costs: 0
         Source: "token = SingleTokenCoin(token_addr)"
        Assignment using operator =
           Type: contract SingleTokenCoin
           Source: "token = SingleTokenCoin(token_addr)"
          Identifier token
             Type: contract SingleTokenCoin
             Source: "token"
          FunctionCall
             Type: contract SingleTokenCoin
             Source: "SingleTokenCoin(token_addr)"
            Identifier SingleTokenCoin
               Type: type(contract SingleTokenCoin)
               Source: "SingleTokenCoin"
            Identifier token_addr
               Type: address
               Source: "token_addr"
      ExpressionStatement
         Gas costs: 0
         Source: "public_rate = 3546099290780141"
        Assignment using operator =
           Type: uint256
           Source: "public_rate = 3546099290780141"
          Identifier public_rate
             Type: uint256
             Source: "public_rate"
          Literal, token: [no token] value: 3546099290780141
             Type: int_const 3546099290780141
             Source: "3546099290780141"
      ExpressionStatement
         Gas costs: 0
         Source: "angel_rate = 20"
        Assignment using operator =
           Type: uint256
           Source: "angel_rate = 20"
          Identifier angel_rate
             Type: uint256
             Source: "angel_rate"
          Literal, token: [no token] value: 20
             Type: int_const 20
             Source: "20"
      ExpressionStatement
         Gas costs: 0
         Source: "decimals = 35460992907801"
        Assignment using operator =
           Type: uint256
           Source: "decimals = 35460992907801"
          Identifier decimals
             Type: uint256
             Source: "decimals"
          Literal, token: [no token] value: 35460992907801
             Type: int_const 35460992907801
             Source: "35460992907801"
      ExpressionStatement
         Gas costs: 0
         Source: "angel_sale_start = now - 3 days"
        Assignment using operator =
           Type: uint256
           Source: "angel_sale_start = now - 3 days"
          Identifier angel_sale_start
             Type: uint256
             Source: "angel_sale_start"
          BinaryOperation using operator -
             Type: uint256
             Source: "now - 3 days"
            Identifier now
               Type: uint256
               Source: "now"
            Literal, token: [no token] value: 3
               Type: int_const 259200
               Source: "3 days"
      ExpressionStatement
         Gas costs: 0
         Source: "angel_sale_finish = 1510488000"
        Assignment using operator =
           Type: uint256
           Source: "angel_sale_finish = 1510488000"
          Identifier angel_sale_finish
             Type: uint256
             Source: "angel_sale_finish"
          Literal, token: [no token] value: 1510488000
             Type: int_const 1510488000
             Source: "1510488000"
      ExpressionStatement
         Gas costs: 0
         Source: "pre_sale_start = 1510491600"
        Assignment using operator =
           Type: uint256
           Source: "pre_sale_start = 1510491600"
          Identifier pre_sale_start
             Type: uint256
             Source: "pre_sale_start"
          Literal, token: [no token] value: 1510491600
             Type: int_const 1510491600
             Source: "1510491600"
      ExpressionStatement
         Gas costs: 0
         Source: "pre_sale_finish = 1512561600"
        Assignment using operator =
           Type: uint256
           Source: "pre_sale_finish = 1512561600"
          Identifier pre_sale_finish
             Type: uint256
             Source: "pre_sale_finish"
          Literal, token: [no token] value: 1512561600
             Type: int_const 1512561600
             Source: "1512561600"
      ExpressionStatement
         Gas costs: 0
         Source: "public_sale_start = 1512565200"
        Assignment using operator =
           Type: uint256
           Source: "public_sale_start = 1512565200"
          Identifier public_sale_start
             Type: uint256
             Source: "public_sale_start"
          Literal, token: [no token] value: 1512565200
             Type: int_const 1512565200
             Source: "1512565200"
      ExpressionStatement
         Gas costs: 0
         Source: "public_sale_finish = public_sale_start + 14 days"
        Assignment using operator =
           Type: uint256
           Source: "public_sale_finish = public_sale_start + 14 days"
          Identifier public_sale_finish
             Type: uint256
             Source: "public_sale_finish"
          BinaryOperation using operator +
             Type: uint256
             Source: "public_sale_start + 14 days"
            Identifier public_sale_start
               Type: uint256
               Source: "public_sale_start"
            Literal, token: [no token] value: 14
               Type: int_const 1209600
               Source: "14 days"
      ExpressionStatement
         Gas costs: 0
         Source: "moveTokens = false"
        Assignment using operator =
           Type: bool
           Source: "moveTokens = false"
          Identifier moveTokens
             Type: bool
             Source: "moveTokens"
          Literal, token: false value: false
             Type: bool
             Source: "false"
      ExpressionStatement
         Gas costs: 0
         Source: "isAngel = true"
        Assignment using operator =
           Type: bool
           Source: "isAngel = true"
          Identifier isAngel
             Type: bool
             Source: "isAngel"
          Literal, token: true value: true
             Type: bool
             Source: "true"
      ExpressionStatement
         Gas costs: 0
         Source: "isPreSale = false"
        Assignment using operator =
           Type: bool
           Source: "isPreSale = false"
          Identifier isPreSale
             Type: bool
             Source: "isPreSale"
          Literal, token: false value: false
             Type: bool
             Source: "false"
      ExpressionStatement
         Gas costs: 0
         Source: "isPublic = false"
        Assignment using operator =
           Type: bool
           Source: "isPublic = false"
          Identifier isPublic
             Type: bool
             Source: "isPublic"
          Literal, token: false value: false
             Type: bool
             Source: "false"
      ExpressionStatement
         Gas costs: 0
         Source: "currentPhase = 1"
        Assignment using operator =
           Type: uint256
           Source: "currentPhase = 1"
          Identifier currentPhase
             Type: uint256
             Source: "currentPhase"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
      ExpressionStatement
         Gas costs: 0
         Source: "founding_sold = 0"
        Assignment using operator =
           Type: uint256
           Source: "founding_sold = 0"
          Identifier founding_sold
             Type: uint256
             Source: "founding_sold"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "peInvestors_sold = 0"
        Assignment using operator =
           Type: uint256
           Source: "peInvestors_sold = 0"
          Identifier peInvestors_sold
             Type: uint256
             Source: "peInvestors_sold"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "angel_sale_sold = 0"
        Assignment using operator =
           Type: uint256
           Source: "angel_sale_sold = 0"
          Identifier angel_sale_sold
             Type: uint256
             Source: "angel_sale_sold"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "pre_sale_sold = 0"
        Assignment using operator =
           Type: uint256
           Source: "pre_sale_sold = 0"
          Identifier pre_sale_sold
             Type: uint256
             Source: "pre_sale_sold"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "public_sale_sold = 0"
        Assignment using operator =
           Type: uint256
           Source: "public_sale_sold = 0"
          Identifier public_sale_sold
             Type: uint256
             Source: "public_sale_sold"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "angel_sale_totalETH = 0"
        Assignment using operator =
           Type: uint256
           Source: "angel_sale_totalETH = 0"
          Identifier angel_sale_totalETH
             Type: uint256
             Source: "angel_sale_totalETH"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "pre_sale_totalETH = 0"
        Assignment using operator =
           Type: uint256
           Source: "pre_sale_totalETH = 0"
          Identifier pre_sale_totalETH
             Type: uint256
             Source: "pre_sale_totalETH"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "public_sale_totalETH = 0"
        Assignment using operator =
           Type: uint256
           Source: "public_sale_totalETH = 0"
          Identifier public_sale_totalETH
             Type: uint256
             Source: "public_sale_totalETH"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "firstPhaseAmount = 18750000E18"
        Assignment using operator =
           Type: uint256
           Source: "firstPhaseAmount = 18750000E18"
          Identifier firstPhaseAmount
             Type: uint256
             Source: "firstPhaseAmount"
          Literal, token: [no token] value: 18750000E18
             Type: int_const 18750000000000000000000000
             Source: "18750000E18"
      ExpressionStatement
         Gas costs: 0
         Source: "secondPhaseAmount = 37500000E18"
        Assignment using operator =
           Type: uint256
           Source: "secondPhaseAmount = 37500000E18"
          Identifier secondPhaseAmount
             Type: uint256
             Source: "secondPhaseAmount"
          Literal, token: [no token] value: 37500000E18
             Type: int_const 37500000000000000000000000
             Source: "37500000E18"
      ExpressionStatement
         Gas costs: 0
         Source: "thirdPhaseAmount = 56250000E18"
        Assignment using operator =
           Type: uint256
           Source: "thirdPhaseAmount = 56250000E18"
          Identifier thirdPhaseAmount
             Type: uint256
             Source: "thirdPhaseAmount"
          Literal, token: [no token] value: 56250000E18
             Type: int_const 56250000000000000000000000
             Source: "56250000E18"
      ExpressionStatement
         Gas costs: 0
         Source: "fourPhaseAmount = 75000000E18"
        Assignment using operator =
           Type: uint256
           Source: "fourPhaseAmount = 75000000E18"
          Identifier fourPhaseAmount
             Type: uint256
             Source: "fourPhaseAmount"
          Literal, token: [no token] value: 75000000E18
             Type: int_const 75000000000000000000000000
             Source: "75000000E18"
      ExpressionStatement
         Gas costs: 0
         Source: "firstPhaseDiscount = 30"
        Assignment using operator =
           Type: uint256
           Source: "firstPhaseDiscount = 30"
          Identifier firstPhaseDiscount
             Type: uint256
             Source: "firstPhaseDiscount"
          Literal, token: [no token] value: 30
             Type: int_const 30
             Source: "30"
      ExpressionStatement
         Gas costs: 0
         Source: "secondPhaseDiscount = 40"
        Assignment using operator =
           Type: uint256
           Source: "secondPhaseDiscount = 40"
          Identifier secondPhaseDiscount
             Type: uint256
             Source: "secondPhaseDiscount"
          Literal, token: [no token] value: 40
             Type: int_const 40
             Source: "40"
      ExpressionStatement
         Gas costs: 0
         Source: "thirdPhaseDiscount = 50"
        Assignment using operator =
           Type: uint256
           Source: "thirdPhaseDiscount = 50"
          Identifier thirdPhaseDiscount
             Type: uint256
             Source: "thirdPhaseDiscount"
          Literal, token: [no token] value: 50
             Type: int_const 50
             Source: "50"
      ExpressionStatement
         Gas costs: 0
         Source: "fourPhaseDiscount = 60"
        Assignment using operator =
           Type: uint256
           Source: "fourPhaseDiscount = 60"
          Identifier fourPhaseDiscount
             Type: uint256
             Source: "fourPhaseDiscount"
          Literal, token: [no token] value: 60
             Type: int_const 60
             Source: "60"
      ExpressionStatement
         Gas costs: 0
         Source: "totalAmount = 500000000E18"
        Assignment using operator =
           Type: uint256
           Source: "totalAmount = 500000000E18"
          Identifier totalAmount
             Type: uint256
             Source: "totalAmount"
          Literal, token: [no token] value: 500000000E18
             Type: int_const 500000000000000000000000000
             Source: "500000000E18"
      ExpressionStatement
         Gas costs: 0
         Source: "foundingAmount = 10000000E18"
        Assignment using operator =
           Type: uint256
           Source: "foundingAmount = 10000000E18"
          Identifier foundingAmount
             Type: uint256
             Source: "foundingAmount"
          Literal, token: [no token] value: 10000000E18
             Type: int_const 10000000000000000000000000
             Source: "10000000E18"
      ExpressionStatement
         Gas costs: 0
         Source: "angelAmount = 25000000E18"
        Assignment using operator =
           Type: uint256
           Source: "angelAmount = 25000000E18"
          Identifier angelAmount
             Type: uint256
             Source: "angelAmount"
          Literal, token: [no token] value: 25000000E18
             Type: int_const 25000000000000000000000000
             Source: "25000000E18"
      ExpressionStatement
         Gas costs: 0
         Source: "preSaleAmount = 75000000E18"
        Assignment using operator =
           Type: uint256
           Source: "preSaleAmount = 75000000E18"
          Identifier preSaleAmount
             Type: uint256
             Source: "preSaleAmount"
          Literal, token: [no token] value: 75000000E18
             Type: int_const 75000000000000000000000000
             Source: "75000000E18"
      ExpressionStatement
         Gas costs: 0
         Source: "PEInvestorAmount = 50000000E18"
        Assignment using operator =
           Type: uint256
           Source: "PEInvestorAmount = 50000000E18"
          Identifier PEInvestorAmount
             Type: uint256
             Source: "PEInvestorAmount"
          Literal, token: [no token] value: 50000000E18
             Type: int_const 50000000000000000000000000
             Source: "50000000E18"
      ExpressionStatement
         Gas costs: 0
         Source: "publicSaleAmount = 100000000E18"
        Assignment using operator =
           Type: uint256
           Source: "publicSaleAmount = 100000000E18"
          Identifier publicSaleAmount
             Type: uint256
             Source: "publicSaleAmount"
          Literal, token: [no token] value: 100000000E18
             Type: int_const 100000000000000000000000000
             Source: "100000000E18"
      ExpressionStatement
         Gas costs: 0
         Source: "coreTeamAmount = 100000000E18"
        Assignment using operator =
           Type: uint256
           Source: "coreTeamAmount = 100000000E18"
          Identifier coreTeamAmount
             Type: uint256
             Source: "coreTeamAmount"
          Literal, token: [no token] value: 100000000E18
             Type: int_const 100000000000000000000000000
             Source: "100000000E18"
      ExpressionStatement
         Gas costs: 0
         Source: "coreTeamAuto = 60000000E18"
        Assignment using operator =
           Type: uint256
           Source: "coreTeamAuto = 60000000E18"
          Identifier coreTeamAuto
             Type: uint256
             Source: "coreTeamAuto"
          Literal, token: [no token] value: 60000000E18
             Type: int_const 60000000000000000000000000
             Source: "60000000E18"
      ExpressionStatement
         Gas costs: 0
         Source: "coreTeamManual = 40000000E18"
        Assignment using operator =
           Type: uint256
           Source: "coreTeamManual = 40000000E18"
          Identifier coreTeamManual
             Type: uint256
             Source: "coreTeamManual"
          Literal, token: [no token] value: 40000000E18
             Type: int_const 40000000000000000000000000
             Source: "40000000E18"
      ExpressionStatement
         Gas costs: 0
         Source: "itDevAmount = 50000000E18"
        Assignment using operator =
           Type: uint256
           Source: "itDevAmount = 50000000E18"
          Identifier itDevAmount
             Type: uint256
             Source: "itDevAmount"
          Literal, token: [no token] value: 50000000E18
             Type: int_const 50000000000000000000000000
             Source: "50000000E18"
      ExpressionStatement
         Gas costs: 0
         Source: "futDevAmount = 50000000E18"
        Assignment using operator =
           Type: uint256
           Source: "futDevAmount = 50000000E18"
          Identifier futDevAmount
             Type: uint256
             Source: "futDevAmount"
          Literal, token: [no token] value: 50000000E18
             Type: int_const 50000000000000000000000000
             Source: "50000000E18"
      ExpressionStatement
         Gas costs: 0
         Source: "commFoundAmount = 15000000E18"
        Assignment using operator =
           Type: uint256
           Source: "commFoundAmount = 15000000E18"
          Identifier commFoundAmount
             Type: uint256
             Source: "commFoundAmount"
          Literal, token: [no token] value: 15000000E18
             Type: int_const 15000000000000000000000000
             Source: "15000000E18"
      ExpressionStatement
         Gas costs: 0
         Source: "socWarefareAmount = 10000000E18"
        Assignment using operator =
           Type: uint256
           Source: "socWarefareAmount = 10000000E18"
          Identifier socWarefareAmount
             Type: uint256
             Source: "socWarefareAmount"
          Literal, token: [no token] value: 10000000E18
             Type: int_const 10000000000000000000000000
             Source: "10000000E18"
      ExpressionStatement
         Gas costs: 0
         Source: "marketingAmount = 15000000E18"
        Assignment using operator =
           Type: uint256
           Source: "marketingAmount = 15000000E18"
          Identifier marketingAmount
             Type: uint256
             Source: "marketingAmount"
          Literal, token: [no token] value: 15000000E18
             Type: int_const 15000000000000000000000000
             Source: "15000000E18"
      ExpressionStatement
         Gas costs: 0
         Source: "mintingFinished = false"
        Assignment using operator =
           Type: bool
           Source: "mintingFinished = false"
          Identifier mintingFinished
             Type: bool
             Source: "mintingFinished"
          Literal, token: false value: false
             Type: bool
             Source: "false"
      ExpressionStatement
         Gas costs: 0
         Source: "coreTeamAddr = 0xB0A3A845cfA5e2baCD3925Af85c59dE4D32D874f"
        Assignment using operator =
           Type: address
           Source: "coreTeamAddr = 0xB0A3A845cfA5e2baCD3925Af85c59dE4D32D874f"
          Identifier coreTeamAddr
             Type: address
             Source: "coreTeamAddr"
          Literal, token: [no token] value: 0xB0A3A845cfA5e2baCD3925Af85c59dE4D32D874f
             Type: address
             Source: "0xB0A3A845cfA5e2baCD3925Af85c59dE4D32D874f"
      ExpressionStatement
         Gas costs: 0
         Source: "itDevAddr = 0x61528ffdCd4BC26c81c88423018780b399Fbb8e7"
        Assignment using operator =
           Type: address
           Source: "itDevAddr = 0x61528ffdCd4BC26c81c88423018780b399Fbb8e7"
          Identifier itDevAddr
             Type: address
             Source: "itDevAddr"
          Literal, token: [no token] value: 0x61528ffdCd4BC26c81c88423018780b399Fbb8e7
             Type: address
             Source: "0x61528ffdCd4BC26c81c88423018780b399Fbb8e7"
      ExpressionStatement
         Gas costs: 0
         Source: "futDevAddr = 0xA1f9C3F137496e6b8bA4445d15b0986CaA22FDe3"
        Assignment using operator =
           Type: address
           Source: "futDevAddr = 0xA1f9C3F137496e6b8bA4445d15b0986CaA22FDe3"
          Identifier futDevAddr
             Type: address
             Source: "futDevAddr"
          Literal, token: [no token] value: 0xA1f9C3F137496e6b8bA4445d15b0986CaA22FDe3
             Type: address
             Source: "0xA1f9C3F137496e6b8bA4445d15b0986CaA22FDe3"
      ExpressionStatement
         Gas costs: 0
         Source: "commFoundAddr = 0xC30a0E7FFad754A9AD2A1C1cFeB10e05f7C7aB6A"
        Assignment using operator =
           Type: address
           Source: "commFoundAddr = 0xC30a0E7FFad754A9AD2A1C1cFeB10e05f7C7aB6A"
          Identifier commFoundAddr
             Type: address
             Source: "commFoundAddr"
          Literal, token: [no token] value: 0xC30a0E7FFad754A9AD2A1C1cFeB10e05f7C7aB6A
             Type: address
             Source: "0xC30a0E7FFad754A9AD2A1C1cFeB10e05f7C7aB6A"
      ExpressionStatement
         Gas costs: 0
         Source: "socWarefareAddr = 0xd5d692C89C83313579d02C94F4faE600fe30D1d9"
        Assignment using operator =
           Type: address
           Source: "socWarefareAddr = 0xd5d692C89C83313579d02C94F4faE600fe30D1d9"
          Identifier socWarefareAddr
             Type: address
             Source: "socWarefareAddr"
          Literal, token: [no token] value: 0xd5d692C89C83313579d02C94F4faE600fe30D1d9
             Type: address
             Source: "0xd5d692C89C83313579d02C94F4faE600fe30D1d9"
      ExpressionStatement
         Gas costs: 0
         Source: "marketingAddr = 0x5490510072b929273F65dba4B72c96cd45A99b5A"
        Assignment using operator =
           Type: address
           Source: "marketingAddr = 0x5490510072b929273F65dba4B72c96cd45A99b5A"
          Identifier marketingAddr
             Type: address
             Source: "marketingAddr"
          Literal, token: [no token] value: 0x5490510072b929273F65dba4B72c96cd45A99b5A
             Type: address
             Source: "0x5490510072b929273F65dba4B72c96cd45A99b5A"
      ExpressionStatement
         Gas costs: 0
         Source: "unsoldAddr = 0x18051b5b0F1FDb4D44eACF2FA49f19bB80105Fc1"
        Assignment using operator =
           Type: address
           Source: "unsoldAddr = 0x18051b5b0F1FDb4D44eACF2FA49f19bB80105Fc1"
          Identifier unsoldAddr
             Type: address
             Source: "unsoldAddr"
          Literal, token: [no token] value: 0x18051b5b0F1FDb4D44eACF2FA49f19bB80105Fc1
             Type: address
             Source: "0x18051b5b0F1FDb4D44eACF2FA49f19bB80105Fc1"
      ExpressionStatement
         Gas costs: 0
         Source: "collectAddr = 0xB338121B8e5dA0900a6E8580321293f3CF52E58D"
        Assignment using operator =
           Type: address
           Source: "collectAddr = 0xB338121B8e5dA0900a6E8580321293f3CF52E58D"
          Identifier collectAddr
             Type: address
             Source: "collectAddr"
          Literal, token: [no token] value: 0xB338121B8e5dA0900a6E8580321293f3CF52E58D
             Type: address
             Source: "0xB338121B8e5dA0900a6E8580321293f3CF52E58D"
  ModifierDefinition "canMint"
     Source: "modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n    require(!mintingFinished);\r\n    _;\r\n  }"
      ExpressionStatement
         Gas costs: 636
         Source: "require(!mintingFinished)"
        FunctionCall
           Type: tuple()
           Source: "require(!mintingFinished)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!mintingFinished"
            Identifier mintingFinished
               Type: bool
               Source: "mintingFinished"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "setFreeze" - public
     Source: "function setFreeze(address _addr) public onlyOwner {\r\n    token.setFreeze(_addr);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _addr)"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n    token.setFreeze(_addr);\r\n  }"
      ExpressionStatement
         Gas costs: [???]
         Source: "token.setFreeze(_addr)"
        FunctionCall
           Type: tuple()
           Source: "token.setFreeze(_addr)"
          MemberAccess to member setFreeze
             Type: function (address) external
             Source: "token.setFreeze"
            Identifier token
               Type: contract SingleTokenCoin
               Source: "token"
          Identifier _addr
             Type: address
             Source: "_addr"
  FunctionDefinition "removeFreeze" - public
     Source: "function removeFreeze(address _addr) public onlyOwner {\r\n    token.removeFreeze(_addr);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _addr)"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n    token.removeFreeze(_addr);\r\n  }"
      ExpressionStatement
         Gas costs: [???]
         Source: "token.removeFreeze(_addr)"
        FunctionCall
           Type: tuple()
           Source: "token.removeFreeze(_addr)"
          MemberAccess to member removeFreeze
             Type: function (address) external
             Source: "token.removeFreeze"
            Identifier token
               Type: contract SingleTokenCoin
               Source: "token"
          Identifier _addr
             Type: address
             Source: "_addr"
  FunctionDefinition "moveUnsold" - public
     Source: "function moveUnsold() public onlyOwner {\r\n    angelAmount = 0;\r\n    preSaleAmount = 0;\r\n    publicSaleAmount = 0;\r\n\r\n    angel_sale_sold = 0;\r\n    pre_sale_sold = 0;\r\n    public_sale_sold = 0;\r\n    token.moveUnsold(unsoldAddr);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n    angelAmount = 0;\r\n    preSaleAmount = 0;\r\n    publicSaleAmount = 0;\r\n\r\n    angel_sale_sold = 0;\r\n    pre_sale_sold = 0;\r\n    public_sale_sold = 0;\r\n    token.moveUnsold(unsoldAddr);\r\n  }"
      ExpressionStatement
         Gas costs: 5014
         Source: "angelAmount = 0"
        Assignment using operator =
           Type: uint256
           Source: "angelAmount = 0"
          Identifier angelAmount
             Type: uint256
             Source: "angelAmount"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 5014
         Source: "preSaleAmount = 0"
        Assignment using operator =
           Type: uint256
           Source: "preSaleAmount = 0"
          Identifier preSaleAmount
             Type: uint256
             Source: "preSaleAmount"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 5014
         Source: "publicSaleAmount = 0"
        Assignment using operator =
           Type: uint256
           Source: "publicSaleAmount = 0"
          Identifier publicSaleAmount
             Type: uint256
             Source: "publicSaleAmount"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 5014
         Source: "angel_sale_sold = 0"
        Assignment using operator =
           Type: uint256
           Source: "angel_sale_sold = 0"
          Identifier angel_sale_sold
             Type: uint256
             Source: "angel_sale_sold"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 5014
         Source: "pre_sale_sold = 0"
        Assignment using operator =
           Type: uint256
           Source: "pre_sale_sold = 0"
          Identifier pre_sale_sold
             Type: uint256
             Source: "pre_sale_sold"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 5014
         Source: "public_sale_sold = 0"
        Assignment using operator =
           Type: uint256
           Source: "public_sale_sold = 0"
          Identifier public_sale_sold
             Type: uint256
             Source: "public_sale_sold"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: [???]
         Source: "token.moveUnsold(unsoldAddr)"
        FunctionCall
           Type: tuple()
           Source: "token.moveUnsold(unsoldAddr)"
          MemberAccess to member moveUnsold
             Type: function (address) external
             Source: "token.moveUnsold"
            Identifier token
               Type: contract SingleTokenCoin
               Source: "token"
          Identifier unsoldAddr
             Type: address
             Source: "unsoldAddr"
  FunctionDefinition "newTransferManualTokensnewTransfer" - public
     Source: "function newTransferManualTokensnewTransfer(address _from, address _to, uint256 _value) onlyOwner returns (bool) {\r\n    return token.newTransferManualTokensnewTransfer(_from, _to, _value);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n    return token.newTransferManualTokensnewTransfer(_from, _to, _value);\r\n  }"
      Return
         Gas costs: [???]
         Source: "return token.newTransferManualTokensnewTransfer(_from, _to, _value)"
        FunctionCall
           Type: bool
           Source: "token.newTransferManualTokensnewTransfer(_from, _to, _value)"
          MemberAccess to member newTransferManualTokensnewTransfer
             Type: function (address,address,uint256) external returns (bool)
             Source: "token.newTransferManualTokensnewTransfer"
            Identifier token
               Type: contract SingleTokenCoin
               Source: "token"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
  FunctionDefinition "" - public
     Source: "function() external payable {\r\n    mint();    \r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    mint();    \r\n  }"
      ExpressionStatement
         Gas costs: 4
         Source: "mint()"
        FunctionCall
           Type: tuple()
           Source: "mint()"
          Identifier mint
             Type: function ()
             Source: "mint"
  FunctionDefinition "bytesToUInt" - const
     Source: "function bytesToUInt(bytes32 v) private constant returns (uint ret) {\r\n    if (v == 0x0) {\r\n        revert();\r\n    }\r\n\r\n    uint digit;\r\n\r\n    for (uint i = 0; i < 32; i++) {\r\n      digit = uint((uint(v) / (2 ** (8 * (31 - i)))) & 0xff);\r\n      if (digit == 0 || digit == 46) {\r\n          break;\r\n      }\r\n      else if (digit < 48 || digit > 57) {\r\n          revert();\r\n      }\r\n      ret *= 10;\r\n      ret += (digit - 48);\r\n    }\r\n    return ret;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32 v)"
      VariableDeclaration "v"
         Type: bytes32
         Source: "bytes32 v"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Gas costs: 3
       Source: "(uint ret)"
      VariableDeclaration "ret"
         Type: uint256
         Source: "uint ret"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n    if (v == 0x0) {\r\n        revert();\r\n    }\r\n\r\n    uint digit;\r\n\r\n    for (uint i = 0; i < 32; i++) {\r\n      digit = uint((uint(v) / (2 ** (8 * (31 - i)))) & 0xff);\r\n      if (digit == 0 || digit == 46) {\r\n          break;\r\n      }\r\n      else if (digit < 48 || digit > 57) {\r\n          revert();\r\n      }\r\n      ret *= 10;\r\n      ret += (digit - 48);\r\n    }\r\n    return ret;\r\n  }"
      IfStatement
         Source: "if (v == 0x0) {\r\n        revert();\r\n    }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 26
           Source: "v == 0x0"
          Identifier v
             Type: bytes32
             Source: "v"
          Literal, token: [no token] value: 0x0
             Type: int_const 0
             Source: "0x0"
        Block
           Source: "{\r\n        revert();\r\n    }"
          ExpressionStatement
             Gas costs: 6
             Source: "revert()"
            FunctionCall
               Type: tuple()
               Source: "revert()"
              Identifier revert
                 Type: function () pure
                 Source: "revert"
      VariableDeclarationStatement
         Gas costs: 3
         Source: "uint digit"
        VariableDeclaration "digit"
           Type: uint256
           Source: "uint digit"
          ElementaryTypeName uint
             Source: "uint"
      ForStatement
         Source: "for (uint i = 0; i < 32; i++) {\r\n      digit = uint((uint(v) / (2 ** (8 * (31 - i)))) & 0xff);\r\n      if (digit == 0 || digit == 46) {\r\n          break;\r\n      }\r\n      else if (digit < 48 || digit > 57) {\r\n          revert();\r\n      }\r\n      ret *= 10;\r\n      ret += (digit - 48);\r\n    }"
        VariableDeclarationStatement
           Gas costs: 11
           Source: "uint i = 0"
          VariableDeclaration "i"
             Type: uint256
             Source: "uint i"
            ElementaryTypeName uint
               Source: "uint"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 9
           Source: "i < 32"
          Identifier i
             Type: uint256
             Source: "i"
          Literal, token: [no token] value: 32
             Type: int_const 32
             Source: "32"
        ExpressionStatement
           Gas costs: 19
           Source: "i++"
          UnaryOperation (postfix) ++
             Type: uint256
             Source: "i++"
            Identifier i
               Type: uint256
               Source: "i"
        Block
           Source: "{\r\n      digit = uint((uint(v) / (2 ** (8 * (31 - i)))) & 0xff);\r\n      if (digit == 0 || digit == 46) {\r\n          break;\r\n      }\r\n      else if (digit < 48 || digit > 57) {\r\n          revert();\r\n      }\r\n      ret *= 10;\r\n      ret += (digit - 48);\r\n    }"
          ExpressionStatement
             Gas costs: 1683
             Source: "digit = uint((uint(v) / (2 ** (8 * (31 - i)))) & 0xff)"
            Assignment using operator =
               Type: uint256
               Source: "digit = uint((uint(v) / (2 ** (8 * (31 - i)))) & 0xff)"
              Identifier digit
                 Type: uint256
                 Source: "digit"
              FunctionCall
                 Type: uint256
                 Source: "uint((uint(v) / (2 ** (8 * (31 - i)))) & 0xff)"
                ElementaryTypeNameExpression uint
                   Type: type(uint256)
                   Source: "uint"
                BinaryOperation using operator &
                   Type: uint256
                   Source: "(uint(v) / (2 ** (8 * (31 - i)))) & 0xff"
                  TupleExpression
                     Type: uint256
                     Source: "(uint(v) / (2 ** (8 * (31 - i))))"
                    BinaryOperation using operator /
                       Type: uint256
                       Source: "uint(v) / (2 ** (8 * (31 - i)))"
                      FunctionCall
                         Type: uint256
                         Source: "uint(v)"
                        ElementaryTypeNameExpression uint
                           Type: type(uint256)
                           Source: "uint"
                        Identifier v
                           Type: bytes32
                           Source: "v"
                      TupleExpression
                         Type: uint256
                         Source: "(2 ** (8 * (31 - i)))"
                        BinaryOperation using operator **
                           Type: uint256
                           Source: "2 ** (8 * (31 - i))"
                          Literal, token: [no token] value: 2
                             Type: int_const 2
                             Source: "2"
                          TupleExpression
                             Type: uint256
                             Source: "(8 * (31 - i))"
                            BinaryOperation using operator *
                               Type: uint256
                               Source: "8 * (31 - i)"
                              Literal, token: [no token] value: 8
                                 Type: int_const 8
                                 Source: "8"
                              TupleExpression
                                 Type: uint256
                                 Source: "(31 - i)"
                                BinaryOperation using operator -
                                   Type: uint256
                                   Source: "31 - i"
                                  Literal, token: [no token] value: 31
                                     Type: int_const 31
                                     Source: "31"
                                  Identifier i
                                     Type: uint256
                                     Source: "i"
                  Literal, token: [no token] value: 0xff
                     Type: int_const 255
                     Source: "0xff"
          IfStatement
             Source: "if (digit == 0 || digit == 46) {\r\n          break;\r\n      }\r\n      else if (digit < 48 || digit > 57) {\r\n          revert();\r\n      }"
            BinaryOperation using operator ||
               Type: bool
               Gas costs: 37
               Source: "digit == 0 || digit == 46"
              BinaryOperation using operator ==
                 Type: bool
                 Source: "digit == 0"
                Identifier digit
                   Type: uint256
                   Source: "digit"
                Literal, token: [no token] value: 0
                   Type: int_const 0
                   Source: "0"
              BinaryOperation using operator ==
                 Type: bool
                 Source: "digit == 46"
                Identifier digit
                   Type: uint256
                   Source: "digit"
                Literal, token: [no token] value: 46
                   Type: int_const 46
                   Source: "46"
            Block
               Source: "{\r\n          break;\r\n      }"
              Break
                 Gas costs: 0
                 Source: "break"
            IfStatement
               Source: "if (digit < 48 || digit > 57) {\r\n          revert();\r\n      }"
              BinaryOperation using operator ||
                 Type: bool
                 Gas costs: 37
                 Source: "digit < 48 || digit > 57"
                BinaryOperation using operator <
                   Type: bool
                   Source: "digit < 48"
                  Identifier digit
                     Type: uint256
                     Source: "digit"
                  Literal, token: [no token] value: 48
                     Type: int_const 48
                     Source: "48"
                BinaryOperation using operator >
                   Type: bool
                   Source: "digit > 57"
                  Identifier digit
                     Type: uint256
                     Source: "digit"
                  Literal, token: [no token] value: 57
                     Type: int_const 57
                     Source: "57"
              Block
                 Source: "{\r\n          revert();\r\n      }"
                ExpressionStatement
                   Gas costs: 6
                   Source: "revert()"
                  FunctionCall
                     Type: tuple()
                     Source: "revert()"
                    Identifier revert
                       Type: function () pure
                       Source: "revert"
          ExpressionStatement
             Gas costs: 16
             Source: "ret *= 10"
            Assignment using operator *=
               Type: uint256
               Source: "ret *= 10"
              Identifier ret
                 Type: uint256
                 Source: "ret"
              Literal, token: [no token] value: 10
                 Type: int_const 10
                 Source: "10"
          ExpressionStatement
             Gas costs: 20
             Source: "ret += (digit - 48)"
            Assignment using operator +=
               Type: uint256
               Source: "ret += (digit - 48)"
              Identifier ret
                 Type: uint256
                 Source: "ret"
              TupleExpression
                 Type: uint256
                 Source: "(digit - 48)"
                BinaryOperation using operator -
                   Type: uint256
                   Source: "digit - 48"
                  Identifier digit
                     Type: uint256
                     Source: "digit"
                  Literal, token: [no token] value: 48
                     Type: int_const 48
                     Source: "48"
      Return
         Gas costs: 8
         Source: "return ret"
        Identifier ret
           Type: uint256
           Source: "ret"
  FunctionDefinition "calculateRate" - public - const
     Source: "function calculateRate() public constant returns(uint256) {\r\n    bytes32 result = getWrapperData();\r\n    uint256 usd = bytesToUInt(result);\r\n\r\n    uint256 price = 1 ether / usd; //price for 1 BMC //4545454545454546;\r\n\r\n    return price;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    bytes32 result = getWrapperData();\r\n    uint256 usd = bytesToUInt(result);\r\n\r\n    uint256 price = 1 ether / usd; //price for 1 BMC //4545454545454546;\r\n\r\n    return price;\r\n  }"
      VariableDeclarationStatement
         Gas costs: 23
         Source: "bytes32 result = getWrapperData()"
        VariableDeclaration "result"
           Type: bytes32
           Source: "bytes32 result"
          ElementaryTypeName bytes32
             Source: "bytes32"
        FunctionCall
           Type: bytes32
           Source: "getWrapperData()"
          Identifier getWrapperData
             Type: function () view returns (bytes32)
             Source: "getWrapperData"
      VariableDeclarationStatement
         Gas costs: 15
         Source: "uint256 usd = bytesToUInt(result)"
        VariableDeclaration "usd"
           Type: uint256
           Source: "uint256 usd"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "bytesToUInt(result)"
          Identifier bytesToUInt
             Type: function (bytes32) view returns (uint256)
             Source: "bytesToUInt"
          Identifier result
             Type: bytes32
             Source: "result"
      VariableDeclarationStatement
         Gas costs: 42
         Source: "uint256 price = 1 ether / usd"
        VariableDeclaration "price"
           Type: uint256
           Source: "uint256 price"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator /
           Type: uint256
           Source: "1 ether / usd"
          Literal, token: [no token] value: 1
             Type: int_const 1000000000000000000
             Source: "1 ether"
          Identifier usd
             Type: uint256
             Source: "usd"
      Return
         Gas costs: 8
         Source: "return price"
        Identifier price
           Type: uint256
           Source: "price"
  FunctionDefinition "calculatePrice" - const
     Source: "function calculatePrice(uint256 _usd, uint256 _pre_sale_sold) private constant returns(uint256) {\r\n    \r\n    if (currentPhase == 1 && pre_sale_sold + _pre_sale_sold <= firstPhaseAmount) {\r\n      return _usd.mul(firstPhaseDiscount).div(100);\r\n    }\r\n\r\n    if (currentPhase == 2 && pre_sale_sold + _pre_sale_sold > firstPhaseAmount && pre_sale_sold + _pre_sale_sold <= secondPhaseAmount) {\r\n      return _usd.mul(secondPhaseDiscount).div(100);\r\n    }\r\n\r\n    if (currentPhase == 3 && pre_sale_sold + _pre_sale_sold > secondPhaseAmount && pre_sale_sold + _pre_sale_sold <= thirdPhaseAmount) {\r\n      return _usd.mul(thirdPhaseDiscount).div(100);\r\n    }\r\n\r\n    if (currentPhase == 4 && pre_sale_sold + _pre_sale_sold > thirdPhaseAmount && pre_sale_sold + _pre_sale_sold <= fourPhaseAmount) {\r\n      return _usd.mul(fourPhaseDiscount).div(100);\r\n    }\r\n\r\n    return _usd;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _usd, uint256 _pre_sale_sold)"
      VariableDeclaration "_usd"
         Type: uint256
         Source: "uint256 _usd"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_pre_sale_sold"
         Type: uint256
         Source: "uint256 _pre_sale_sold"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    \r\n    if (currentPhase == 1 && pre_sale_sold + _pre_sale_sold <= firstPhaseAmount) {\r\n      return _usd.mul(firstPhaseDiscount).div(100);\r\n    }\r\n\r\n    if (currentPhase == 2 && pre_sale_sold + _pre_sale_sold > firstPhaseAmount && pre_sale_sold + _pre_sale_sold <= secondPhaseAmount) {\r\n      return _usd.mul(secondPhaseDiscount).div(100);\r\n    }\r\n\r\n    if (currentPhase == 3 && pre_sale_sold + _pre_sale_sold > secondPhaseAmount && pre_sale_sold + _pre_sale_sold <= thirdPhaseAmount) {\r\n      return _usd.mul(thirdPhaseDiscount).div(100);\r\n    }\r\n\r\n    if (currentPhase == 4 && pre_sale_sold + _pre_sale_sold > thirdPhaseAmount && pre_sale_sold + _pre_sale_sold <= fourPhaseAmount) {\r\n      return _usd.mul(fourPhaseDiscount).div(100);\r\n    }\r\n\r\n    return _usd;\r\n  }"
      IfStatement
         Source: "if (currentPhase == 1 && pre_sale_sold + _pre_sale_sold <= firstPhaseAmount) {\r\n      return _usd.mul(firstPhaseDiscount).div(100);\r\n    }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 649
           Source: "currentPhase == 1 && pre_sale_sold + _pre_sale_sold <= firstPhaseAmount"
          BinaryOperation using operator ==
             Type: bool
             Source: "currentPhase == 1"
            Identifier currentPhase
               Type: uint256
               Source: "currentPhase"
            Literal, token: [no token] value: 1
               Type: int_const 1
               Source: "1"
          BinaryOperation using operator <=
             Type: bool
             Source: "pre_sale_sold + _pre_sale_sold <= firstPhaseAmount"
            BinaryOperation using operator +
               Type: uint256
               Source: "pre_sale_sold + _pre_sale_sold"
              Identifier pre_sale_sold
                 Type: uint256
                 Source: "pre_sale_sold"
              Identifier _pre_sale_sold
                 Type: uint256
                 Source: "_pre_sale_sold"
            Identifier firstPhaseAmount
               Type: uint256
               Source: "firstPhaseAmount"
        Block
           Source: "{\r\n      return _usd.mul(firstPhaseDiscount).div(100);\r\n    }"
          Return
             Gas costs: 285
             Source: "return _usd.mul(firstPhaseDiscount).div(100)"
            FunctionCall
               Type: uint256
               Source: "_usd.mul(firstPhaseDiscount).div(100)"
              MemberAccess to member div
                 Type: function (uint256,uint256) view returns (uint256)
                 Source: "_usd.mul(firstPhaseDiscount).div"
                FunctionCall
                   Type: uint256
                   Source: "_usd.mul(firstPhaseDiscount)"
                  MemberAccess to member mul
                     Type: function (uint256,uint256) view returns (uint256)
                     Source: "_usd.mul"
                    Identifier _usd
                       Type: uint256
                       Source: "_usd"
                  Identifier firstPhaseDiscount
                     Type: uint256
                     Source: "firstPhaseDiscount"
              Literal, token: [no token] value: 100
                 Type: int_const 100
                 Source: "100"
      IfStatement
         Source: "if (currentPhase == 2 && pre_sale_sold + _pre_sale_sold > firstPhaseAmount && pre_sale_sold + _pre_sale_sold <= secondPhaseAmount) {\r\n      return _usd.mul(secondPhaseDiscount).div(100);\r\n    }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 1086
           Source: "currentPhase == 2 && pre_sale_sold + _pre_sale_sold > firstPhaseAmount && pre_sale_sold + _pre_sale_sold <= secondPhaseAmount"
          BinaryOperation using operator &&
             Type: bool
             Source: "currentPhase == 2 && pre_sale_sold + _pre_sale_sold > firstPhaseAmount"
            BinaryOperation using operator ==
               Type: bool
               Source: "currentPhase == 2"
              Identifier currentPhase
                 Type: uint256
                 Source: "currentPhase"
              Literal, token: [no token] value: 2
                 Type: int_const 2
                 Source: "2"
            BinaryOperation using operator >
               Type: bool
               Source: "pre_sale_sold + _pre_sale_sold > firstPhaseAmount"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "pre_sale_sold + _pre_sale_sold"
                Identifier pre_sale_sold
                   Type: uint256
                   Source: "pre_sale_sold"
                Identifier _pre_sale_sold
                   Type: uint256
                   Source: "_pre_sale_sold"
              Identifier firstPhaseAmount
                 Type: uint256
                 Source: "firstPhaseAmount"
          BinaryOperation using operator <=
             Type: bool
             Source: "pre_sale_sold + _pre_sale_sold <= secondPhaseAmount"
            BinaryOperation using operator +
               Type: uint256
               Source: "pre_sale_sold + _pre_sale_sold"
              Identifier pre_sale_sold
                 Type: uint256
                 Source: "pre_sale_sold"
              Identifier _pre_sale_sold
                 Type: uint256
                 Source: "_pre_sale_sold"
            Identifier secondPhaseAmount
               Type: uint256
               Source: "secondPhaseAmount"
        Block
           Source: "{\r\n      return _usd.mul(secondPhaseDiscount).div(100);\r\n    }"
          Return
             Gas costs: 285
             Source: "return _usd.mul(secondPhaseDiscount).div(100)"
            FunctionCall
               Type: uint256
               Source: "_usd.mul(secondPhaseDiscount).div(100)"
              MemberAccess to member div
                 Type: function (uint256,uint256) view returns (uint256)
                 Source: "_usd.mul(secondPhaseDiscount).div"
                FunctionCall
                   Type: uint256
                   Source: "_usd.mul(secondPhaseDiscount)"
                  MemberAccess to member mul
                     Type: function (uint256,uint256) view returns (uint256)
                     Source: "_usd.mul"
                    Identifier _usd
                       Type: uint256
                       Source: "_usd"
                  Identifier secondPhaseDiscount
                     Type: uint256
                     Source: "secondPhaseDiscount"
              Literal, token: [no token] value: 100
                 Type: int_const 100
                 Source: "100"
      IfStatement
         Source: "if (currentPhase == 3 && pre_sale_sold + _pre_sale_sold > secondPhaseAmount && pre_sale_sold + _pre_sale_sold <= thirdPhaseAmount) {\r\n      return _usd.mul(thirdPhaseDiscount).div(100);\r\n    }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 1086
           Source: "currentPhase == 3 && pre_sale_sold + _pre_sale_sold > secondPhaseAmount && pre_sale_sold + _pre_sale_sold <= thirdPhaseAmount"
          BinaryOperation using operator &&
             Type: bool
             Source: "currentPhase == 3 && pre_sale_sold + _pre_sale_sold > secondPhaseAmount"
            BinaryOperation using operator ==
               Type: bool
               Source: "currentPhase == 3"
              Identifier currentPhase
                 Type: uint256
                 Source: "currentPhase"
              Literal, token: [no token] value: 3
                 Type: int_const 3
                 Source: "3"
            BinaryOperation using operator >
               Type: bool
               Source: "pre_sale_sold + _pre_sale_sold > secondPhaseAmount"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "pre_sale_sold + _pre_sale_sold"
                Identifier pre_sale_sold
                   Type: uint256
                   Source: "pre_sale_sold"
                Identifier _pre_sale_sold
                   Type: uint256
                   Source: "_pre_sale_sold"
              Identifier secondPhaseAmount
                 Type: uint256
                 Source: "secondPhaseAmount"
          BinaryOperation using operator <=
             Type: bool
             Source: "pre_sale_sold + _pre_sale_sold <= thirdPhaseAmount"
            BinaryOperation using operator +
               Type: uint256
               Source: "pre_sale_sold + _pre_sale_sold"
              Identifier pre_sale_sold
                 Type: uint256
                 Source: "pre_sale_sold"
              Identifier _pre_sale_sold
                 Type: uint256
                 Source: "_pre_sale_sold"
            Identifier thirdPhaseAmount
               Type: uint256
               Source: "thirdPhaseAmount"
        Block
           Source: "{\r\n      return _usd.mul(thirdPhaseDiscount).div(100);\r\n    }"
          Return
             Gas costs: 285
             Source: "return _usd.mul(thirdPhaseDiscount).div(100)"
            FunctionCall
               Type: uint256
               Source: "_usd.mul(thirdPhaseDiscount).div(100)"
              MemberAccess to member div
                 Type: function (uint256,uint256) view returns (uint256)
                 Source: "_usd.mul(thirdPhaseDiscount).div"
                FunctionCall
                   Type: uint256
                   Source: "_usd.mul(thirdPhaseDiscount)"
                  MemberAccess to member mul
                     Type: function (uint256,uint256) view returns (uint256)
                     Source: "_usd.mul"
                    Identifier _usd
                       Type: uint256
                       Source: "_usd"
                  Identifier thirdPhaseDiscount
                     Type: uint256
                     Source: "thirdPhaseDiscount"
              Literal, token: [no token] value: 100
                 Type: int_const 100
                 Source: "100"
      IfStatement
         Source: "if (currentPhase == 4 && pre_sale_sold + _pre_sale_sold > thirdPhaseAmount && pre_sale_sold + _pre_sale_sold <= fourPhaseAmount) {\r\n      return _usd.mul(fourPhaseDiscount).div(100);\r\n    }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 1086
           Source: "currentPhase == 4 && pre_sale_sold + _pre_sale_sold > thirdPhaseAmount && pre_sale_sold + _pre_sale_sold <= fourPhaseAmount"
          BinaryOperation using operator &&
             Type: bool
             Source: "currentPhase == 4 && pre_sale_sold + _pre_sale_sold > thirdPhaseAmount"
            BinaryOperation using operator ==
               Type: bool
               Source: "currentPhase == 4"
              Identifier currentPhase
                 Type: uint256
                 Source: "currentPhase"
              Literal, token: [no token] value: 4
                 Type: int_const 4
                 Source: "4"
            BinaryOperation using operator >
               Type: bool
               Source: "pre_sale_sold + _pre_sale_sold > thirdPhaseAmount"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "pre_sale_sold + _pre_sale_sold"
                Identifier pre_sale_sold
                   Type: uint256
                   Source: "pre_sale_sold"
                Identifier _pre_sale_sold
                   Type: uint256
                   Source: "_pre_sale_sold"
              Identifier thirdPhaseAmount
                 Type: uint256
                 Source: "thirdPhaseAmount"
          BinaryOperation using operator <=
             Type: bool
             Source: "pre_sale_sold + _pre_sale_sold <= fourPhaseAmount"
            BinaryOperation using operator +
               Type: uint256
               Source: "pre_sale_sold + _pre_sale_sold"
              Identifier pre_sale_sold
                 Type: uint256
                 Source: "pre_sale_sold"
              Identifier _pre_sale_sold
                 Type: uint256
                 Source: "_pre_sale_sold"
            Identifier fourPhaseAmount
               Type: uint256
               Source: "fourPhaseAmount"
        Block
           Source: "{\r\n      return _usd.mul(fourPhaseDiscount).div(100);\r\n    }"
          Return
             Gas costs: 285
             Source: "return _usd.mul(fourPhaseDiscount).div(100)"
            FunctionCall
               Type: uint256
               Source: "_usd.mul(fourPhaseDiscount).div(100)"
              MemberAccess to member div
                 Type: function (uint256,uint256) view returns (uint256)
                 Source: "_usd.mul(fourPhaseDiscount).div"
                FunctionCall
                   Type: uint256
                   Source: "_usd.mul(fourPhaseDiscount)"
                  MemberAccess to member mul
                     Type: function (uint256,uint256) view returns (uint256)
                     Source: "_usd.mul"
                    Identifier _usd
                       Type: uint256
                       Source: "_usd"
                  Identifier fourPhaseDiscount
                     Type: uint256
                     Source: "fourPhaseDiscount"
              Literal, token: [no token] value: 100
                 Type: int_const 100
                 Source: "100"
      Return
         Gas costs: 8
         Source: "return _usd"
        Identifier _usd
           Type: uint256
           Source: "_usd"
  FunctionDefinition "sendToAddress" - public
     Source: "function sendToAddress(address _address, uint256 _tokens, uint256 _type) canMint onlyOwner public {\r\n\r\n   if (_type != 1 && _type != 2 && _type != 3) {\r\n     revert();\r\n   }\r\n\r\n    //Founding\r\n    if (_type == 1) {\r\n      if (founding_sold + _tokens > foundingAmount) {\r\n        revert();\r\n      }\r\n\r\n      if (founding_buyers_token[_address] == 0) {\r\n        founding_investors.push(_address);\r\n      }\r\n\r\n      require(foundingAmount >= _tokens);\r\n\r\n      founding_buyers_token[_address] = founding_buyers_token[_address].add(_tokens);\r\n    \r\n      founding_sold = founding_sold + _tokens;\r\n\r\n      token.transferTokens(_address, _tokens, public_sale_start, 1);\r\n\r\n      foundingAmount = foundingAmount - _tokens;\r\n    }\r\n    // PE Investors\r\n    if (_type == 2) {\r\n      if (peInvestors_sold + _tokens > PEInvestorAmount) {\r\n        revert();\r\n      }\r\n\r\n      if (pe_buyers_token[_address] == 0) {\r\n        pe_investors.push(_address);\r\n      }\r\n\r\n      require(PEInvestorAmount >= _tokens);\r\n\r\n      pe_buyers_token[_address] = pe_buyers_token[_address].add(_tokens);\r\n    \r\n      peInvestors_sold = peInvestors_sold + _tokens;\r\n      \r\n      token.transferTokens(_address, _tokens, public_sale_start, 2);\r\n\r\n      PEInvestorAmount = PEInvestorAmount - _tokens;\r\n    }\r\n    //Core Team\r\n    if (_type == 3) {\r\n      require(coreTeamAmount >= _tokens);\r\n      token.transferTokens(coreTeamAddr, _address, _tokens, public_sale_start, 3);\r\n      coreTeamAmount = coreTeamAmount - _tokens;\r\n    } else {\r\n      soldTokens = soldTokens + _tokens;\r\n    }\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _address, uint256 _tokens, uint256 _type)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_tokens"
         Type: uint256
         Source: "uint256 _tokens"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_type"
         Type: uint256
         Source: "uint256 _type"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "canMint"
       Gas costs: 0
       Source: "canMint"
      Identifier canMint
         Type: modifier ()
         Source: "canMint"
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n\r\n   if (_type != 1 && _type != 2 && _type != 3) {\r\n     revert();\r\n   }\r\n\r\n    //Founding\r\n    if (_type == 1) {\r\n      if (founding_sold + _tokens > foundingAmount) {\r\n        revert();\r\n      }\r\n\r\n      if (founding_buyers_token[_address] == 0) {\r\n        founding_investors.push(_address);\r\n      }\r\n\r\n      require(foundingAmount >= _tokens);\r\n\r\n      founding_buyers_token[_address] = founding_buyers_token[_address].add(_tokens);\r\n    \r\n      founding_sold = founding_sold + _tokens;\r\n\r\n      token.transferTokens(_address, _tokens, public_sale_start, 1);\r\n\r\n      foundingAmount = foundingAmount - _tokens;\r\n    }\r\n    // PE Investors\r\n    if (_type == 2) {\r\n      if (peInvestors_sold + _tokens > PEInvestorAmount) {\r\n        revert();\r\n      }\r\n\r\n      if (pe_buyers_token[_address] == 0) {\r\n        pe_investors.push(_address);\r\n      }\r\n\r\n      require(PEInvestorAmount >= _tokens);\r\n\r\n      pe_buyers_token[_address] = pe_buyers_token[_address].add(_tokens);\r\n    \r\n      peInvestors_sold = peInvestors_sold + _tokens;\r\n      \r\n      token.transferTokens(_address, _tokens, public_sale_start, 2);\r\n\r\n      PEInvestorAmount = PEInvestorAmount - _tokens;\r\n    }\r\n    //Core Team\r\n    if (_type == 3) {\r\n      require(coreTeamAmount >= _tokens);\r\n      token.transferTokens(coreTeamAddr, _address, _tokens, public_sale_start, 3);\r\n      coreTeamAmount = coreTeamAmount - _tokens;\r\n    } else {\r\n      soldTokens = soldTokens + _tokens;\r\n    }\r\n  }"
      IfStatement
         Source: "if (_type != 1 && _type != 2 && _type != 3) {\r\n     revert();\r\n   }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 80
           Source: "_type != 1 && _type != 2 && _type != 3"
          BinaryOperation using operator &&
             Type: bool
             Source: "_type != 1 && _type != 2"
            BinaryOperation using operator !=
               Type: bool
               Source: "_type != 1"
              Identifier _type
                 Type: uint256
                 Source: "_type"
              Literal, token: [no token] value: 1
                 Type: int_const 1
                 Source: "1"
            BinaryOperation using operator !=
               Type: bool
               Source: "_type != 2"
              Identifier _type
                 Type: uint256
                 Source: "_type"
              Literal, token: [no token] value: 2
                 Type: int_const 2
                 Source: "2"
          BinaryOperation using operator !=
             Type: bool
             Source: "_type != 3"
            Identifier _type
               Type: uint256
               Source: "_type"
            Literal, token: [no token] value: 3
               Type: int_const 3
               Source: "3"
        Block
           Source: "{\r\n     revert();\r\n   }"
          ExpressionStatement
             Gas costs: 6
             Source: "revert()"
            FunctionCall
               Type: tuple()
               Source: "revert()"
              Identifier revert
                 Type: function () pure
                 Source: "revert"
      IfStatement
         Source: "if (_type == 1) {\r\n      if (founding_sold + _tokens > foundingAmount) {\r\n        revert();\r\n      }\r\n\r\n      if (founding_buyers_token[_address] == 0) {\r\n        founding_investors.push(_address);\r\n      }\r\n\r\n      require(foundingAmount >= _tokens);\r\n\r\n      founding_buyers_token[_address] = founding_buyers_token[_address].add(_tokens);\r\n    \r\n      founding_sold = founding_sold + _tokens;\r\n\r\n      token.transferTokens(_address, _tokens, public_sale_start, 1);\r\n\r\n      foundingAmount = foundingAmount - _tokens;\r\n    }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "_type == 1"
          Identifier _type
             Type: uint256
             Source: "_type"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
        Block
           Source: "{\r\n      if (founding_sold + _tokens > foundingAmount) {\r\n        revert();\r\n      }\r\n\r\n      if (founding_buyers_token[_address] == 0) {\r\n        founding_investors.push(_address);\r\n      }\r\n\r\n      require(foundingAmount >= _tokens);\r\n\r\n      founding_buyers_token[_address] = founding_buyers_token[_address].add(_tokens);\r\n    \r\n      founding_sold = founding_sold + _tokens;\r\n\r\n      token.transferTokens(_address, _tokens, public_sale_start, 1);\r\n\r\n      foundingAmount = foundingAmount - _tokens;\r\n    }"
          IfStatement
             Source: "if (founding_sold + _tokens > foundingAmount) {\r\n        revert();\r\n      }"
            BinaryOperation using operator >
               Type: bool
               Gas costs: 415
               Source: "founding_sold + _tokens > foundingAmount"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "founding_sold + _tokens"
                Identifier founding_sold
                   Type: uint256
                   Source: "founding_sold"
                Identifier _tokens
                   Type: uint256
                   Source: "_tokens"
              Identifier foundingAmount
                 Type: uint256
                 Source: "foundingAmount"
            Block
               Source: "{\r\n        revert();\r\n      }"
              ExpressionStatement
                 Gas costs: 6
                 Source: "revert()"
                FunctionCall
                   Type: tuple()
                   Source: "revert()"
                  Identifier revert
                     Type: function () pure
                     Source: "revert"
          IfStatement
             Source: "if (founding_buyers_token[_address] == 0) {\r\n        founding_investors.push(_address);\r\n      }"
            BinaryOperation using operator ==
               Type: bool
               Gas costs: 305
               Source: "founding_buyers_token[_address] == 0"
              IndexAccess
                 Type: uint256
                 Source: "founding_buyers_token[_address]"
                Identifier founding_buyers_token
                   Type: mapping(address => uint256)
                   Source: "founding_buyers_token"
                Identifier _address
                   Type: address
                   Source: "_address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
            Block
               Source: "{\r\n        founding_investors.push(_address);\r\n      }"
              ExpressionStatement
                 Gas costs: 20365
                 Source: "founding_investors.push(_address)"
                FunctionCall
                   Type: uint256
                   Source: "founding_investors.push(_address)"
                  MemberAccess to member push
                     Type: function (address) returns (uint256)
                     Source: "founding_investors.push"
                    Identifier founding_investors
                       Type: address[] storage ref
                       Source: "founding_investors"
                  Identifier _address
                     Type: address
                     Source: "_address"
          ExpressionStatement
             Gas costs: 238
             Source: "require(foundingAmount >= _tokens)"
            FunctionCall
               Type: tuple()
               Source: "require(foundingAmount >= _tokens)"
              Identifier require
                 Type: function (bool) pure
                 Source: "require"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "foundingAmount >= _tokens"
                Identifier foundingAmount
                   Type: uint256
                   Source: "foundingAmount"
                Identifier _tokens
                   Type: uint256
                   Source: "_tokens"
          ExpressionStatement
             Gas costs: 20439
             Source: "founding_buyers_token[_address] = founding_buyers_token[_address].add(_tokens)"
            Assignment using operator =
               Type: uint256
               Source: "founding_buyers_token[_address] = founding_buyers_token[_address].add(_tokens)"
              IndexAccess
                 Type: uint256
                 Source: "founding_buyers_token[_address]"
                Identifier founding_buyers_token
                   Type: mapping(address => uint256)
                   Source: "founding_buyers_token"
                Identifier _address
                   Type: address
                   Source: "_address"
              FunctionCall
                 Type: uint256
                 Source: "founding_buyers_token[_address].add(_tokens)"
                MemberAccess to member add
                   Type: function (uint256,uint256) view returns (uint256)
                   Source: "founding_buyers_token[_address].add"
                  IndexAccess
                     Type: uint256
                     Source: "founding_buyers_token[_address]"
                    Identifier founding_buyers_token
                       Type: mapping(address => uint256)
                       Source: "founding_buyers_token"
                    Identifier _address
                       Type: address
                       Source: "_address"
                Identifier _tokens
                   Type: uint256
                   Source: "_tokens"
          ExpressionStatement
             Gas costs: 20220
             Source: "founding_sold = founding_sold + _tokens"
            Assignment using operator =
               Type: uint256
               Source: "founding_sold = founding_sold + _tokens"
              Identifier founding_sold
                 Type: uint256
                 Source: "founding_sold"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "founding_sold + _tokens"
                Identifier founding_sold
                   Type: uint256
                   Source: "founding_sold"
                Identifier _tokens
                   Type: uint256
                   Source: "_tokens"
          ExpressionStatement
             Gas costs: [???]
             Source: "token.transferTokens(_address, _tokens, public_sale_start, 1)"
            FunctionCall
               Type: tuple()
               Source: "token.transferTokens(_address, _tokens, public_sale_start, 1)"
              MemberAccess to member transferTokens
                 Type: function (address,uint256,uint256,uint256) external
                 Source: "token.transferTokens"
                Identifier token
                   Type: contract SingleTokenCoin
                   Source: "token"
              Identifier _address
                 Type: address
                 Source: "_address"
              Identifier _tokens
                 Type: uint256
                 Source: "_tokens"
              Identifier public_sale_start
                 Type: uint256
                 Source: "public_sale_start"
              Literal, token: [no token] value: 1
                 Type: int_const 1
                 Source: "1"
          ExpressionStatement
             Gas costs: 20220
             Source: "foundingAmount = foundingAmount - _tokens"
            Assignment using operator =
               Type: uint256
               Source: "foundingAmount = foundingAmount - _tokens"
              Identifier foundingAmount
                 Type: uint256
                 Source: "foundingAmount"
              BinaryOperation using operator -
                 Type: uint256
                 Source: "foundingAmount - _tokens"
                Identifier foundingAmount
                   Type: uint256
                   Source: "foundingAmount"
                Identifier _tokens
                   Type: uint256
                   Source: "_tokens"
      IfStatement
         Source: "if (_type == 2) {\r\n      if (peInvestors_sold + _tokens > PEInvestorAmount) {\r\n        revert();\r\n      }\r\n\r\n      if (pe_buyers_token[_address] == 0) {\r\n        pe_investors.push(_address);\r\n      }\r\n\r\n      require(PEInvestorAmount >= _tokens);\r\n\r\n      pe_buyers_token[_address] = pe_buyers_token[_address].add(_tokens);\r\n    \r\n      peInvestors_sold = peInvestors_sold + _tokens;\r\n      \r\n      token.transferTokens(_address, _tokens, public_sale_start, 2);\r\n\r\n      PEInvestorAmount = PEInvestorAmount - _tokens;\r\n    }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "_type == 2"
          Identifier _type
             Type: uint256
             Source: "_type"
          Literal, token: [no token] value: 2
             Type: int_const 2
             Source: "2"
        Block
           Source: "{\r\n      if (peInvestors_sold + _tokens > PEInvestorAmount) {\r\n        revert();\r\n      }\r\n\r\n      if (pe_buyers_token[_address] == 0) {\r\n        pe_investors.push(_address);\r\n      }\r\n\r\n      require(PEInvestorAmount >= _tokens);\r\n\r\n      pe_buyers_token[_address] = pe_buyers_token[_address].add(_tokens);\r\n    \r\n      peInvestors_sold = peInvestors_sold + _tokens;\r\n      \r\n      token.transferTokens(_address, _tokens, public_sale_start, 2);\r\n\r\n      PEInvestorAmount = PEInvestorAmount - _tokens;\r\n    }"
          IfStatement
             Source: "if (peInvestors_sold + _tokens > PEInvestorAmount) {\r\n        revert();\r\n      }"
            BinaryOperation using operator >
               Type: bool
               Gas costs: 415
               Source: "peInvestors_sold + _tokens > PEInvestorAmount"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "peInvestors_sold + _tokens"
                Identifier peInvestors_sold
                   Type: uint256
                   Source: "peInvestors_sold"
                Identifier _tokens
                   Type: uint256
                   Source: "_tokens"
              Identifier PEInvestorAmount
                 Type: uint256
                 Source: "PEInvestorAmount"
            Block
               Source: "{\r\n        revert();\r\n      }"
              ExpressionStatement
                 Gas costs: 6
                 Source: "revert()"
                FunctionCall
                   Type: tuple()
                   Source: "revert()"
                  Identifier revert
                     Type: function () pure
                     Source: "revert"
          IfStatement
             Source: "if (pe_buyers_token[_address] == 0) {\r\n        pe_investors.push(_address);\r\n      }"
            BinaryOperation using operator ==
               Type: bool
               Gas costs: 305
               Source: "pe_buyers_token[_address] == 0"
              IndexAccess
                 Type: uint256
                 Source: "pe_buyers_token[_address]"
                Identifier pe_buyers_token
                   Type: mapping(address => uint256)
                   Source: "pe_buyers_token"
                Identifier _address
                   Type: address
                   Source: "_address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
            Block
               Source: "{\r\n        pe_investors.push(_address);\r\n      }"
              ExpressionStatement
                 Gas costs: 20365
                 Source: "pe_investors.push(_address)"
                FunctionCall
                   Type: uint256
                   Source: "pe_investors.push(_address)"
                  MemberAccess to member push
                     Type: function (address) returns (uint256)
                     Source: "pe_investors.push"
                    Identifier pe_investors
                       Type: address[] storage ref
                       Source: "pe_investors"
                  Identifier _address
                     Type: address
                     Source: "_address"
          ExpressionStatement
             Gas costs: 238
             Source: "require(PEInvestorAmount >= _tokens)"
            FunctionCall
               Type: tuple()
               Source: "require(PEInvestorAmount >= _tokens)"
              Identifier require
                 Type: function (bool) pure
                 Source: "require"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "PEInvestorAmount >= _tokens"
                Identifier PEInvestorAmount
                   Type: uint256
                   Source: "PEInvestorAmount"
                Identifier _tokens
                   Type: uint256
                   Source: "_tokens"
          ExpressionStatement
             Gas costs: 20439
             Source: "pe_buyers_token[_address] = pe_buyers_token[_address].add(_tokens)"
            Assignment using operator =
               Type: uint256
               Source: "pe_buyers_token[_address] = pe_buyers_token[_address].add(_tokens)"
              IndexAccess
                 Type: uint256
                 Source: "pe_buyers_token[_address]"
                Identifier pe_buyers_token
                   Type: mapping(address => uint256)
                   Source: "pe_buyers_token"
                Identifier _address
                   Type: address
                   Source: "_address"
              FunctionCall
                 Type: uint256
                 Source: "pe_buyers_token[_address].add(_tokens)"
                MemberAccess to member add
                   Type: function (uint256,uint256) view returns (uint256)
                   Source: "pe_buyers_token[_address].add"
                  IndexAccess
                     Type: uint256
                     Source: "pe_buyers_token[_address]"
                    Identifier pe_buyers_token
                       Type: mapping(address => uint256)
                       Source: "pe_buyers_token"
                    Identifier _address
                       Type: address
                       Source: "_address"
                Identifier _tokens
                   Type: uint256
                   Source: "_tokens"
          ExpressionStatement
             Gas costs: 20220
             Source: "peInvestors_sold = peInvestors_sold + _tokens"
            Assignment using operator =
               Type: uint256
               Source: "peInvestors_sold = peInvestors_sold + _tokens"
              Identifier peInvestors_sold
                 Type: uint256
                 Source: "peInvestors_sold"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "peInvestors_sold + _tokens"
                Identifier peInvestors_sold
                   Type: uint256
                   Source: "peInvestors_sold"
                Identifier _tokens
                   Type: uint256
                   Source: "_tokens"
          ExpressionStatement
             Gas costs: [???]
             Source: "token.transferTokens(_address, _tokens, public_sale_start, 2)"
            FunctionCall
               Type: tuple()
               Source: "token.transferTokens(_address, _tokens, public_sale_start, 2)"
              MemberAccess to member transferTokens
                 Type: function (address,uint256,uint256,uint256) external
                 Source: "token.transferTokens"
                Identifier token
                   Type: contract SingleTokenCoin
                   Source: "token"
              Identifier _address
                 Type: address
                 Source: "_address"
              Identifier _tokens
                 Type: uint256
                 Source: "_tokens"
              Identifier public_sale_start
                 Type: uint256
                 Source: "public_sale_start"
              Literal, token: [no token] value: 2
                 Type: int_const 2
                 Source: "2"
          ExpressionStatement
             Gas costs: 20220
             Source: "PEInvestorAmount = PEInvestorAmount - _tokens"
            Assignment using operator =
               Type: uint256
               Source: "PEInvestorAmount = PEInvestorAmount - _tokens"
              Identifier PEInvestorAmount
                 Type: uint256
                 Source: "PEInvestorAmount"
              BinaryOperation using operator -
                 Type: uint256
                 Source: "PEInvestorAmount - _tokens"
                Identifier PEInvestorAmount
                   Type: uint256
                   Source: "PEInvestorAmount"
                Identifier _tokens
                   Type: uint256
                   Source: "_tokens"
      IfStatement
         Source: "if (_type == 3) {\r\n      require(coreTeamAmount >= _tokens);\r\n      token.transferTokens(coreTeamAddr, _address, _tokens, public_sale_start, 3);\r\n      coreTeamAmount = coreTeamAmount - _tokens;\r\n    } else {\r\n      soldTokens = soldTokens + _tokens;\r\n    }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "_type == 3"
          Identifier _type
             Type: uint256
             Source: "_type"
          Literal, token: [no token] value: 3
             Type: int_const 3
             Source: "3"
        Block
           Source: "{\r\n      require(coreTeamAmount >= _tokens);\r\n      token.transferTokens(coreTeamAddr, _address, _tokens, public_sale_start, 3);\r\n      coreTeamAmount = coreTeamAmount - _tokens;\r\n    }"
          ExpressionStatement
             Gas costs: 238
             Source: "require(coreTeamAmount >= _tokens)"
            FunctionCall
               Type: tuple()
               Source: "require(coreTeamAmount >= _tokens)"
              Identifier require
                 Type: function (bool) pure
                 Source: "require"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "coreTeamAmount >= _tokens"
                Identifier coreTeamAmount
                   Type: uint256
                   Source: "coreTeamAmount"
                Identifier _tokens
                   Type: uint256
                   Source: "_tokens"
          ExpressionStatement
             Gas costs: [???]
             Source: "token.transferTokens(coreTeamAddr, _address, _tokens, public_sale_start, 3)"
            FunctionCall
               Type: tuple()
               Source: "token.transferTokens(coreTeamAddr, _address, _tokens, public_sale_start, 3)"
              MemberAccess to member transferTokens
                 Type: function (address,address,uint256,uint256,uint256) external
                 Source: "token.transferTokens"
                Identifier token
                   Type: contract SingleTokenCoin
                   Source: "token"
              Identifier coreTeamAddr
                 Type: address
                 Source: "coreTeamAddr"
              Identifier _address
                 Type: address
                 Source: "_address"
              Identifier _tokens
                 Type: uint256
                 Source: "_tokens"
              Identifier public_sale_start
                 Type: uint256
                 Source: "public_sale_start"
              Literal, token: [no token] value: 3
                 Type: int_const 3
                 Source: "3"
          ExpressionStatement
             Gas costs: 20220
             Source: "coreTeamAmount = coreTeamAmount - _tokens"
            Assignment using operator =
               Type: uint256
               Source: "coreTeamAmount = coreTeamAmount - _tokens"
              Identifier coreTeamAmount
                 Type: uint256
                 Source: "coreTeamAmount"
              BinaryOperation using operator -
                 Type: uint256
                 Source: "coreTeamAmount - _tokens"
                Identifier coreTeamAmount
                   Type: uint256
                   Source: "coreTeamAmount"
                Identifier _tokens
                   Type: uint256
                   Source: "_tokens"
        Block
           Source: "{\r\n      soldTokens = soldTokens + _tokens;\r\n    }"
          ExpressionStatement
             Gas costs: 20220
             Source: "soldTokens = soldTokens + _tokens"
            Assignment using operator =
               Type: uint256
               Source: "soldTokens = soldTokens + _tokens"
              Identifier soldTokens
                 Type: uint256
                 Source: "soldTokens"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "soldTokens + _tokens"
                Identifier soldTokens
                   Type: uint256
                   Source: "soldTokens"
                Identifier _tokens
                   Type: uint256
                   Source: "_tokens"
  ModifierDefinition "isICOFinished"
     Source: "modifier isICOFinished() {\r\n    if (now > public_sale_finish) {\r\n      finishMinting();\r\n    }\r\n    _;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n    if (now > public_sale_finish) {\r\n      finishMinting();\r\n    }\r\n    _;\r\n  }"
      IfStatement
         Source: "if (now > public_sale_finish) {\r\n      finishMinting();\r\n    }"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 208
           Source: "now > public_sale_finish"
          Identifier now
             Type: uint256
             Source: "now"
          Identifier public_sale_finish
             Type: uint256
             Source: "public_sale_finish"
        Block
           Source: "{\r\n      finishMinting();\r\n    }"
          ExpressionStatement
             Gas costs: 15
             Source: "finishMinting()"
            FunctionCall
               Type: tuple()
               Source: "finishMinting()"
              Identifier finishMinting
                 Type: function ()
                 Source: "finishMinting"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "isAnyStage"
     Source: "modifier isAnyStage() {\r\n    if (now > angel_sale_finish && now > pre_sale_finish && now > public_sale_finish) {\r\n      revert();\r\n    }\r\n\r\n    if (now < angel_sale_start && now < pre_sale_start && now < public_sale_start) {\r\n      revert();\r\n    }\r\n\r\n    _;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n    if (now > angel_sale_finish && now > pre_sale_finish && now > public_sale_finish) {\r\n      revert();\r\n    }\r\n\r\n    if (now < angel_sale_start && now < pre_sale_start && now < public_sale_start) {\r\n      revert();\r\n    }\r\n\r\n    _;\r\n  }"
      IfStatement
         Source: "if (now > angel_sale_finish && now > pre_sale_finish && now > public_sale_finish) {\r\n      revert();\r\n    }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 668
           Source: "now > angel_sale_finish && now > pre_sale_finish && now > public_sale_finish"
          BinaryOperation using operator &&
             Type: bool
             Source: "now > angel_sale_finish && now > pre_sale_finish"
            BinaryOperation using operator >
               Type: bool
               Source: "now > angel_sale_finish"
              Identifier now
                 Type: uint256
                 Source: "now"
              Identifier angel_sale_finish
                 Type: uint256
                 Source: "angel_sale_finish"
            BinaryOperation using operator >
               Type: bool
               Source: "now > pre_sale_finish"
              Identifier now
                 Type: uint256
                 Source: "now"
              Identifier pre_sale_finish
                 Type: uint256
                 Source: "pre_sale_finish"
          BinaryOperation using operator >
             Type: bool
             Source: "now > public_sale_finish"
            Identifier now
               Type: uint256
               Source: "now"
            Identifier public_sale_finish
               Type: uint256
               Source: "public_sale_finish"
        Block
           Source: "{\r\n      revert();\r\n    }"
          ExpressionStatement
             Gas costs: 6
             Source: "revert()"
            FunctionCall
               Type: tuple()
               Source: "revert()"
              Identifier revert
                 Type: function () pure
                 Source: "revert"
      IfStatement
         Source: "if (now < angel_sale_start && now < pre_sale_start && now < public_sale_start) {\r\n      revert();\r\n    }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 668
           Source: "now < angel_sale_start && now < pre_sale_start && now < public_sale_start"
          BinaryOperation using operator &&
             Type: bool
             Source: "now < angel_sale_start && now < pre_sale_start"
            BinaryOperation using operator <
               Type: bool
               Source: "now < angel_sale_start"
              Identifier now
                 Type: uint256
                 Source: "now"
              Identifier angel_sale_start
                 Type: uint256
                 Source: "angel_sale_start"
            BinaryOperation using operator <
               Type: bool
               Source: "now < pre_sale_start"
              Identifier now
                 Type: uint256
                 Source: "now"
              Identifier pre_sale_start
                 Type: uint256
                 Source: "pre_sale_start"
          BinaryOperation using operator <
             Type: bool
             Source: "now < public_sale_start"
            Identifier now
               Type: uint256
               Source: "now"
            Identifier public_sale_start
               Type: uint256
               Source: "public_sale_start"
        Block
           Source: "{\r\n      revert();\r\n    }"
          ExpressionStatement
             Gas costs: 6
             Source: "revert()"
            FunctionCall
               Type: tuple()
               Source: "revert()"
              Identifier revert
                 Type: function () pure
                 Source: "revert"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "setTransferOwnership" - public
     Source: "function setTransferOwnership(address _address) public onlyOwner {\r\n\r\n    transferOwnership(_address);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _address)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n\r\n    transferOwnership(_address);\r\n  }"
      ExpressionStatement
         Gas costs: 18
         Source: "transferOwnership(_address)"
        FunctionCall
           Type: tuple()
           Source: "transferOwnership(_address)"
          Identifier transferOwnership
             Type: function (address)
             Source: "transferOwnership"
          Identifier _address
             Type: address
             Source: "_address"
  FunctionDefinition "setAngelDate" - public
     Source: "function setAngelDate(uint256 _time) public onlyOwner {\r\n    angel_sale_start = _time;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _time)"
      VariableDeclaration "_time"
         Type: uint256
         Source: "uint256 _time"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n    angel_sale_start = _time;\r\n  }"
      ExpressionStatement
         Gas costs: 20014
         Source: "angel_sale_start = _time"
        Assignment using operator =
           Type: uint256
           Source: "angel_sale_start = _time"
          Identifier angel_sale_start
             Type: uint256
             Source: "angel_sale_start"
          Identifier _time
             Type: uint256
             Source: "_time"
  FunctionDefinition "setPreSaleDate" - public
     Source: "function setPreSaleDate(uint256 _time) public onlyOwner {\r\n    pre_sale_start = _time;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _time)"
      VariableDeclaration "_time"
         Type: uint256
         Source: "uint256 _time"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n    pre_sale_start = _time;\r\n  }"
      ExpressionStatement
         Gas costs: 20014
         Source: "pre_sale_start = _time"
        Assignment using operator =
           Type: uint256
           Source: "pre_sale_start = _time"
          Identifier pre_sale_start
             Type: uint256
             Source: "pre_sale_start"
          Identifier _time
             Type: uint256
             Source: "_time"
  FunctionDefinition "setPublicSaleDate" - public
     Source: "function setPublicSaleDate(uint256 _time) public onlyOwner {\r\n    public_sale_start = _time;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _time)"
      VariableDeclaration "_time"
         Type: uint256
         Source: "uint256 _time"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n    public_sale_start = _time;\r\n  }"
      ExpressionStatement
         Gas costs: 20014
         Source: "public_sale_start = _time"
        Assignment using operator =
           Type: uint256
           Source: "public_sale_start = _time"
          Identifier public_sale_start
             Type: uint256
             Source: "public_sale_start"
          Identifier _time
             Type: uint256
             Source: "_time"
  FunctionDefinition "getStartDates" - public - const
     Source: "function getStartDates() public constant returns(uint256 _angel_sale_start, uint256 _pre_sale_start, uint256 _public_sale_start) {\r\n    return (angel_sale_start, pre_sale_start, public_sale_start);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 9
       Source: "(uint256 _angel_sale_start, uint256 _pre_sale_start, uint256 _public_sale_start)"
      VariableDeclaration "_angel_sale_start"
         Type: uint256
         Source: "uint256 _angel_sale_start"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_pre_sale_start"
         Type: uint256
         Source: "uint256 _pre_sale_start"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_public_sale_start"
         Type: uint256
         Source: "uint256 _public_sale_start"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    return (angel_sale_start, pre_sale_start, public_sale_start);\r\n  }"
      Return
         Gas costs: 624
         Source: "return (angel_sale_start, pre_sale_start, public_sale_start)"
        TupleExpression
           Type: tuple(uint256,uint256,uint256)
           Source: "(angel_sale_start, pre_sale_start, public_sale_start)"
          Identifier angel_sale_start
             Type: uint256
             Source: "angel_sale_start"
          Identifier pre_sale_start
             Type: uint256
             Source: "pre_sale_start"
          Identifier public_sale_start
             Type: uint256
             Source: "public_sale_start"
  FunctionDefinition "setAngelFinishDate" - public
     Source: "function setAngelFinishDate(uint256 _time) public onlyOwner {\r\n    angel_sale_finish = _time;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _time)"
      VariableDeclaration "_time"
         Type: uint256
         Source: "uint256 _time"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n    angel_sale_finish = _time;\r\n  }"
      ExpressionStatement
         Gas costs: 20014
         Source: "angel_sale_finish = _time"
        Assignment using operator =
           Type: uint256
           Source: "angel_sale_finish = _time"
          Identifier angel_sale_finish
             Type: uint256
             Source: "angel_sale_finish"
          Identifier _time
             Type: uint256
             Source: "_time"
  FunctionDefinition "setPreSaleFinishDate" - public
     Source: "function setPreSaleFinishDate(uint256 _time) public onlyOwner {\r\n    pre_sale_finish = _time;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _time)"
      VariableDeclaration "_time"
         Type: uint256
         Source: "uint256 _time"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n    pre_sale_finish = _time;\r\n  }"
      ExpressionStatement
         Gas costs: 20014
         Source: "pre_sale_finish = _time"
        Assignment using operator =
           Type: uint256
           Source: "pre_sale_finish = _time"
          Identifier pre_sale_finish
             Type: uint256
             Source: "pre_sale_finish"
          Identifier _time
             Type: uint256
             Source: "_time"
  FunctionDefinition "setPublicSaleFinishDate" - public
     Source: "function setPublicSaleFinishDate(uint256 _time) public onlyOwner {\r\n    public_sale_finish = _time;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _time)"
      VariableDeclaration "_time"
         Type: uint256
         Source: "uint256 _time"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n    public_sale_finish = _time;\r\n  }"
      ExpressionStatement
         Gas costs: 20014
         Source: "public_sale_finish = _time"
        Assignment using operator =
           Type: uint256
           Source: "public_sale_finish = _time"
          Identifier public_sale_finish
             Type: uint256
             Source: "public_sale_finish"
          Identifier _time
             Type: uint256
             Source: "_time"
  FunctionDefinition "getFinishDates" - public - const
     Source: "function getFinishDates() public constant returns(uint256 _angel_sale_finish, uint256 _pre_sale_finish, uint256 _public_sale_finish) {\r\n    return (angel_sale_finish, pre_sale_finish, public_sale_finish);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 9
       Source: "(uint256 _angel_sale_finish, uint256 _pre_sale_finish, uint256 _public_sale_finish)"
      VariableDeclaration "_angel_sale_finish"
         Type: uint256
         Source: "uint256 _angel_sale_finish"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_pre_sale_finish"
         Type: uint256
         Source: "uint256 _pre_sale_finish"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_public_sale_finish"
         Type: uint256
         Source: "uint256 _public_sale_finish"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    return (angel_sale_finish, pre_sale_finish, public_sale_finish);\r\n  }"
      Return
         Gas costs: 624
         Source: "return (angel_sale_finish, pre_sale_finish, public_sale_finish)"
        TupleExpression
           Type: tuple(uint256,uint256,uint256)
           Source: "(angel_sale_finish, pre_sale_finish, public_sale_finish)"
          Identifier angel_sale_finish
             Type: uint256
             Source: "angel_sale_finish"
          Identifier pre_sale_finish
             Type: uint256
             Source: "pre_sale_finish"
          Identifier public_sale_finish
             Type: uint256
             Source: "public_sale_finish"
  FunctionDefinition "mint" - public
     Source: "function mint() public canMint isICOFinished isAnyStage payable {\r\n\r\n    if (now > angel_sale_finish && now < pre_sale_finish) {\r\n      isPreSale = true;\r\n      isAngel = false;\r\n    }\r\n\r\n    if (now > pre_sale_finish && now < public_sale_finish) {\r\n      isPreSale = false;\r\n      isAngel = false;\r\n      isPublic = true;\r\n    }\r\n\r\n    if (now > angel_sale_finish && now < pre_sale_start) {\r\n      revert();\r\n    }\r\n\r\n    if (now > pre_sale_finish && now < public_sale_start) {\r\n      revert();\r\n    }\r\n\r\n    if (isAngel && angelAmount == angel_sale_sold) {\r\n      revert();\r\n    }\r\n\r\n    if (isPreSale && preSaleAmount == pre_sale_sold) {\r\n      revert();\r\n    }\r\n\r\n    if (isPublic && publicSaleAmount == public_sale_sold) {\r\n      revert();\r\n    }\r\n\r\n    public_rate = calculateRate();\r\n\r\n    uint256 eth = msg.value * 1E18;\r\n\r\n    uint256 discountPrice = 0;\r\n\r\n    if (isPreSale) {\r\n      discountPrice = calculatePrice(public_rate, 0);\r\n      pre_sale_totalETH = pre_sale_totalETH + eth;\r\n    }\r\n\r\n    if (isAngel) {\r\n      discountPrice = public_rate.mul(angel_rate).div(100);\r\n      angel_sale_totalETH = angel_sale_totalETH + eth;\r\n    }\r\n\r\n    uint currentRate = 0;\r\n\r\n    if (isPublic) {\r\n      currentRate = public_rate;\r\n      public_sale_totalETH = public_sale_totalETH + eth;\r\n    } else {\r\n      currentRate = discountPrice;\r\n    }\r\n\r\n    if (eth < currentRate) {\r\n      revert();\r\n    }\r\n\r\n    uint256 tokens = eth.div(currentRate);\r\n\r\n    if (isPublic && !moveTokens) {\r\n      if (angelAmount > angel_sale_sold) {\r\n        uint256 angelRemainder = angelAmount - angel_sale_sold;\r\n        publicSaleAmount = publicSaleAmount + angelRemainder;\r\n      }\r\n      if (preSaleAmount > pre_sale_sold) {\r\n        uint256 preSaleRemainder = preSaleAmount - pre_sale_sold;\r\n        publicSaleAmount = publicSaleAmount + preSaleRemainder;\r\n      }\r\n      moveTokens = true;\r\n    }\r\n\r\n    if (isPreSale) {\r\n      uint256 availableTokensPhase = 0;\r\n      uint256 ethToRefundPhase = 0;\r\n\r\n      uint256 remETH = 0;\r\n\r\n      uint256 totalTokensPhase = 0;\r\n\r\n      if (currentPhase == 1 && pre_sale_sold + tokens > firstPhaseAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(firstPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = availableTokensPhase;\r\n\r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 2;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }\r\n\r\n      if (currentPhase == 2 && pre_sale_sold + tokens + totalTokensPhase > secondPhaseAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(secondPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = totalTokensPhase + availableTokensPhase;\r\n        \r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 3;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }\r\n\r\n      if (currentPhase == 3 && pre_sale_sold + tokens + totalTokensPhase > thirdPhaseAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(thirdPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = totalTokensPhase + availableTokensPhase;\r\n        \r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 4;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }\r\n\r\n      if (currentPhase == 4 && pre_sale_sold + tokens + totalTokensPhase > fourPhaseAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(fourPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = totalTokensPhase + availableTokensPhase;\r\n        \r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 0;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }\r\n\r\n      tokens = tokens + totalTokensPhase;\r\n    }\r\n\r\n    if (isPreSale) {\r\n      if (pre_sale_sold + tokens > preSaleAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(preSaleAmount, pre_sale_sold, currentRate, tokens);\r\n        tokens = availableTokensPhase;\r\n        eth = eth - ethToRefundPhase;\r\n        refund(ethToRefundPhase);\r\n      }\r\n    }\r\n\r\n    if (isAngel) {\r\n      if (angel_sale_sold + tokens > angelAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(angelAmount, angel_sale_sold, currentRate, tokens);\r\n        tokens = availableTokensPhase;\r\n        eth = eth - ethToRefundPhase;\r\n        refund(ethToRefundPhase);\r\n        \r\n      }    \r\n    }\r\n\r\n    if (isPublic) {\r\n      if (public_sale_sold + tokens > publicSaleAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(publicSaleAmount, public_sale_sold, currentRate, tokens);\r\n        tokens = availableTokensPhase;\r\n        eth = eth - ethToRefundPhase;\r\n        refund(ethToRefundPhase);\r\n        \r\n      }\r\n    }\r\n\r\n    saveInfoAboutInvestors(msg.sender, eth, tokens);\r\n\r\n    if (isAngel) {\r\n      token.transferTokens(msg.sender, tokens, public_sale_start, 0);\r\n    } else {\r\n      // 0 - not freeze time; 4 - not freeze type currently;\r\n      token.transferTokens(msg.sender, tokens, 0, 4);\r\n    }\r\n\r\n    soldTokens = soldTokens + tokens;\r\n    \r\n    totalETH = totalETH + eth;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "canMint"
       Gas costs: 0
       Source: "canMint"
      Identifier canMint
         Type: modifier ()
         Source: "canMint"
    ModifierInvocation "isICOFinished"
       Gas costs: 0
       Source: "isICOFinished"
      Identifier isICOFinished
         Type: modifier ()
         Source: "isICOFinished"
    ModifierInvocation "isAnyStage"
       Gas costs: 0
       Source: "isAnyStage"
      Identifier isAnyStage
         Type: modifier ()
         Source: "isAnyStage"
    Block
       Source: "{\r\n\r\n    if (now > angel_sale_finish && now < pre_sale_finish) {\r\n      isPreSale = true;\r\n      isAngel = false;\r\n    }\r\n\r\n    if (now > pre_sale_finish && now < public_sale_finish) {\r\n      isPreSale = false;\r\n      isAngel = false;\r\n      isPublic = true;\r\n    }\r\n\r\n    if (now > angel_sale_finish && now < pre_sale_start) {\r\n      revert();\r\n    }\r\n\r\n    if (now > pre_sale_finish && now < public_sale_start) {\r\n      revert();\r\n    }\r\n\r\n    if (isAngel && angelAmount == angel_sale_sold) {\r\n      revert();\r\n    }\r\n\r\n    if (isPreSale && preSaleAmount == pre_sale_sold) {\r\n      revert();\r\n    }\r\n\r\n    if (isPublic && publicSaleAmount == public_sale_sold) {\r\n      revert();\r\n    }\r\n\r\n    public_rate = calculateRate();\r\n\r\n    uint256 eth = msg.value * 1E18;\r\n\r\n    uint256 discountPrice = 0;\r\n\r\n    if (isPreSale) {\r\n      discountPrice = calculatePrice(public_rate, 0);\r\n      pre_sale_totalETH = pre_sale_totalETH + eth;\r\n    }\r\n\r\n    if (isAngel) {\r\n      discountPrice = public_rate.mul(angel_rate).div(100);\r\n      angel_sale_totalETH = angel_sale_totalETH + eth;\r\n    }\r\n\r\n    uint currentRate = 0;\r\n\r\n    if (isPublic) {\r\n      currentRate = public_rate;\r\n      public_sale_totalETH = public_sale_totalETH + eth;\r\n    } else {\r\n      currentRate = discountPrice;\r\n    }\r\n\r\n    if (eth < currentRate) {\r\n      revert();\r\n    }\r\n\r\n    uint256 tokens = eth.div(currentRate);\r\n\r\n    if (isPublic && !moveTokens) {\r\n      if (angelAmount > angel_sale_sold) {\r\n        uint256 angelRemainder = angelAmount - angel_sale_sold;\r\n        publicSaleAmount = publicSaleAmount + angelRemainder;\r\n      }\r\n      if (preSaleAmount > pre_sale_sold) {\r\n        uint256 preSaleRemainder = preSaleAmount - pre_sale_sold;\r\n        publicSaleAmount = publicSaleAmount + preSaleRemainder;\r\n      }\r\n      moveTokens = true;\r\n    }\r\n\r\n    if (isPreSale) {\r\n      uint256 availableTokensPhase = 0;\r\n      uint256 ethToRefundPhase = 0;\r\n\r\n      uint256 remETH = 0;\r\n\r\n      uint256 totalTokensPhase = 0;\r\n\r\n      if (currentPhase == 1 && pre_sale_sold + tokens > firstPhaseAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(firstPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = availableTokensPhase;\r\n\r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 2;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }\r\n\r\n      if (currentPhase == 2 && pre_sale_sold + tokens + totalTokensPhase > secondPhaseAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(secondPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = totalTokensPhase + availableTokensPhase;\r\n        \r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 3;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }\r\n\r\n      if (currentPhase == 3 && pre_sale_sold + tokens + totalTokensPhase > thirdPhaseAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(thirdPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = totalTokensPhase + availableTokensPhase;\r\n        \r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 4;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }\r\n\r\n      if (currentPhase == 4 && pre_sale_sold + tokens + totalTokensPhase > fourPhaseAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(fourPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = totalTokensPhase + availableTokensPhase;\r\n        \r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 0;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }\r\n\r\n      tokens = tokens + totalTokensPhase;\r\n    }\r\n\r\n    if (isPreSale) {\r\n      if (pre_sale_sold + tokens > preSaleAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(preSaleAmount, pre_sale_sold, currentRate, tokens);\r\n        tokens = availableTokensPhase;\r\n        eth = eth - ethToRefundPhase;\r\n        refund(ethToRefundPhase);\r\n      }\r\n    }\r\n\r\n    if (isAngel) {\r\n      if (angel_sale_sold + tokens > angelAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(angelAmount, angel_sale_sold, currentRate, tokens);\r\n        tokens = availableTokensPhase;\r\n        eth = eth - ethToRefundPhase;\r\n        refund(ethToRefundPhase);\r\n        \r\n      }    \r\n    }\r\n\r\n    if (isPublic) {\r\n      if (public_sale_sold + tokens > publicSaleAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(publicSaleAmount, public_sale_sold, currentRate, tokens);\r\n        tokens = availableTokensPhase;\r\n        eth = eth - ethToRefundPhase;\r\n        refund(ethToRefundPhase);\r\n        \r\n      }\r\n    }\r\n\r\n    saveInfoAboutInvestors(msg.sender, eth, tokens);\r\n\r\n    if (isAngel) {\r\n      token.transferTokens(msg.sender, tokens, public_sale_start, 0);\r\n    } else {\r\n      // 0 - not freeze time; 4 - not freeze type currently;\r\n      token.transferTokens(msg.sender, tokens, 0, 4);\r\n    }\r\n\r\n    soldTokens = soldTokens + tokens;\r\n    \r\n    totalETH = totalETH + eth;\r\n  }"
      IfStatement
         Source: "if (now > angel_sale_finish && now < pre_sale_finish) {\r\n      isPreSale = true;\r\n      isAngel = false;\r\n    }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 438
           Source: "now > angel_sale_finish && now < pre_sale_finish"
          BinaryOperation using operator >
             Type: bool
             Source: "now > angel_sale_finish"
            Identifier now
               Type: uint256
               Source: "now"
            Identifier angel_sale_finish
               Type: uint256
               Source: "angel_sale_finish"
          BinaryOperation using operator <
             Type: bool
             Source: "now < pre_sale_finish"
            Identifier now
               Type: uint256
               Source: "now"
            Identifier pre_sale_finish
               Type: uint256
               Source: "pre_sale_finish"
        Block
           Source: "{\r\n      isPreSale = true;\r\n      isAngel = false;\r\n    }"
          ExpressionStatement
             Gas costs: 20317
             Source: "isPreSale = true"
            Assignment using operator =
               Type: bool
               Source: "isPreSale = true"
              Identifier isPreSale
                 Type: bool
                 Source: "isPreSale"
              Literal, token: true value: true
                 Type: bool
                 Source: "true"
          ExpressionStatement
             Gas costs: 20267
             Source: "isAngel = false"
            Assignment using operator =
               Type: bool
               Source: "isAngel = false"
              Identifier isAngel
                 Type: bool
                 Source: "isAngel"
              Literal, token: false value: false
                 Type: bool
                 Source: "false"
      IfStatement
         Source: "if (now > pre_sale_finish && now < public_sale_finish) {\r\n      isPreSale = false;\r\n      isAngel = false;\r\n      isPublic = true;\r\n    }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 438
           Source: "now > pre_sale_finish && now < public_sale_finish"
          BinaryOperation using operator >
             Type: bool
             Source: "now > pre_sale_finish"
            Identifier now
               Type: uint256
               Source: "now"
            Identifier pre_sale_finish
               Type: uint256
               Source: "pre_sale_finish"
          BinaryOperation using operator <
             Type: bool
             Source: "now < public_sale_finish"
            Identifier now
               Type: uint256
               Source: "now"
            Identifier public_sale_finish
               Type: uint256
               Source: "public_sale_finish"
        Block
           Source: "{\r\n      isPreSale = false;\r\n      isAngel = false;\r\n      isPublic = true;\r\n    }"
          ExpressionStatement
             Gas costs: 20317
             Source: "isPreSale = false"
            Assignment using operator =
               Type: bool
               Source: "isPreSale = false"
              Identifier isPreSale
                 Type: bool
                 Source: "isPreSale"
              Literal, token: false value: false
                 Type: bool
                 Source: "false"
          ExpressionStatement
             Gas costs: 20267
             Source: "isAngel = false"
            Assignment using operator =
               Type: bool
               Source: "isAngel = false"
              Identifier isAngel
                 Type: bool
                 Source: "isAngel"
              Literal, token: false value: false
                 Type: bool
                 Source: "false"
          ExpressionStatement
             Gas costs: 20317
             Source: "isPublic = true"
            Assignment using operator =
               Type: bool
               Source: "isPublic = true"
              Identifier isPublic
                 Type: bool
                 Source: "isPublic"
              Literal, token: true value: true
                 Type: bool
                 Source: "true"
      IfStatement
         Source: "if (now > angel_sale_finish && now < pre_sale_start) {\r\n      revert();\r\n    }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 438
           Source: "now > angel_sale_finish && now < pre_sale_start"
          BinaryOperation using operator >
             Type: bool
             Source: "now > angel_sale_finish"
            Identifier now
               Type: uint256
               Source: "now"
            Identifier angel_sale_finish
               Type: uint256
               Source: "angel_sale_finish"
          BinaryOperation using operator <
             Type: bool
             Source: "now < pre_sale_start"
            Identifier now
               Type: uint256
               Source: "now"
            Identifier pre_sale_start
               Type: uint256
               Source: "pre_sale_start"
        Block
           Source: "{\r\n      revert();\r\n    }"
          ExpressionStatement
             Gas costs: 6
             Source: "revert()"
            FunctionCall
               Type: tuple()
               Source: "revert()"
              Identifier revert
                 Type: function () pure
                 Source: "revert"
      IfStatement
         Source: "if (now > pre_sale_finish && now < public_sale_start) {\r\n      revert();\r\n    }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 438
           Source: "now > pre_sale_finish && now < public_sale_start"
          BinaryOperation using operator >
             Type: bool
             Source: "now > pre_sale_finish"
            Identifier now
               Type: uint256
               Source: "now"
            Identifier pre_sale_finish
               Type: uint256
               Source: "pre_sale_finish"
          BinaryOperation using operator <
             Type: bool
             Source: "now < public_sale_start"
            Identifier now
               Type: uint256
               Source: "now"
            Identifier public_sale_start
               Type: uint256
               Source: "public_sale_start"
        Block
           Source: "{\r\n      revert();\r\n    }"
          ExpressionStatement
             Gas costs: 6
             Source: "revert()"
            FunctionCall
               Type: tuple()
               Source: "revert()"
              Identifier revert
                 Type: function () pure
                 Source: "revert"
      IfStatement
         Source: "if (isAngel && angelAmount == angel_sale_sold) {\r\n      revert();\r\n    }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 670
           Source: "isAngel && angelAmount == angel_sale_sold"
          Identifier isAngel
             Type: bool
             Source: "isAngel"
          BinaryOperation using operator ==
             Type: bool
             Source: "angelAmount == angel_sale_sold"
            Identifier angelAmount
               Type: uint256
               Source: "angelAmount"
            Identifier angel_sale_sold
               Type: uint256
               Source: "angel_sale_sold"
        Block
           Source: "{\r\n      revert();\r\n    }"
          ExpressionStatement
             Gas costs: 6
             Source: "revert()"
            FunctionCall
               Type: tuple()
               Source: "revert()"
              Identifier revert
                 Type: function () pure
                 Source: "revert"
      IfStatement
         Source: "if (isPreSale && preSaleAmount == pre_sale_sold) {\r\n      revert();\r\n    }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 720
           Source: "isPreSale && preSaleAmount == pre_sale_sold"
          Identifier isPreSale
             Type: bool
             Source: "isPreSale"
          BinaryOperation using operator ==
             Type: bool
             Source: "preSaleAmount == pre_sale_sold"
            Identifier preSaleAmount
               Type: uint256
               Source: "preSaleAmount"
            Identifier pre_sale_sold
               Type: uint256
               Source: "pre_sale_sold"
        Block
           Source: "{\r\n      revert();\r\n    }"
          ExpressionStatement
             Gas costs: 6
             Source: "revert()"
            FunctionCall
               Type: tuple()
               Source: "revert()"
              Identifier revert
                 Type: function () pure
                 Source: "revert"
      IfStatement
         Source: "if (isPublic && publicSaleAmount == public_sale_sold) {\r\n      revert();\r\n    }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 720
           Source: "isPublic && publicSaleAmount == public_sale_sold"
          Identifier isPublic
             Type: bool
             Source: "isPublic"
          BinaryOperation using operator ==
             Type: bool
             Source: "publicSaleAmount == public_sale_sold"
            Identifier publicSaleAmount
               Type: uint256
               Source: "publicSaleAmount"
            Identifier public_sale_sold
               Type: uint256
               Source: "public_sale_sold"
        Block
           Source: "{\r\n      revert();\r\n    }"
          ExpressionStatement
             Gas costs: 6
             Source: "revert()"
            FunctionCall
               Type: tuple()
               Source: "revert()"
              Identifier revert
                 Type: function () pure
                 Source: "revert"
      ExpressionStatement
         Gas costs: 20026
         Source: "public_rate = calculateRate()"
        Assignment using operator =
           Type: uint256
           Source: "public_rate = calculateRate()"
          Identifier public_rate
             Type: uint256
             Source: "public_rate"
          FunctionCall
             Type: uint256
             Source: "calculateRate()"
            Identifier calculateRate
               Type: function () view returns (uint256)
               Source: "calculateRate"
      VariableDeclarationStatement
         Gas costs: 18
         Source: "uint256 eth = msg.value * 1E18"
        VariableDeclaration "eth"
           Type: uint256
           Source: "uint256 eth"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator *
           Type: uint256
           Source: "msg.value * 1E18"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
          Literal, token: [no token] value: 1E18
             Type: int_const 1000000000000000000
             Source: "1E18"
      VariableDeclarationStatement
         Gas costs: 11
         Source: "uint256 discountPrice = 0"
        VariableDeclaration "discountPrice"
           Type: uint256
           Source: "uint256 discountPrice"
          ElementaryTypeName uint256
             Source: "uint256"
        Literal, token: [no token] value: 0
           Type: int_const 0
           Source: "0"
      IfStatement
         Source: "if (isPreSale) {\r\n      discountPrice = calculatePrice(public_rate, 0);\r\n      pre_sale_totalETH = pre_sale_totalETH + eth;\r\n    }"
        Identifier isPreSale
           Type: bool
           Gas costs: 289
           Source: "isPreSale"
        Block
           Source: "{\r\n      discountPrice = calculatePrice(public_rate, 0);\r\n      pre_sale_totalETH = pre_sale_totalETH + eth;\r\n    }"
          ExpressionStatement
             Gas costs: 226
             Source: "discountPrice = calculatePrice(public_rate, 0)"
            Assignment using operator =
               Type: uint256
               Source: "discountPrice = calculatePrice(public_rate, 0)"
              Identifier discountPrice
                 Type: uint256
                 Source: "discountPrice"
              FunctionCall
                 Type: uint256
                 Source: "calculatePrice(public_rate, 0)"
                Identifier calculatePrice
                   Type: function (uint256,uint256) view returns (uint256)
                   Source: "calculatePrice"
                Identifier public_rate
                   Type: uint256
                   Source: "public_rate"
                Literal, token: [no token] value: 0
                   Type: int_const 0
                   Source: "0"
          ExpressionStatement
             Gas costs: 20220
             Source: "pre_sale_totalETH = pre_sale_totalETH + eth"
            Assignment using operator =
               Type: uint256
               Source: "pre_sale_totalETH = pre_sale_totalETH + eth"
              Identifier pre_sale_totalETH
                 Type: uint256
                 Source: "pre_sale_totalETH"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "pre_sale_totalETH + eth"
                Identifier pre_sale_totalETH
                   Type: uint256
                   Source: "pre_sale_totalETH"
                Identifier eth
                   Type: uint256
                   Source: "eth"
      IfStatement
         Source: "if (isAngel) {\r\n      discountPrice = public_rate.mul(angel_rate).div(100);\r\n      angel_sale_totalETH = angel_sale_totalETH + eth;\r\n    }"
        Identifier isAngel
           Type: bool
           Gas costs: 239
           Source: "isAngel"
        Block
           Source: "{\r\n      discountPrice = public_rate.mul(angel_rate).div(100);\r\n      angel_sale_totalETH = angel_sale_totalETH + eth;\r\n    }"
          ExpressionStatement
             Gas costs: 474
             Source: "discountPrice = public_rate.mul(angel_rate).div(100)"
            Assignment using operator =
               Type: uint256
               Source: "discountPrice = public_rate.mul(angel_rate).div(100)"
              Identifier discountPrice
                 Type: uint256
                 Source: "discountPrice"
              FunctionCall
                 Type: uint256
                 Source: "public_rate.mul(angel_rate).div(100)"
                MemberAccess to member div
                   Type: function (uint256,uint256) view returns (uint256)
                   Source: "public_rate.mul(angel_rate).div"
                  FunctionCall
                     Type: uint256
                     Source: "public_rate.mul(angel_rate)"
                    MemberAccess to member mul
                       Type: function (uint256,uint256) view returns (uint256)
                       Source: "public_rate.mul"
                      Identifier public_rate
                         Type: uint256
                         Source: "public_rate"
                    Identifier angel_rate
                       Type: uint256
                       Source: "angel_rate"
                Literal, token: [no token] value: 100
                   Type: int_const 100
                   Source: "100"
          ExpressionStatement
             Gas costs: 20220
             Source: "angel_sale_totalETH = angel_sale_totalETH + eth"
            Assignment using operator =
               Type: uint256
               Source: "angel_sale_totalETH = angel_sale_totalETH + eth"
              Identifier angel_sale_totalETH
                 Type: uint256
                 Source: "angel_sale_totalETH"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "angel_sale_totalETH + eth"
                Identifier angel_sale_totalETH
                   Type: uint256
                   Source: "angel_sale_totalETH"
                Identifier eth
                   Type: uint256
                   Source: "eth"
      VariableDeclarationStatement
         Gas costs: 11
         Source: "uint currentRate = 0"
        VariableDeclaration "currentRate"
           Type: uint256
           Source: "uint currentRate"
          ElementaryTypeName uint
             Source: "uint"
        Literal, token: [no token] value: 0
           Type: int_const 0
           Source: "0"
      IfStatement
         Source: "if (isPublic) {\r\n      currentRate = public_rate;\r\n      public_sale_totalETH = public_sale_totalETH + eth;\r\n    } else {\r\n      currentRate = discountPrice;\r\n    }"
        Identifier isPublic
           Type: bool
           Gas costs: 289
           Source: "isPublic"
        Block
           Source: "{\r\n      currentRate = public_rate;\r\n      public_sale_totalETH = public_sale_totalETH + eth;\r\n    }"
          ExpressionStatement
             Gas costs: 208
             Source: "currentRate = public_rate"
            Assignment using operator =
               Type: uint256
               Source: "currentRate = public_rate"
              Identifier currentRate
                 Type: uint256
                 Source: "currentRate"
              Identifier public_rate
                 Type: uint256
                 Source: "public_rate"
          ExpressionStatement
             Gas costs: 20220
             Source: "public_sale_totalETH = public_sale_totalETH + eth"
            Assignment using operator =
               Type: uint256
               Source: "public_sale_totalETH = public_sale_totalETH + eth"
              Identifier public_sale_totalETH
                 Type: uint256
                 Source: "public_sale_totalETH"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "public_sale_totalETH + eth"
                Identifier public_sale_totalETH
                   Type: uint256
                   Source: "public_sale_totalETH"
                Identifier eth
                   Type: uint256
                   Source: "eth"
        Block
           Source: "{\r\n      currentRate = discountPrice;\r\n    }"
          ExpressionStatement
             Gas costs: 8
             Source: "currentRate = discountPrice"
            Assignment using operator =
               Type: uint256
               Source: "currentRate = discountPrice"
              Identifier currentRate
                 Type: uint256
                 Source: "currentRate"
              Identifier discountPrice
                 Type: uint256
                 Source: "discountPrice"
      IfStatement
         Source: "if (eth < currentRate) {\r\n      revert();\r\n    }"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 9
           Source: "eth < currentRate"
          Identifier eth
             Type: uint256
             Source: "eth"
          Identifier currentRate
             Type: uint256
             Source: "currentRate"
        Block
           Source: "{\r\n      revert();\r\n    }"
          ExpressionStatement
             Gas costs: 6
             Source: "revert()"
            FunctionCall
               Type: tuple()
               Source: "revert()"
              Identifier revert
                 Type: function () pure
                 Source: "revert"
      VariableDeclarationStatement
         Gas costs: 44
         Source: "uint256 tokens = eth.div(currentRate)"
        VariableDeclaration "tokens"
           Type: uint256
           Source: "uint256 tokens"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "eth.div(currentRate)"
          MemberAccess to member div
             Type: function (uint256,uint256) view returns (uint256)
             Source: "eth.div"
            Identifier eth
               Type: uint256
               Source: "eth"
          Identifier currentRate
             Type: uint256
             Source: "currentRate"
      IfStatement
         Source: "if (isPublic && !moveTokens) {\r\n      if (angelAmount > angel_sale_sold) {\r\n        uint256 angelRemainder = angelAmount - angel_sale_sold;\r\n        publicSaleAmount = publicSaleAmount + angelRemainder;\r\n      }\r\n      if (preSaleAmount > pre_sale_sold) {\r\n        uint256 preSaleRemainder = preSaleAmount - pre_sale_sold;\r\n        publicSaleAmount = publicSaleAmount + preSaleRemainder;\r\n      }\r\n      moveTokens = true;\r\n    }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 553
           Source: "isPublic && !moveTokens"
          Identifier isPublic
             Type: bool
             Source: "isPublic"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!moveTokens"
            Identifier moveTokens
               Type: bool
               Source: "moveTokens"
        Block
           Source: "{\r\n      if (angelAmount > angel_sale_sold) {\r\n        uint256 angelRemainder = angelAmount - angel_sale_sold;\r\n        publicSaleAmount = publicSaleAmount + angelRemainder;\r\n      }\r\n      if (preSaleAmount > pre_sale_sold) {\r\n        uint256 preSaleRemainder = preSaleAmount - pre_sale_sold;\r\n        publicSaleAmount = publicSaleAmount + preSaleRemainder;\r\n      }\r\n      moveTokens = true;\r\n    }"
          IfStatement
             Source: "if (angelAmount > angel_sale_sold) {\r\n        uint256 angelRemainder = angelAmount - angel_sale_sold;\r\n        publicSaleAmount = publicSaleAmount + angelRemainder;\r\n      }"
            BinaryOperation using operator >
               Type: bool
               Gas costs: 409
               Source: "angelAmount > angel_sale_sold"
              Identifier angelAmount
                 Type: uint256
                 Source: "angelAmount"
              Identifier angel_sale_sold
                 Type: uint256
                 Source: "angel_sale_sold"
            Block
               Source: "{\r\n        uint256 angelRemainder = angelAmount - angel_sale_sold;\r\n        publicSaleAmount = publicSaleAmount + angelRemainder;\r\n      }"
              VariableDeclarationStatement
                 Gas costs: 417
                 Source: "uint256 angelRemainder = angelAmount - angel_sale_sold"
                VariableDeclaration "angelRemainder"
                   Type: uint256
                   Source: "uint256 angelRemainder"
                  ElementaryTypeName uint256
                     Source: "uint256"
                BinaryOperation using operator -
                   Type: uint256
                   Source: "angelAmount - angel_sale_sold"
                  Identifier angelAmount
                     Type: uint256
                     Source: "angelAmount"
                  Identifier angel_sale_sold
                     Type: uint256
                     Source: "angel_sale_sold"
              ExpressionStatement
                 Gas costs: 20220
                 Source: "publicSaleAmount = publicSaleAmount + angelRemainder"
                Assignment using operator =
                   Type: uint256
                   Source: "publicSaleAmount = publicSaleAmount + angelRemainder"
                  Identifier publicSaleAmount
                     Type: uint256
                     Source: "publicSaleAmount"
                  BinaryOperation using operator +
                     Type: uint256
                     Source: "publicSaleAmount + angelRemainder"
                    Identifier publicSaleAmount
                       Type: uint256
                       Source: "publicSaleAmount"
                    Identifier angelRemainder
                       Type: uint256
                       Source: "angelRemainder"
          IfStatement
             Source: "if (preSaleAmount > pre_sale_sold) {\r\n        uint256 preSaleRemainder = preSaleAmount - pre_sale_sold;\r\n        publicSaleAmount = publicSaleAmount + preSaleRemainder;\r\n      }"
            BinaryOperation using operator >
               Type: bool
               Gas costs: 409
               Source: "preSaleAmount > pre_sale_sold"
              Identifier preSaleAmount
                 Type: uint256
                 Source: "preSaleAmount"
              Identifier pre_sale_sold
                 Type: uint256
                 Source: "pre_sale_sold"
            Block
               Source: "{\r\n        uint256 preSaleRemainder = preSaleAmount - pre_sale_sold;\r\n        publicSaleAmount = publicSaleAmount + preSaleRemainder;\r\n      }"
              VariableDeclarationStatement
                 Gas costs: 417
                 Source: "uint256 preSaleRemainder = preSaleAmount - pre_sale_sold"
                VariableDeclaration "preSaleRemainder"
                   Type: uint256
                   Source: "uint256 preSaleRemainder"
                  ElementaryTypeName uint256
                     Source: "uint256"
                BinaryOperation using operator -
                   Type: uint256
                   Source: "preSaleAmount - pre_sale_sold"
                  Identifier preSaleAmount
                     Type: uint256
                     Source: "preSaleAmount"
                  Identifier pre_sale_sold
                     Type: uint256
                     Source: "pre_sale_sold"
              ExpressionStatement
                 Gas costs: 20220
                 Source: "publicSaleAmount = publicSaleAmount + preSaleRemainder"
                Assignment using operator =
                   Type: uint256
                   Source: "publicSaleAmount = publicSaleAmount + preSaleRemainder"
                  Identifier publicSaleAmount
                     Type: uint256
                     Source: "publicSaleAmount"
                  BinaryOperation using operator +
                     Type: uint256
                     Source: "publicSaleAmount + preSaleRemainder"
                    Identifier publicSaleAmount
                       Type: uint256
                       Source: "publicSaleAmount"
                    Identifier preSaleRemainder
                       Type: uint256
                       Source: "preSaleRemainder"
          ExpressionStatement
             Gas costs: 20267
             Source: "moveTokens = true"
            Assignment using operator =
               Type: bool
               Source: "moveTokens = true"
              Identifier moveTokens
                 Type: bool
                 Source: "moveTokens"
              Literal, token: true value: true
                 Type: bool
                 Source: "true"
      IfStatement
         Source: "if (isPreSale) {\r\n      uint256 availableTokensPhase = 0;\r\n      uint256 ethToRefundPhase = 0;\r\n\r\n      uint256 remETH = 0;\r\n\r\n      uint256 totalTokensPhase = 0;\r\n\r\n      if (currentPhase == 1 && pre_sale_sold + tokens > firstPhaseAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(firstPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = availableTokensPhase;\r\n\r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 2;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }\r\n\r\n      if (currentPhase == 2 && pre_sale_sold + tokens + totalTokensPhase > secondPhaseAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(secondPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = totalTokensPhase + availableTokensPhase;\r\n        \r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 3;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }\r\n\r\n      if (currentPhase == 3 && pre_sale_sold + tokens + totalTokensPhase > thirdPhaseAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(thirdPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = totalTokensPhase + availableTokensPhase;\r\n        \r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 4;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }\r\n\r\n      if (currentPhase == 4 && pre_sale_sold + tokens + totalTokensPhase > fourPhaseAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(fourPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = totalTokensPhase + availableTokensPhase;\r\n        \r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 0;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }\r\n\r\n      tokens = tokens + totalTokensPhase;\r\n    }"
        Identifier isPreSale
           Type: bool
           Gas costs: 289
           Source: "isPreSale"
        Block
           Source: "{\r\n      uint256 availableTokensPhase = 0;\r\n      uint256 ethToRefundPhase = 0;\r\n\r\n      uint256 remETH = 0;\r\n\r\n      uint256 totalTokensPhase = 0;\r\n\r\n      if (currentPhase == 1 && pre_sale_sold + tokens > firstPhaseAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(firstPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = availableTokensPhase;\r\n\r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 2;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }\r\n\r\n      if (currentPhase == 2 && pre_sale_sold + tokens + totalTokensPhase > secondPhaseAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(secondPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = totalTokensPhase + availableTokensPhase;\r\n        \r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 3;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }\r\n\r\n      if (currentPhase == 3 && pre_sale_sold + tokens + totalTokensPhase > thirdPhaseAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(thirdPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = totalTokensPhase + availableTokensPhase;\r\n        \r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 4;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }\r\n\r\n      if (currentPhase == 4 && pre_sale_sold + tokens + totalTokensPhase > fourPhaseAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(fourPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = totalTokensPhase + availableTokensPhase;\r\n        \r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 0;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }\r\n\r\n      tokens = tokens + totalTokensPhase;\r\n    }"
          VariableDeclarationStatement
             Gas costs: 11
             Source: "uint256 availableTokensPhase = 0"
            VariableDeclaration "availableTokensPhase"
               Type: uint256
               Source: "uint256 availableTokensPhase"
              ElementaryTypeName uint256
                 Source: "uint256"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
          VariableDeclarationStatement
             Gas costs: 11
             Source: "uint256 ethToRefundPhase = 0"
            VariableDeclaration "ethToRefundPhase"
               Type: uint256
               Source: "uint256 ethToRefundPhase"
              ElementaryTypeName uint256
                 Source: "uint256"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
          VariableDeclarationStatement
             Gas costs: 11
             Source: "uint256 remETH = 0"
            VariableDeclaration "remETH"
               Type: uint256
               Source: "uint256 remETH"
              ElementaryTypeName uint256
                 Source: "uint256"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
          VariableDeclarationStatement
             Gas costs: 11
             Source: "uint256 totalTokensPhase = 0"
            VariableDeclaration "totalTokensPhase"
               Type: uint256
               Source: "uint256 totalTokensPhase"
              ElementaryTypeName uint256
                 Source: "uint256"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
          IfStatement
             Source: "if (currentPhase == 1 && pre_sale_sold + tokens > firstPhaseAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(firstPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = availableTokensPhase;\r\n\r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 2;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }"
            BinaryOperation using operator &&
               Type: bool
               Gas costs: 646
               Source: "currentPhase == 1 && pre_sale_sold + tokens > firstPhaseAmount"
              BinaryOperation using operator ==
                 Type: bool
                 Source: "currentPhase == 1"
                Identifier currentPhase
                   Type: uint256
                   Source: "currentPhase"
                Literal, token: [no token] value: 1
                   Type: int_const 1
                   Source: "1"
              BinaryOperation using operator >
                 Type: bool
                 Source: "pre_sale_sold + tokens > firstPhaseAmount"
                BinaryOperation using operator +
                   Type: uint256
                   Source: "pre_sale_sold + tokens"
                  Identifier pre_sale_sold
                     Type: uint256
                     Source: "pre_sale_sold"
                  Identifier tokens
                     Type: uint256
                     Source: "tokens"
                Identifier firstPhaseAmount
                   Type: uint256
                   Source: "firstPhaseAmount"
            Block
               Source: "{\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(firstPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = availableTokensPhase;\r\n\r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 2;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }"
              ExpressionStatement
                 Gas costs: 436
                 Source: "(availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(firstPhaseAmount, pre_sale_sold, currentRate, tokens)"
                Assignment using operator =
                   Type: tuple()
                   Source: "(availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(firstPhaseAmount, pre_sale_sold, currentRate, tokens)"
                  TupleExpression
                     Type: tuple(uint256,uint256)
                     Source: "(availableTokensPhase, ethToRefundPhase)"
                    Identifier availableTokensPhase
                       Type: uint256
                       Source: "availableTokensPhase"
                    Identifier ethToRefundPhase
                       Type: uint256
                       Source: "ethToRefundPhase"
                  FunctionCall
                     Type: tuple(uint256,uint256)
                     Source: "calculateMinorRefund(firstPhaseAmount, pre_sale_sold, currentRate, tokens)"
                    Identifier calculateMinorRefund
                       Type: function (uint256,uint256,uint256,uint256) returns (uint256,uint256)
                       Source: "calculateMinorRefund"
                    Identifier firstPhaseAmount
                       Type: uint256
                       Source: "firstPhaseAmount"
                    Identifier pre_sale_sold
                       Type: uint256
                       Source: "pre_sale_sold"
                    Identifier currentRate
                       Type: uint256
                       Source: "currentRate"
                    Identifier tokens
                       Type: uint256
                       Source: "tokens"
              ExpressionStatement
                 Gas costs: 8
                 Source: "totalTokensPhase = availableTokensPhase"
                Assignment using operator =
                   Type: uint256
                   Source: "totalTokensPhase = availableTokensPhase"
                  Identifier totalTokensPhase
                     Type: uint256
                     Source: "totalTokensPhase"
                  Identifier availableTokensPhase
                     Type: uint256
                     Source: "availableTokensPhase"
              ExpressionStatement
                 Gas costs: 8
                 Source: "remETH = ethToRefundPhase"
                Assignment using operator =
                   Type: uint256
                   Source: "remETH = ethToRefundPhase"
                  Identifier remETH
                     Type: uint256
                     Source: "remETH"
                  Identifier ethToRefundPhase
                     Type: uint256
                     Source: "ethToRefundPhase"
              ExpressionStatement
                 Gas costs: 20014
                 Source: "currentPhase = 2"
                Assignment using operator =
                   Type: uint256
                   Source: "currentPhase = 2"
                  Identifier currentPhase
                     Type: uint256
                     Source: "currentPhase"
                  Literal, token: [no token] value: 2
                     Type: int_const 2
                     Source: "2"
              ExpressionStatement
                 Gas costs: 215
                 Source: "currentRate = calculatePrice(pre_sale_sold, totalTokensPhase)"
                Assignment using operator =
                   Type: uint256
                   Source: "currentRate = calculatePrice(pre_sale_sold, totalTokensPhase)"
                  Identifier currentRate
                     Type: uint256
                     Source: "currentRate"
                  FunctionCall
                     Type: uint256
                     Source: "calculatePrice(pre_sale_sold, totalTokensPhase)"
                    Identifier calculatePrice
                       Type: function (uint256,uint256) view returns (uint256)
                       Source: "calculatePrice"
                    Identifier pre_sale_sold
                       Type: uint256
                       Source: "pre_sale_sold"
                    Identifier totalTokensPhase
                       Type: uint256
                       Source: "totalTokensPhase"
              ExpressionStatement
                 Gas costs: 41
                 Source: "tokens = remETH.div(currentRate)"
                Assignment using operator =
                   Type: uint256
                   Source: "tokens = remETH.div(currentRate)"
                  Identifier tokens
                     Type: uint256
                     Source: "tokens"
                  FunctionCall
                     Type: uint256
                     Source: "remETH.div(currentRate)"
                    MemberAccess to member div
                       Type: function (uint256,uint256) view returns (uint256)
                       Source: "remETH.div"
                      Identifier remETH
                         Type: uint256
                         Source: "remETH"
                    Identifier currentRate
                       Type: uint256
                       Source: "currentRate"
          IfStatement
             Source: "if (currentPhase == 2 && pre_sale_sold + tokens + totalTokensPhase > secondPhaseAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(secondPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = totalTokensPhase + availableTokensPhase;\r\n        \r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 3;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }"
            BinaryOperation using operator &&
               Type: bool
               Gas costs: 652
               Source: "currentPhase == 2 && pre_sale_sold + tokens + totalTokensPhase > secondPhaseAmount"
              BinaryOperation using operator ==
                 Type: bool
                 Source: "currentPhase == 2"
                Identifier currentPhase
                   Type: uint256
                   Source: "currentPhase"
                Literal, token: [no token] value: 2
                   Type: int_const 2
                   Source: "2"
              BinaryOperation using operator >
                 Type: bool
                 Source: "pre_sale_sold + tokens + totalTokensPhase > secondPhaseAmount"
                BinaryOperation using operator +
                   Type: uint256
                   Source: "pre_sale_sold + tokens + totalTokensPhase"
                  BinaryOperation using operator +
                     Type: uint256
                     Source: "pre_sale_sold + tokens"
                    Identifier pre_sale_sold
                       Type: uint256
                       Source: "pre_sale_sold"
                    Identifier tokens
                       Type: uint256
                       Source: "tokens"
                  Identifier totalTokensPhase
                     Type: uint256
                     Source: "totalTokensPhase"
                Identifier secondPhaseAmount
                   Type: uint256
                   Source: "secondPhaseAmount"
            Block
               Source: "{\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(secondPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = totalTokensPhase + availableTokensPhase;\r\n        \r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 3;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }"
              ExpressionStatement
                 Gas costs: 447
                 Source: "(availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(secondPhaseAmount, pre_sale_sold, currentRate, tokens)"
                Assignment using operator =
                   Type: tuple()
                   Source: "(availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(secondPhaseAmount, pre_sale_sold, currentRate, tokens)"
                  TupleExpression
                     Type: tuple(uint256,uint256)
                     Source: "(availableTokensPhase, ethToRefundPhase)"
                    Identifier availableTokensPhase
                       Type: uint256
                       Source: "availableTokensPhase"
                    Identifier ethToRefundPhase
                       Type: uint256
                       Source: "ethToRefundPhase"
                  FunctionCall
                     Type: tuple(uint256,uint256)
                     Source: "calculateMinorRefund(secondPhaseAmount, pre_sale_sold, currentRate, tokens)"
                    Identifier calculateMinorRefund
                       Type: function (uint256,uint256,uint256,uint256) returns (uint256,uint256)
                       Source: "calculateMinorRefund"
                    Identifier secondPhaseAmount
                       Type: uint256
                       Source: "secondPhaseAmount"
                    Identifier pre_sale_sold
                       Type: uint256
                       Source: "pre_sale_sold"
                    Identifier currentRate
                       Type: uint256
                       Source: "currentRate"
                    Identifier tokens
                       Type: uint256
                       Source: "tokens"
              ExpressionStatement
                 Gas costs: 14
                 Source: "totalTokensPhase = totalTokensPhase + availableTokensPhase"
                Assignment using operator =
                   Type: uint256
                   Source: "totalTokensPhase = totalTokensPhase + availableTokensPhase"
                  Identifier totalTokensPhase
                     Type: uint256
                     Source: "totalTokensPhase"
                  BinaryOperation using operator +
                     Type: uint256
                     Source: "totalTokensPhase + availableTokensPhase"
                    Identifier totalTokensPhase
                       Type: uint256
                       Source: "totalTokensPhase"
                    Identifier availableTokensPhase
                       Type: uint256
                       Source: "availableTokensPhase"
              ExpressionStatement
                 Gas costs: 8
                 Source: "remETH = ethToRefundPhase"
                Assignment using operator =
                   Type: uint256
                   Source: "remETH = ethToRefundPhase"
                  Identifier remETH
                     Type: uint256
                     Source: "remETH"
                  Identifier ethToRefundPhase
                     Type: uint256
                     Source: "ethToRefundPhase"
              ExpressionStatement
                 Gas costs: 20014
                 Source: "currentPhase = 3"
                Assignment using operator =
                   Type: uint256
                   Source: "currentPhase = 3"
                  Identifier currentPhase
                     Type: uint256
                     Source: "currentPhase"
                  Literal, token: [no token] value: 3
                     Type: int_const 3
                     Source: "3"
              ExpressionStatement
                 Gas costs: 226
                 Source: "currentRate = calculatePrice(pre_sale_sold, totalTokensPhase)"
                Assignment using operator =
                   Type: uint256
                   Source: "currentRate = calculatePrice(pre_sale_sold, totalTokensPhase)"
                  Identifier currentRate
                     Type: uint256
                     Source: "currentRate"
                  FunctionCall
                     Type: uint256
                     Source: "calculatePrice(pre_sale_sold, totalTokensPhase)"
                    Identifier calculatePrice
                       Type: function (uint256,uint256) view returns (uint256)
                       Source: "calculatePrice"
                    Identifier pre_sale_sold
                       Type: uint256
                       Source: "pre_sale_sold"
                    Identifier totalTokensPhase
                       Type: uint256
                       Source: "totalTokensPhase"
              ExpressionStatement
                 Gas costs: 41
                 Source: "tokens = remETH.div(currentRate)"
                Assignment using operator =
                   Type: uint256
                   Source: "tokens = remETH.div(currentRate)"
                  Identifier tokens
                     Type: uint256
                     Source: "tokens"
                  FunctionCall
                     Type: uint256
                     Source: "remETH.div(currentRate)"
                    MemberAccess to member div
                       Type: function (uint256,uint256) view returns (uint256)
                       Source: "remETH.div"
                      Identifier remETH
                         Type: uint256
                         Source: "remETH"
                    Identifier currentRate
                       Type: uint256
                       Source: "currentRate"
          IfStatement
             Source: "if (currentPhase == 3 && pre_sale_sold + tokens + totalTokensPhase > thirdPhaseAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(thirdPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = totalTokensPhase + availableTokensPhase;\r\n        \r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 4;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }"
            BinaryOperation using operator &&
               Type: bool
               Gas costs: 652
               Source: "currentPhase == 3 && pre_sale_sold + tokens + totalTokensPhase > thirdPhaseAmount"
              BinaryOperation using operator ==
                 Type: bool
                 Source: "currentPhase == 3"
                Identifier currentPhase
                   Type: uint256
                   Source: "currentPhase"
                Literal, token: [no token] value: 3
                   Type: int_const 3
                   Source: "3"
              BinaryOperation using operator >
                 Type: bool
                 Source: "pre_sale_sold + tokens + totalTokensPhase > thirdPhaseAmount"
                BinaryOperation using operator +
                   Type: uint256
                   Source: "pre_sale_sold + tokens + totalTokensPhase"
                  BinaryOperation using operator +
                     Type: uint256
                     Source: "pre_sale_sold + tokens"
                    Identifier pre_sale_sold
                       Type: uint256
                       Source: "pre_sale_sold"
                    Identifier tokens
                       Type: uint256
                       Source: "tokens"
                  Identifier totalTokensPhase
                     Type: uint256
                     Source: "totalTokensPhase"
                Identifier thirdPhaseAmount
                   Type: uint256
                   Source: "thirdPhaseAmount"
            Block
               Source: "{\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(thirdPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = totalTokensPhase + availableTokensPhase;\r\n        \r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 4;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }"
              ExpressionStatement
                 Gas costs: 447
                 Source: "(availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(thirdPhaseAmount, pre_sale_sold, currentRate, tokens)"
                Assignment using operator =
                   Type: tuple()
                   Source: "(availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(thirdPhaseAmount, pre_sale_sold, currentRate, tokens)"
                  TupleExpression
                     Type: tuple(uint256,uint256)
                     Source: "(availableTokensPhase, ethToRefundPhase)"
                    Identifier availableTokensPhase
                       Type: uint256
                       Source: "availableTokensPhase"
                    Identifier ethToRefundPhase
                       Type: uint256
                       Source: "ethToRefundPhase"
                  FunctionCall
                     Type: tuple(uint256,uint256)
                     Source: "calculateMinorRefund(thirdPhaseAmount, pre_sale_sold, currentRate, tokens)"
                    Identifier calculateMinorRefund
                       Type: function (uint256,uint256,uint256,uint256) returns (uint256,uint256)
                       Source: "calculateMinorRefund"
                    Identifier thirdPhaseAmount
                       Type: uint256
                       Source: "thirdPhaseAmount"
                    Identifier pre_sale_sold
                       Type: uint256
                       Source: "pre_sale_sold"
                    Identifier currentRate
                       Type: uint256
                       Source: "currentRate"
                    Identifier tokens
                       Type: uint256
                       Source: "tokens"
              ExpressionStatement
                 Gas costs: 14
                 Source: "totalTokensPhase = totalTokensPhase + availableTokensPhase"
                Assignment using operator =
                   Type: uint256
                   Source: "totalTokensPhase = totalTokensPhase + availableTokensPhase"
                  Identifier totalTokensPhase
                     Type: uint256
                     Source: "totalTokensPhase"
                  BinaryOperation using operator +
                     Type: uint256
                     Source: "totalTokensPhase + availableTokensPhase"
                    Identifier totalTokensPhase
                       Type: uint256
                       Source: "totalTokensPhase"
                    Identifier availableTokensPhase
                       Type: uint256
                       Source: "availableTokensPhase"
              ExpressionStatement
                 Gas costs: 8
                 Source: "remETH = ethToRefundPhase"
                Assignment using operator =
                   Type: uint256
                   Source: "remETH = ethToRefundPhase"
                  Identifier remETH
                     Type: uint256
                     Source: "remETH"
                  Identifier ethToRefundPhase
                     Type: uint256
                     Source: "ethToRefundPhase"
              ExpressionStatement
                 Gas costs: 20014
                 Source: "currentPhase = 4"
                Assignment using operator =
                   Type: uint256
                   Source: "currentPhase = 4"
                  Identifier currentPhase
                     Type: uint256
                     Source: "currentPhase"
                  Literal, token: [no token] value: 4
                     Type: int_const 4
                     Source: "4"
              ExpressionStatement
                 Gas costs: 226
                 Source: "currentRate = calculatePrice(pre_sale_sold, totalTokensPhase)"
                Assignment using operator =
                   Type: uint256
                   Source: "currentRate = calculatePrice(pre_sale_sold, totalTokensPhase)"
                  Identifier currentRate
                     Type: uint256
                     Source: "currentRate"
                  FunctionCall
                     Type: uint256
                     Source: "calculatePrice(pre_sale_sold, totalTokensPhase)"
                    Identifier calculatePrice
                       Type: function (uint256,uint256) view returns (uint256)
                       Source: "calculatePrice"
                    Identifier pre_sale_sold
                       Type: uint256
                       Source: "pre_sale_sold"
                    Identifier totalTokensPhase
                       Type: uint256
                       Source: "totalTokensPhase"
              ExpressionStatement
                 Gas costs: 41
                 Source: "tokens = remETH.div(currentRate)"
                Assignment using operator =
                   Type: uint256
                   Source: "tokens = remETH.div(currentRate)"
                  Identifier tokens
                     Type: uint256
                     Source: "tokens"
                  FunctionCall
                     Type: uint256
                     Source: "remETH.div(currentRate)"
                    MemberAccess to member div
                       Type: function (uint256,uint256) view returns (uint256)
                       Source: "remETH.div"
                      Identifier remETH
                         Type: uint256
                         Source: "remETH"
                    Identifier currentRate
                       Type: uint256
                       Source: "currentRate"
          IfStatement
             Source: "if (currentPhase == 4 && pre_sale_sold + tokens + totalTokensPhase > fourPhaseAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(fourPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = totalTokensPhase + availableTokensPhase;\r\n        \r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 0;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }"
            BinaryOperation using operator &&
               Type: bool
               Gas costs: 652
               Source: "currentPhase == 4 && pre_sale_sold + tokens + totalTokensPhase > fourPhaseAmount"
              BinaryOperation using operator ==
                 Type: bool
                 Source: "currentPhase == 4"
                Identifier currentPhase
                   Type: uint256
                   Source: "currentPhase"
                Literal, token: [no token] value: 4
                   Type: int_const 4
                   Source: "4"
              BinaryOperation using operator >
                 Type: bool
                 Source: "pre_sale_sold + tokens + totalTokensPhase > fourPhaseAmount"
                BinaryOperation using operator +
                   Type: uint256
                   Source: "pre_sale_sold + tokens + totalTokensPhase"
                  BinaryOperation using operator +
                     Type: uint256
                     Source: "pre_sale_sold + tokens"
                    Identifier pre_sale_sold
                       Type: uint256
                       Source: "pre_sale_sold"
                    Identifier tokens
                       Type: uint256
                       Source: "tokens"
                  Identifier totalTokensPhase
                     Type: uint256
                     Source: "totalTokensPhase"
                Identifier fourPhaseAmount
                   Type: uint256
                   Source: "fourPhaseAmount"
            Block
               Source: "{\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(fourPhaseAmount, pre_sale_sold, currentRate, tokens);\r\n        totalTokensPhase = totalTokensPhase + availableTokensPhase;\r\n        \r\n        remETH = ethToRefundPhase;\r\n\r\n        currentPhase = 0;\r\n\r\n        currentRate = calculatePrice(pre_sale_sold, totalTokensPhase);\r\n        tokens = remETH.div(currentRate);\r\n      }"
              ExpressionStatement
                 Gas costs: 447
                 Source: "(availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(fourPhaseAmount, pre_sale_sold, currentRate, tokens)"
                Assignment using operator =
                   Type: tuple()
                   Source: "(availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(fourPhaseAmount, pre_sale_sold, currentRate, tokens)"
                  TupleExpression
                     Type: tuple(uint256,uint256)
                     Source: "(availableTokensPhase, ethToRefundPhase)"
                    Identifier availableTokensPhase
                       Type: uint256
                       Source: "availableTokensPhase"
                    Identifier ethToRefundPhase
                       Type: uint256
                       Source: "ethToRefundPhase"
                  FunctionCall
                     Type: tuple(uint256,uint256)
                     Source: "calculateMinorRefund(fourPhaseAmount, pre_sale_sold, currentRate, tokens)"
                    Identifier calculateMinorRefund
                       Type: function (uint256,uint256,uint256,uint256) returns (uint256,uint256)
                       Source: "calculateMinorRefund"
                    Identifier fourPhaseAmount
                       Type: uint256
                       Source: "fourPhaseAmount"
                    Identifier pre_sale_sold
                       Type: uint256
                       Source: "pre_sale_sold"
                    Identifier currentRate
                       Type: uint256
                       Source: "currentRate"
                    Identifier tokens
                       Type: uint256
                       Source: "tokens"
              ExpressionStatement
                 Gas costs: 14
                 Source: "totalTokensPhase = totalTokensPhase + availableTokensPhase"
                Assignment using operator =
                   Type: uint256
                   Source: "totalTokensPhase = totalTokensPhase + availableTokensPhase"
                  Identifier totalTokensPhase
                     Type: uint256
                     Source: "totalTokensPhase"
                  BinaryOperation using operator +
                     Type: uint256
                     Source: "totalTokensPhase + availableTokensPhase"
                    Identifier totalTokensPhase
                       Type: uint256
                       Source: "totalTokensPhase"
                    Identifier availableTokensPhase
                       Type: uint256
                       Source: "availableTokensPhase"
              ExpressionStatement
                 Gas costs: 8
                 Source: "remETH = ethToRefundPhase"
                Assignment using operator =
                   Type: uint256
                   Source: "remETH = ethToRefundPhase"
                  Identifier remETH
                     Type: uint256
                     Source: "remETH"
                  Identifier ethToRefundPhase
                     Type: uint256
                     Source: "ethToRefundPhase"
              ExpressionStatement
                 Gas costs: 5014
                 Source: "currentPhase = 0"
                Assignment using operator =
                   Type: uint256
                   Source: "currentPhase = 0"
                  Identifier currentPhase
                     Type: uint256
                     Source: "currentPhase"
                  Literal, token: [no token] value: 0
                     Type: int_const 0
                     Source: "0"
              ExpressionStatement
                 Gas costs: 226
                 Source: "currentRate = calculatePrice(pre_sale_sold, totalTokensPhase)"
                Assignment using operator =
                   Type: uint256
                   Source: "currentRate = calculatePrice(pre_sale_sold, totalTokensPhase)"
                  Identifier currentRate
                     Type: uint256
                     Source: "currentRate"
                  FunctionCall
                     Type: uint256
                     Source: "calculatePrice(pre_sale_sold, totalTokensPhase)"
                    Identifier calculatePrice
                       Type: function (uint256,uint256) view returns (uint256)
                       Source: "calculatePrice"
                    Identifier pre_sale_sold
                       Type: uint256
                       Source: "pre_sale_sold"
                    Identifier totalTokensPhase
                       Type: uint256
                       Source: "totalTokensPhase"
              ExpressionStatement
                 Gas costs: 41
                 Source: "tokens = remETH.div(currentRate)"
                Assignment using operator =
                   Type: uint256
                   Source: "tokens = remETH.div(currentRate)"
                  Identifier tokens
                     Type: uint256
                     Source: "tokens"
                  FunctionCall
                     Type: uint256
                     Source: "remETH.div(currentRate)"
                    MemberAccess to member div
                       Type: function (uint256,uint256) view returns (uint256)
                       Source: "remETH.div"
                      Identifier remETH
                         Type: uint256
                         Source: "remETH"
                    Identifier currentRate
                       Type: uint256
                       Source: "currentRate"
          ExpressionStatement
             Gas costs: 14
             Source: "tokens = tokens + totalTokensPhase"
            Assignment using operator =
               Type: uint256
               Source: "tokens = tokens + totalTokensPhase"
              Identifier tokens
                 Type: uint256
                 Source: "tokens"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "tokens + totalTokensPhase"
                Identifier tokens
                   Type: uint256
                   Source: "tokens"
                Identifier totalTokensPhase
                   Type: uint256
                   Source: "totalTokensPhase"
      IfStatement
         Source: "if (isPreSale) {\r\n      if (pre_sale_sold + tokens > preSaleAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(preSaleAmount, pre_sale_sold, currentRate, tokens);\r\n        tokens = availableTokensPhase;\r\n        eth = eth - ethToRefundPhase;\r\n        refund(ethToRefundPhase);\r\n      }\r\n    }"
        Identifier isPreSale
           Type: bool
           Gas costs: 289
           Source: "isPreSale"
        Block
           Source: "{\r\n      if (pre_sale_sold + tokens > preSaleAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(preSaleAmount, pre_sale_sold, currentRate, tokens);\r\n        tokens = availableTokensPhase;\r\n        eth = eth - ethToRefundPhase;\r\n        refund(ethToRefundPhase);\r\n      }\r\n    }"
          IfStatement
             Source: "if (pre_sale_sold + tokens > preSaleAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(preSaleAmount, pre_sale_sold, currentRate, tokens);\r\n        tokens = availableTokensPhase;\r\n        eth = eth - ethToRefundPhase;\r\n        refund(ethToRefundPhase);\r\n      }"
            BinaryOperation using operator >
               Type: bool
               Gas costs: 415
               Source: "pre_sale_sold + tokens > preSaleAmount"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "pre_sale_sold + tokens"
                Identifier pre_sale_sold
                   Type: uint256
                   Source: "pre_sale_sold"
                Identifier tokens
                   Type: uint256
                   Source: "tokens"
              Identifier preSaleAmount
                 Type: uint256
                 Source: "preSaleAmount"
            Block
               Source: "{\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(preSaleAmount, pre_sale_sold, currentRate, tokens);\r\n        tokens = availableTokensPhase;\r\n        eth = eth - ethToRefundPhase;\r\n        refund(ethToRefundPhase);\r\n      }"
              ExpressionStatement
                 Gas costs: 447
                 Source: "(availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(preSaleAmount, pre_sale_sold, currentRate, tokens)"
                Assignment using operator =
                   Type: tuple()
                   Source: "(availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(preSaleAmount, pre_sale_sold, currentRate, tokens)"
                  TupleExpression
                     Type: tuple(uint256,uint256)
                     Source: "(availableTokensPhase, ethToRefundPhase)"
                    Identifier availableTokensPhase
                       Type: uint256
                       Source: "availableTokensPhase"
                    Identifier ethToRefundPhase
                       Type: uint256
                       Source: "ethToRefundPhase"
                  FunctionCall
                     Type: tuple(uint256,uint256)
                     Source: "calculateMinorRefund(preSaleAmount, pre_sale_sold, currentRate, tokens)"
                    Identifier calculateMinorRefund
                       Type: function (uint256,uint256,uint256,uint256) returns (uint256,uint256)
                       Source: "calculateMinorRefund"
                    Identifier preSaleAmount
                       Type: uint256
                       Source: "preSaleAmount"
                    Identifier pre_sale_sold
                       Type: uint256
                       Source: "pre_sale_sold"
                    Identifier currentRate
                       Type: uint256
                       Source: "currentRate"
                    Identifier tokens
                       Type: uint256
                       Source: "tokens"
              ExpressionStatement
                 Gas costs: 8
                 Source: "tokens = availableTokensPhase"
                Assignment using operator =
                   Type: uint256
                   Source: "tokens = availableTokensPhase"
                  Identifier tokens
                     Type: uint256
                     Source: "tokens"
                  Identifier availableTokensPhase
                     Type: uint256
                     Source: "availableTokensPhase"
              ExpressionStatement
                 Gas costs: 14
                 Source: "eth = eth - ethToRefundPhase"
                Assignment using operator =
                   Type: uint256
                   Source: "eth = eth - ethToRefundPhase"
                  Identifier eth
                     Type: uint256
                     Source: "eth"
                  BinaryOperation using operator -
                     Type: uint256
                     Source: "eth - ethToRefundPhase"
                    Identifier eth
                       Type: uint256
                       Source: "eth"
                    Identifier ethToRefundPhase
                       Type: uint256
                       Source: "ethToRefundPhase"
              ExpressionStatement
                 Gas costs: 7
                 Source: "refund(ethToRefundPhase)"
                FunctionCall
                   Type: tuple()
                   Source: "refund(ethToRefundPhase)"
                  Identifier refund
                     Type: function (uint256)
                     Source: "refund"
                  Identifier ethToRefundPhase
                     Type: uint256
                     Source: "ethToRefundPhase"
      IfStatement
         Source: "if (isAngel) {\r\n      if (angel_sale_sold + tokens > angelAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(angelAmount, angel_sale_sold, currentRate, tokens);\r\n        tokens = availableTokensPhase;\r\n        eth = eth - ethToRefundPhase;\r\n        refund(ethToRefundPhase);\r\n        \r\n      }    \r\n    }"
        Identifier isAngel
           Type: bool
           Gas costs: 239
           Source: "isAngel"
        Block
           Source: "{\r\n      if (angel_sale_sold + tokens > angelAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(angelAmount, angel_sale_sold, currentRate, tokens);\r\n        tokens = availableTokensPhase;\r\n        eth = eth - ethToRefundPhase;\r\n        refund(ethToRefundPhase);\r\n        \r\n      }    \r\n    }"
          IfStatement
             Source: "if (angel_sale_sold + tokens > angelAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(angelAmount, angel_sale_sold, currentRate, tokens);\r\n        tokens = availableTokensPhase;\r\n        eth = eth - ethToRefundPhase;\r\n        refund(ethToRefundPhase);\r\n        \r\n      }"
            BinaryOperation using operator >
               Type: bool
               Gas costs: 415
               Source: "angel_sale_sold + tokens > angelAmount"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "angel_sale_sold + tokens"
                Identifier angel_sale_sold
                   Type: uint256
                   Source: "angel_sale_sold"
                Identifier tokens
                   Type: uint256
                   Source: "tokens"
              Identifier angelAmount
                 Type: uint256
                 Source: "angelAmount"
            Block
               Source: "{\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(angelAmount, angel_sale_sold, currentRate, tokens);\r\n        tokens = availableTokensPhase;\r\n        eth = eth - ethToRefundPhase;\r\n        refund(ethToRefundPhase);\r\n        \r\n      }"
              ExpressionStatement
                 Gas costs: 447
                 Source: "(availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(angelAmount, angel_sale_sold, currentRate, tokens)"
                Assignment using operator =
                   Type: tuple()
                   Source: "(availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(angelAmount, angel_sale_sold, currentRate, tokens)"
                  TupleExpression
                     Type: tuple(uint256,uint256)
                     Source: "(availableTokensPhase, ethToRefundPhase)"
                    Identifier availableTokensPhase
                       Type: uint256
                       Source: "availableTokensPhase"
                    Identifier ethToRefundPhase
                       Type: uint256
                       Source: "ethToRefundPhase"
                  FunctionCall
                     Type: tuple(uint256,uint256)
                     Source: "calculateMinorRefund(angelAmount, angel_sale_sold, currentRate, tokens)"
                    Identifier calculateMinorRefund
                       Type: function (uint256,uint256,uint256,uint256) returns (uint256,uint256)
                       Source: "calculateMinorRefund"
                    Identifier angelAmount
                       Type: uint256
                       Source: "angelAmount"
                    Identifier angel_sale_sold
                       Type: uint256
                       Source: "angel_sale_sold"
                    Identifier currentRate
                       Type: uint256
                       Source: "currentRate"
                    Identifier tokens
                       Type: uint256
                       Source: "tokens"
              ExpressionStatement
                 Gas costs: 8
                 Source: "tokens = availableTokensPhase"
                Assignment using operator =
                   Type: uint256
                   Source: "tokens = availableTokensPhase"
                  Identifier tokens
                     Type: uint256
                     Source: "tokens"
                  Identifier availableTokensPhase
                     Type: uint256
                     Source: "availableTokensPhase"
              ExpressionStatement
                 Gas costs: 14
                 Source: "eth = eth - ethToRefundPhase"
                Assignment using operator =
                   Type: uint256
                   Source: "eth = eth - ethToRefundPhase"
                  Identifier eth
                     Type: uint256
                     Source: "eth"
                  BinaryOperation using operator -
                     Type: uint256
                     Source: "eth - ethToRefundPhase"
                    Identifier eth
                       Type: uint256
                       Source: "eth"
                    Identifier ethToRefundPhase
                       Type: uint256
                       Source: "ethToRefundPhase"
              ExpressionStatement
                 Gas costs: 18
                 Source: "refund(ethToRefundPhase)"
                FunctionCall
                   Type: tuple()
                   Source: "refund(ethToRefundPhase)"
                  Identifier refund
                     Type: function (uint256)
                     Source: "refund"
                  Identifier ethToRefundPhase
                     Type: uint256
                     Source: "ethToRefundPhase"
      IfStatement
         Source: "if (isPublic) {\r\n      if (public_sale_sold + tokens > publicSaleAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(publicSaleAmount, public_sale_sold, currentRate, tokens);\r\n        tokens = availableTokensPhase;\r\n        eth = eth - ethToRefundPhase;\r\n        refund(ethToRefundPhase);\r\n        \r\n      }\r\n    }"
        Identifier isPublic
           Type: bool
           Gas costs: 289
           Source: "isPublic"
        Block
           Source: "{\r\n      if (public_sale_sold + tokens > publicSaleAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(publicSaleAmount, public_sale_sold, currentRate, tokens);\r\n        tokens = availableTokensPhase;\r\n        eth = eth - ethToRefundPhase;\r\n        refund(ethToRefundPhase);\r\n        \r\n      }\r\n    }"
          IfStatement
             Source: "if (public_sale_sold + tokens > publicSaleAmount) {\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(publicSaleAmount, public_sale_sold, currentRate, tokens);\r\n        tokens = availableTokensPhase;\r\n        eth = eth - ethToRefundPhase;\r\n        refund(ethToRefundPhase);\r\n        \r\n      }"
            BinaryOperation using operator >
               Type: bool
               Gas costs: 415
               Source: "public_sale_sold + tokens > publicSaleAmount"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "public_sale_sold + tokens"
                Identifier public_sale_sold
                   Type: uint256
                   Source: "public_sale_sold"
                Identifier tokens
                   Type: uint256
                   Source: "tokens"
              Identifier publicSaleAmount
                 Type: uint256
                 Source: "publicSaleAmount"
            Block
               Source: "{\r\n        (availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(publicSaleAmount, public_sale_sold, currentRate, tokens);\r\n        tokens = availableTokensPhase;\r\n        eth = eth - ethToRefundPhase;\r\n        refund(ethToRefundPhase);\r\n        \r\n      }"
              ExpressionStatement
                 Gas costs: 447
                 Source: "(availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(publicSaleAmount, public_sale_sold, currentRate, tokens)"
                Assignment using operator =
                   Type: tuple()
                   Source: "(availableTokensPhase, ethToRefundPhase) = calculateMinorRefund(publicSaleAmount, public_sale_sold, currentRate, tokens)"
                  TupleExpression
                     Type: tuple(uint256,uint256)
                     Source: "(availableTokensPhase, ethToRefundPhase)"
                    Identifier availableTokensPhase
                       Type: uint256
                       Source: "availableTokensPhase"
                    Identifier ethToRefundPhase
                       Type: uint256
                       Source: "ethToRefundPhase"
                  FunctionCall
                     Type: tuple(uint256,uint256)
                     Source: "calculateMinorRefund(publicSaleAmount, public_sale_sold, currentRate, tokens)"
                    Identifier calculateMinorRefund
                       Type: function (uint256,uint256,uint256,uint256) returns (uint256,uint256)
                       Source: "calculateMinorRefund"
                    Identifier publicSaleAmount
                       Type: uint256
                       Source: "publicSaleAmount"
                    Identifier public_sale_sold
                       Type: uint256
                       Source: "public_sale_sold"
                    Identifier currentRate
                       Type: uint256
                       Source: "currentRate"
                    Identifier tokens
                       Type: uint256
                       Source: "tokens"
              ExpressionStatement
                 Gas costs: 8
                 Source: "tokens = availableTokensPhase"
                Assignment using operator =
                   Type: uint256
                   Source: "tokens = availableTokensPhase"
                  Identifier tokens
                     Type: uint256
                     Source: "tokens"
                  Identifier availableTokensPhase
                     Type: uint256
                     Source: "availableTokensPhase"
              ExpressionStatement
                 Gas costs: 14
                 Source: "eth = eth - ethToRefundPhase"
                Assignment using operator =
                   Type: uint256
                   Source: "eth = eth - ethToRefundPhase"
                  Identifier eth
                     Type: uint256
                     Source: "eth"
                  BinaryOperation using operator -
                     Type: uint256
                     Source: "eth - ethToRefundPhase"
                    Identifier eth
                       Type: uint256
                       Source: "eth"
                    Identifier ethToRefundPhase
                       Type: uint256
                       Source: "ethToRefundPhase"
              ExpressionStatement
                 Gas costs: 18
                 Source: "refund(ethToRefundPhase)"
                FunctionCall
                   Type: tuple()
                   Source: "refund(ethToRefundPhase)"
                  Identifier refund
                     Type: function (uint256)
                     Source: "refund"
                  Identifier ethToRefundPhase
                     Type: uint256
                     Source: "ethToRefundPhase"
      ExpressionStatement
         Gas costs: 12
         Source: "saveInfoAboutInvestors(msg.sender, eth, tokens)"
        FunctionCall
           Type: tuple()
           Source: "saveInfoAboutInvestors(msg.sender, eth, tokens)"
          Identifier saveInfoAboutInvestors
             Type: function (address,uint256,uint256)
             Source: "saveInfoAboutInvestors"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier eth
             Type: uint256
             Source: "eth"
          Identifier tokens
             Type: uint256
             Source: "tokens"
      IfStatement
         Source: "if (isAngel) {\r\n      token.transferTokens(msg.sender, tokens, public_sale_start, 0);\r\n    } else {\r\n      // 0 - not freeze time; 4 - not freeze type currently;\r\n      token.transferTokens(msg.sender, tokens, 0, 4);\r\n    }"
        Identifier isAngel
           Type: bool
           Gas costs: 239
           Source: "isAngel"
        Block
           Source: "{\r\n      token.transferTokens(msg.sender, tokens, public_sale_start, 0);\r\n    }"
          ExpressionStatement
             Gas costs: [???]
             Source: "token.transferTokens(msg.sender, tokens, public_sale_start, 0)"
            FunctionCall
               Type: tuple()
               Source: "token.transferTokens(msg.sender, tokens, public_sale_start, 0)"
              MemberAccess to member transferTokens
                 Type: function (address,uint256,uint256,uint256) external
                 Source: "token.transferTokens"
                Identifier token
                   Type: contract SingleTokenCoin
                   Source: "token"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier tokens
                 Type: uint256
                 Source: "tokens"
              Identifier public_sale_start
                 Type: uint256
                 Source: "public_sale_start"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
        Block
           Source: "{\r\n      // 0 - not freeze time; 4 - not freeze type currently;\r\n      token.transferTokens(msg.sender, tokens, 0, 4);\r\n    }"
          ExpressionStatement
             Gas costs: [???]
             Source: "token.transferTokens(msg.sender, tokens, 0, 4)"
            FunctionCall
               Type: tuple()
               Source: "token.transferTokens(msg.sender, tokens, 0, 4)"
              MemberAccess to member transferTokens
                 Type: function (address,uint256,uint256,uint256) external
                 Source: "token.transferTokens"
                Identifier token
                   Type: contract SingleTokenCoin
                   Source: "token"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier tokens
                 Type: uint256
                 Source: "tokens"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
              Literal, token: [no token] value: 4
                 Type: int_const 4
                 Source: "4"
      ExpressionStatement
         Gas costs: 20220
         Source: "soldTokens = soldTokens + tokens"
        Assignment using operator =
           Type: uint256
           Source: "soldTokens = soldTokens + tokens"
          Identifier soldTokens
             Type: uint256
             Source: "soldTokens"
          BinaryOperation using operator +
             Type: uint256
             Source: "soldTokens + tokens"
            Identifier soldTokens
               Type: uint256
               Source: "soldTokens"
            Identifier tokens
               Type: uint256
               Source: "tokens"
      ExpressionStatement
         Gas costs: 20220
         Source: "totalETH = totalETH + eth"
        Assignment using operator =
           Type: uint256
           Source: "totalETH = totalETH + eth"
          Identifier totalETH
             Type: uint256
             Source: "totalETH"
          BinaryOperation using operator +
             Type: uint256
             Source: "totalETH + eth"
            Identifier totalETH
               Type: uint256
               Source: "totalETH"
            Identifier eth
               Type: uint256
               Source: "eth"
  FunctionDefinition "calculateMinorRefund"
     Source: "function calculateMinorRefund(uint256 _maxcup, uint256 _sold, uint256 _rate, uint256 _tokens) private returns(uint256 _availableTokens, uint256 _ethToRefund) {\r\n    uint256 availableTokens = _maxcup - _sold;\r\n    uint256 tokensForRefund = _tokens - availableTokens;\r\n    uint256 refundETH = tokensForRefund * _rate;\r\n\r\n    return (availableTokens, refundETH);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _maxcup, uint256 _sold, uint256 _rate, uint256 _tokens)"
      VariableDeclaration "_maxcup"
         Type: uint256
         Source: "uint256 _maxcup"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_sold"
         Type: uint256
         Source: "uint256 _sold"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_rate"
         Type: uint256
         Source: "uint256 _rate"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_tokens"
         Type: uint256
         Source: "uint256 _tokens"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 6
       Source: "(uint256 _availableTokens, uint256 _ethToRefund)"
      VariableDeclaration "_availableTokens"
         Type: uint256
         Source: "uint256 _availableTokens"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_ethToRefund"
         Type: uint256
         Source: "uint256 _ethToRefund"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    uint256 availableTokens = _maxcup - _sold;\r\n    uint256 tokensForRefund = _tokens - availableTokens;\r\n    uint256 refundETH = tokensForRefund * _rate;\r\n\r\n    return (availableTokens, refundETH);\r\n  }"
      VariableDeclarationStatement
         Gas costs: 17
         Source: "uint256 availableTokens = _maxcup - _sold"
        VariableDeclaration "availableTokens"
           Type: uint256
           Source: "uint256 availableTokens"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator -
           Type: uint256
           Source: "_maxcup - _sold"
          Identifier _maxcup
             Type: uint256
             Source: "_maxcup"
          Identifier _sold
             Type: uint256
             Source: "_sold"
      VariableDeclarationStatement
         Gas costs: 17
         Source: "uint256 tokensForRefund = _tokens - availableTokens"
        VariableDeclaration "tokensForRefund"
           Type: uint256
           Source: "uint256 tokensForRefund"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator -
           Type: uint256
           Source: "_tokens - availableTokens"
          Identifier _tokens
             Type: uint256
             Source: "_tokens"
          Identifier availableTokens
             Type: uint256
             Source: "availableTokens"
      VariableDeclarationStatement
         Gas costs: 19
         Source: "uint256 refundETH = tokensForRefund * _rate"
        VariableDeclaration "refundETH"
           Type: uint256
           Source: "uint256 refundETH"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator *
           Type: uint256
           Source: "tokensForRefund * _rate"
          Identifier tokensForRefund
             Type: uint256
             Source: "tokensForRefund"
          Identifier _rate
             Type: uint256
             Source: "_rate"
      Return
         Gas costs: 16
         Source: "return (availableTokens, refundETH)"
        TupleExpression
           Type: tuple(uint256,uint256)
           Source: "(availableTokens, refundETH)"
          Identifier availableTokens
             Type: uint256
             Source: "availableTokens"
          Identifier refundETH
             Type: uint256
             Source: "refundETH"
  FunctionDefinition "withdrowETH" - public
     Source: "function withdrowETH() public onlyOwner {\r\n    require(now > public_sale_finish);\r\n\r\n    collectAddr.transfer(this.balance);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n    require(now > public_sale_finish);\r\n\r\n    collectAddr.transfer(this.balance);\r\n  }"
      ExpressionStatement
         Gas costs: 234
         Source: "require(now > public_sale_finish)"
        FunctionCall
           Type: tuple()
           Source: "require(now > public_sale_finish)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "now > public_sale_finish"
            Identifier now
               Type: uint256
               Source: "now"
            Identifier public_sale_finish
               Type: uint256
               Source: "public_sale_finish"
      ExpressionStatement
         Gas costs: [???]
         Source: "collectAddr.transfer(this.balance)"
        FunctionCall
           Type: tuple()
           Source: "collectAddr.transfer(this.balance)"
          MemberAccess to member transfer
             Type: function (uint256)
             Source: "collectAddr.transfer"
            Identifier collectAddr
               Type: address
               Source: "collectAddr"
          MemberAccess to member balance
             Type: uint256
             Source: "this.balance"
            Identifier this
               Type: contract Crowdsale
               Source: "this"
  FunctionDefinition "withdrowTokens" - public
     Source: "function withdrowTokens() public onlyOwner {    \r\n    if (!withdrowTokensComplete) {\r\n      \r\n      token.withdrowTokens(coreTeamAddr, coreTeamAmount);\r\n      token.withdrowTokens(itDevAddr, itDevAmount);\r\n      token.withdrowTokens(futDevAddr, futDevAmount);\r\n      token.withdrowTokens(commFoundAddr, commFoundAmount);\r\n      token.withdrowTokens(socWarefareAddr, socWarefareAmount);\r\n      token.withdrowTokens(marketingAddr, marketingAmount);\r\n\r\n      withdrowTokensComplete = true;\r\n    }\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{    \r\n    if (!withdrowTokensComplete) {\r\n      \r\n      token.withdrowTokens(coreTeamAddr, coreTeamAmount);\r\n      token.withdrowTokens(itDevAddr, itDevAmount);\r\n      token.withdrowTokens(futDevAddr, futDevAmount);\r\n      token.withdrowTokens(commFoundAddr, commFoundAmount);\r\n      token.withdrowTokens(socWarefareAddr, socWarefareAmount);\r\n      token.withdrowTokens(marketingAddr, marketingAmount);\r\n\r\n      withdrowTokensComplete = true;\r\n    }\r\n  }"
      IfStatement
         Source: "if (!withdrowTokensComplete) {\r\n      \r\n      token.withdrowTokens(coreTeamAddr, coreTeamAmount);\r\n      token.withdrowTokens(itDevAddr, itDevAmount);\r\n      token.withdrowTokens(futDevAddr, futDevAmount);\r\n      token.withdrowTokens(commFoundAddr, commFoundAmount);\r\n      token.withdrowTokens(socWarefareAddr, socWarefareAmount);\r\n      token.withdrowTokens(marketingAddr, marketingAmount);\r\n\r\n      withdrowTokensComplete = true;\r\n    }"
        UnaryOperation (prefix) !
           Type: bool
           Gas costs: 292
           Source: "!withdrowTokensComplete"
          Identifier withdrowTokensComplete
             Type: bool
             Source: "withdrowTokensComplete"
        Block
           Source: "{\r\n      \r\n      token.withdrowTokens(coreTeamAddr, coreTeamAmount);\r\n      token.withdrowTokens(itDevAddr, itDevAmount);\r\n      token.withdrowTokens(futDevAddr, futDevAmount);\r\n      token.withdrowTokens(commFoundAddr, commFoundAmount);\r\n      token.withdrowTokens(socWarefareAddr, socWarefareAmount);\r\n      token.withdrowTokens(marketingAddr, marketingAmount);\r\n\r\n      withdrowTokensComplete = true;\r\n    }"
          ExpressionStatement
             Gas costs: [???]
             Source: "token.withdrowTokens(coreTeamAddr, coreTeamAmount)"
            FunctionCall
               Type: tuple()
               Source: "token.withdrowTokens(coreTeamAddr, coreTeamAmount)"
              MemberAccess to member withdrowTokens
                 Type: function (address,uint256) external
                 Source: "token.withdrowTokens"
                Identifier token
                   Type: contract SingleTokenCoin
                   Source: "token"
              Identifier coreTeamAddr
                 Type: address
                 Source: "coreTeamAddr"
              Identifier coreTeamAmount
                 Type: uint256
                 Source: "coreTeamAmount"
          ExpressionStatement
             Gas costs: [???]
             Source: "token.withdrowTokens(itDevAddr, itDevAmount)"
            FunctionCall
               Type: tuple()
               Source: "token.withdrowTokens(itDevAddr, itDevAmount)"
              MemberAccess to member withdrowTokens
                 Type: function (address,uint256) external
                 Source: "token.withdrowTokens"
                Identifier token
                   Type: contract SingleTokenCoin
                   Source: "token"
              Identifier itDevAddr
                 Type: address
                 Source: "itDevAddr"
              Identifier itDevAmount
                 Type: uint256
                 Source: "itDevAmount"
          ExpressionStatement
             Gas costs: [???]
             Source: "token.withdrowTokens(futDevAddr, futDevAmount)"
            FunctionCall
               Type: tuple()
               Source: "token.withdrowTokens(futDevAddr, futDevAmount)"
              MemberAccess to member withdrowTokens
                 Type: function (address,uint256) external
                 Source: "token.withdrowTokens"
                Identifier token
                   Type: contract SingleTokenCoin
                   Source: "token"
              Identifier futDevAddr
                 Type: address
                 Source: "futDevAddr"
              Identifier futDevAmount
                 Type: uint256
                 Source: "futDevAmount"
          ExpressionStatement
             Gas costs: [???]
             Source: "token.withdrowTokens(commFoundAddr, commFoundAmount)"
            FunctionCall
               Type: tuple()
               Source: "token.withdrowTokens(commFoundAddr, commFoundAmount)"
              MemberAccess to member withdrowTokens
                 Type: function (address,uint256) external
                 Source: "token.withdrowTokens"
                Identifier token
                   Type: contract SingleTokenCoin
                   Source: "token"
              Identifier commFoundAddr
                 Type: address
                 Source: "commFoundAddr"
              Identifier commFoundAmount
                 Type: uint256
                 Source: "commFoundAmount"
          ExpressionStatement
             Gas costs: [???]
             Source: "token.withdrowTokens(socWarefareAddr, socWarefareAmount)"
            FunctionCall
               Type: tuple()
               Source: "token.withdrowTokens(socWarefareAddr, socWarefareAmount)"
              MemberAccess to member withdrowTokens
                 Type: function (address,uint256) external
                 Source: "token.withdrowTokens"
                Identifier token
                   Type: contract SingleTokenCoin
                   Source: "token"
              Identifier socWarefareAddr
                 Type: address
                 Source: "socWarefareAddr"
              Identifier socWarefareAmount
                 Type: uint256
                 Source: "socWarefareAmount"
          ExpressionStatement
             Gas costs: [???]
             Source: "token.withdrowTokens(marketingAddr, marketingAmount)"
            FunctionCall
               Type: tuple()
               Source: "token.withdrowTokens(marketingAddr, marketingAmount)"
              MemberAccess to member withdrowTokens
                 Type: function (address,uint256) external
                 Source: "token.withdrowTokens"
                Identifier token
                   Type: contract SingleTokenCoin
                   Source: "token"
              Identifier marketingAddr
                 Type: address
                 Source: "marketingAddr"
              Identifier marketingAmount
                 Type: uint256
                 Source: "marketingAmount"
          ExpressionStatement
             Gas costs: 20317
             Source: "withdrowTokensComplete = true"
            Assignment using operator =
               Type: bool
               Source: "withdrowTokensComplete = true"
              Identifier withdrowTokensComplete
                 Type: bool
                 Source: "withdrowTokensComplete"
              Literal, token: true value: true
                 Type: bool
                 Source: "true"
  FunctionDefinition "saveInfoAboutInvestors"
     Source: "function saveInfoAboutInvestors(address _address, uint256 _amount, uint256 _tokens) private {\r\n    if (isAngel) {\r\n      if (angel_buyers_token[_address] == 0) {\r\n        angel_investors.push(_address);\r\n      }\r\n\r\n      angel_buyers_eth[_address] = angel_buyers_eth[_address].add(_amount);\r\n\r\n      angel_buyers_token[_address] = angel_buyers_token[_address].add(_tokens);\r\n\r\n      angel_sale_sold = angel_sale_sold + _tokens;\r\n    }\r\n\r\n    if (isPreSale) {\r\n      if (pre_sale_buyers_token[_address] == 0) {\r\n        pre_sale_investors.push(_address);\r\n      }\r\n\r\n      pre_sale_buyers_eth[_address] = pre_sale_buyers_eth[_address].add(_amount);\r\n\r\n      pre_sale_buyers_token[_address] = pre_sale_buyers_token[_address].add(_tokens);\r\n    \r\n      pre_sale_sold = pre_sale_sold + _tokens;\r\n    }\r\n\r\n    if (isPublic) {\r\n      if (public_buyers_token[_address] == 0) {\r\n        public_investors.push(_address);\r\n      }\r\n\r\n      public_buyers_eth[_address] = public_buyers_eth[_address].add(_amount);\r\n\r\n      public_buyers_token[_address] = public_buyers_token[_address].add(_tokens);\r\n    \r\n      public_sale_sold = public_sale_sold + _tokens;\r\n    }\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _address, uint256 _amount, uint256 _tokens)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_tokens"
         Type: uint256
         Source: "uint256 _tokens"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    if (isAngel) {\r\n      if (angel_buyers_token[_address] == 0) {\r\n        angel_investors.push(_address);\r\n      }\r\n\r\n      angel_buyers_eth[_address] = angel_buyers_eth[_address].add(_amount);\r\n\r\n      angel_buyers_token[_address] = angel_buyers_token[_address].add(_tokens);\r\n\r\n      angel_sale_sold = angel_sale_sold + _tokens;\r\n    }\r\n\r\n    if (isPreSale) {\r\n      if (pre_sale_buyers_token[_address] == 0) {\r\n        pre_sale_investors.push(_address);\r\n      }\r\n\r\n      pre_sale_buyers_eth[_address] = pre_sale_buyers_eth[_address].add(_amount);\r\n\r\n      pre_sale_buyers_token[_address] = pre_sale_buyers_token[_address].add(_tokens);\r\n    \r\n      pre_sale_sold = pre_sale_sold + _tokens;\r\n    }\r\n\r\n    if (isPublic) {\r\n      if (public_buyers_token[_address] == 0) {\r\n        public_investors.push(_address);\r\n      }\r\n\r\n      public_buyers_eth[_address] = public_buyers_eth[_address].add(_amount);\r\n\r\n      public_buyers_token[_address] = public_buyers_token[_address].add(_tokens);\r\n    \r\n      public_sale_sold = public_sale_sold + _tokens;\r\n    }\r\n  }"
      IfStatement
         Source: "if (isAngel) {\r\n      if (angel_buyers_token[_address] == 0) {\r\n        angel_investors.push(_address);\r\n      }\r\n\r\n      angel_buyers_eth[_address] = angel_buyers_eth[_address].add(_amount);\r\n\r\n      angel_buyers_token[_address] = angel_buyers_token[_address].add(_tokens);\r\n\r\n      angel_sale_sold = angel_sale_sold + _tokens;\r\n    }"
        Identifier isAngel
           Type: bool
           Gas costs: 239
           Source: "isAngel"
        Block
           Source: "{\r\n      if (angel_buyers_token[_address] == 0) {\r\n        angel_investors.push(_address);\r\n      }\r\n\r\n      angel_buyers_eth[_address] = angel_buyers_eth[_address].add(_amount);\r\n\r\n      angel_buyers_token[_address] = angel_buyers_token[_address].add(_tokens);\r\n\r\n      angel_sale_sold = angel_sale_sold + _tokens;\r\n    }"
          IfStatement
             Source: "if (angel_buyers_token[_address] == 0) {\r\n        angel_investors.push(_address);\r\n      }"
            BinaryOperation using operator ==
               Type: bool
               Gas costs: 305
               Source: "angel_buyers_token[_address] == 0"
              IndexAccess
                 Type: uint256
                 Source: "angel_buyers_token[_address]"
                Identifier angel_buyers_token
                   Type: mapping(address => uint256)
                   Source: "angel_buyers_token"
                Identifier _address
                   Type: address
                   Source: "_address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
            Block
               Source: "{\r\n        angel_investors.push(_address);\r\n      }"
              ExpressionStatement
                 Gas costs: 20365
                 Source: "angel_investors.push(_address)"
                FunctionCall
                   Type: uint256
                   Source: "angel_investors.push(_address)"
                  MemberAccess to member push
                     Type: function (address) returns (uint256)
                     Source: "angel_investors.push"
                    Identifier angel_investors
                       Type: address[] storage ref
                       Source: "angel_investors"
                  Identifier _address
                     Type: address
                     Source: "_address"
          ExpressionStatement
             Gas costs: 20439
             Source: "angel_buyers_eth[_address] = angel_buyers_eth[_address].add(_amount)"
            Assignment using operator =
               Type: uint256
               Source: "angel_buyers_eth[_address] = angel_buyers_eth[_address].add(_amount)"
              IndexAccess
                 Type: uint256
                 Source: "angel_buyers_eth[_address]"
                Identifier angel_buyers_eth
                   Type: mapping(address => uint256)
                   Source: "angel_buyers_eth"
                Identifier _address
                   Type: address
                   Source: "_address"
              FunctionCall
                 Type: uint256
                 Source: "angel_buyers_eth[_address].add(_amount)"
                MemberAccess to member add
                   Type: function (uint256,uint256) view returns (uint256)
                   Source: "angel_buyers_eth[_address].add"
                  IndexAccess
                     Type: uint256
                     Source: "angel_buyers_eth[_address]"
                    Identifier angel_buyers_eth
                       Type: mapping(address => uint256)
                       Source: "angel_buyers_eth"
                    Identifier _address
                       Type: address
                       Source: "_address"
                Identifier _amount
                   Type: uint256
                   Source: "_amount"
          ExpressionStatement
             Gas costs: 20433
             Source: "angel_buyers_token[_address] = angel_buyers_token[_address].add(_tokens)"
            Assignment using operator =
               Type: uint256
               Source: "angel_buyers_token[_address] = angel_buyers_token[_address].add(_tokens)"
              IndexAccess
                 Type: uint256
                 Source: "angel_buyers_token[_address]"
                Identifier angel_buyers_token
                   Type: mapping(address => uint256)
                   Source: "angel_buyers_token"
                Identifier _address
                   Type: address
                   Source: "_address"
              FunctionCall
                 Type: uint256
                 Source: "angel_buyers_token[_address].add(_tokens)"
                MemberAccess to member add
                   Type: function (uint256,uint256) view returns (uint256)
                   Source: "angel_buyers_token[_address].add"
                  IndexAccess
                     Type: uint256
                     Source: "angel_buyers_token[_address]"
                    Identifier angel_buyers_token
                       Type: mapping(address => uint256)
                       Source: "angel_buyers_token"
                    Identifier _address
                       Type: address
                       Source: "_address"
                Identifier _tokens
                   Type: uint256
                   Source: "_tokens"
          ExpressionStatement
             Gas costs: 20220
             Source: "angel_sale_sold = angel_sale_sold + _tokens"
            Assignment using operator =
               Type: uint256
               Source: "angel_sale_sold = angel_sale_sold + _tokens"
              Identifier angel_sale_sold
                 Type: uint256
                 Source: "angel_sale_sold"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "angel_sale_sold + _tokens"
                Identifier angel_sale_sold
                   Type: uint256
                   Source: "angel_sale_sold"
                Identifier _tokens
                   Type: uint256
                   Source: "_tokens"
      IfStatement
         Source: "if (isPreSale) {\r\n      if (pre_sale_buyers_token[_address] == 0) {\r\n        pre_sale_investors.push(_address);\r\n      }\r\n\r\n      pre_sale_buyers_eth[_address] = pre_sale_buyers_eth[_address].add(_amount);\r\n\r\n      pre_sale_buyers_token[_address] = pre_sale_buyers_token[_address].add(_tokens);\r\n    \r\n      pre_sale_sold = pre_sale_sold + _tokens;\r\n    }"
        Identifier isPreSale
           Type: bool
           Gas costs: 289
           Source: "isPreSale"
        Block
           Source: "{\r\n      if (pre_sale_buyers_token[_address] == 0) {\r\n        pre_sale_investors.push(_address);\r\n      }\r\n\r\n      pre_sale_buyers_eth[_address] = pre_sale_buyers_eth[_address].add(_amount);\r\n\r\n      pre_sale_buyers_token[_address] = pre_sale_buyers_token[_address].add(_tokens);\r\n    \r\n      pre_sale_sold = pre_sale_sold + _tokens;\r\n    }"
          IfStatement
             Source: "if (pre_sale_buyers_token[_address] == 0) {\r\n        pre_sale_investors.push(_address);\r\n      }"
            BinaryOperation using operator ==
               Type: bool
               Gas costs: 305
               Source: "pre_sale_buyers_token[_address] == 0"
              IndexAccess
                 Type: uint256
                 Source: "pre_sale_buyers_token[_address]"
                Identifier pre_sale_buyers_token
                   Type: mapping(address => uint256)
                   Source: "pre_sale_buyers_token"
                Identifier _address
                   Type: address
                   Source: "_address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
            Block
               Source: "{\r\n        pre_sale_investors.push(_address);\r\n      }"
              ExpressionStatement
                 Gas costs: 20365
                 Source: "pre_sale_investors.push(_address)"
                FunctionCall
                   Type: uint256
                   Source: "pre_sale_investors.push(_address)"
                  MemberAccess to member push
                     Type: function (address) returns (uint256)
                     Source: "pre_sale_investors.push"
                    Identifier pre_sale_investors
                       Type: address[] storage ref
                       Source: "pre_sale_investors"
                  Identifier _address
                     Type: address
                     Source: "_address"
          ExpressionStatement
             Gas costs: 20439
             Source: "pre_sale_buyers_eth[_address] = pre_sale_buyers_eth[_address].add(_amount)"
            Assignment using operator =
               Type: uint256
               Source: "pre_sale_buyers_eth[_address] = pre_sale_buyers_eth[_address].add(_amount)"
              IndexAccess
                 Type: uint256
                 Source: "pre_sale_buyers_eth[_address]"
                Identifier pre_sale_buyers_eth
                   Type: mapping(address => uint256)
                   Source: "pre_sale_buyers_eth"
                Identifier _address
                   Type: address
                   Source: "_address"
              FunctionCall
                 Type: uint256
                 Source: "pre_sale_buyers_eth[_address].add(_amount)"
                MemberAccess to member add
                   Type: function (uint256,uint256) view returns (uint256)
                   Source: "pre_sale_buyers_eth[_address].add"
                  IndexAccess
                     Type: uint256
                     Source: "pre_sale_buyers_eth[_address]"
                    Identifier pre_sale_buyers_eth
                       Type: mapping(address => uint256)
                       Source: "pre_sale_buyers_eth"
                    Identifier _address
                       Type: address
                       Source: "_address"
                Identifier _amount
                   Type: uint256
                   Source: "_amount"
          ExpressionStatement
             Gas costs: 20433
             Source: "pre_sale_buyers_token[_address] = pre_sale_buyers_token[_address].add(_tokens)"
            Assignment using operator =
               Type: uint256
               Source: "pre_sale_buyers_token[_address] = pre_sale_buyers_token[_address].add(_tokens)"
              IndexAccess
                 Type: uint256
                 Source: "pre_sale_buyers_token[_address]"
                Identifier pre_sale_buyers_token
                   Type: mapping(address => uint256)
                   Source: "pre_sale_buyers_token"
                Identifier _address
                   Type: address
                   Source: "_address"
              FunctionCall
                 Type: uint256
                 Source: "pre_sale_buyers_token[_address].add(_tokens)"
                MemberAccess to member add
                   Type: function (uint256,uint256) view returns (uint256)
                   Source: "pre_sale_buyers_token[_address].add"
                  IndexAccess
                     Type: uint256
                     Source: "pre_sale_buyers_token[_address]"
                    Identifier pre_sale_buyers_token
                       Type: mapping(address => uint256)
                       Source: "pre_sale_buyers_token"
                    Identifier _address
                       Type: address
                       Source: "_address"
                Identifier _tokens
                   Type: uint256
                   Source: "_tokens"
          ExpressionStatement
             Gas costs: 20220
             Source: "pre_sale_sold = pre_sale_sold + _tokens"
            Assignment using operator =
               Type: uint256
               Source: "pre_sale_sold = pre_sale_sold + _tokens"
              Identifier pre_sale_sold
                 Type: uint256
                 Source: "pre_sale_sold"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "pre_sale_sold + _tokens"
                Identifier pre_sale_sold
                   Type: uint256
                   Source: "pre_sale_sold"
                Identifier _tokens
                   Type: uint256
                   Source: "_tokens"
      IfStatement
         Source: "if (isPublic) {\r\n      if (public_buyers_token[_address] == 0) {\r\n        public_investors.push(_address);\r\n      }\r\n\r\n      public_buyers_eth[_address] = public_buyers_eth[_address].add(_amount);\r\n\r\n      public_buyers_token[_address] = public_buyers_token[_address].add(_tokens);\r\n    \r\n      public_sale_sold = public_sale_sold + _tokens;\r\n    }"
        Identifier isPublic
           Type: bool
           Gas costs: 289
           Source: "isPublic"
        Block
           Source: "{\r\n      if (public_buyers_token[_address] == 0) {\r\n        public_investors.push(_address);\r\n      }\r\n\r\n      public_buyers_eth[_address] = public_buyers_eth[_address].add(_amount);\r\n\r\n      public_buyers_token[_address] = public_buyers_token[_address].add(_tokens);\r\n    \r\n      public_sale_sold = public_sale_sold + _tokens;\r\n    }"
          IfStatement
             Source: "if (public_buyers_token[_address] == 0) {\r\n        public_investors.push(_address);\r\n      }"
            BinaryOperation using operator ==
               Type: bool
               Gas costs: 305
               Source: "public_buyers_token[_address] == 0"
              IndexAccess
                 Type: uint256
                 Source: "public_buyers_token[_address]"
                Identifier public_buyers_token
                   Type: mapping(address => uint256)
                   Source: "public_buyers_token"
                Identifier _address
                   Type: address
                   Source: "_address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
            Block
               Source: "{\r\n        public_investors.push(_address);\r\n      }"
              ExpressionStatement
                 Gas costs: 20365
                 Source: "public_investors.push(_address)"
                FunctionCall
                   Type: uint256
                   Source: "public_investors.push(_address)"
                  MemberAccess to member push
                     Type: function (address) returns (uint256)
                     Source: "public_investors.push"
                    Identifier public_investors
                       Type: address[] storage ref
                       Source: "public_investors"
                  Identifier _address
                     Type: address
                     Source: "_address"
          ExpressionStatement
             Gas costs: 20439
             Source: "public_buyers_eth[_address] = public_buyers_eth[_address].add(_amount)"
            Assignment using operator =
               Type: uint256
               Source: "public_buyers_eth[_address] = public_buyers_eth[_address].add(_amount)"
              IndexAccess
                 Type: uint256
                 Source: "public_buyers_eth[_address]"
                Identifier public_buyers_eth
                   Type: mapping(address => uint256)
                   Source: "public_buyers_eth"
                Identifier _address
                   Type: address
                   Source: "_address"
              FunctionCall
                 Type: uint256
                 Source: "public_buyers_eth[_address].add(_amount)"
                MemberAccess to member add
                   Type: function (uint256,uint256) view returns (uint256)
                   Source: "public_buyers_eth[_address].add"
                  IndexAccess
                     Type: uint256
                     Source: "public_buyers_eth[_address]"
                    Identifier public_buyers_eth
                       Type: mapping(address => uint256)
                       Source: "public_buyers_eth"
                    Identifier _address
                       Type: address
                       Source: "_address"
                Identifier _amount
                   Type: uint256
                   Source: "_amount"
          ExpressionStatement
             Gas costs: 20433
             Source: "public_buyers_token[_address] = public_buyers_token[_address].add(_tokens)"
            Assignment using operator =
               Type: uint256
               Source: "public_buyers_token[_address] = public_buyers_token[_address].add(_tokens)"
              IndexAccess
                 Type: uint256
                 Source: "public_buyers_token[_address]"
                Identifier public_buyers_token
                   Type: mapping(address => uint256)
                   Source: "public_buyers_token"
                Identifier _address
                   Type: address
                   Source: "_address"
              FunctionCall
                 Type: uint256
                 Source: "public_buyers_token[_address].add(_tokens)"
                MemberAccess to member add
                   Type: function (uint256,uint256) view returns (uint256)
                   Source: "public_buyers_token[_address].add"
                  IndexAccess
                     Type: uint256
                     Source: "public_buyers_token[_address]"
                    Identifier public_buyers_token
                       Type: mapping(address => uint256)
                       Source: "public_buyers_token"
                    Identifier _address
                       Type: address
                       Source: "_address"
                Identifier _tokens
                   Type: uint256
                   Source: "_tokens"
          ExpressionStatement
             Gas costs: 20220
             Source: "public_sale_sold = public_sale_sold + _tokens"
            Assignment using operator =
               Type: uint256
               Source: "public_sale_sold = public_sale_sold + _tokens"
              Identifier public_sale_sold
                 Type: uint256
                 Source: "public_sale_sold"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "public_sale_sold + _tokens"
                Identifier public_sale_sold
                   Type: uint256
                   Source: "public_sale_sold"
                Identifier _tokens
                   Type: uint256
                   Source: "_tokens"
  FunctionDefinition "finishMinting" - public
     Source: "function finishMinting() public onlyOwner {\r\n\r\n    if (mintingFinished) {\r\n      revert();\r\n    }\r\n\r\n    token.finishMinting();\r\n\r\n    mintingFinished = true;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n\r\n    if (mintingFinished) {\r\n      revert();\r\n    }\r\n\r\n    token.finishMinting();\r\n\r\n    mintingFinished = true;\r\n  }"
      IfStatement
         Source: "if (mintingFinished) {\r\n      revert();\r\n    }"
        Identifier mintingFinished
           Type: bool
           Gas costs: 289
           Source: "mintingFinished"
        Block
           Source: "{\r\n      revert();\r\n    }"
          ExpressionStatement
             Gas costs: 6
             Source: "revert()"
            FunctionCall
               Type: tuple()
               Source: "revert()"
              Identifier revert
                 Type: function () pure
                 Source: "revert"
      ExpressionStatement
         Gas costs: [???]
         Source: "token.finishMinting()"
        FunctionCall
           Type: tuple()
           Source: "token.finishMinting()"
          MemberAccess to member finishMinting
             Type: function () external
             Source: "token.finishMinting"
            Identifier token
               Type: contract SingleTokenCoin
               Source: "token"
      ExpressionStatement
         Gas costs: 20317
         Source: "mintingFinished = true"
        Assignment using operator =
           Type: bool
           Source: "mintingFinished = true"
          Identifier mintingFinished
             Type: bool
             Source: "mintingFinished"
          Literal, token: true value: true
             Type: bool
             Source: "true"
  FunctionDefinition "getFinishStatus" - public - const
     Source: "function getFinishStatus() public constant returns(bool) {\r\n    return mintingFinished;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n    return mintingFinished;\r\n  }"
      Return
         Gas costs: 294
         Source: "return mintingFinished"
        Identifier mintingFinished
           Type: bool
           Source: "mintingFinished"
  FunctionDefinition "refund"
     Source: "function refund(uint256 _amount) private {\r\n    msg.sender.transfer(_amount);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _amount)"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    msg.sender.transfer(_amount);\r\n  }"
      ExpressionStatement
         Gas costs: [???]
         Source: "msg.sender.transfer(_amount)"
        FunctionCall
           Type: tuple()
           Source: "msg.sender.transfer(_amount)"
          MemberAccess to member transfer
             Type: function (uint256)
             Source: "msg.sender.transfer"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _amount
             Type: uint256
             Source: "_amount"
  FunctionDefinition "getBalanceContract" - public - const
     Source: "function getBalanceContract() public constant returns(uint256) {\r\n    return this.balance;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    return this.balance;\r\n  }"
      Return
         Gas costs: 413
         Source: "return this.balance"
        MemberAccess to member balance
           Type: uint256
           Source: "this.balance"
          Identifier this
             Type: contract Crowdsale
             Source: "this"
  FunctionDefinition "getSoldToken" - public - const
     Source: "function getSoldToken() public constant returns(uint256 _soldTokens, uint256 _angel_sale_sold, uint256 _pre_sale_sold, uint256 _public_sale_sold, uint256 _founding_sold, uint256 _peInvestors_sold) {\r\n    return (soldTokens, angel_sale_sold, pre_sale_sold, public_sale_sold, founding_sold, peInvestors_sold);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 18
       Source: "(uint256 _soldTokens, uint256 _angel_sale_sold, uint256 _pre_sale_sold, uint256 _public_sale_sold, uint256 _founding_sold, uint256 _peInvestors_sold)"
      VariableDeclaration "_soldTokens"
         Type: uint256
         Source: "uint256 _soldTokens"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_angel_sale_sold"
         Type: uint256
         Source: "uint256 _angel_sale_sold"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_pre_sale_sold"
         Type: uint256
         Source: "uint256 _pre_sale_sold"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_public_sale_sold"
         Type: uint256
         Source: "uint256 _public_sale_sold"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_founding_sold"
         Type: uint256
         Source: "uint256 _founding_sold"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_peInvestors_sold"
         Type: uint256
         Source: "uint256 _peInvestors_sold"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    return (soldTokens, angel_sale_sold, pre_sale_sold, public_sale_sold, founding_sold, peInvestors_sold);\r\n  }"
      Return
         Gas costs: 1248
         Source: "return (soldTokens, angel_sale_sold, pre_sale_sold, public_sale_sold, founding_sold, peInvestors_sold)"
        TupleExpression
           Type: tuple(uint256,uint256,uint256,uint256,uint256,uint256)
           Source: "(soldTokens, angel_sale_sold, pre_sale_sold, public_sale_sold, founding_sold, peInvestors_sold)"
          Identifier soldTokens
             Type: uint256
             Source: "soldTokens"
          Identifier angel_sale_sold
             Type: uint256
             Source: "angel_sale_sold"
          Identifier pre_sale_sold
             Type: uint256
             Source: "pre_sale_sold"
          Identifier public_sale_sold
             Type: uint256
             Source: "public_sale_sold"
          Identifier founding_sold
             Type: uint256
             Source: "founding_sold"
          Identifier peInvestors_sold
             Type: uint256
             Source: "peInvestors_sold"
  FunctionDefinition "getInvestorsTokens" - public - const
     Source: "function getInvestorsTokens(address _address, uint256 _type) public constant returns(uint256) {\r\n    if (_type == 0) {\r\n      return founding_buyers_token[_address];\r\n    }\r\n    if (_type == 1) {\r\n      return pre_sale_buyers_token[_address];\r\n    }\r\n    if (_type == 2) {\r\n      return angel_buyers_token[_address];\r\n    }\r\n    if (_type == 3) {\r\n      return pe_buyers_token[_address];\r\n    }\r\n    if (_type == 4) {\r\n      return public_buyers_token[_address];\r\n    }\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _address, uint256 _type)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_type"
         Type: uint256
         Source: "uint256 _type"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    if (_type == 0) {\r\n      return founding_buyers_token[_address];\r\n    }\r\n    if (_type == 1) {\r\n      return pre_sale_buyers_token[_address];\r\n    }\r\n    if (_type == 2) {\r\n      return angel_buyers_token[_address];\r\n    }\r\n    if (_type == 3) {\r\n      return pe_buyers_token[_address];\r\n    }\r\n    if (_type == 4) {\r\n      return public_buyers_token[_address];\r\n    }\r\n  }"
      IfStatement
         Source: "if (_type == 0) {\r\n      return founding_buyers_token[_address];\r\n    }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "_type == 0"
          Identifier _type
             Type: uint256
             Source: "_type"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n      return founding_buyers_token[_address];\r\n    }"
          Return
             Gas costs: 315
             Source: "return founding_buyers_token[_address]"
            IndexAccess
               Type: uint256
               Source: "founding_buyers_token[_address]"
              Identifier founding_buyers_token
                 Type: mapping(address => uint256)
                 Source: "founding_buyers_token"
              Identifier _address
                 Type: address
                 Source: "_address"
      IfStatement
         Source: "if (_type == 1) {\r\n      return pre_sale_buyers_token[_address];\r\n    }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "_type == 1"
          Identifier _type
             Type: uint256
             Source: "_type"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
        Block
           Source: "{\r\n      return pre_sale_buyers_token[_address];\r\n    }"
          Return
             Gas costs: 315
             Source: "return pre_sale_buyers_token[_address]"
            IndexAccess
               Type: uint256
               Source: "pre_sale_buyers_token[_address]"
              Identifier pre_sale_buyers_token
                 Type: mapping(address => uint256)
                 Source: "pre_sale_buyers_token"
              Identifier _address
                 Type: address
                 Source: "_address"
      IfStatement
         Source: "if (_type == 2) {\r\n      return angel_buyers_token[_address];\r\n    }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "_type == 2"
          Identifier _type
             Type: uint256
             Source: "_type"
          Literal, token: [no token] value: 2
             Type: int_const 2
             Source: "2"
        Block
           Source: "{\r\n      return angel_buyers_token[_address];\r\n    }"
          Return
             Gas costs: 315
             Source: "return angel_buyers_token[_address]"
            IndexAccess
               Type: uint256
               Source: "angel_buyers_token[_address]"
              Identifier angel_buyers_token
                 Type: mapping(address => uint256)
                 Source: "angel_buyers_token"
              Identifier _address
                 Type: address
                 Source: "_address"
      IfStatement
         Source: "if (_type == 3) {\r\n      return pe_buyers_token[_address];\r\n    }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "_type == 3"
          Identifier _type
             Type: uint256
             Source: "_type"
          Literal, token: [no token] value: 3
             Type: int_const 3
             Source: "3"
        Block
           Source: "{\r\n      return pe_buyers_token[_address];\r\n    }"
          Return
             Gas costs: 315
             Source: "return pe_buyers_token[_address]"
            IndexAccess
               Type: uint256
               Source: "pe_buyers_token[_address]"
              Identifier pe_buyers_token
                 Type: mapping(address => uint256)
                 Source: "pe_buyers_token"
              Identifier _address
                 Type: address
                 Source: "_address"
      IfStatement
         Source: "if (_type == 4) {\r\n      return public_buyers_token[_address];\r\n    }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "_type == 4"
          Identifier _type
             Type: uint256
             Source: "_type"
          Literal, token: [no token] value: 4
             Type: int_const 4
             Source: "4"
        Block
           Source: "{\r\n      return public_buyers_token[_address];\r\n    }"
          Return
             Gas costs: 315
             Source: "return public_buyers_token[_address]"
            IndexAccess
               Type: uint256
               Source: "public_buyers_token[_address]"
              Identifier public_buyers_token
                 Type: mapping(address => uint256)
                 Source: "public_buyers_token"
              Identifier _address
                 Type: address
                 Source: "_address"
  FunctionDefinition "getInvestorsCount" - public - const
     Source: "function getInvestorsCount(uint256 _type) public constant returns(uint256) {\r\n    if (_type == 0) {\r\n      return founding_investors.length;\r\n    }\r\n    if (_type == 1) {\r\n      return pre_sale_investors.length;\r\n    }\r\n    if (_type == 2) {\r\n      return angel_investors.length;\r\n    }\r\n    if (_type == 3) {\r\n      return pe_investors.length;\r\n    }\r\n    if (_type == 4) {\r\n      return public_investors.length;\r\n    }\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _type)"
      VariableDeclaration "_type"
         Type: uint256
         Source: "uint256 _type"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    if (_type == 0) {\r\n      return founding_investors.length;\r\n    }\r\n    if (_type == 1) {\r\n      return pre_sale_investors.length;\r\n    }\r\n    if (_type == 2) {\r\n      return angel_investors.length;\r\n    }\r\n    if (_type == 3) {\r\n      return pe_investors.length;\r\n    }\r\n    if (_type == 4) {\r\n      return public_investors.length;\r\n    }\r\n  }"
      IfStatement
         Source: "if (_type == 0) {\r\n      return founding_investors.length;\r\n    }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "_type == 0"
          Identifier _type
             Type: uint256
             Source: "_type"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n      return founding_investors.length;\r\n    }"
          Return
             Gas costs: 227
             Source: "return founding_investors.length"
            MemberAccess to member length
               Type: uint256
               Source: "founding_investors.length"
              Identifier founding_investors
                 Type: address[] storage ref
                 Source: "founding_investors"
      IfStatement
         Source: "if (_type == 1) {\r\n      return pre_sale_investors.length;\r\n    }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "_type == 1"
          Identifier _type
             Type: uint256
             Source: "_type"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
        Block
           Source: "{\r\n      return pre_sale_investors.length;\r\n    }"
          Return
             Gas costs: 227
             Source: "return pre_sale_investors.length"
            MemberAccess to member length
               Type: uint256
               Source: "pre_sale_investors.length"
              Identifier pre_sale_investors
                 Type: address[] storage ref
                 Source: "pre_sale_investors"
      IfStatement
         Source: "if (_type == 2) {\r\n      return angel_investors.length;\r\n    }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "_type == 2"
          Identifier _type
             Type: uint256
             Source: "_type"
          Literal, token: [no token] value: 2
             Type: int_const 2
             Source: "2"
        Block
           Source: "{\r\n      return angel_investors.length;\r\n    }"
          Return
             Gas costs: 227
             Source: "return angel_investors.length"
            MemberAccess to member length
               Type: uint256
               Source: "angel_investors.length"
              Identifier angel_investors
                 Type: address[] storage ref
                 Source: "angel_investors"
      IfStatement
         Source: "if (_type == 3) {\r\n      return pe_investors.length;\r\n    }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "_type == 3"
          Identifier _type
             Type: uint256
             Source: "_type"
          Literal, token: [no token] value: 3
             Type: int_const 3
             Source: "3"
        Block
           Source: "{\r\n      return pe_investors.length;\r\n    }"
          Return
             Gas costs: 227
             Source: "return pe_investors.length"
            MemberAccess to member length
               Type: uint256
               Source: "pe_investors.length"
              Identifier pe_investors
                 Type: address[] storage ref
                 Source: "pe_investors"
      IfStatement
         Source: "if (_type == 4) {\r\n      return public_investors.length;\r\n    }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "_type == 4"
          Identifier _type
             Type: uint256
             Source: "_type"
          Literal, token: [no token] value: 4
             Type: int_const 4
             Source: "4"
        Block
           Source: "{\r\n      return public_investors.length;\r\n    }"
          Return
             Gas costs: 227
             Source: "return public_investors.length"
            MemberAccess to member length
               Type: uint256
               Source: "public_investors.length"
              Identifier public_investors
                 Type: address[] storage ref
                 Source: "public_investors"
  FunctionDefinition "getInvestorByIndex" - public - const
     Source: "function getInvestorByIndex(uint256 _index, uint256 _type) public constant returns(address) {\r\n    if (_type == 0) {\r\n      return founding_investors[_index];\r\n    }\r\n    if (_type == 1) {\r\n      return pre_sale_investors[_index];\r\n    }\r\n    if (_type == 2) {\r\n      return angel_investors[_index];\r\n    }\r\n    if (_type == 3) {\r\n      return pe_investors[_index];\r\n    }\r\n    if (_type == 4) {\r\n      return public_investors[_index];\r\n    }\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _index, uint256 _type)"
      VariableDeclaration "_index"
         Type: uint256
         Source: "uint256 _index"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_type"
         Type: uint256
         Source: "uint256 _type"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(address)"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\r\n    if (_type == 0) {\r\n      return founding_investors[_index];\r\n    }\r\n    if (_type == 1) {\r\n      return pre_sale_investors[_index];\r\n    }\r\n    if (_type == 2) {\r\n      return angel_investors[_index];\r\n    }\r\n    if (_type == 3) {\r\n      return pe_investors[_index];\r\n    }\r\n    if (_type == 4) {\r\n      return public_investors[_index];\r\n    }\r\n  }"
      IfStatement
         Source: "if (_type == 0) {\r\n      return founding_investors[_index];\r\n    }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "_type == 0"
          Identifier _type
             Type: uint256
             Source: "_type"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n      return founding_investors[_index];\r\n    }"
          Return
             Gas costs: 544
             Source: "return founding_investors[_index]"
            IndexAccess
               Type: address
               Source: "founding_investors[_index]"
              Identifier founding_investors
                 Type: address[] storage ref
                 Source: "founding_investors"
              Identifier _index
                 Type: uint256
                 Source: "_index"
      IfStatement
         Source: "if (_type == 1) {\r\n      return pre_sale_investors[_index];\r\n    }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "_type == 1"
          Identifier _type
             Type: uint256
             Source: "_type"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
        Block
           Source: "{\r\n      return pre_sale_investors[_index];\r\n    }"
          Return
             Gas costs: 544
             Source: "return pre_sale_investors[_index]"
            IndexAccess
               Type: address
               Source: "pre_sale_investors[_index]"
              Identifier pre_sale_investors
                 Type: address[] storage ref
                 Source: "pre_sale_investors"
              Identifier _index
                 Type: uint256
                 Source: "_index"
      IfStatement
         Source: "if (_type == 2) {\r\n      return angel_investors[_index];\r\n    }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "_type == 2"
          Identifier _type
             Type: uint256
             Source: "_type"
          Literal, token: [no token] value: 2
             Type: int_const 2
             Source: "2"
        Block
           Source: "{\r\n      return angel_investors[_index];\r\n    }"
          Return
             Gas costs: 544
             Source: "return angel_investors[_index]"
            IndexAccess
               Type: address
               Source: "angel_investors[_index]"
              Identifier angel_investors
                 Type: address[] storage ref
                 Source: "angel_investors"
              Identifier _index
                 Type: uint256
                 Source: "_index"
      IfStatement
         Source: "if (_type == 3) {\r\n      return pe_investors[_index];\r\n    }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "_type == 3"
          Identifier _type
             Type: uint256
             Source: "_type"
          Literal, token: [no token] value: 3
             Type: int_const 3
             Source: "3"
        Block
           Source: "{\r\n      return pe_investors[_index];\r\n    }"
          Return
             Gas costs: 544
             Source: "return pe_investors[_index]"
            IndexAccess
               Type: address
               Source: "pe_investors[_index]"
              Identifier pe_investors
                 Type: address[] storage ref
                 Source: "pe_investors"
              Identifier _index
                 Type: uint256
                 Source: "_index"
      IfStatement
         Source: "if (_type == 4) {\r\n      return public_investors[_index];\r\n    }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "_type == 4"
          Identifier _type
             Type: uint256
             Source: "_type"
          Literal, token: [no token] value: 4
             Type: int_const 4
             Source: "4"
        Block
           Source: "{\r\n      return public_investors[_index];\r\n    }"
          Return
             Gas costs: 544
             Source: "return public_investors[_index]"
            IndexAccess
               Type: address
               Source: "public_investors[_index]"
              Identifier public_investors
                 Type: address[] storage ref
                 Source: "public_investors"
              Identifier _index
                 Type: uint256
                 Source: "_index"
  FunctionDefinition "getLeftToken" - public - const
     Source: "function getLeftToken() public constant returns(uint256 _all_left, uint256 _founding_left, uint256 _angel_left, uint256 _preSaleAmount_left, uint256 _PEInvestorAmount_left, uint256 _publicSaleAmount_left) {\r\n    uint256 all_left = token.totalSupply() != 0 ? token.totalSupply() - soldTokens : token.totalSupply();\r\n    uint256 founding_left = foundingAmount != 0 ? foundingAmount - founding_sold : foundingAmount;\r\n    uint256 angel_left = angelAmount != 0 ? angelAmount - angel_sale_sold : angelAmount;\r\n    uint256 preSaleAmount_left = preSaleAmount != 0 ? preSaleAmount - pre_sale_sold : preSaleAmount;\r\n    uint256 PEInvestorAmount_left = PEInvestorAmount != 0 ? PEInvestorAmount - peInvestors_sold : PEInvestorAmount;\r\n    uint256 publicSaleAmount_left = publicSaleAmount != 0 ? publicSaleAmount - public_sale_sold : publicSaleAmount;\r\n\r\n    return (all_left, founding_left, angel_left, preSaleAmount_left, PEInvestorAmount_left, publicSaleAmount_left);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 18
       Source: "(uint256 _all_left, uint256 _founding_left, uint256 _angel_left, uint256 _preSaleAmount_left, uint256 _PEInvestorAmount_left, uint256 _publicSaleAmount_left)"
      VariableDeclaration "_all_left"
         Type: uint256
         Source: "uint256 _all_left"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_founding_left"
         Type: uint256
         Source: "uint256 _founding_left"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_angel_left"
         Type: uint256
         Source: "uint256 _angel_left"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_preSaleAmount_left"
         Type: uint256
         Source: "uint256 _preSaleAmount_left"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_PEInvestorAmount_left"
         Type: uint256
         Source: "uint256 _PEInvestorAmount_left"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_publicSaleAmount_left"
         Type: uint256
         Source: "uint256 _publicSaleAmount_left"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    uint256 all_left = token.totalSupply() != 0 ? token.totalSupply() - soldTokens : token.totalSupply();\r\n    uint256 founding_left = foundingAmount != 0 ? foundingAmount - founding_sold : foundingAmount;\r\n    uint256 angel_left = angelAmount != 0 ? angelAmount - angel_sale_sold : angelAmount;\r\n    uint256 preSaleAmount_left = preSaleAmount != 0 ? preSaleAmount - pre_sale_sold : preSaleAmount;\r\n    uint256 PEInvestorAmount_left = PEInvestorAmount != 0 ? PEInvestorAmount - peInvestors_sold : PEInvestorAmount;\r\n    uint256 publicSaleAmount_left = publicSaleAmount != 0 ? publicSaleAmount - public_sale_sold : publicSaleAmount;\r\n\r\n    return (all_left, founding_left, angel_left, preSaleAmount_left, PEInvestorAmount_left, publicSaleAmount_left);\r\n  }"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "uint256 all_left = token.totalSupply() != 0 ? token.totalSupply() - soldTokens : token.totalSupply()"
        VariableDeclaration "all_left"
           Type: uint256
           Source: "uint256 all_left"
          ElementaryTypeName uint256
             Source: "uint256"
        Conditional
           Type: uint256
           Source: "token.totalSupply() != 0 ? token.totalSupply() - soldTokens : token.totalSupply()"
          BinaryOperation using operator !=
             Type: bool
             Source: "token.totalSupply() != 0"
            FunctionCall
               Type: uint256
               Source: "token.totalSupply()"
              MemberAccess to member totalSupply
                 Type: function () view external returns (uint256)
                 Source: "token.totalSupply"
                Identifier token
                   Type: contract SingleTokenCoin
                   Source: "token"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
          BinaryOperation using operator -
             Type: uint256
             Source: "token.totalSupply() - soldTokens"
            FunctionCall
               Type: uint256
               Source: "token.totalSupply()"
              MemberAccess to member totalSupply
                 Type: function () view external returns (uint256)
                 Source: "token.totalSupply"
                Identifier token
                   Type: contract SingleTokenCoin
                   Source: "token"
            Identifier soldTokens
               Type: uint256
               Source: "soldTokens"
          FunctionCall
             Type: uint256
             Source: "token.totalSupply()"
            MemberAccess to member totalSupply
               Type: function () view external returns (uint256)
               Source: "token.totalSupply"
              Identifier token
                 Type: contract SingleTokenCoin
                 Source: "token"
      VariableDeclarationStatement
         Gas costs: 858
         Source: "uint256 founding_left = foundingAmount != 0 ? foundingAmount - founding_sold : foundingAmount"
        VariableDeclaration "founding_left"
           Type: uint256
           Source: "uint256 founding_left"
          ElementaryTypeName uint256
             Source: "uint256"
        Conditional
           Type: uint256
           Source: "foundingAmount != 0 ? foundingAmount - founding_sold : foundingAmount"
          BinaryOperation using operator !=
             Type: bool
             Source: "foundingAmount != 0"
            Identifier foundingAmount
               Type: uint256
               Source: "foundingAmount"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
          BinaryOperation using operator -
             Type: uint256
             Source: "foundingAmount - founding_sold"
            Identifier foundingAmount
               Type: uint256
               Source: "foundingAmount"
            Identifier founding_sold
               Type: uint256
               Source: "founding_sold"
          Identifier foundingAmount
             Type: uint256
             Source: "foundingAmount"
      VariableDeclarationStatement
         Gas costs: 858
         Source: "uint256 angel_left = angelAmount != 0 ? angelAmount - angel_sale_sold : angelAmount"
        VariableDeclaration "angel_left"
           Type: uint256
           Source: "uint256 angel_left"
          ElementaryTypeName uint256
             Source: "uint256"
        Conditional
           Type: uint256
           Source: "angelAmount != 0 ? angelAmount - angel_sale_sold : angelAmount"
          BinaryOperation using operator !=
             Type: bool
             Source: "angelAmount != 0"
            Identifier angelAmount
               Type: uint256
               Source: "angelAmount"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
          BinaryOperation using operator -
             Type: uint256
             Source: "angelAmount - angel_sale_sold"
            Identifier angelAmount
               Type: uint256
               Source: "angelAmount"
            Identifier angel_sale_sold
               Type: uint256
               Source: "angel_sale_sold"
          Identifier angelAmount
             Type: uint256
             Source: "angelAmount"
      VariableDeclarationStatement
         Gas costs: 858
         Source: "uint256 preSaleAmount_left = preSaleAmount != 0 ? preSaleAmount - pre_sale_sold : preSaleAmount"
        VariableDeclaration "preSaleAmount_left"
           Type: uint256
           Source: "uint256 preSaleAmount_left"
          ElementaryTypeName uint256
             Source: "uint256"
        Conditional
           Type: uint256
           Source: "preSaleAmount != 0 ? preSaleAmount - pre_sale_sold : preSaleAmount"
          BinaryOperation using operator !=
             Type: bool
             Source: "preSaleAmount != 0"
            Identifier preSaleAmount
               Type: uint256
               Source: "preSaleAmount"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
          BinaryOperation using operator -
             Type: uint256
             Source: "preSaleAmount - pre_sale_sold"
            Identifier preSaleAmount
               Type: uint256
               Source: "preSaleAmount"
            Identifier pre_sale_sold
               Type: uint256
               Source: "pre_sale_sold"
          Identifier preSaleAmount
             Type: uint256
             Source: "preSaleAmount"
      VariableDeclarationStatement
         Gas costs: 858
         Source: "uint256 PEInvestorAmount_left = PEInvestorAmount != 0 ? PEInvestorAmount - peInvestors_sold : PEInvestorAmount"
        VariableDeclaration "PEInvestorAmount_left"
           Type: uint256
           Source: "uint256 PEInvestorAmount_left"
          ElementaryTypeName uint256
             Source: "uint256"
        Conditional
           Type: uint256
           Source: "PEInvestorAmount != 0 ? PEInvestorAmount - peInvestors_sold : PEInvestorAmount"
          BinaryOperation using operator !=
             Type: bool
             Source: "PEInvestorAmount != 0"
            Identifier PEInvestorAmount
               Type: uint256
               Source: "PEInvestorAmount"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
          BinaryOperation using operator -
             Type: uint256
             Source: "PEInvestorAmount - peInvestors_sold"
            Identifier PEInvestorAmount
               Type: uint256
               Source: "PEInvestorAmount"
            Identifier peInvestors_sold
               Type: uint256
               Source: "peInvestors_sold"
          Identifier PEInvestorAmount
             Type: uint256
             Source: "PEInvestorAmount"
      VariableDeclarationStatement
         Gas costs: 858
         Source: "uint256 publicSaleAmount_left = publicSaleAmount != 0 ? publicSaleAmount - public_sale_sold : publicSaleAmount"
        VariableDeclaration "publicSaleAmount_left"
           Type: uint256
           Source: "uint256 publicSaleAmount_left"
          ElementaryTypeName uint256
             Source: "uint256"
        Conditional
           Type: uint256
           Source: "publicSaleAmount != 0 ? publicSaleAmount - public_sale_sold : publicSaleAmount"
          BinaryOperation using operator !=
             Type: bool
             Source: "publicSaleAmount != 0"
            Identifier publicSaleAmount
               Type: uint256
               Source: "publicSaleAmount"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
          BinaryOperation using operator -
             Type: uint256
             Source: "publicSaleAmount - public_sale_sold"
            Identifier publicSaleAmount
               Type: uint256
               Source: "publicSaleAmount"
            Identifier public_sale_sold
               Type: uint256
               Source: "public_sale_sold"
          Identifier publicSaleAmount
             Type: uint256
             Source: "publicSaleAmount"
      Return
         Gas costs: 48
         Source: "return (all_left, founding_left, angel_left, preSaleAmount_left, PEInvestorAmount_left, publicSaleAmount_left)"
        TupleExpression
           Type: tuple(uint256,uint256,uint256,uint256,uint256,uint256)
           Source: "(all_left, founding_left, angel_left, preSaleAmount_left, PEInvestorAmount_left, publicSaleAmount_left)"
          Identifier all_left
             Type: uint256
             Source: "all_left"
          Identifier founding_left
             Type: uint256
             Source: "founding_left"
          Identifier angel_left
             Type: uint256
             Source: "angel_left"
          Identifier preSaleAmount_left
             Type: uint256
             Source: "preSaleAmount_left"
          Identifier PEInvestorAmount_left
             Type: uint256
             Source: "PEInvestorAmount_left"
          Identifier publicSaleAmount_left
             Type: uint256
             Source: "publicSaleAmount_left"
  FunctionDefinition "getTotalToken" - public - const
     Source: "function getTotalToken() public constant returns(uint256 _totalToken, uint256 _foundingAmount, uint256 _angelAmount, uint256 _preSaleAmount, uint256 _PEInvestorAmount, uint256 _publicSaleAmount) {\r\n    return (token.totalSupply(), foundingAmount, angelAmount, preSaleAmount, PEInvestorAmount, publicSaleAmount);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 18
       Source: "(uint256 _totalToken, uint256 _foundingAmount, uint256 _angelAmount, uint256 _preSaleAmount, uint256 _PEInvestorAmount, uint256 _publicSaleAmount)"
      VariableDeclaration "_totalToken"
         Type: uint256
         Source: "uint256 _totalToken"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_foundingAmount"
         Type: uint256
         Source: "uint256 _foundingAmount"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_angelAmount"
         Type: uint256
         Source: "uint256 _angelAmount"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_preSaleAmount"
         Type: uint256
         Source: "uint256 _preSaleAmount"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_PEInvestorAmount"
         Type: uint256
         Source: "uint256 _PEInvestorAmount"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_publicSaleAmount"
         Type: uint256
         Source: "uint256 _publicSaleAmount"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    return (token.totalSupply(), foundingAmount, angelAmount, preSaleAmount, PEInvestorAmount, publicSaleAmount);\r\n  }"
      Return
         Gas costs: [???]
         Source: "return (token.totalSupply(), foundingAmount, angelAmount, preSaleAmount, PEInvestorAmount, publicSaleAmount)"
        TupleExpression
           Type: tuple(uint256,uint256,uint256,uint256,uint256,uint256)
           Source: "(token.totalSupply(), foundingAmount, angelAmount, preSaleAmount, PEInvestorAmount, publicSaleAmount)"
          FunctionCall
             Type: uint256
             Source: "token.totalSupply()"
            MemberAccess to member totalSupply
               Type: function () view external returns (uint256)
               Source: "token.totalSupply"
              Identifier token
                 Type: contract SingleTokenCoin
                 Source: "token"
          Identifier foundingAmount
             Type: uint256
             Source: "foundingAmount"
          Identifier angelAmount
             Type: uint256
             Source: "angelAmount"
          Identifier preSaleAmount
             Type: uint256
             Source: "preSaleAmount"
          Identifier PEInvestorAmount
             Type: uint256
             Source: "PEInvestorAmount"
          Identifier publicSaleAmount
             Type: uint256
             Source: "publicSaleAmount"
  FunctionDefinition "getTotalETH" - public - const
     Source: "function getTotalETH() public constant returns(uint256 _totalETH, uint256 _angel_sale_totalETH, uint256 _pre_sale_totalETH, uint256 _public_sale_totalETH) {\r\n    return (totalETH, angel_sale_totalETH, pre_sale_totalETH, public_sale_totalETH);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 12
       Source: "(uint256 _totalETH, uint256 _angel_sale_totalETH, uint256 _pre_sale_totalETH, uint256 _public_sale_totalETH)"
      VariableDeclaration "_totalETH"
         Type: uint256
         Source: "uint256 _totalETH"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_angel_sale_totalETH"
         Type: uint256
         Source: "uint256 _angel_sale_totalETH"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_pre_sale_totalETH"
         Type: uint256
         Source: "uint256 _pre_sale_totalETH"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_public_sale_totalETH"
         Type: uint256
         Source: "uint256 _public_sale_totalETH"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    return (totalETH, angel_sale_totalETH, pre_sale_totalETH, public_sale_totalETH);\r\n  }"
      Return
         Gas costs: 832
         Source: "return (totalETH, angel_sale_totalETH, pre_sale_totalETH, public_sale_totalETH)"
        TupleExpression
           Type: tuple(uint256,uint256,uint256,uint256)
           Source: "(totalETH, angel_sale_totalETH, pre_sale_totalETH, public_sale_totalETH)"
          Identifier totalETH
             Type: uint256
             Source: "totalETH"
          Identifier angel_sale_totalETH
             Type: uint256
             Source: "angel_sale_totalETH"
          Identifier pre_sale_totalETH
             Type: uint256
             Source: "pre_sale_totalETH"
          Identifier public_sale_totalETH
             Type: uint256
             Source: "public_sale_totalETH"
  FunctionDefinition "getCurrentPrice" - public - const
     Source: "function getCurrentPrice() public constant returns(uint256) {  \r\n    uint256 price = calculateRate();\r\n    return calculatePrice(price, 0);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{  \r\n    uint256 price = calculateRate();\r\n    return calculatePrice(price, 0);\r\n  }"
      VariableDeclarationStatement
         Gas costs: 23
         Source: "uint256 price = calculateRate()"
        VariableDeclaration "price"
           Type: uint256
           Source: "uint256 price"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "calculateRate()"
          Identifier calculateRate
             Type: function () view returns (uint256)
             Source: "calculateRate"
      Return
         Gas costs: 26
         Source: "return calculatePrice(price, 0)"
        FunctionCall
           Type: uint256
           Source: "calculatePrice(price, 0)"
          Identifier calculatePrice
             Type: function (uint256,uint256) view returns (uint256)
             Source: "calculatePrice"
          Identifier price
             Type: uint256
             Source: "price"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
  FunctionDefinition "getContractAddress" - public - const
     Source: "function getContractAddress() public constant returns(address) {\r\n    return this;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(address)"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\r\n    return this;\r\n  }"
      Return
         Gas costs: 7
         Source: "return this"
        Identifier this
           Type: contract Crowdsale
           Source: "this"
  FunctionDefinition "getOwner" - public - const
     Source: "function getOwner() public constant returns(address) {\r\n    return owner;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(address)"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\r\n    return owner;\r\n  }"
      Return
         Gas costs: 244
         Source: "return owner"
        Identifier owner
           Type: address
           Source: "owner"
  FunctionDefinition "sendOracleData" - public
     Source: "function sendOracleData() public payable {\r\n    if (msg.value != 0) {\r\n        wrapper.transfer(msg.value);\r\n    }\r\n    \r\n    wrapper.update(\"URL\", \"json(https://api.kraken.com/0/public/Ticker?pair=ETHUSD).result.XETHZUSD.c.0\");\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    if (msg.value != 0) {\r\n        wrapper.transfer(msg.value);\r\n    }\r\n    \r\n    wrapper.update(\"URL\", \"json(https://api.kraken.com/0/public/Ticker?pair=ETHUSD).result.XETHZUSD.c.0\");\r\n  }"
      IfStatement
         Source: "if (msg.value != 0) {\r\n        wrapper.transfer(msg.value);\r\n    }"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 11
           Source: "msg.value != 0"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n        wrapper.transfer(msg.value);\r\n    }"
          ExpressionStatement
             Gas costs: [???]
             Source: "wrapper.transfer(msg.value)"
            FunctionCall
               Type: tuple()
               Source: "wrapper.transfer(msg.value)"
              MemberAccess to member transfer
                 Type: function (uint256)
                 Source: "wrapper.transfer"
                Identifier wrapper
                   Type: contract WrapperOraclize
                   Source: "wrapper"
              MemberAccess to member value
                 Type: uint256
                 Source: "msg.value"
                Identifier msg
                   Type: msg
                   Source: "msg"
      ExpressionStatement
         Gas costs: [???]
         Source: "wrapper.update(\"URL\", \"json(https://api.kraken.com/0/public/Ticker?pair=ETHUSD).result.XETHZUSD.c.0\")"
        FunctionCall
           Type: tuple()
           Source: "wrapper.update(\"URL\", \"json(https://api.kraken.com/0/public/Ticker?pair=ETHUSD).result.XETHZUSD.c.0\")"
          MemberAccess to member update
             Type: function (string memory,string memory) payable external
             Source: "wrapper.update"
            Identifier wrapper
               Type: contract WrapperOraclize
               Source: "wrapper"
          Literal, token: [no token] value: URL
             Type: literal_string "URL"
             Source: "\"URL\""
          Literal, token: [no token] value: json(https://api.kraken.com/0/public/Ticker?pair=ETHUSD).result.XETHZUSD.c.0
             Type: literal_string "json(https://api.kraken.com/0/public/Ticker?pair=ETHUSD).result.XETHZUSD.c.0"
             Source: "\"json(https://api.kraken.com/0/public/Ticker?pair=ETHUSD).result.XETHZUSD.c.0\""
  FunctionDefinition "getWrapperData" - public - const
     Source: "function getWrapperData() public constant returns(bytes32) {\r\n    return wrapper.getWrapperData();\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(bytes32)"
      VariableDeclaration ""
         Type: bytes32
         Source: "bytes32"
        ElementaryTypeName bytes32
           Source: "bytes32"
    Block
       Source: "{\r\n    return wrapper.getWrapperData();\r\n  }"
      Return
         Gas costs: [???]
         Source: "return wrapper.getWrapperData()"
        FunctionCall
           Type: bytes32
           Source: "wrapper.getWrapperData()"
          MemberAccess to member getWrapperData
             Type: function () view external returns (bytes32)
             Source: "wrapper.getWrapperData"
            Identifier wrapper
               Type: contract WrapperOraclize
               Source: "wrapper"
