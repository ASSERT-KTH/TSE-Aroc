Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0x15e4cf1950ffa338ce5bc59456b3e579ed1bead3.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.18;"
ContractDefinition "OwnableToken"
   Source: "contract OwnableToken\r\n{\r\n    address owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function OwnableToken() public payable {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function changeOwner(address _new_owner) payable public onlyOwner {\r\n        require(_new_owner != address(0));\r\n        owner = _new_owner;\r\n    }\r\n}"
  VariableDeclaration "owner"
     Type: address
     Gas costs: 0
     Source: "address owner"
    ElementaryTypeName address
       Source: "address"
  ModifierDefinition "onlyOwner"
     Source: "modifier onlyOwner() {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n        require(owner == msg.sender);\r\n        _;\r\n    }"
      ExpressionStatement
         Gas costs: 1128
         Source: "require(owner == msg.sender)"
        FunctionCall
           Type: tuple()
           Source: "require(owner == msg.sender)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "owner == msg.sender"
            Identifier owner
               Type: address
               Source: "owner"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "OwnableToken" - public
     Source: "function OwnableToken() public payable {\r\n        owner = msg.sender;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        owner = msg.sender;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "owner = msg.sender"
        Assignment using operator =
           Type: address
           Source: "owner = msg.sender"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "changeOwner" - public
     Source: "function changeOwner(address _new_owner) payable public onlyOwner {\r\n        require(_new_owner != address(0));\r\n        owner = _new_owner;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _new_owner)"
      VariableDeclaration "_new_owner"
         Type: address
         Source: "address _new_owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        require(_new_owner != address(0));\r\n        owner = _new_owner;\r\n    }"
      ExpressionStatement
         Gas costs: 50
         Source: "require(_new_owner != address(0))"
        FunctionCall
           Type: tuple()
           Source: "require(_new_owner != address(0))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "_new_owner != address(0)"
            Identifier _new_owner
               Type: address
               Source: "_new_owner"
            FunctionCall
               Type: address
               Source: "address(0)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      ExpressionStatement
         Gas costs: 20267
         Source: "owner = _new_owner"
        Assignment using operator =
           Type: address
           Source: "owner = _new_owner"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier _new_owner
             Type: address
             Source: "_new_owner"
ContractDefinition "ERC20I"
   Gas costs: [???]
   Source: "contract ERC20I\r\n{\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}"
  VariableDeclaration "totalSupply"
     Type: uint256
     Source: "uint256 public totalSupply"
    ElementaryTypeName uint256
       Source: "uint256"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) public view returns (uint256 balance);"
    ParameterList
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256 balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) public returns (bool success);"
    ParameterList
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);"
    ParameterList
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint256 _value) public returns (bool success);"
    ParameterList
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) public view returns (uint256 remaining);"
    ParameterList
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256 remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint256 remaining"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Transfer"
     Source: "event Transfer(address indexed _from, address indexed _to, uint256 _value);"
    ParameterList
       Source: "(address indexed _from, address indexed _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address indexed _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address indexed _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Approval"
     Source: "event Approval(address indexed _owner, address indexed _spender, uint256 _value);"
    ParameterList
       Source: "(address indexed _owner, address indexed _spender, uint256 _value)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address indexed _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address indexed _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
ContractDefinition "ERC20"
   Source: "contract ERC20 is ERC20I {\r\n\r\n    uint256 constant MAX_UINT256 = 2**256 - 1;\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    function transfer(address _to, uint256 _value) public\r\n        returns (bool success)\r\n    {\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public\r\n        returns (bool success)\r\n    {\r\n        uint256 allowance = allowed[_from][msg.sender];\r\n        require(balances[_from] >= _value && allowance >= _value);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        if (allowance < MAX_UINT256) {\r\n            allowed[_from][msg.sender] -= _value;\r\n        }\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) view public\r\n        returns (uint256 balance)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success)\r\n    {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) view public\r\n        returns (uint256 remaining)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "ERC20I"
    UserDefinedTypeName "ERC20I"
       Source: "ERC20I"
  VariableDeclaration "MAX_UINT256"
     Type: uint256
     Gas costs: 3
     Source: "uint256 constant MAX_UINT256 = 2**256 - 1"
    ElementaryTypeName uint256
       Source: "uint256"
    BinaryOperation using operator -
       Type: int_const 1157...(70 digits omitted)...9935
       Source: "2**256 - 1"
      BinaryOperation using operator **
         Type: int_const 1157...(70 digits omitted)...9936
         Source: "2**256"
        Literal, token: [no token] value: 2
           Type: int_const 2
           Source: "2"
        Literal, token: [no token] value: 256
           Type: int_const 256
           Source: "256"
      Literal, token: [no token] value: 1
         Type: int_const 1
         Source: "1"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping (address => uint256) balances"
    Mapping
       Source: "mapping (address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "allowed"
     Type: mapping(address => mapping(address => uint256))
     Gas costs: 0
     Source: "mapping (address => mapping (address => uint256)) allowed"
    Mapping
       Source: "mapping (address => mapping (address => uint256))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping (address => uint256)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) public\r\n        returns (bool success)\r\n    {\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 333
         Source: "require(balances[msg.sender] >= _value)"
        FunctionCall
           Type: tuple()
           Source: "require(balances[msg.sender] >= _value)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "balances[msg.sender] >= _value"
            IndexAccess
               Type: uint256
               Source: "balances[msg.sender]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
      ExpressionStatement
         Gas costs: 20328
         Source: "balances[msg.sender] -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "balances[msg.sender] -= _value"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 20323
         Source: "balances[_to] += _value"
        Assignment using operator +=
           Type: uint256
           Source: "balances[_to] += _value"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: [???]
         Source: "Transfer(msg.sender, _to, _value)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(msg.sender, _to, _value)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _value) public\r\n        returns (bool success)\r\n    {\r\n        uint256 allowance = allowed[_from][msg.sender];\r\n        require(balances[_from] >= _value && allowance >= _value);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        if (allowance < MAX_UINT256) {\r\n            allowed[_from][msg.sender] -= _value;\r\n        }\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        uint256 allowance = allowed[_from][msg.sender];\r\n        require(balances[_from] >= _value && allowance >= _value);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        if (allowance < MAX_UINT256) {\r\n            allowed[_from][msg.sender] -= _value;\r\n        }\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }"
      VariableDeclarationStatement
         Gas costs: 396
         Source: "uint256 allowance = allowed[_from][msg.sender]"
        VariableDeclaration "allowance"
           Type: uint256
           Source: "uint256 allowance"
          ElementaryTypeName uint256
             Source: "uint256"
        IndexAccess
           Type: uint256
           Source: "allowed[_from][msg.sender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowed[_from]"
            Identifier allowed
               Type: mapping(address => mapping(address => uint256))
               Source: "allowed"
            Identifier _from
               Type: address
               Source: "_from"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 362
         Source: "require(balances[_from] >= _value && allowance >= _value)"
        FunctionCall
           Type: tuple()
           Source: "require(balances[_from] >= _value && allowance >= _value)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator &&
             Type: bool
             Source: "balances[_from] >= _value && allowance >= _value"
            BinaryOperation using operator >=
               Type: bool
               Source: "balances[_from] >= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_from]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _from
                   Type: address
                   Source: "_from"
              Identifier _value
                 Type: uint256
                 Source: "_value"
            BinaryOperation using operator >=
               Type: bool
               Source: "allowance >= _value"
              Identifier allowance
                 Type: uint256
                 Source: "allowance"
              Identifier _value
                 Type: uint256
                 Source: "_value"
      ExpressionStatement
         Gas costs: 20329
         Source: "balances[_to] += _value"
        Assignment using operator +=
           Type: uint256
           Source: "balances[_to] += _value"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 20323
         Source: "balances[_from] -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "balances[_from] -= _value"
          IndexAccess
             Type: uint256
             Source: "balances[_from]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _from
               Type: address
               Source: "_from"
          Identifier _value
             Type: uint256
             Source: "_value"
      IfStatement
         Source: "if (allowance < MAX_UINT256) {\r\n            allowed[_from][msg.sender] -= _value;\r\n        }"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 6
           Source: "allowance < MAX_UINT256"
          Identifier allowance
             Type: uint256
             Source: "allowance"
          Identifier MAX_UINT256
             Type: uint256
             Source: "MAX_UINT256"
        Block
           Source: "{\r\n            allowed[_from][msg.sender] -= _value;\r\n        }"
          ExpressionStatement
             Gas costs: 20418
             Source: "allowed[_from][msg.sender] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "allowed[_from][msg.sender] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "allowed[_from][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[_from]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  Identifier _from
                     Type: address
                     Source: "_from"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
      ExpressionStatement
         Gas costs: [???]
         Source: "Transfer(_from, _to, _value)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(_from, _to, _value)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) view public\r\n        returns (uint256 balance)\r\n    {\r\n        return balances[_owner];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return balances[_owner];\r\n    }"
      Return
         Gas costs: 304
         Source: "return balances[_owner]"
        IndexAccess
           Type: uint256
           Source: "balances[_owner]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          Identifier _owner
             Type: address
             Source: "_owner"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint256 _value) public\r\n        returns (bool success)\r\n    {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 20199
         Source: "allowed[msg.sender][_spender] = _value"
        Assignment using operator =
           Type: uint256
           Source: "allowed[msg.sender][_spender] = _value"
          IndexAccess
             Type: uint256
             Source: "allowed[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[msg.sender]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: [???]
         Source: "Approval(msg.sender, _spender, _value)"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender, _spender, _value)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) view public\r\n        returns (uint256 remaining)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint256 remaining"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return allowed[_owner][_spender];\r\n    }"
      Return
         Gas costs: 394
         Source: "return allowed[_owner][_spender]"
        IndexAccess
           Type: uint256
           Source: "allowed[_owner][_spender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowed[_owner]"
            Identifier allowed
               Type: mapping(address => mapping(address => uint256))
               Source: "allowed"
            Identifier _owner
               Type: address
               Source: "_owner"
          Identifier _spender
             Type: address
             Source: "_spender"
ContractDefinition "ANtokContractAirdrop"
   Source: "contract ANtokContractAirdrop is ERC20, OwnableToken\r\n{\r\n    event Wasted(address to, uint256 value, uint256 date);  // Wasted(_to, _amount, now);\r\n\r\n    string public version = '1.2'; //Just an arbitrary versioning scheme.\r\n\r\n    uint8  public decimals;\r\n    string public name;\r\n    string public symbol;  //An identifier: eg SBX length 6 symbols max\r\n\r\n    uint256 public paySize = 1 * 10 ** 18;  // show size of payment in mass transfer\r\n    uint256 public holdersCount;\r\n    uint256 public tokensSpent;\r\n\r\n    mapping (address => bool) bounty; // show who got bounty\r\n\r\n    /* Autoconstructor */\r\n    function ANtokContractAirdrop() public payable {\r\n        decimals = 18;  // Amount of decimals for display purposes\r\n        name = \"ALFA NTOK\";  // Set the name for display purposes\r\n        symbol = \"\u0430NTOK\";  // Set the symbol for display purposes\r\n        balances[msg.sender] = 20180000 * 10 ** uint(decimals); // Give the creator promo tokens (100000 for example)\r\n        balances[this] = 50000 * 10 ** uint(decimals); // Stay some tokens for bounty from contract\r\n        totalSupply = balances[msg.sender] + balances[this]; // Update total supply (100000 for example)\r\n    }\r\n\r\n    /**\r\n     * @dev notify owners about their balances was in promo action.\r\n     * @param _holders addresses of the owners to be notified\r\n     */\r\n    function massTransfer(address [] _holders) public onlyOwner {\r\n\r\n        uint256 count = _holders.length;\r\n        assert(paySize * count <= balanceOf(msg.sender));\r\n        for (uint256 i = 0; i < count; i++) {\r\n            transfer(_holders [i], paySize);\r\n        }\r\n        Wasted(owner, tokensSpent, now);\r\n    }\r\n\r\n    /**\r\n    * @dev withdraw tokens from the contract.\r\n    */\r\n    function withdrawTo(address _recipient, uint256 _amount) public onlyOwner {\r\n        this.transfer(_recipient, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev withdraw tokens from the contract.\r\n    */\r\n    function setPaySize(uint256 _value) public onlyOwner\r\n        returns (uint256)\r\n    {\r\n        paySize = _value;\r\n        return paySize;\r\n    }\r\n\r\n    /**\r\n    * @dev withdraw tokens as bounty.\r\n    */\r\n    function withdrawBounty(address _recipient, uint256 _amount) internal {\r\n        this.transfer(_recipient, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev get bounty for the people.\r\n    */\r\n    function getBounty() public payable {\r\n        require(bounty[msg.sender] != true); // 1 address = 1 token\r\n        require(balances[this] != 0);\r\n        bounty[msg.sender] = true;\r\n        withdrawBounty(msg.sender, 1 * 10 ** uint(decimals));\r\n    }\r\n\r\n    /**\r\n    * @dev is bounty address.\r\n    */\r\n    function bountyOf(address _bountist) view public\r\n        returns (bool thanked)\r\n    {\r\n        return bounty[_bountist];\r\n    }\r\n\r\n    function() public {\r\n        revert(); // revert all incoming transactions\r\n    }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "ERC20"
    UserDefinedTypeName "ERC20"
       Source: "ERC20"
  InheritanceSpecifier
     Gas costs: 0
     Source: "OwnableToken"
    UserDefinedTypeName "OwnableToken"
       Source: "OwnableToken"
  EventDefinition "Wasted"
     Gas costs: 0
     Source: "event Wasted(address to, uint256 value, uint256 date);"
    ParameterList
       Source: "(address to, uint256 value, uint256 date)"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "date"
         Type: uint256
         Source: "uint256 date"
        ElementaryTypeName uint256
           Source: "uint256"
  VariableDeclaration "version"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public version = '1.2'"
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: 1.2
       Type: literal_string "1.2"
       Source: "'1.2'"
  VariableDeclaration "decimals"
     Type: uint8
     Gas costs: [???]
     Source: "uint8  public decimals"
    ElementaryTypeName uint8
       Source: "uint8"
  VariableDeclaration "name"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public name"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "symbol"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public symbol"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "paySize"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public paySize = 1 * 10 ** 18"
    ElementaryTypeName uint256
       Source: "uint256"
    BinaryOperation using operator *
       Type: int_const 1000000000000000000
       Source: "1 * 10 ** 18"
      Literal, token: [no token] value: 1
         Type: int_const 1
         Source: "1"
      BinaryOperation using operator **
         Type: int_const 1000000000000000000
         Source: "10 ** 18"
        Literal, token: [no token] value: 10
           Type: int_const 10
           Source: "10"
        Literal, token: [no token] value: 18
           Type: int_const 18
           Source: "18"
  VariableDeclaration "holdersCount"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public holdersCount"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "tokensSpent"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public tokensSpent"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "bounty"
     Type: mapping(address => bool)
     Gas costs: 0
     Source: "mapping (address => bool) bounty"
    Mapping
       Source: "mapping (address => bool)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName bool
         Source: "bool"
  FunctionDefinition "ANtokContractAirdrop" - public
     Source: "function ANtokContractAirdrop() public payable {\r\n        decimals = 18;  // Amount of decimals for display purposes\r\n        name = \"ALFA NTOK\";  // Set the name for display purposes\r\n        symbol = \"\u0430NTOK\";  // Set the symbol for display purposes\r\n        balances[msg.sender] = 20180000 * 10 ** uint(decimals); // Give the creator promo tokens (100000 for example)\r\n        balances[this] = 50000 * 10 ** uint(decimals); // Stay some tokens for bounty from contract\r\n        totalSupply = balances[msg.sender] + balances[this]; // Update total supply (100000 for example)\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        decimals = 18;  // Amount of decimals for display purposes\r\n        name = \"ALFA NTOK\";  // Set the name for display purposes\r\n        symbol = \"\u0430NTOK\";  // Set the symbol for display purposes\r\n        balances[msg.sender] = 20180000 * 10 ** uint(decimals); // Give the creator promo tokens (100000 for example)\r\n        balances[this] = 50000 * 10 ** uint(decimals); // Stay some tokens for bounty from contract\r\n        totalSupply = balances[msg.sender] + balances[this]; // Update total supply (100000 for example)\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "decimals = 18"
        Assignment using operator =
           Type: uint8
           Source: "decimals = 18"
          Identifier decimals
             Type: uint8
             Source: "decimals"
          Literal, token: [no token] value: 18
             Type: int_const 18
             Source: "18"
      ExpressionStatement
         Gas costs: 0
         Source: "name = \"ALFA NTOK\""
        Assignment using operator =
           Type: string storage ref
           Source: "name = \"ALFA NTOK\""
          Identifier name
             Type: string storage ref
             Source: "name"
          Literal, token: [no token] value: ALFA NTOK
             Type: literal_string "ALFA NTOK"
             Source: "\"ALFA NTOK\""
      ExpressionStatement
         Gas costs: 0
         Source: "symbol = \"\u0430NTOK\""
        Assignment using operator =
           Type: string storage ref
           Source: "symbol = \"\u0430NTOK\""
          Identifier symbol
             Type: string storage ref
             Source: "symbol"
          Literal, token: [no token] value: аNTOK
             Type: literal_string "аNTOK"
             Source: "\"\u0430NTOK\""
      ExpressionStatement
         Gas costs: 0
         Source: "balances[msg.sender] = 20180000 * 10 ** uint(decimals)"
        Assignment using operator =
           Type: uint256
           Source: "balances[msg.sender] = 20180000 * 10 ** uint(decimals)"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          BinaryOperation using operator *
             Type: uint256
             Source: "20180000 * 10 ** uint(decimals)"
            Literal, token: [no token] value: 20180000
               Type: int_const 20180000
               Source: "20180000"
            BinaryOperation using operator **
               Type: uint256
               Source: "10 ** uint(decimals)"
              Literal, token: [no token] value: 10
                 Type: int_const 10
                 Source: "10"
              FunctionCall
                 Type: uint256
                 Source: "uint(decimals)"
                ElementaryTypeNameExpression uint
                   Type: type(uint256)
                   Source: "uint"
                Identifier decimals
                   Type: uint8
                   Source: "decimals"
      ExpressionStatement
         Gas costs: 0
         Source: "balances[this] = 50000 * 10 ** uint(decimals)"
        Assignment using operator =
           Type: uint256
           Source: "balances[this] = 50000 * 10 ** uint(decimals)"
          IndexAccess
             Type: uint256
             Source: "balances[this]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier this
               Type: contract ANtokContractAirdrop
               Source: "this"
          BinaryOperation using operator *
             Type: uint256
             Source: "50000 * 10 ** uint(decimals)"
            Literal, token: [no token] value: 50000
               Type: int_const 50000
               Source: "50000"
            BinaryOperation using operator **
               Type: uint256
               Source: "10 ** uint(decimals)"
              Literal, token: [no token] value: 10
                 Type: int_const 10
                 Source: "10"
              FunctionCall
                 Type: uint256
                 Source: "uint(decimals)"
                ElementaryTypeNameExpression uint
                   Type: type(uint256)
                   Source: "uint"
                Identifier decimals
                   Type: uint8
                   Source: "decimals"
      ExpressionStatement
         Gas costs: 0
         Source: "totalSupply = balances[msg.sender] + balances[this]"
        Assignment using operator =
           Type: uint256
           Source: "totalSupply = balances[msg.sender] + balances[this]"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          BinaryOperation using operator +
             Type: uint256
             Source: "balances[msg.sender] + balances[this]"
            IndexAccess
               Type: uint256
               Source: "balances[msg.sender]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            IndexAccess
               Type: uint256
               Source: "balances[this]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier this
                 Type: contract ANtokContractAirdrop
                 Source: "this"
  FunctionDefinition "massTransfer" - public
     Source: "function massTransfer(address [] _holders) public onlyOwner {\r\n\r\n        uint256 count = _holders.length;\r\n        assert(paySize * count <= balanceOf(msg.sender));\r\n        for (uint256 i = 0; i < count; i++) {\r\n            transfer(_holders [i], paySize);\r\n        }\r\n        Wasted(owner, tokensSpent, now);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address [] _holders)"
      VariableDeclaration "_holders"
         Type: address[] memory
         Source: "address [] _holders"
        ArrayTypeName
           Source: "address []"
          ElementaryTypeName address
             Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n\r\n        uint256 count = _holders.length;\r\n        assert(paySize * count <= balanceOf(msg.sender));\r\n        for (uint256 i = 0; i < count; i++) {\r\n            transfer(_holders [i], paySize);\r\n        }\r\n        Wasted(owner, tokensSpent, now);\r\n    }"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "uint256 count = _holders.length"
        VariableDeclaration "count"
           Type: uint256
           Source: "uint256 count"
          ElementaryTypeName uint256
             Source: "uint256"
        MemberAccess to member length
           Type: uint256
           Source: "_holders.length"
          Identifier _holders
             Type: address[] memory
             Source: "_holders"
      ExpressionStatement
         Gas costs: 254
         Source: "assert(paySize * count <= balanceOf(msg.sender))"
        FunctionCall
           Type: tuple()
           Source: "assert(paySize * count <= balanceOf(msg.sender))"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator <=
             Type: bool
             Source: "paySize * count <= balanceOf(msg.sender)"
            BinaryOperation using operator *
               Type: uint256
               Source: "paySize * count"
              Identifier paySize
                 Type: uint256
                 Source: "paySize"
              Identifier count
                 Type: uint256
                 Source: "count"
            FunctionCall
               Type: uint256
               Source: "balanceOf(msg.sender)"
              Identifier balanceOf
                 Type: function (address) view returns (uint256)
                 Source: "balanceOf"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
      ForStatement
         Source: "for (uint256 i = 0; i < count; i++) {\r\n            transfer(_holders [i], paySize);\r\n        }"
        VariableDeclarationStatement
           Gas costs: 11
           Source: "uint256 i = 0"
          VariableDeclaration "i"
             Type: uint256
             Source: "uint256 i"
            ElementaryTypeName uint256
               Source: "uint256"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 9
           Source: "i < count"
          Identifier i
             Type: uint256
             Source: "i"
          Identifier count
             Type: uint256
             Source: "count"
        ExpressionStatement
           Gas costs: 19
           Source: "i++"
          UnaryOperation (postfix) ++
             Type: uint256
             Source: "i++"
            Identifier i
               Type: uint256
               Source: "i"
        Block
           Source: "{\r\n            transfer(_holders [i], paySize);\r\n        }"
          ExpressionStatement
             Gas costs: [???]
             Source: "transfer(_holders [i], paySize)"
            FunctionCall
               Type: bool
               Source: "transfer(_holders [i], paySize)"
              Identifier transfer
                 Type: function (address,uint256) returns (bool)
                 Source: "transfer"
              IndexAccess
                 Type: address
                 Source: "_holders [i]"
                Identifier _holders
                   Type: address[] memory
                   Source: "_holders"
                Identifier i
                   Type: uint256
                   Source: "i"
              Identifier paySize
                 Type: uint256
                 Source: "paySize"
      ExpressionStatement
         Gas costs: [???]
         Source: "Wasted(owner, tokensSpent, now)"
        FunctionCall
           Type: tuple()
           Source: "Wasted(owner, tokensSpent, now)"
          Identifier Wasted
             Type: function (address,uint256,uint256)
             Source: "Wasted"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier tokensSpent
             Type: uint256
             Source: "tokensSpent"
          Identifier now
             Type: uint256
             Source: "now"
  FunctionDefinition "withdrawTo" - public
     Source: "function withdrawTo(address _recipient, uint256 _amount) public onlyOwner {\r\n        this.transfer(_recipient, _amount);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _recipient, uint256 _amount)"
      VariableDeclaration "_recipient"
         Type: address
         Source: "address _recipient"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        this.transfer(_recipient, _amount);\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "this.transfer(_recipient, _amount)"
        FunctionCall
           Type: bool
           Source: "this.transfer(_recipient, _amount)"
          MemberAccess to member transfer
             Type: function (address,uint256) external returns (bool)
             Source: "this.transfer"
            Identifier this
               Type: contract ANtokContractAirdrop
               Source: "this"
          Identifier _recipient
             Type: address
             Source: "_recipient"
          Identifier _amount
             Type: uint256
             Source: "_amount"
  FunctionDefinition "setPaySize" - public
     Source: "function setPaySize(uint256 _value) public onlyOwner\r\n        returns (uint256)\r\n    {\r\n        paySize = _value;\r\n        return paySize;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _value)"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        paySize = _value;\r\n        return paySize;\r\n    }"
      ExpressionStatement
         Gas costs: 20014
         Source: "paySize = _value"
        Assignment using operator =
           Type: uint256
           Source: "paySize = _value"
          Identifier paySize
             Type: uint256
             Source: "paySize"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 208
         Source: "return paySize"
        Identifier paySize
           Type: uint256
           Source: "paySize"
  FunctionDefinition "withdrawBounty"
     Source: "function withdrawBounty(address _recipient, uint256 _amount) internal {\r\n        this.transfer(_recipient, _amount);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _recipient, uint256 _amount)"
      VariableDeclaration "_recipient"
         Type: address
         Source: "address _recipient"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        this.transfer(_recipient, _amount);\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "this.transfer(_recipient, _amount)"
        FunctionCall
           Type: bool
           Source: "this.transfer(_recipient, _amount)"
          MemberAccess to member transfer
             Type: function (address,uint256) external returns (bool)
             Source: "this.transfer"
            Identifier this
               Type: contract ANtokContractAirdrop
               Source: "this"
          Identifier _recipient
             Type: address
             Source: "_recipient"
          Identifier _amount
             Type: uint256
             Source: "_amount"
  FunctionDefinition "getBounty" - public
     Source: "function getBounty() public payable {\r\n        require(bounty[msg.sender] != true); // 1 address = 1 token\r\n        require(balances[this] != 0);\r\n        bounty[msg.sender] = true;\r\n        withdrawBounty(msg.sender, 1 * 10 ** uint(decimals));\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(bounty[msg.sender] != true); // 1 address = 1 token\r\n        require(balances[this] != 0);\r\n        bounty[msg.sender] = true;\r\n        withdrawBounty(msg.sender, 1 * 10 ** uint(decimals));\r\n    }"
      ExpressionStatement
         Gas costs: 381
         Source: "require(bounty[msg.sender] != true)"
        FunctionCall
           Type: tuple()
           Source: "require(bounty[msg.sender] != true)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "bounty[msg.sender] != true"
            IndexAccess
               Type: bool
               Source: "bounty[msg.sender]"
              Identifier bounty
                 Type: mapping(address => bool)
                 Source: "bounty"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Literal, token: true value: true
               Type: bool
               Source: "true"
      ExpressionStatement
         Gas costs: 333
         Source: "require(balances[this] != 0)"
        FunctionCall
           Type: tuple()
           Source: "require(balances[this] != 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "balances[this] != 0"
            IndexAccess
               Type: uint256
               Source: "balances[this]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier this
                 Type: contract ANtokContractAirdrop
                 Source: "this"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: 20362
         Source: "bounty[msg.sender] = true"
        Assignment using operator =
           Type: bool
           Source: "bounty[msg.sender] = true"
          IndexAccess
             Type: bool
             Source: "bounty[msg.sender]"
            Identifier bounty
               Type: mapping(address => bool)
               Source: "bounty"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Literal, token: true value: true
             Type: bool
             Source: "true"
      ExpressionStatement
         Gas costs: 1872
         Source: "withdrawBounty(msg.sender, 1 * 10 ** uint(decimals))"
        FunctionCall
           Type: tuple()
           Source: "withdrawBounty(msg.sender, 1 * 10 ** uint(decimals))"
          Identifier withdrawBounty
             Type: function (address,uint256)
             Source: "withdrawBounty"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          BinaryOperation using operator *
             Type: uint256
             Source: "1 * 10 ** uint(decimals)"
            Literal, token: [no token] value: 1
               Type: int_const 1
               Source: "1"
            BinaryOperation using operator **
               Type: uint256
               Source: "10 ** uint(decimals)"
              Literal, token: [no token] value: 10
                 Type: int_const 10
                 Source: "10"
              FunctionCall
                 Type: uint256
                 Source: "uint(decimals)"
                ElementaryTypeNameExpression uint
                   Type: type(uint256)
                   Source: "uint"
                Identifier decimals
                   Type: uint8
                   Source: "decimals"
  FunctionDefinition "bountyOf" - public - const
     Source: "function bountyOf(address _bountist) view public\r\n        returns (bool thanked)\r\n    {\r\n        return bounty[_bountist];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _bountist)"
      VariableDeclaration "_bountist"
         Type: address
         Source: "address _bountist"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(bool thanked)"
      VariableDeclaration "thanked"
         Type: bool
         Source: "bool thanked"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        return bounty[_bountist];\r\n    }"
      Return
         Gas costs: 340
         Source: "return bounty[_bountist]"
        IndexAccess
           Type: bool
           Source: "bounty[_bountist]"
          Identifier bounty
             Type: mapping(address => bool)
             Source: "bounty"
          Identifier _bountist
             Type: address
             Source: "_bountist"
  FunctionDefinition "" - public
     Source: "function() public {\r\n        revert(); // revert all incoming transactions\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        revert(); // revert all incoming transactions\r\n    }"
      ExpressionStatement
         Gas costs: 6
         Source: "revert()"
        FunctionCall
           Type: tuple()
           Source: "revert()"
          Identifier revert
             Type: function () pure
             Source: "revert"
