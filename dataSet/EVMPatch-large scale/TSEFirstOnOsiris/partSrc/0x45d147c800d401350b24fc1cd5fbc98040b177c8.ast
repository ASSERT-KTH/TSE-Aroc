Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0x45d147c800d401350b24fc1cd5fbc98040b177c8.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.2;"
ContractDefinition "Token"
   Source: "contract Token{\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  event Approval(address indexed _onwer,address indexed _spender, uint256 _value);\r\n\r\n  function totalSupply() constant returns(uint256 totalSupply){}\r\n\r\n  function balanceOf(address _owner) constant returns (uint256 balance){}\r\n\r\n  function transfer(address _to, uint256 _value) constant returns(bool success){}\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) constant returns (bool success){}\r\n\r\n  function approve(address _spender, uint256 _value) constant returns(bool success){}\r\n\r\n  function allowance(address _owner, uint _spender) constant returns(uint256 remaining){}\r\n\r\n}"
  EventDefinition "Transfer"
     Gas costs: 0
     Source: "event Transfer(address indexed _from, address indexed _to, uint256 _value);"
    ParameterList
       Source: "(address indexed _from, address indexed _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address indexed _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address indexed _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Approval"
     Gas costs: 0
     Source: "event Approval(address indexed _onwer,address indexed _spender, uint256 _value);"
    ParameterList
       Source: "(address indexed _onwer,address indexed _spender, uint256 _value)"
      VariableDeclaration "_onwer"
         Type: address
         Source: "address indexed _onwer"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address indexed _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "totalSupply" - public - const
     Source: "function totalSupply() constant returns(uint256 totalSupply){}"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: "(uint256 totalSupply)"
      VariableDeclaration "totalSupply"
         Type: uint256
         Source: "uint256 totalSupply"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Gas costs: 0
       Source: "{}"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) constant returns (uint256 balance){}"
    ParameterList
       Gas costs: 0
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: "(uint256 balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Gas costs: 0
       Source: "{}"
  FunctionDefinition "transfer" - public - const
     Source: "function transfer(address _to, uint256 _value) constant returns(bool success){}"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Gas costs: 0
       Source: "{}"
  FunctionDefinition "transferFrom" - public - const
     Source: "function transferFrom(address _from, address _to, uint256 _value) constant returns (bool success){}"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Gas costs: 0
       Source: "{}"
  FunctionDefinition "approve" - public - const
     Source: "function approve(address _spender, uint256 _value) constant returns(bool success){}"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Gas costs: 0
       Source: "{}"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, uint _spender) constant returns(uint256 remaining){}"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, uint _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: uint256
         Source: "uint _spender"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(uint256 remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint256 remaining"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Gas costs: 0
       Source: "{}"
ContractDefinition "StandardToken"
   Source: "contract StandardToken is Token{\r\n  uint256 public totalSupply;\r\n  mapping(address => uint256)balances;\r\n  mapping(address =>mapping(address=>uint256))allowed;\r\n\r\n\r\n  function transfer(address _to, uint256 _value)constant returns(bool success){\r\n    if(balances[msg.sender]>_value && balances[_to]+_value>balances[_to]) {\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] +=_value;\r\n      Transfer(msg.sender,_to,_value);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)constant returns(bool success){\r\n    if(balances[_from]>_value && allowed[_from][msg.sender]>_value && balances[_to]+_value>balances[_to]){\r\n      balances[_from]-=_value;\r\n      allowed[_from][msg.sender]-=_value;\r\n      balances[_to]-=_value;\r\n      Transfer(_from,_to,_value);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value)constant returns (bool success){\r\n    allowed[msg.sender][_spender]=_value;\r\n    Approval(msg.sender,_spender,_value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint256 balance){\r\n    return balances[_owner];\r\n  }\r\n\r\n  function allowance(address _onwer,address _spender) constant returns(uint256 allowance){\r\n    return allowed[_onwer][_spender];\r\n  }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Token"
    UserDefinedTypeName "Token"
       Source: "Token"
  VariableDeclaration "totalSupply"
     Type: uint256
     Gas costs: 287
     Source: "uint256 public totalSupply"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping(address => uint256)balances"
    Mapping
       Source: "mapping(address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "allowed"
     Type: mapping(address => mapping(address => uint256))
     Gas costs: 0
     Source: "mapping(address =>mapping(address=>uint256))allowed"
    Mapping
       Source: "mapping(address =>mapping(address=>uint256))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping(address=>uint256)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "transfer" - public - const
     Source: "function transfer(address _to, uint256 _value)constant returns(bool success){\r\n    if(balances[msg.sender]>_value && balances[_to]+_value>balances[_to]) {\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] +=_value;\r\n      Transfer(msg.sender,_to,_value);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n    if(balances[msg.sender]>_value && balances[_to]+_value>balances[_to]) {\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] +=_value;\r\n      Transfer(msg.sender,_to,_value);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }"
      IfStatement
         Source: "if(balances[msg.sender]>_value && balances[_to]+_value>balances[_to]) {\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] +=_value;\r\n      Transfer(msg.sender,_to,_value);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 927
           Source: "balances[msg.sender]>_value && balances[_to]+_value>balances[_to]"
          BinaryOperation using operator >
             Type: bool
             Source: "balances[msg.sender]>_value"
            IndexAccess
               Type: uint256
               Source: "balances[msg.sender]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
          BinaryOperation using operator >
             Type: bool
             Source: "balances[_to]+_value>balances[_to]"
            BinaryOperation using operator +
               Type: uint256
               Source: "balances[_to]+_value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
            IndexAccess
               Type: uint256
               Source: "balances[_to]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _to
                 Type: address
                 Source: "_to"
        Block
           Source: "{\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] +=_value;\r\n      Transfer(msg.sender,_to,_value);\r\n      return true;\r\n    }"
          ExpressionStatement
             Gas costs: 20328
             Source: "balances[msg.sender] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "balances[msg.sender] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20323
             Source: "balances[_to] +=_value"
            Assignment using operator +=
               Type: uint256
               Source: "balances[_to] +=_value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 1837
             Source: "Transfer(msg.sender,_to,_value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(msg.sender,_to,_value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{\r\n      return false;\r\n    }"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "transferFrom" - public - const
     Source: "function transferFrom(address _from, address _to, uint256 _value)constant returns(bool success){\r\n    if(balances[_from]>_value && allowed[_from][msg.sender]>_value && balances[_to]+_value>balances[_to]){\r\n      balances[_from]-=_value;\r\n      allowed[_from][msg.sender]-=_value;\r\n      balances[_to]-=_value;\r\n      Transfer(_from,_to,_value);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n    if(balances[_from]>_value && allowed[_from][msg.sender]>_value && balances[_to]+_value>balances[_to]){\r\n      balances[_from]-=_value;\r\n      allowed[_from][msg.sender]-=_value;\r\n      balances[_to]-=_value;\r\n      Transfer(_from,_to,_value);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }"
      IfStatement
         Source: "if(balances[_from]>_value && allowed[_from][msg.sender]>_value && balances[_to]+_value>balances[_to]){\r\n      balances[_from]-=_value;\r\n      allowed[_from][msg.sender]-=_value;\r\n      balances[_to]-=_value;\r\n      Transfer(_from,_to,_value);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 1344
           Source: "balances[_from]>_value && allowed[_from][msg.sender]>_value && balances[_to]+_value>balances[_to]"
          BinaryOperation using operator &&
             Type: bool
             Source: "balances[_from]>_value && allowed[_from][msg.sender]>_value"
            BinaryOperation using operator >
               Type: bool
               Source: "balances[_from]>_value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_from]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _from
                   Type: address
                   Source: "_from"
              Identifier _value
                 Type: uint256
                 Source: "_value"
            BinaryOperation using operator >
               Type: bool
               Source: "allowed[_from][msg.sender]>_value"
              IndexAccess
                 Type: uint256
                 Source: "allowed[_from][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[_from]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  Identifier _from
                     Type: address
                     Source: "_from"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          BinaryOperation using operator >
             Type: bool
             Source: "balances[_to]+_value>balances[_to]"
            BinaryOperation using operator +
               Type: uint256
               Source: "balances[_to]+_value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
            IndexAccess
               Type: uint256
               Source: "balances[_to]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _to
                 Type: address
                 Source: "_to"
        Block
           Source: "{\r\n      balances[_from]-=_value;\r\n      allowed[_from][msg.sender]-=_value;\r\n      balances[_to]-=_value;\r\n      Transfer(_from,_to,_value);\r\n      return true;\r\n    }"
          ExpressionStatement
             Gas costs: 20329
             Source: "balances[_from]-=_value"
            Assignment using operator -=
               Type: uint256
               Source: "balances[_from]-=_value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_from]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _from
                   Type: address
                   Source: "_from"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20412
             Source: "allowed[_from][msg.sender]-=_value"
            Assignment using operator -=
               Type: uint256
               Source: "allowed[_from][msg.sender]-=_value"
              IndexAccess
                 Type: uint256
                 Source: "allowed[_from][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[_from]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  Identifier _from
                     Type: address
                     Source: "_from"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20323
             Source: "balances[_to]-=_value"
            Assignment using operator -=
               Type: uint256
               Source: "balances[_to]-=_value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 1838
             Source: "Transfer(_from,_to,_value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(_from,_to,_value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              Identifier _from
                 Type: address
                 Source: "_from"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{\r\n      return false;\r\n    }"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "approve" - public - const
     Source: "function approve(address _spender, uint256 _value)constant returns (bool success){\r\n    allowed[msg.sender][_spender]=_value;\r\n    Approval(msg.sender,_spender,_value);\r\n    return true;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n    allowed[msg.sender][_spender]=_value;\r\n    Approval(msg.sender,_spender,_value);\r\n    return true;\r\n  }"
      ExpressionStatement
         Gas costs: 20199
         Source: "allowed[msg.sender][_spender]=_value"
        Assignment using operator =
           Type: uint256
           Source: "allowed[msg.sender][_spender]=_value"
          IndexAccess
             Type: uint256
             Source: "allowed[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[msg.sender]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 1837
         Source: "Approval(msg.sender,_spender,_value)"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender,_spender,_value)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) constant returns (uint256 balance){\r\n    return balances[_owner];\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    return balances[_owner];\r\n  }"
      Return
         Gas costs: 304
         Source: "return balances[_owner]"
        IndexAccess
           Type: uint256
           Source: "balances[_owner]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          Identifier _owner
             Type: address
             Source: "_owner"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _onwer,address _spender) constant returns(uint256 allowance){\r\n    return allowed[_onwer][_spender];\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _onwer,address _spender)"
      VariableDeclaration "_onwer"
         Type: address
         Source: "address _onwer"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 allowance)"
      VariableDeclaration "allowance"
         Type: uint256
         Source: "uint256 allowance"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    return allowed[_onwer][_spender];\r\n  }"
      Return
         Gas costs: 394
         Source: "return allowed[_onwer][_spender]"
        IndexAccess
           Type: uint256
           Source: "allowed[_onwer][_spender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowed[_onwer]"
            Identifier allowed
               Type: mapping(address => mapping(address => uint256))
               Source: "allowed"
            Identifier _onwer
               Type: address
               Source: "_onwer"
          Identifier _spender
             Type: address
             Source: "_spender"
ContractDefinition "NinjaToken"
   Source: "contract NinjaToken is StandardToken{\r\n    string public name =\"NinjaToken\";\r\n    string public version=\"0.0.1\";\r\n    uint public decimals = 18;\r\n    mapping(address=>string) public commit;\r\n    \r\n    address public founder;\r\n    address public admin; \r\n    bool public fundingLock=true;  // indicate funding status activate or inactivate\r\n    address public fundingAccount;\r\n    uint public startBlock;        //Crowdsale startBlock\r\n    uint public blockDuration;     // Crowdsale blocks duration\r\n    uint public fundingExchangeRate;\r\n    uint public price=10;\r\n    bool public transferLock=false;  // indicate transfer status activate or inactivate\r\n\r\n    event Funding(address sender, uint256 eth);\r\n    event Buy(address buyer, uint256 eth);\r\n    \r\n    function NinjaToken(address _founder,address _admin){\r\n        founder=_founder;\r\n        admin=_admin;\r\n    }\r\n    \r\n    function changeFunder(address _founder,address _admin){\r\n        if(msg.sender!=admin) throw;\r\n        founder=_founder;\r\n        admin=_admin;        \r\n    }\r\n    \r\n    function setFundingLock(bool _fundinglock,address _fundingAccount){\r\n        if(msg.sender!=founder) throw;\r\n        fundingLock=_fundinglock;\r\n        fundingAccount=_fundingAccount;\r\n    }\r\n    \r\n    function setFundingEnv(uint _startBlock, uint _blockDuration,uint _fundingExchangeRate){\r\n        if(msg.sender!=founder) throw;\r\n        startBlock=_startBlock;\r\n        blockDuration=_blockDuration;\r\n        fundingExchangeRate=_fundingExchangeRate;\r\n    }\r\n    \r\n    function funding() payable {\r\n        if(fundingLock||block.number<startBlock||block.number>startBlock+blockDuration) throw;\r\n        if(balances[msg.sender]>balances[msg.sender]+msg.value*fundingExchangeRate || msg.value>msg.value*fundingExchangeRate) throw;\r\n        if(!fundingAccount.call.value(msg.value)()) throw;\r\n        balances[msg.sender]+=msg.value*fundingExchangeRate;\r\n        Funding(msg.sender,msg.value);\r\n    }\r\n    \r\n    function setPrice(uint _price,bool _transferLock){\r\n        if(msg.sender!=founder) throw;\r\n        price=_price;\r\n        transferLock=_transferLock;\r\n    }\r\n    \r\n    function buy(string _commit) payable{\r\n        if(balances[msg.sender]>balances[msg.sender]+msg.value*price || msg.value>msg.value*price) throw;\r\n        if(!fundingAccount.call.value(msg.value)()) throw;\r\n        balances[msg.sender]+=msg.value*price;\r\n        commit[msg.sender]=_commit;\r\n        Buy(msg.sender,msg.value);\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value)constant returns(bool success){\r\n        if(transferLock) throw;\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)constant returns(bool success){\r\n        if(transferLock) throw;\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "StandardToken"
    UserDefinedTypeName "StandardToken"
       Source: "StandardToken"
  VariableDeclaration "name"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public name =\"NinjaToken\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: NinjaToken
       Type: literal_string "NinjaToken"
       Source: "\"NinjaToken\""
  VariableDeclaration "version"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public version=\"0.0.1\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: 0.0.1
       Type: literal_string "0.0.1"
       Source: "\"0.0.1\""
  VariableDeclaration "decimals"
     Type: uint256
     Gas costs: 287
     Source: "uint public decimals = 18"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 18
       Type: int_const 18
       Source: "18"
  VariableDeclaration "commit"
     Type: mapping(address => string storage ref)
     Gas costs: [???]
     Source: "mapping(address=>string) public commit"
    Mapping
       Source: "mapping(address=>string)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName string
         Source: "string"
  VariableDeclaration "founder"
     Type: address
     Gas costs: 335
     Source: "address public founder"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "admin"
     Type: address
     Gas costs: 335
     Source: "address public admin"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "fundingLock"
     Type: bool
     Gas costs: 385
     Source: "bool public fundingLock=true"
    ElementaryTypeName bool
       Source: "bool"
    Literal, token: true value: true
       Type: bool
       Source: "true"
  VariableDeclaration "fundingAccount"
     Type: address
     Gas costs: 335
     Source: "address public fundingAccount"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "startBlock"
     Type: uint256
     Gas costs: 287
     Source: "uint public startBlock"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "blockDuration"
     Type: uint256
     Gas costs: 287
     Source: "uint public blockDuration"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "fundingExchangeRate"
     Type: uint256
     Gas costs: 287
     Source: "uint public fundingExchangeRate"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "price"
     Type: uint256
     Gas costs: 287
     Source: "uint public price=10"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 10
       Type: int_const 10
       Source: "10"
  VariableDeclaration "transferLock"
     Type: bool
     Gas costs: 335
     Source: "bool public transferLock=false"
    ElementaryTypeName bool
       Source: "bool"
    Literal, token: false value: false
       Type: bool
       Source: "false"
  EventDefinition "Funding"
     Gas costs: 0
     Source: "event Funding(address sender, uint256 eth);"
    ParameterList
       Source: "(address sender, uint256 eth)"
      VariableDeclaration "sender"
         Type: address
         Source: "address sender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "eth"
         Type: uint256
         Source: "uint256 eth"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Buy"
     Gas costs: 0
     Source: "event Buy(address buyer, uint256 eth);"
    ParameterList
       Source: "(address buyer, uint256 eth)"
      VariableDeclaration "buyer"
         Type: address
         Source: "address buyer"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "eth"
         Type: uint256
         Source: "uint256 eth"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "NinjaToken" - public
     Source: "function NinjaToken(address _founder,address _admin){\r\n        founder=_founder;\r\n        admin=_admin;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _founder,address _admin)"
      VariableDeclaration "_founder"
         Type: address
         Source: "address _founder"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_admin"
         Type: address
         Source: "address _admin"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        founder=_founder;\r\n        admin=_admin;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "founder=_founder"
        Assignment using operator =
           Type: address
           Source: "founder=_founder"
          Identifier founder
             Type: address
             Source: "founder"
          Identifier _founder
             Type: address
             Source: "_founder"
      ExpressionStatement
         Gas costs: 0
         Source: "admin=_admin"
        Assignment using operator =
           Type: address
           Source: "admin=_admin"
          Identifier admin
             Type: address
             Source: "admin"
          Identifier _admin
             Type: address
             Source: "_admin"
  FunctionDefinition "changeFunder" - public
     Source: "function changeFunder(address _founder,address _admin){\r\n        if(msg.sender!=admin) throw;\r\n        founder=_founder;\r\n        admin=_admin;        \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _founder,address _admin)"
      VariableDeclaration "_founder"
         Type: address
         Source: "address _founder"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_admin"
         Type: address
         Source: "address _admin"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if(msg.sender!=admin) throw;\r\n        founder=_founder;\r\n        admin=_admin;        \r\n    }"
      IfStatement
         Source: "if(msg.sender!=admin) throw"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 259
           Source: "msg.sender!=admin"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier admin
             Type: address
             Source: "admin"
        Throw
           Gas costs: 6
           Source: "throw"
      ExpressionStatement
         Gas costs: 20267
         Source: "founder=_founder"
        Assignment using operator =
           Type: address
           Source: "founder=_founder"
          Identifier founder
             Type: address
             Source: "founder"
          Identifier _founder
             Type: address
             Source: "_founder"
      ExpressionStatement
         Gas costs: 20267
         Source: "admin=_admin"
        Assignment using operator =
           Type: address
           Source: "admin=_admin"
          Identifier admin
             Type: address
             Source: "admin"
          Identifier _admin
             Type: address
             Source: "_admin"
  FunctionDefinition "setFundingLock" - public
     Source: "function setFundingLock(bool _fundinglock,address _fundingAccount){\r\n        if(msg.sender!=founder) throw;\r\n        fundingLock=_fundinglock;\r\n        fundingAccount=_fundingAccount;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bool _fundinglock,address _fundingAccount)"
      VariableDeclaration "_fundinglock"
         Type: bool
         Source: "bool _fundinglock"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "_fundingAccount"
         Type: address
         Source: "address _fundingAccount"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if(msg.sender!=founder) throw;\r\n        fundingLock=_fundinglock;\r\n        fundingAccount=_fundingAccount;\r\n    }"
      IfStatement
         Source: "if(msg.sender!=founder) throw"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 259
           Source: "msg.sender!=founder"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier founder
             Type: address
             Source: "founder"
        Throw
           Gas costs: 6
           Source: "throw"
      ExpressionStatement
         Gas costs: 20317
         Source: "fundingLock=_fundinglock"
        Assignment using operator =
           Type: bool
           Source: "fundingLock=_fundinglock"
          Identifier fundingLock
             Type: bool
             Source: "fundingLock"
          Identifier _fundinglock
             Type: bool
             Source: "_fundinglock"
      ExpressionStatement
         Gas costs: 20267
         Source: "fundingAccount=_fundingAccount"
        Assignment using operator =
           Type: address
           Source: "fundingAccount=_fundingAccount"
          Identifier fundingAccount
             Type: address
             Source: "fundingAccount"
          Identifier _fundingAccount
             Type: address
             Source: "_fundingAccount"
  FunctionDefinition "setFundingEnv" - public
     Source: "function setFundingEnv(uint _startBlock, uint _blockDuration,uint _fundingExchangeRate){\r\n        if(msg.sender!=founder) throw;\r\n        startBlock=_startBlock;\r\n        blockDuration=_blockDuration;\r\n        fundingExchangeRate=_fundingExchangeRate;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint _startBlock, uint _blockDuration,uint _fundingExchangeRate)"
      VariableDeclaration "_startBlock"
         Type: uint256
         Source: "uint _startBlock"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_blockDuration"
         Type: uint256
         Source: "uint _blockDuration"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_fundingExchangeRate"
         Type: uint256
         Source: "uint _fundingExchangeRate"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if(msg.sender!=founder) throw;\r\n        startBlock=_startBlock;\r\n        blockDuration=_blockDuration;\r\n        fundingExchangeRate=_fundingExchangeRate;\r\n    }"
      IfStatement
         Source: "if(msg.sender!=founder) throw"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 259
           Source: "msg.sender!=founder"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier founder
             Type: address
             Source: "founder"
        Throw
           Gas costs: 6
           Source: "throw"
      ExpressionStatement
         Gas costs: 20014
         Source: "startBlock=_startBlock"
        Assignment using operator =
           Type: uint256
           Source: "startBlock=_startBlock"
          Identifier startBlock
             Type: uint256
             Source: "startBlock"
          Identifier _startBlock
             Type: uint256
             Source: "_startBlock"
      ExpressionStatement
         Gas costs: 20014
         Source: "blockDuration=_blockDuration"
        Assignment using operator =
           Type: uint256
           Source: "blockDuration=_blockDuration"
          Identifier blockDuration
             Type: uint256
             Source: "blockDuration"
          Identifier _blockDuration
             Type: uint256
             Source: "_blockDuration"
      ExpressionStatement
         Gas costs: 20014
         Source: "fundingExchangeRate=_fundingExchangeRate"
        Assignment using operator =
           Type: uint256
           Source: "fundingExchangeRate=_fundingExchangeRate"
          Identifier fundingExchangeRate
             Type: uint256
             Source: "fundingExchangeRate"
          Identifier _fundingExchangeRate
             Type: uint256
             Source: "_fundingExchangeRate"
  FunctionDefinition "funding" - public
     Source: "function funding() payable {\r\n        if(fundingLock||block.number<startBlock||block.number>startBlock+blockDuration) throw;\r\n        if(balances[msg.sender]>balances[msg.sender]+msg.value*fundingExchangeRate || msg.value>msg.value*fundingExchangeRate) throw;\r\n        if(!fundingAccount.call.value(msg.value)()) throw;\r\n        balances[msg.sender]+=msg.value*fundingExchangeRate;\r\n        Funding(msg.sender,msg.value);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if(fundingLock||block.number<startBlock||block.number>startBlock+blockDuration) throw;\r\n        if(balances[msg.sender]>balances[msg.sender]+msg.value*fundingExchangeRate || msg.value>msg.value*fundingExchangeRate) throw;\r\n        if(!fundingAccount.call.value(msg.value)()) throw;\r\n        balances[msg.sender]+=msg.value*fundingExchangeRate;\r\n        Funding(msg.sender,msg.value);\r\n    }"
      IfStatement
         Source: "if(fundingLock||block.number<startBlock||block.number>startBlock+blockDuration) throw"
        BinaryOperation using operator ||
           Type: bool
           Gas costs: 949
           Source: "fundingLock||block.number<startBlock||block.number>startBlock+blockDuration"
          BinaryOperation using operator ||
             Type: bool
             Source: "fundingLock||block.number<startBlock"
            Identifier fundingLock
               Type: bool
               Source: "fundingLock"
            BinaryOperation using operator <
               Type: bool
               Source: "block.number<startBlock"
              MemberAccess to member number
                 Type: uint256
                 Source: "block.number"
                Identifier block
                   Type: block
                   Source: "block"
              Identifier startBlock
                 Type: uint256
                 Source: "startBlock"
          BinaryOperation using operator >
             Type: bool
             Source: "block.number>startBlock+blockDuration"
            MemberAccess to member number
               Type: uint256
               Source: "block.number"
              Identifier block
                 Type: block
                 Source: "block"
            BinaryOperation using operator +
               Type: uint256
               Source: "startBlock+blockDuration"
              Identifier startBlock
                 Type: uint256
                 Source: "startBlock"
              Identifier blockDuration
                 Type: uint256
                 Source: "blockDuration"
        Throw
           Gas costs: 6
           Source: "throw"
      IfStatement
         Source: "if(balances[msg.sender]>balances[msg.sender]+msg.value*fundingExchangeRate || msg.value>msg.value*fundingExchangeRate) throw"
        BinaryOperation using operator ||
           Type: bool
           Gas costs: 1040
           Source: "balances[msg.sender]>balances[msg.sender]+msg.value*fundingExchangeRate || msg.value>msg.value*fundingExchangeRate"
          BinaryOperation using operator >
             Type: bool
             Source: "balances[msg.sender]>balances[msg.sender]+msg.value*fundingExchangeRate"
            IndexAccess
               Type: uint256
               Source: "balances[msg.sender]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            BinaryOperation using operator +
               Type: uint256
               Source: "balances[msg.sender]+msg.value*fundingExchangeRate"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              BinaryOperation using operator *
                 Type: uint256
                 Source: "msg.value*fundingExchangeRate"
                MemberAccess to member value
                   Type: uint256
                   Source: "msg.value"
                  Identifier msg
                     Type: msg
                     Source: "msg"
                Identifier fundingExchangeRate
                   Type: uint256
                   Source: "fundingExchangeRate"
          BinaryOperation using operator >
             Type: bool
             Source: "msg.value>msg.value*fundingExchangeRate"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            BinaryOperation using operator *
               Type: uint256
               Source: "msg.value*fundingExchangeRate"
              MemberAccess to member value
                 Type: uint256
                 Source: "msg.value"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier fundingExchangeRate
                 Type: uint256
                 Source: "fundingExchangeRate"
        Throw
           Gas costs: 6
           Source: "throw"
      IfStatement
         Source: "if(!fundingAccount.call.value(msg.value)()) throw"
        UnaryOperation (prefix) !
           Type: bool
           Gas costs: [???]
           Source: "!fundingAccount.call.value(msg.value)()"
          FunctionCall
             Type: bool
             Source: "fundingAccount.call.value(msg.value)()"
            FunctionCall
               Type: function () payable returns (bool)
               Source: "fundingAccount.call.value(msg.value)"
              MemberAccess to member value
                 Type: function (uint256) returns (function () payable returns (bool))
                 Source: "fundingAccount.call.value"
                MemberAccess to member call
                   Type: function () payable returns (bool)
                   Source: "fundingAccount.call"
                  Identifier fundingAccount
                     Type: address
                     Source: "fundingAccount"
              MemberAccess to member value
                 Type: uint256
                 Source: "msg.value"
                Identifier msg
                   Type: msg
                   Source: "msg"
        Throw
           Gas costs: 6
           Source: "throw"
      ExpressionStatement
         Gas costs: 20535
         Source: "balances[msg.sender]+=msg.value*fundingExchangeRate"
        Assignment using operator +=
           Type: uint256
           Source: "balances[msg.sender]+=msg.value*fundingExchangeRate"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          BinaryOperation using operator *
             Type: uint256
             Source: "msg.value*fundingExchangeRate"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier fundingExchangeRate
               Type: uint256
               Source: "fundingExchangeRate"
      ExpressionStatement
         Gas costs: [???]
         Source: "Funding(msg.sender,msg.value)"
        FunctionCall
           Type: tuple()
           Source: "Funding(msg.sender,msg.value)"
          Identifier Funding
             Type: function (address,uint256)
             Source: "Funding"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "setPrice" - public
     Source: "function setPrice(uint _price,bool _transferLock){\r\n        if(msg.sender!=founder) throw;\r\n        price=_price;\r\n        transferLock=_transferLock;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint _price,bool _transferLock)"
      VariableDeclaration "_price"
         Type: uint256
         Source: "uint _price"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_transferLock"
         Type: bool
         Source: "bool _transferLock"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if(msg.sender!=founder) throw;\r\n        price=_price;\r\n        transferLock=_transferLock;\r\n    }"
      IfStatement
         Source: "if(msg.sender!=founder) throw"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 259
           Source: "msg.sender!=founder"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier founder
             Type: address
             Source: "founder"
        Throw
           Gas costs: 6
           Source: "throw"
      ExpressionStatement
         Gas costs: 20014
         Source: "price=_price"
        Assignment using operator =
           Type: uint256
           Source: "price=_price"
          Identifier price
             Type: uint256
             Source: "price"
          Identifier _price
             Type: uint256
             Source: "_price"
      ExpressionStatement
         Gas costs: 20267
         Source: "transferLock=_transferLock"
        Assignment using operator =
           Type: bool
           Source: "transferLock=_transferLock"
          Identifier transferLock
             Type: bool
             Source: "transferLock"
          Identifier _transferLock
             Type: bool
             Source: "_transferLock"
  FunctionDefinition "buy" - public
     Source: "function buy(string _commit) payable{\r\n        if(balances[msg.sender]>balances[msg.sender]+msg.value*price || msg.value>msg.value*price) throw;\r\n        if(!fundingAccount.call.value(msg.value)()) throw;\r\n        balances[msg.sender]+=msg.value*price;\r\n        commit[msg.sender]=_commit;\r\n        Buy(msg.sender,msg.value);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(string _commit)"
      VariableDeclaration "_commit"
         Type: string memory
         Source: "string _commit"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if(balances[msg.sender]>balances[msg.sender]+msg.value*price || msg.value>msg.value*price) throw;\r\n        if(!fundingAccount.call.value(msg.value)()) throw;\r\n        balances[msg.sender]+=msg.value*price;\r\n        commit[msg.sender]=_commit;\r\n        Buy(msg.sender,msg.value);\r\n    }"
      IfStatement
         Source: "if(balances[msg.sender]>balances[msg.sender]+msg.value*price || msg.value>msg.value*price) throw"
        BinaryOperation using operator ||
           Type: bool
           Gas costs: 1040
           Source: "balances[msg.sender]>balances[msg.sender]+msg.value*price || msg.value>msg.value*price"
          BinaryOperation using operator >
             Type: bool
             Source: "balances[msg.sender]>balances[msg.sender]+msg.value*price"
            IndexAccess
               Type: uint256
               Source: "balances[msg.sender]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            BinaryOperation using operator +
               Type: uint256
               Source: "balances[msg.sender]+msg.value*price"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              BinaryOperation using operator *
                 Type: uint256
                 Source: "msg.value*price"
                MemberAccess to member value
                   Type: uint256
                   Source: "msg.value"
                  Identifier msg
                     Type: msg
                     Source: "msg"
                Identifier price
                   Type: uint256
                   Source: "price"
          BinaryOperation using operator >
             Type: bool
             Source: "msg.value>msg.value*price"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            BinaryOperation using operator *
               Type: uint256
               Source: "msg.value*price"
              MemberAccess to member value
                 Type: uint256
                 Source: "msg.value"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier price
                 Type: uint256
                 Source: "price"
        Throw
           Gas costs: 6
           Source: "throw"
      IfStatement
         Source: "if(!fundingAccount.call.value(msg.value)()) throw"
        UnaryOperation (prefix) !
           Type: bool
           Gas costs: [???]
           Source: "!fundingAccount.call.value(msg.value)()"
          FunctionCall
             Type: bool
             Source: "fundingAccount.call.value(msg.value)()"
            FunctionCall
               Type: function () payable returns (bool)
               Source: "fundingAccount.call.value(msg.value)"
              MemberAccess to member value
                 Type: function (uint256) returns (function () payable returns (bool))
                 Source: "fundingAccount.call.value"
                MemberAccess to member call
                   Type: function () payable returns (bool)
                   Source: "fundingAccount.call"
                  Identifier fundingAccount
                     Type: address
                     Source: "fundingAccount"
              MemberAccess to member value
                 Type: uint256
                 Source: "msg.value"
                Identifier msg
                   Type: msg
                   Source: "msg"
        Throw
           Gas costs: 6
           Source: "throw"
      ExpressionStatement
         Gas costs: 20535
         Source: "balances[msg.sender]+=msg.value*price"
        Assignment using operator +=
           Type: uint256
           Source: "balances[msg.sender]+=msg.value*price"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          BinaryOperation using operator *
             Type: uint256
             Source: "msg.value*price"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier price
               Type: uint256
               Source: "price"
      ExpressionStatement
         Gas costs: 140
         Source: "commit[msg.sender]=_commit"
        Assignment using operator =
           Type: string storage ref
           Source: "commit[msg.sender]=_commit"
          IndexAccess
             Type: string storage ref
             Source: "commit[msg.sender]"
            Identifier commit
               Type: mapping(address => string storage ref)
               Source: "commit"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _commit
             Type: string memory
             Source: "_commit"
      ExpressionStatement
         Gas costs: [???]
         Source: "Buy(msg.sender,msg.value)"
        FunctionCall
           Type: tuple()
           Source: "Buy(msg.sender,msg.value)"
          Identifier Buy
             Type: function (address,uint256)
             Source: "Buy"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "transfer" - public - const
     Source: "function transfer(address _to, uint256 _value)constant returns(bool success){\r\n        if(transferLock) throw;\r\n        return super.transfer(_to, _value);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        if(transferLock) throw;\r\n        return super.transfer(_to, _value);\r\n    }"
      IfStatement
         Source: "if(transferLock) throw"
        Identifier transferLock
           Type: bool
           Gas costs: 239
           Source: "transferLock"
        Throw
           Gas costs: 6
           Source: "throw"
      Return
         Gas costs: 15
         Source: "return super.transfer(_to, _value)"
        FunctionCall
           Type: bool
           Source: "super.transfer(_to, _value)"
          MemberAccess to member transfer
             Type: function (address,uint256) view returns (bool)
             Source: "super.transfer"
            Identifier super
               Type: contract super NinjaToken
               Source: "super"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
  FunctionDefinition "transferFrom" - public - const
     Source: "function transferFrom(address _from, address _to, uint256 _value)constant returns(bool success){\r\n        if(transferLock) throw;\r\n        return super.transferFrom(_from, _to, _value);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        if(transferLock) throw;\r\n        return super.transferFrom(_from, _to, _value);\r\n    }"
      IfStatement
         Source: "if(transferLock) throw"
        Identifier transferLock
           Type: bool
           Gas costs: 239
           Source: "transferLock"
        Throw
           Gas costs: 6
           Source: "throw"
      Return
         Gas costs: 18
         Source: "return super.transferFrom(_from, _to, _value)"
        FunctionCall
           Type: bool
           Source: "super.transferFrom(_from, _to, _value)"
          MemberAccess to member transferFrom
             Type: function (address,address,uint256) view returns (bool)
             Source: "super.transferFrom"
            Identifier super
               Type: contract super NinjaToken
               Source: "super"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
