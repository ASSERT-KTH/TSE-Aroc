Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0x278ceeff0be78437769e12199f06ab85f4d26102.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.18;"
ContractDefinition "LANDStorage"
   Gas costs: 18
   Source: "contract LANDStorage {\r\n\r\n  mapping (address => uint) latestPing;\r\n\r\n  uint256 constant clearLow = 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000;\r\n  uint256 constant clearHigh = 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff;\r\n  uint256 constant factor = 0x100000000000000000000000000000000;\r\n\r\n  mapping (address => bool) authorizedDeploy;\r\n\r\n}"
  VariableDeclaration "latestPing"
     Type: mapping(address => uint256)
     Source: "mapping (address => uint) latestPing"
    Mapping
       Source: "mapping (address => uint)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint
         Source: "uint"
  VariableDeclaration "clearLow"
     Type: uint256
     Source: "uint256 constant clearLow = 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000
       Type: int_const 1157...(70 digits omitted)...8480
       Source: "0xffffffffffffffffffffffffffffffff00000000000000000000000000000000"
  VariableDeclaration "clearHigh"
     Type: uint256
     Source: "uint256 constant clearHigh = 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff
       Type: int_const 3402...(31 digits omitted)...1455
       Source: "0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff"
  VariableDeclaration "factor"
     Type: uint256
     Source: "uint256 constant factor = 0x100000000000000000000000000000000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0x100000000000000000000000000000000
       Type: int_const 3402...(31 digits omitted)...1456
       Source: "0x100000000000000000000000000000000"
  VariableDeclaration "authorizedDeploy"
     Type: mapping(address => bool)
     Source: "mapping (address => bool) authorizedDeploy"
    Mapping
       Source: "mapping (address => bool)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName bool
         Source: "bool"
ContractDefinition "OwnableStorage"
   Source: "contract OwnableStorage {\r\n\r\n  address public owner;\r\n\r\n  function OwnableStorage() internal {\r\n    owner = msg.sender;\r\n  }\r\n\r\n}"
  VariableDeclaration "owner"
     Type: address
     Gas costs: [???]
     Source: "address public owner"
    ElementaryTypeName address
       Source: "address"
  FunctionDefinition "OwnableStorage"
     Source: "function OwnableStorage() internal {\r\n    owner = msg.sender;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    owner = msg.sender;\r\n  }"
      ExpressionStatement
         Gas costs: 0
         Source: "owner = msg.sender"
        Assignment using operator =
           Type: address
           Source: "owner = msg.sender"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
ContractDefinition "ProxyStorage"
   Gas costs: [???]
   Source: "contract ProxyStorage {\r\n\r\n  /**\r\n   * Current contract to which we are proxing\r\n   */\r\n  address public currentContract;\r\n  address public proxyOwner;\r\n}"
  VariableDeclaration "currentContract"
     Type: address
     Source: "address public currentContract"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "proxyOwner"
     Type: address
     Source: "address public proxyOwner"
    ElementaryTypeName address
       Source: "address"
ContractDefinition "AssetRegistryStorage"
   Gas costs: 0
   Source: "contract AssetRegistryStorage {\r\n\r\n  string internal _name;\r\n  string internal _symbol;\r\n  string internal _description;\r\n\r\n  /**\r\n   * Stores the total count of assets managed by this registry\r\n   */\r\n  uint256 internal _count;\r\n\r\n  /**\r\n   * Stores an array of assets owned by a given account\r\n   */\r\n  mapping(address => uint256[]) internal _assetsOf;\r\n\r\n  /**\r\n   * Stores the current holder of an asset\r\n   */\r\n  mapping(uint256 => address) internal _holderOf;\r\n\r\n  /**\r\n   * Stores the index of an asset in the `_assetsOf` array of its holder\r\n   */\r\n  mapping(uint256 => uint256) internal _indexOfAsset;\r\n\r\n  /**\r\n   * Stores the data associated with an asset\r\n   */\r\n  mapping(uint256 => string) internal _assetData;\r\n\r\n  /**\r\n   * For a given account, for a given opperator, store whether that operator is\r\n   * allowed to transfer and modify assets on behalf of them.\r\n   */\r\n  mapping(address => mapping(address => bool)) internal _operators;\r\n\r\n  /**\r\n   * Simple reentrancy lock\r\n   */\r\n  bool internal _reentrancy;\r\n}"
  VariableDeclaration "_name"
     Type: string storage ref
     Source: "string internal _name"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "_symbol"
     Type: string storage ref
     Source: "string internal _symbol"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "_description"
     Type: string storage ref
     Source: "string internal _description"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "_count"
     Type: uint256
     Source: "uint256 internal _count"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "_assetsOf"
     Type: mapping(address => uint256[] storage ref)
     Source: "mapping(address => uint256[]) internal _assetsOf"
    Mapping
       Source: "mapping(address => uint256[])"
      ElementaryTypeName address
         Source: "address"
      ArrayTypeName
         Source: "uint256[]"
        ElementaryTypeName uint256
           Source: "uint256"
  VariableDeclaration "_holderOf"
     Type: mapping(uint256 => address)
     Source: "mapping(uint256 => address) internal _holderOf"
    Mapping
       Source: "mapping(uint256 => address)"
      ElementaryTypeName uint256
         Source: "uint256"
      ElementaryTypeName address
         Source: "address"
  VariableDeclaration "_indexOfAsset"
     Type: mapping(uint256 => uint256)
     Source: "mapping(uint256 => uint256) internal _indexOfAsset"
    Mapping
       Source: "mapping(uint256 => uint256)"
      ElementaryTypeName uint256
         Source: "uint256"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "_assetData"
     Type: mapping(uint256 => string storage ref)
     Source: "mapping(uint256 => string) internal _assetData"
    Mapping
       Source: "mapping(uint256 => string)"
      ElementaryTypeName uint256
         Source: "uint256"
      ElementaryTypeName string
         Source: "string"
  VariableDeclaration "_operators"
     Type: mapping(address => mapping(address => bool))
     Source: "mapping(address => mapping(address => bool)) internal _operators"
    Mapping
       Source: "mapping(address => mapping(address => bool))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping(address => bool)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName bool
           Source: "bool"
  VariableDeclaration "_reentrancy"
     Type: bool
     Source: "bool internal _reentrancy"
    ElementaryTypeName bool
       Source: "bool"
ContractDefinition "Storage"
   Gas costs: 0
   Source: "contract Storage is ProxyStorage, OwnableStorage, AssetRegistryStorage, LANDStorage {\r\n}"
  InheritanceSpecifier
     Source: "ProxyStorage"
    UserDefinedTypeName "ProxyStorage"
       Source: "ProxyStorage"
  InheritanceSpecifier
     Source: "OwnableStorage"
    UserDefinedTypeName "OwnableStorage"
       Source: "OwnableStorage"
  InheritanceSpecifier
     Source: "AssetRegistryStorage"
    UserDefinedTypeName "AssetRegistryStorage"
       Source: "AssetRegistryStorage"
  InheritanceSpecifier
     Source: "LANDStorage"
    UserDefinedTypeName "LANDStorage"
       Source: "LANDStorage"
ContractDefinition "IApplication"
   Gas costs: 0
   Source: "contract IApplication {\r\n  function initialize(bytes data) public;\r\n}"
  FunctionDefinition "initialize" - public
     Source: "function initialize(bytes data) public;"
    ParameterList
       Source: "(bytes data)"
      VariableDeclaration "data"
         Type: bytes memory
         Source: "bytes data"
        ElementaryTypeName bytes
           Source: "bytes"
    ParameterList
       Source: ""
ContractDefinition "Ownable"
   Source: "contract Ownable is Storage {\r\n\r\n  event OwnerUpdate(address _prevOwner, address _newOwner);\r\n\r\n  function bytesToAddress (bytes b) pure public returns (address) {\r\n    uint result = 0;\r\n    for (uint i = b.length-1; i+1 > 0; i--) {\r\n      uint c = uint(b[i]);\r\n      uint to_inc = c * ( 16 ** ((b.length - i-1) * 2));\r\n      result += to_inc;\r\n    }\r\n    return address(result);\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    assert(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function initialize(bytes data) public {\r\n    owner = bytesToAddress(data);\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    require(_newOwner != owner);\r\n    owner = _newOwner;\r\n  }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Storage"
    UserDefinedTypeName "Storage"
       Source: "Storage"
  EventDefinition "OwnerUpdate"
     Gas costs: 0
     Source: "event OwnerUpdate(address _prevOwner, address _newOwner);"
    ParameterList
       Source: "(address _prevOwner, address _newOwner)"
      VariableDeclaration "_prevOwner"
         Type: address
         Source: "address _prevOwner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_newOwner"
         Type: address
         Source: "address _newOwner"
        ElementaryTypeName address
           Source: "address"
  FunctionDefinition "bytesToAddress" - public
     Source: "function bytesToAddress (bytes b) pure public returns (address) {\r\n    uint result = 0;\r\n    for (uint i = b.length-1; i+1 > 0; i--) {\r\n      uint c = uint(b[i]);\r\n      uint to_inc = c * ( 16 ** ((b.length - i-1) * 2));\r\n      result += to_inc;\r\n    }\r\n    return address(result);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(bytes b)"
      VariableDeclaration "b"
         Type: bytes memory
         Source: "bytes b"
        ElementaryTypeName bytes
           Source: "bytes"
    ParameterList
       Gas costs: 3
       Source: "(address)"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\r\n    uint result = 0;\r\n    for (uint i = b.length-1; i+1 > 0; i--) {\r\n      uint c = uint(b[i]);\r\n      uint to_inc = c * ( 16 ** ((b.length - i-1) * 2));\r\n      result += to_inc;\r\n    }\r\n    return address(result);\r\n  }"
      VariableDeclarationStatement
         Gas costs: 11
         Source: "uint result = 0"
        VariableDeclaration "result"
           Type: uint256
           Source: "uint result"
          ElementaryTypeName uint
             Source: "uint"
        Literal, token: [no token] value: 0
           Type: int_const 0
           Source: "0"
      ForStatement
         Source: "for (uint i = b.length-1; i+1 > 0; i--) {\r\n      uint c = uint(b[i]);\r\n      uint to_inc = c * ( 16 ** ((b.length - i-1) * 2));\r\n      result += to_inc;\r\n    }"
        VariableDeclarationStatement
           Gas costs: [???]
           Source: "uint i = b.length-1"
          VariableDeclaration "i"
             Type: uint256
             Source: "uint i"
            ElementaryTypeName uint
               Source: "uint"
          BinaryOperation using operator -
             Type: uint256
             Source: "b.length-1"
            MemberAccess to member length
               Type: uint256
               Source: "b.length"
              Identifier b
                 Type: bytes memory
                 Source: "b"
            Literal, token: [no token] value: 1
               Type: int_const 1
               Source: "1"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 15
           Source: "i+1 > 0"
          BinaryOperation using operator +
             Type: uint256
             Source: "i+1"
            Identifier i
               Type: uint256
               Source: "i"
            Literal, token: [no token] value: 1
               Type: int_const 1
               Source: "1"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        ExpressionStatement
           Gas costs: 22
           Source: "i--"
          UnaryOperation (postfix) --
             Type: uint256
             Source: "i--"
            Identifier i
               Type: uint256
               Source: "i"
        Block
           Source: "{\r\n      uint c = uint(b[i]);\r\n      uint to_inc = c * ( 16 ** ((b.length - i-1) * 2));\r\n      result += to_inc;\r\n    }"
          VariableDeclarationStatement
             Gas costs: [???]
             Source: "uint c = uint(b[i])"
            VariableDeclaration "c"
               Type: uint256
               Source: "uint c"
              ElementaryTypeName uint
                 Source: "uint"
            FunctionCall
               Type: uint256
               Source: "uint(b[i])"
              ElementaryTypeNameExpression uint
                 Type: type(uint256)
                 Source: "uint"
              IndexAccess
                 Type: bytes1
                 Source: "b[i]"
                Identifier b
                   Type: bytes memory
                   Source: "b"
                Identifier i
                   Type: uint256
                   Source: "i"
          VariableDeclarationStatement
             Gas costs: [???]
             Source: "uint to_inc = c * ( 16 ** ((b.length - i-1) * 2))"
            VariableDeclaration "to_inc"
               Type: uint256
               Source: "uint to_inc"
              ElementaryTypeName uint
                 Source: "uint"
            BinaryOperation using operator *
               Type: uint256
               Source: "c * ( 16 ** ((b.length - i-1) * 2))"
              Identifier c
                 Type: uint256
                 Source: "c"
              TupleExpression
                 Type: uint256
                 Source: "( 16 ** ((b.length - i-1) * 2))"
                BinaryOperation using operator **
                   Type: uint256
                   Source: "16 ** ((b.length - i-1) * 2)"
                  Literal, token: [no token] value: 16
                     Type: int_const 16
                     Source: "16"
                  TupleExpression
                     Type: uint256
                     Source: "((b.length - i-1) * 2)"
                    BinaryOperation using operator *
                       Type: uint256
                       Source: "(b.length - i-1) * 2"
                      TupleExpression
                         Type: uint256
                         Source: "(b.length - i-1)"
                        BinaryOperation using operator -
                           Type: uint256
                           Source: "b.length - i-1"
                          BinaryOperation using operator -
                             Type: uint256
                             Source: "b.length - i"
                            MemberAccess to member length
                               Type: uint256
                               Source: "b.length"
                              Identifier b
                                 Type: bytes memory
                                 Source: "b"
                            Identifier i
                               Type: uint256
                               Source: "i"
                          Literal, token: [no token] value: 1
                             Type: int_const 1
                             Source: "1"
                      Literal, token: [no token] value: 2
                         Type: int_const 2
                         Source: "2"
          ExpressionStatement
             Gas costs: 14
             Source: "result += to_inc"
            Assignment using operator +=
               Type: uint256
               Source: "result += to_inc"
              Identifier result
                 Type: uint256
                 Source: "result"
              Identifier to_inc
                 Type: uint256
                 Source: "to_inc"
      Return
         Gas costs: 8
         Source: "return address(result)"
        FunctionCall
           Type: address
           Source: "address(result)"
          ElementaryTypeNameExpression address
             Type: type(address)
             Source: "address"
          Identifier result
             Type: uint256
             Source: "result"
  ModifierDefinition "onlyOwner"
     Source: "modifier onlyOwner {\r\n    assert(msg.sender == owner);\r\n    _;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    assert(msg.sender == owner);\r\n    _;\r\n  }"
      ExpressionStatement
         Gas costs: 1380
         Source: "assert(msg.sender == owner)"
        FunctionCall
           Type: tuple()
           Source: "assert(msg.sender == owner)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == owner"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier owner
               Type: address
               Source: "owner"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "initialize" - public
     Source: "function initialize(bytes data) public {\r\n    owner = bytesToAddress(data);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(bytes data)"
      VariableDeclaration "data"
         Type: bytes memory
         Source: "bytes data"
        ElementaryTypeName bytes
           Source: "bytes"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    owner = bytesToAddress(data);\r\n  }"
      ExpressionStatement
         Gas costs: 20282
         Source: "owner = bytesToAddress(data)"
        Assignment using operator =
           Type: address
           Source: "owner = bytesToAddress(data)"
          Identifier owner
             Type: address
             Source: "owner"
          FunctionCall
             Type: address
             Source: "bytesToAddress(data)"
            Identifier bytesToAddress
               Type: function (bytes memory) pure returns (address)
               Source: "bytesToAddress"
            Identifier data
               Type: bytes memory
               Source: "data"
  FunctionDefinition "transferOwnership" - public
     Source: "function transferOwnership(address _newOwner) public onlyOwner {\r\n    require(_newOwner != owner);\r\n    owner = _newOwner;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _newOwner)"
      VariableDeclaration "_newOwner"
         Type: address
         Source: "address _newOwner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n    require(_newOwner != owner);\r\n    owner = _newOwner;\r\n  }"
      ExpressionStatement
         Gas costs: 286
         Source: "require(_newOwner != owner)"
        FunctionCall
           Type: tuple()
           Source: "require(_newOwner != owner)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "_newOwner != owner"
            Identifier _newOwner
               Type: address
               Source: "_newOwner"
            Identifier owner
               Type: address
               Source: "owner"
      ExpressionStatement
         Gas costs: 20267
         Source: "owner = _newOwner"
        Assignment using operator =
           Type: address
           Source: "owner = _newOwner"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier _newOwner
             Type: address
             Source: "_newOwner"
ContractDefinition "ILANDRegistry"
   Gas costs: 0
   Source: "interface ILANDRegistry {\r\n\r\n  // LAND can be assigned by the owner\r\n  function assignNewParcel(int x, int y, address beneficiary) public;\r\n  function assignMultipleParcels(int[] x, int[] y, address beneficiary) public;\r\n\r\n  // After one year, land can be claimed from an inactive public key\r\n  function ping() public;\r\n  function clearLand(int[] x, int[] y) public;\r\n\r\n  // LAND-centric getters\r\n  function encodeTokenId(int x, int y) view public returns (uint256);\r\n  function decodeTokenId(uint value) view public returns (int, int);\r\n  function exists(int x, int y) view public returns (bool);\r\n  function ownerOfLand(int x, int y) view public returns (address);\r\n  function ownerOfLandMany(int[] x, int[] y) view public returns (address[]);\r\n  function landOf(address owner) view public returns (int[], int[]);\r\n  function landData(int x, int y) view public returns (string);\r\n\r\n  // Transfer LAND\r\n  function transferLand(int x, int y, address to) public;\r\n  function transferManyLand(int[] x, int[] y, address to) public;\r\n\r\n  // Update LAND\r\n  function updateLandData(int x, int y, string data) public;\r\n  function updateManyLandData(int[] x, int[] y, string data) public;\r\n}"
  FunctionDefinition "assignNewParcel" - public
     Source: "function assignNewParcel(int x, int y, address beneficiary) public;"
    ParameterList
       Source: "(int x, int y, address beneficiary)"
      VariableDeclaration "x"
         Type: int256
         Source: "int x"
        ElementaryTypeName int
           Source: "int"
      VariableDeclaration "y"
         Type: int256
         Source: "int y"
        ElementaryTypeName int
           Source: "int"
      VariableDeclaration "beneficiary"
         Type: address
         Source: "address beneficiary"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
  FunctionDefinition "assignMultipleParcels" - public
     Source: "function assignMultipleParcels(int[] x, int[] y, address beneficiary) public;"
    ParameterList
       Source: "(int[] x, int[] y, address beneficiary)"
      VariableDeclaration "x"
         Type: int256[] memory
         Source: "int[] x"
        ArrayTypeName
           Source: "int[]"
          ElementaryTypeName int
             Source: "int"
      VariableDeclaration "y"
         Type: int256[] memory
         Source: "int[] y"
        ArrayTypeName
           Source: "int[]"
          ElementaryTypeName int
             Source: "int"
      VariableDeclaration "beneficiary"
         Type: address
         Source: "address beneficiary"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
  FunctionDefinition "ping" - public
     Source: "function ping() public;"
    ParameterList
       Source: "()"
    ParameterList
       Source: ""
  FunctionDefinition "clearLand" - public
     Source: "function clearLand(int[] x, int[] y) public;"
    ParameterList
       Source: "(int[] x, int[] y)"
      VariableDeclaration "x"
         Type: int256[] memory
         Source: "int[] x"
        ArrayTypeName
           Source: "int[]"
          ElementaryTypeName int
             Source: "int"
      VariableDeclaration "y"
         Type: int256[] memory
         Source: "int[] y"
        ArrayTypeName
           Source: "int[]"
          ElementaryTypeName int
             Source: "int"
    ParameterList
       Source: ""
  FunctionDefinition "encodeTokenId" - public - const
     Source: "function encodeTokenId(int x, int y) view public returns (uint256);"
    ParameterList
       Source: "(int x, int y)"
      VariableDeclaration "x"
         Type: int256
         Source: "int x"
        ElementaryTypeName int
           Source: "int"
      VariableDeclaration "y"
         Type: int256
         Source: "int y"
        ElementaryTypeName int
           Source: "int"
    ParameterList
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "decodeTokenId" - public - const
     Source: "function decodeTokenId(uint value) view public returns (int, int);"
    ParameterList
       Source: "(uint value)"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(int, int)"
      VariableDeclaration ""
         Type: int256
         Source: "int"
        ElementaryTypeName int
           Source: "int"
      VariableDeclaration ""
         Type: int256
         Source: "int"
        ElementaryTypeName int
           Source: "int"
  FunctionDefinition "exists" - public - const
     Source: "function exists(int x, int y) view public returns (bool);"
    ParameterList
       Source: "(int x, int y)"
      VariableDeclaration "x"
         Type: int256
         Source: "int x"
        ElementaryTypeName int
           Source: "int"
      VariableDeclaration "y"
         Type: int256
         Source: "int y"
        ElementaryTypeName int
           Source: "int"
    ParameterList
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "ownerOfLand" - public - const
     Source: "function ownerOfLand(int x, int y) view public returns (address);"
    ParameterList
       Source: "(int x, int y)"
      VariableDeclaration "x"
         Type: int256
         Source: "int x"
        ElementaryTypeName int
           Source: "int"
      VariableDeclaration "y"
         Type: int256
         Source: "int y"
        ElementaryTypeName int
           Source: "int"
    ParameterList
       Source: "(address)"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
  FunctionDefinition "ownerOfLandMany" - public - const
     Source: "function ownerOfLandMany(int[] x, int[] y) view public returns (address[]);"
    ParameterList
       Source: "(int[] x, int[] y)"
      VariableDeclaration "x"
         Type: int256[] memory
         Source: "int[] x"
        ArrayTypeName
           Source: "int[]"
          ElementaryTypeName int
             Source: "int"
      VariableDeclaration "y"
         Type: int256[] memory
         Source: "int[] y"
        ArrayTypeName
           Source: "int[]"
          ElementaryTypeName int
             Source: "int"
    ParameterList
       Source: "(address[])"
      VariableDeclaration ""
         Type: address[] memory
         Source: "address[]"
        ArrayTypeName
           Source: "address[]"
          ElementaryTypeName address
             Source: "address"
  FunctionDefinition "landOf" - public - const
     Source: "function landOf(address owner) view public returns (int[], int[]);"
    ParameterList
       Source: "(address owner)"
      VariableDeclaration "owner"
         Type: address
         Source: "address owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(int[], int[])"
      VariableDeclaration ""
         Type: int256[] memory
         Source: "int[]"
        ArrayTypeName
           Source: "int[]"
          ElementaryTypeName int
             Source: "int"
      VariableDeclaration ""
         Type: int256[] memory
         Source: "int[]"
        ArrayTypeName
           Source: "int[]"
          ElementaryTypeName int
             Source: "int"
  FunctionDefinition "landData" - public - const
     Source: "function landData(int x, int y) view public returns (string);"
    ParameterList
       Source: "(int x, int y)"
      VariableDeclaration "x"
         Type: int256
         Source: "int x"
        ElementaryTypeName int
           Source: "int"
      VariableDeclaration "y"
         Type: int256
         Source: "int y"
        ElementaryTypeName int
           Source: "int"
    ParameterList
       Source: "(string)"
      VariableDeclaration ""
         Type: string memory
         Source: "string"
        ElementaryTypeName string
           Source: "string"
  FunctionDefinition "transferLand" - public
     Source: "function transferLand(int x, int y, address to) public;"
    ParameterList
       Source: "(int x, int y, address to)"
      VariableDeclaration "x"
         Type: int256
         Source: "int x"
        ElementaryTypeName int
           Source: "int"
      VariableDeclaration "y"
         Type: int256
         Source: "int y"
        ElementaryTypeName int
           Source: "int"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
  FunctionDefinition "transferManyLand" - public
     Source: "function transferManyLand(int[] x, int[] y, address to) public;"
    ParameterList
       Source: "(int[] x, int[] y, address to)"
      VariableDeclaration "x"
         Type: int256[] memory
         Source: "int[] x"
        ArrayTypeName
           Source: "int[]"
          ElementaryTypeName int
             Source: "int"
      VariableDeclaration "y"
         Type: int256[] memory
         Source: "int[] y"
        ArrayTypeName
           Source: "int[]"
          ElementaryTypeName int
             Source: "int"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
  FunctionDefinition "updateLandData" - public
     Source: "function updateLandData(int x, int y, string data) public;"
    ParameterList
       Source: "(int x, int y, string data)"
      VariableDeclaration "x"
         Type: int256
         Source: "int x"
        ElementaryTypeName int
           Source: "int"
      VariableDeclaration "y"
         Type: int256
         Source: "int y"
        ElementaryTypeName int
           Source: "int"
      VariableDeclaration "data"
         Type: string memory
         Source: "string data"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
  FunctionDefinition "updateManyLandData" - public
     Source: "function updateManyLandData(int[] x, int[] y, string data) public;"
    ParameterList
       Source: "(int[] x, int[] y, string data)"
      VariableDeclaration "x"
         Type: int256[] memory
         Source: "int[] x"
        ArrayTypeName
           Source: "int[]"
          ElementaryTypeName int
             Source: "int"
      VariableDeclaration "y"
         Type: int256[] memory
         Source: "int[] y"
        ArrayTypeName
           Source: "int[]"
          ElementaryTypeName int
             Source: "int"
      VariableDeclaration "data"
         Type: string memory
         Source: "string data"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
ContractDefinition "IAssetHolder"
   Gas costs: 0
   Source: "interface IAssetHolder {\r\n  function onAssetReceived(\r\n    /* address _assetRegistry == msg.sender */\r\n    uint256 _assetId,\r\n    address _previousHolder,\r\n    address _currentHolder,\r\n    bytes   _userData,\r\n    address _operator,\r\n    bytes   _operatorData\r\n  ) public;\r\n}"
  FunctionDefinition "onAssetReceived" - public
     Source: "function onAssetReceived(\r\n    /* address _assetRegistry == msg.sender */\r\n    uint256 _assetId,\r\n    address _previousHolder,\r\n    address _currentHolder,\r\n    bytes   _userData,\r\n    address _operator,\r\n    bytes   _operatorData\r\n  ) public;"
    ParameterList
       Source: "(\r\n    /* address _assetRegistry == msg.sender */\r\n    uint256 _assetId,\r\n    address _previousHolder,\r\n    address _currentHolder,\r\n    bytes   _userData,\r\n    address _operator,\r\n    bytes   _operatorData\r\n  )"
      VariableDeclaration "_assetId"
         Type: uint256
         Source: "uint256 _assetId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_previousHolder"
         Type: address
         Source: "address _previousHolder"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_currentHolder"
         Type: address
         Source: "address _currentHolder"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_userData"
         Type: bytes memory
         Source: "bytes   _userData"
        ElementaryTypeName bytes
           Source: "bytes"
      VariableDeclaration "_operator"
         Type: address
         Source: "address _operator"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_operatorData"
         Type: bytes memory
         Source: "bytes   _operatorData"
        ElementaryTypeName bytes
           Source: "bytes"
    ParameterList
       Source: ""
ContractDefinition "IAssetRegistry"
   Gas costs: 0
   Source: "interface IAssetRegistry {\r\n\r\n  /**\r\n   * Global Registry getter functions\r\n   */\r\n  function name() public view returns (string);\r\n  function symbol() public view returns (string);\r\n  function description() public view returns (string);\r\n  function totalSupply() public view returns (uint256);\r\n\r\n  /**\r\n   * Asset-centric getter functions\r\n   */\r\n  function exists(uint256 assetId) public view returns (bool);\r\n\r\n  function holderOf(uint256 assetId) public view returns (address);\r\n  function safeHolderOf(uint256 assetId) public view returns (address);\r\n\r\n  function assetData(uint256 assetId) public view returns (string);\r\n\r\n  /**\r\n   * Holder-centric getter functions\r\n   */\r\n  function assetCount(address holder) public view returns (uint256);\r\n  function assetByIndex(address holder, uint256 index) public view returns (uint256);\r\n  function assetsOf(address holder) external view returns (uint256[]);\r\n\r\n  /**\r\n   * Transfer Operations\r\n   */\r\n  function transfer(address to, uint256 assetId) public;\r\n  function transfer(address to, uint256 assetId, bytes userData) public;\r\n  function transfer(address to, uint256 assetId, bytes userData, bytes operatorData) public;\r\n\r\n  /**\r\n   * Authorization operations\r\n   */\r\n  function authorizeOperator(address operator, bool authorized) public;\r\n\r\n  /**\r\n   * Authorization getters\r\n   */\r\n  function isOperatorAuthorizedFor(address operator, address assetHolder)\r\n    public view returns (bool);\r\n\r\n  /**\r\n   * Events\r\n   */\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 indexed assetId,\r\n    address operator,\r\n    bytes userData,\r\n    bytes operatorData\r\n  );\r\n  event Update(\r\n    uint256 indexed assetId,\r\n    address indexed holder,\r\n    address indexed operator,\r\n    string data\r\n  );\r\n  event AuthorizeOperator(\r\n    address indexed operator,\r\n    address indexed holder,\r\n    bool authorized\r\n  );\r\n}"
  FunctionDefinition "name" - public - const
     Source: "function name() public view returns (string);"
    ParameterList
       Source: "()"
    ParameterList
       Source: "(string)"
      VariableDeclaration ""
         Type: string memory
         Source: "string"
        ElementaryTypeName string
           Source: "string"
  FunctionDefinition "symbol" - public - const
     Source: "function symbol() public view returns (string);"
    ParameterList
       Source: "()"
    ParameterList
       Source: "(string)"
      VariableDeclaration ""
         Type: string memory
         Source: "string"
        ElementaryTypeName string
           Source: "string"
  FunctionDefinition "description" - public - const
     Source: "function description() public view returns (string);"
    ParameterList
       Source: "()"
    ParameterList
       Source: "(string)"
      VariableDeclaration ""
         Type: string memory
         Source: "string"
        ElementaryTypeName string
           Source: "string"
  FunctionDefinition "totalSupply" - public - const
     Source: "function totalSupply() public view returns (uint256);"
    ParameterList
       Source: "()"
    ParameterList
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "exists" - public - const
     Source: "function exists(uint256 assetId) public view returns (bool);"
    ParameterList
       Source: "(uint256 assetId)"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 assetId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "holderOf" - public - const
     Source: "function holderOf(uint256 assetId) public view returns (address);"
    ParameterList
       Source: "(uint256 assetId)"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 assetId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(address)"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
  FunctionDefinition "safeHolderOf" - public - const
     Source: "function safeHolderOf(uint256 assetId) public view returns (address);"
    ParameterList
       Source: "(uint256 assetId)"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 assetId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(address)"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
  FunctionDefinition "assetData" - public - const
     Source: "function assetData(uint256 assetId) public view returns (string);"
    ParameterList
       Source: "(uint256 assetId)"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 assetId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(string)"
      VariableDeclaration ""
         Type: string memory
         Source: "string"
        ElementaryTypeName string
           Source: "string"
  FunctionDefinition "assetCount" - public - const
     Source: "function assetCount(address holder) public view returns (uint256);"
    ParameterList
       Source: "(address holder)"
      VariableDeclaration "holder"
         Type: address
         Source: "address holder"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "assetByIndex" - public - const
     Source: "function assetByIndex(address holder, uint256 index) public view returns (uint256);"
    ParameterList
       Source: "(address holder, uint256 index)"
      VariableDeclaration "holder"
         Type: address
         Source: "address holder"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "index"
         Type: uint256
         Source: "uint256 index"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "assetsOf" - public - const
     Source: "function assetsOf(address holder) external view returns (uint256[]);"
    ParameterList
       Source: "(address holder)"
      VariableDeclaration "holder"
         Type: address
         Source: "address holder"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256[])"
      VariableDeclaration ""
         Type: uint256[] memory
         Source: "uint256[]"
        ArrayTypeName
           Source: "uint256[]"
          ElementaryTypeName uint256
             Source: "uint256"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address to, uint256 assetId) public;"
    ParameterList
       Source: "(address to, uint256 assetId)"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 assetId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
  FunctionDefinition "transfer" - public
     Source: "function transfer(address to, uint256 assetId, bytes userData) public;"
    ParameterList
       Source: "(address to, uint256 assetId, bytes userData)"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 assetId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "userData"
         Type: bytes memory
         Source: "bytes userData"
        ElementaryTypeName bytes
           Source: "bytes"
    ParameterList
       Source: ""
  FunctionDefinition "transfer" - public
     Source: "function transfer(address to, uint256 assetId, bytes userData, bytes operatorData) public;"
    ParameterList
       Source: "(address to, uint256 assetId, bytes userData, bytes operatorData)"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 assetId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "userData"
         Type: bytes memory
         Source: "bytes userData"
        ElementaryTypeName bytes
           Source: "bytes"
      VariableDeclaration "operatorData"
         Type: bytes memory
         Source: "bytes operatorData"
        ElementaryTypeName bytes
           Source: "bytes"
    ParameterList
       Source: ""
  FunctionDefinition "authorizeOperator" - public
     Source: "function authorizeOperator(address operator, bool authorized) public;"
    ParameterList
       Source: "(address operator, bool authorized)"
      VariableDeclaration "operator"
         Type: address
         Source: "address operator"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "authorized"
         Type: bool
         Source: "bool authorized"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
  FunctionDefinition "isOperatorAuthorizedFor" - public - const
     Source: "function isOperatorAuthorizedFor(address operator, address assetHolder)\r\n    public view returns (bool);"
    ParameterList
       Source: "(address operator, address assetHolder)"
      VariableDeclaration "operator"
         Type: address
         Source: "address operator"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "assetHolder"
         Type: address
         Source: "address assetHolder"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
  EventDefinition "Transfer"
     Source: "event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 indexed assetId,\r\n    address operator,\r\n    bytes userData,\r\n    bytes operatorData\r\n  );"
    ParameterList
       Source: "(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 indexed assetId,\r\n    address operator,\r\n    bytes userData,\r\n    bytes operatorData\r\n  )"
      VariableDeclaration "from"
         Type: address
         Source: "address indexed from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "to"
         Type: address
         Source: "address indexed to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 indexed assetId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "operator"
         Type: address
         Source: "address operator"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "userData"
         Type: bytes memory
         Source: "bytes userData"
        ElementaryTypeName bytes
           Source: "bytes"
      VariableDeclaration "operatorData"
         Type: bytes memory
         Source: "bytes operatorData"
        ElementaryTypeName bytes
           Source: "bytes"
  EventDefinition "Update"
     Source: "event Update(\r\n    uint256 indexed assetId,\r\n    address indexed holder,\r\n    address indexed operator,\r\n    string data\r\n  );"
    ParameterList
       Source: "(\r\n    uint256 indexed assetId,\r\n    address indexed holder,\r\n    address indexed operator,\r\n    string data\r\n  )"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 indexed assetId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "holder"
         Type: address
         Source: "address indexed holder"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "operator"
         Type: address
         Source: "address indexed operator"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "data"
         Type: string memory
         Source: "string data"
        ElementaryTypeName string
           Source: "string"
  EventDefinition "AuthorizeOperator"
     Source: "event AuthorizeOperator(\r\n    address indexed operator,\r\n    address indexed holder,\r\n    bool authorized\r\n  );"
    ParameterList
       Source: "(\r\n    address indexed operator,\r\n    address indexed holder,\r\n    bool authorized\r\n  )"
      VariableDeclaration "operator"
         Type: address
         Source: "address indexed operator"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "holder"
         Type: address
         Source: "address indexed holder"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "authorized"
         Type: bool
         Source: "bool authorized"
        ElementaryTypeName bool
           Source: "bool"
ContractDefinition "InterfaceImplementationRegistry"
   Source: "contract InterfaceImplementationRegistry {\r\n\r\n    mapping (address => mapping(bytes32 => address)) interfaces;\r\n    mapping (address => address) public managers;\r\n\r\n    modifier canManage(address addr) {\r\n        require(msg.sender == addr || msg.sender == managers[addr]);\r\n        _;\r\n    }\r\n\r\n    function interfaceHash(string interfaceName) public pure returns(bytes32) {\r\n        return keccak256(interfaceName);\r\n    }\r\n\r\n\r\n    /// @notice Query if an address implements an interface and thru which contract\r\n    /// @param addr Address that is being queried for the implementation of an interface\r\n    /// @param iHash SHA3 of the name of the interface as a string\r\n    ///  Example `web3.utils.sha3('Ierc777`')`\r\n    /// @return The address of the contract that implements a speficic interface\r\n    ///  or 0x0 if `addr` does not implement this interface\r\n    function getInterfaceImplementer(address addr, bytes32 iHash) public constant returns (address) {\r\n        return interfaces[addr][iHash];\r\n    }\r\n\r\n    /// @notice Sets the contract that will handle a specific interface; only\r\n    ///  the address itself or a `manager` defined for that address can set it\r\n    /// @param addr Address that you want to define the interface for\r\n    /// @param iHash SHA3 of the name of the interface as a string\r\n    ///  For example `web3.utils.sha3('Ierc777')` for the Ierc777\r\n    function setInterfaceImplementer(address addr, bytes32 iHash, address implementer) public canManage(addr)  {\r\n        interfaces[addr][iHash] = implementer;\r\n        InterfaceImplementerSet(addr, iHash, implementer);\r\n    }\r\n\r\n    /// @notice Sets an external `manager` that will be able to call `setInterfaceImplementer()`\r\n    ///  on behalf of the address.\r\n    /// @param addr Address that you are defining the manager for.\r\n    /// @param newManager The address of the manager for the `addr` that will replace\r\n    ///  the old one.  Set to 0x0 if you want to remove the manager.\r\n    function changeManager(address addr, address newManager) public canManage(addr) {\r\n        managers[addr] = newManager;\r\n        ManagerChanged(addr, newManager);\r\n    }\r\n\r\n    event InterfaceImplementerSet(address indexed addr, bytes32 indexed interfaceHash, address indexed implementer);\r\n    event ManagerChanged(address indexed addr, address indexed newManager);\r\n}"
  VariableDeclaration "interfaces"
     Type: mapping(address => mapping(bytes32 => address))
     Gas costs: 0
     Source: "mapping (address => mapping(bytes32 => address)) interfaces"
    Mapping
       Source: "mapping (address => mapping(bytes32 => address))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping(bytes32 => address)"
        ElementaryTypeName bytes32
           Source: "bytes32"
        ElementaryTypeName address
           Source: "address"
  VariableDeclaration "managers"
     Type: mapping(address => address)
     Gas costs: 0
     Source: "mapping (address => address) public managers"
    Mapping
       Source: "mapping (address => address)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName address
         Source: "address"
  ModifierDefinition "canManage"
     Source: "modifier canManage(address addr) {\r\n        require(msg.sender == addr || msg.sender == managers[addr]);\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address addr)"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\r\n        require(msg.sender == addr || msg.sender == managers[addr]);\r\n        _;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "require(msg.sender == addr || msg.sender == managers[addr])"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == addr || msg.sender == managers[addr])"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ||
             Type: bool
             Source: "msg.sender == addr || msg.sender == managers[addr]"
            BinaryOperation using operator ==
               Type: bool
               Source: "msg.sender == addr"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier addr
                 Type: address
                 Source: "addr"
            BinaryOperation using operator ==
               Type: bool
               Source: "msg.sender == managers[addr]"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              IndexAccess
                 Type: address
                 Source: "managers[addr]"
                Identifier managers
                   Type: mapping(address => address)
                   Source: "managers"
                Identifier addr
                   Type: address
                   Source: "addr"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "interfaceHash" - public
     Source: "function interfaceHash(string interfaceName) public pure returns(bytes32) {\r\n        return keccak256(interfaceName);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(string interfaceName)"
      VariableDeclaration "interfaceName"
         Type: string memory
         Source: "string interfaceName"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Gas costs: 0
       Source: "(bytes32)"
      VariableDeclaration ""
         Type: bytes32
         Source: "bytes32"
        ElementaryTypeName bytes32
           Source: "bytes32"
    Block
       Source: "{\r\n        return keccak256(interfaceName);\r\n    }"
      Return
         Gas costs: 0
         Source: "return keccak256(interfaceName)"
        FunctionCall
           Type: bytes32
           Source: "keccak256(interfaceName)"
          Identifier keccak256
             Type: function () pure returns (bytes32)
             Source: "keccak256"
          Identifier interfaceName
             Type: string memory
             Source: "interfaceName"
  FunctionDefinition "getInterfaceImplementer" - public - const
     Source: "function getInterfaceImplementer(address addr, bytes32 iHash) public constant returns (address) {\r\n        return interfaces[addr][iHash];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address addr, bytes32 iHash)"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "iHash"
         Type: bytes32
         Source: "bytes32 iHash"
        ElementaryTypeName bytes32
           Source: "bytes32"
    ParameterList
       Gas costs: 0
       Source: "(address)"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\r\n        return interfaces[addr][iHash];\r\n    }"
      Return
         Gas costs: 0
         Source: "return interfaces[addr][iHash]"
        IndexAccess
           Type: address
           Source: "interfaces[addr][iHash]"
          IndexAccess
             Type: mapping(bytes32 => address)
             Source: "interfaces[addr]"
            Identifier interfaces
               Type: mapping(address => mapping(bytes32 => address))
               Source: "interfaces"
            Identifier addr
               Type: address
               Source: "addr"
          Identifier iHash
             Type: bytes32
             Source: "iHash"
  FunctionDefinition "setInterfaceImplementer" - public
     Source: "function setInterfaceImplementer(address addr, bytes32 iHash, address implementer) public canManage(addr)  {\r\n        interfaces[addr][iHash] = implementer;\r\n        InterfaceImplementerSet(addr, iHash, implementer);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address addr, bytes32 iHash, address implementer)"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "iHash"
         Type: bytes32
         Source: "bytes32 iHash"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "implementer"
         Type: address
         Source: "address implementer"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "canManage"
       Gas costs: 0
       Source: "canManage(addr)"
      Identifier canManage
         Type: modifier (address)
         Source: "canManage"
      Identifier addr
         Type: address
         Source: "addr"
    Block
       Source: "{\r\n        interfaces[addr][iHash] = implementer;\r\n        InterfaceImplementerSet(addr, iHash, implementer);\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "interfaces[addr][iHash] = implementer"
        Assignment using operator =
           Type: address
           Source: "interfaces[addr][iHash] = implementer"
          IndexAccess
             Type: address
             Source: "interfaces[addr][iHash]"
            IndexAccess
               Type: mapping(bytes32 => address)
               Source: "interfaces[addr]"
              Identifier interfaces
                 Type: mapping(address => mapping(bytes32 => address))
                 Source: "interfaces"
              Identifier addr
                 Type: address
                 Source: "addr"
            Identifier iHash
               Type: bytes32
               Source: "iHash"
          Identifier implementer
             Type: address
             Source: "implementer"
      ExpressionStatement
         Gas costs: 0
         Source: "InterfaceImplementerSet(addr, iHash, implementer)"
        FunctionCall
           Type: tuple()
           Source: "InterfaceImplementerSet(addr, iHash, implementer)"
          Identifier InterfaceImplementerSet
             Type: function (address,bytes32,address)
             Source: "InterfaceImplementerSet"
          Identifier addr
             Type: address
             Source: "addr"
          Identifier iHash
             Type: bytes32
             Source: "iHash"
          Identifier implementer
             Type: address
             Source: "implementer"
  FunctionDefinition "changeManager" - public
     Source: "function changeManager(address addr, address newManager) public canManage(addr) {\r\n        managers[addr] = newManager;\r\n        ManagerChanged(addr, newManager);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address addr, address newManager)"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "newManager"
         Type: address
         Source: "address newManager"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "canManage"
       Gas costs: 0
       Source: "canManage(addr)"
      Identifier canManage
         Type: modifier (address)
         Source: "canManage"
      Identifier addr
         Type: address
         Source: "addr"
    Block
       Source: "{\r\n        managers[addr] = newManager;\r\n        ManagerChanged(addr, newManager);\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "managers[addr] = newManager"
        Assignment using operator =
           Type: address
           Source: "managers[addr] = newManager"
          IndexAccess
             Type: address
             Source: "managers[addr]"
            Identifier managers
               Type: mapping(address => address)
               Source: "managers"
            Identifier addr
               Type: address
               Source: "addr"
          Identifier newManager
             Type: address
             Source: "newManager"
      ExpressionStatement
         Gas costs: 0
         Source: "ManagerChanged(addr, newManager)"
        FunctionCall
           Type: tuple()
           Source: "ManagerChanged(addr, newManager)"
          Identifier ManagerChanged
             Type: function (address,address)
             Source: "ManagerChanged"
          Identifier addr
             Type: address
             Source: "addr"
          Identifier newManager
             Type: address
             Source: "newManager"
  EventDefinition "InterfaceImplementerSet"
     Gas costs: 0
     Source: "event InterfaceImplementerSet(address indexed addr, bytes32 indexed interfaceHash, address indexed implementer);"
    ParameterList
       Source: "(address indexed addr, bytes32 indexed interfaceHash, address indexed implementer)"
      VariableDeclaration "addr"
         Type: address
         Source: "address indexed addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "interfaceHash"
         Type: bytes32
         Source: "bytes32 indexed interfaceHash"
        ElementaryTypeName bytes32
           Source: "bytes32"
      VariableDeclaration "implementer"
         Type: address
         Source: "address indexed implementer"
        ElementaryTypeName address
           Source: "address"
  EventDefinition "ManagerChanged"
     Gas costs: 0
     Source: "event ManagerChanged(address indexed addr, address indexed newManager);"
    ParameterList
       Source: "(address indexed addr, address indexed newManager)"
      VariableDeclaration "addr"
         Type: address
         Source: "address indexed addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "newManager"
         Type: address
         Source: "address indexed newManager"
        ElementaryTypeName address
           Source: "address"
ContractDefinition "EIP820"
   Source: "contract EIP820 {\r\n    InterfaceImplementationRegistry interfaceImplementationRegistry = InterfaceImplementationRegistry(0x94405C3223089A942B7597dB96Dc60FcA17B0E3A);\r\n\r\n    function setInterfaceImplementation(string ifaceLabel, address impl) internal {\r\n        interfaceImplementationRegistry.setInterfaceImplementer(this, keccak256(ifaceLabel), impl);\r\n    }\r\n\r\n    function interfaceAddr(address addr, string ifaceLabel) internal constant returns(address) {\r\n        return interfaceImplementationRegistry.getInterfaceImplementer(addr, keccak256(ifaceLabel));\r\n    }\r\n\r\n    function delegateManagement(address newManager) internal {\r\n        interfaceImplementationRegistry.changeManager(this, newManager);\r\n    }\r\n}"
  VariableDeclaration "interfaceImplementationRegistry"
     Type: contract InterfaceImplementationRegistry
     Gas costs: 0
     Source: "InterfaceImplementationRegistry interfaceImplementationRegistry = InterfaceImplementationRegistry(0x94405C3223089A942B7597dB96Dc60FcA17B0E3A)"
    UserDefinedTypeName "InterfaceImplementationRegistry"
       Source: "InterfaceImplementationRegistry"
    FunctionCall
       Type: contract InterfaceImplementationRegistry
       Source: "InterfaceImplementationRegistry(0x94405C3223089A942B7597dB96Dc60FcA17B0E3A)"
      Identifier InterfaceImplementationRegistry
         Type: type(contract InterfaceImplementationRegistry)
         Source: "InterfaceImplementationRegistry"
      Literal, token: [no token] value: 0x94405C3223089A942B7597dB96Dc60FcA17B0E3A
         Type: address
         Source: "0x94405C3223089A942B7597dB96Dc60FcA17B0E3A"
  FunctionDefinition "setInterfaceImplementation"
     Source: "function setInterfaceImplementation(string ifaceLabel, address impl) internal {\r\n        interfaceImplementationRegistry.setInterfaceImplementer(this, keccak256(ifaceLabel), impl);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(string ifaceLabel, address impl)"
      VariableDeclaration "ifaceLabel"
         Type: string memory
         Source: "string ifaceLabel"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "impl"
         Type: address
         Source: "address impl"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        interfaceImplementationRegistry.setInterfaceImplementer(this, keccak256(ifaceLabel), impl);\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "interfaceImplementationRegistry.setInterfaceImplementer(this, keccak256(ifaceLabel), impl)"
        FunctionCall
           Type: tuple()
           Source: "interfaceImplementationRegistry.setInterfaceImplementer(this, keccak256(ifaceLabel), impl)"
          MemberAccess to member setInterfaceImplementer
             Type: function (address,bytes32,address) external
             Source: "interfaceImplementationRegistry.setInterfaceImplementer"
            Identifier interfaceImplementationRegistry
               Type: contract InterfaceImplementationRegistry
               Source: "interfaceImplementationRegistry"
          Identifier this
             Type: contract EIP820
             Source: "this"
          FunctionCall
             Type: bytes32
             Source: "keccak256(ifaceLabel)"
            Identifier keccak256
               Type: function () pure returns (bytes32)
               Source: "keccak256"
            Identifier ifaceLabel
               Type: string memory
               Source: "ifaceLabel"
          Identifier impl
             Type: address
             Source: "impl"
  FunctionDefinition "interfaceAddr" - const
     Source: "function interfaceAddr(address addr, string ifaceLabel) internal constant returns(address) {\r\n        return interfaceImplementationRegistry.getInterfaceImplementer(addr, keccak256(ifaceLabel));\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address addr, string ifaceLabel)"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "ifaceLabel"
         Type: string memory
         Source: "string ifaceLabel"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Gas costs: 3
       Source: "(address)"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\r\n        return interfaceImplementationRegistry.getInterfaceImplementer(addr, keccak256(ifaceLabel));\r\n    }"
      Return
         Gas costs: [???]
         Source: "return interfaceImplementationRegistry.getInterfaceImplementer(addr, keccak256(ifaceLabel))"
        FunctionCall
           Type: address
           Source: "interfaceImplementationRegistry.getInterfaceImplementer(addr, keccak256(ifaceLabel))"
          MemberAccess to member getInterfaceImplementer
             Type: function (address,bytes32) view external returns (address)
             Source: "interfaceImplementationRegistry.getInterfaceImplementer"
            Identifier interfaceImplementationRegistry
               Type: contract InterfaceImplementationRegistry
               Source: "interfaceImplementationRegistry"
          Identifier addr
             Type: address
             Source: "addr"
          FunctionCall
             Type: bytes32
             Source: "keccak256(ifaceLabel)"
            Identifier keccak256
               Type: function () pure returns (bytes32)
               Source: "keccak256"
            Identifier ifaceLabel
               Type: string memory
               Source: "ifaceLabel"
  FunctionDefinition "delegateManagement"
     Source: "function delegateManagement(address newManager) internal {\r\n        interfaceImplementationRegistry.changeManager(this, newManager);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address newManager)"
      VariableDeclaration "newManager"
         Type: address
         Source: "address newManager"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        interfaceImplementationRegistry.changeManager(this, newManager);\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "interfaceImplementationRegistry.changeManager(this, newManager)"
        FunctionCall
           Type: tuple()
           Source: "interfaceImplementationRegistry.changeManager(this, newManager)"
          MemberAccess to member changeManager
             Type: function (address,address) external
             Source: "interfaceImplementationRegistry.changeManager"
            Identifier interfaceImplementationRegistry
               Type: contract InterfaceImplementationRegistry
               Source: "interfaceImplementationRegistry"
          Identifier this
             Type: contract EIP820
             Source: "this"
          Identifier newManager
             Type: address
             Source: "newManager"
ContractDefinition "SafeMath"
   Source: "library SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}"
  FunctionDefinition "mul"
     Source: "function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }"
      IfStatement
         Source: "if (a == 0) {\r\n      return 0;\r\n    }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 0
           Source: "a == 0"
          Identifier a
             Type: uint256
             Source: "a"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n      return 0;\r\n    }"
          Return
             Gas costs: 0
             Source: "return 0"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 c = a * b"
        VariableDeclaration "c"
           Type: uint256
           Source: "uint256 c"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator *
           Type: uint256
           Source: "a * b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
      ExpressionStatement
         Gas costs: 0
         Source: "assert(c / a == b)"
        FunctionCall
           Type: tuple()
           Source: "assert(c / a == b)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator ==
             Type: bool
             Source: "c / a == b"
            BinaryOperation using operator /
               Type: uint256
               Source: "c / a"
              Identifier c
                 Type: uint256
                 Source: "c"
              Identifier a
                 Type: uint256
                 Source: "a"
            Identifier b
               Type: uint256
               Source: "b"
      Return
         Gas costs: 0
         Source: "return c"
        Identifier c
           Type: uint256
           Source: "c"
  FunctionDefinition "div"
     Source: "function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 c = a / b"
        VariableDeclaration "c"
           Type: uint256
           Source: "uint256 c"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator /
           Type: uint256
           Source: "a / b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
      Return
         Gas costs: 0
         Source: "return c"
        Identifier c
           Type: uint256
           Source: "c"
  FunctionDefinition "sub"
     Source: "function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    assert(b <= a);\r\n    return a - b;\r\n  }"
      ExpressionStatement
         Gas costs: 32
         Source: "assert(b <= a)"
        FunctionCall
           Type: tuple()
           Source: "assert(b <= a)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator <=
             Type: bool
             Source: "b <= a"
            Identifier b
               Type: uint256
               Source: "b"
            Identifier a
               Type: uint256
               Source: "a"
      Return
         Gas costs: 14
         Source: "return a - b"
        BinaryOperation using operator -
           Type: uint256
           Source: "a - b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
  FunctionDefinition "add"
     Source: "function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 a, uint256 b)"
      VariableDeclaration "a"
         Type: uint256
         Source: "uint256 a"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "b"
         Type: uint256
         Source: "uint256 b"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }"
      VariableDeclarationStatement
         Gas costs: 17
         Source: "uint256 c = a + b"
        VariableDeclaration "c"
           Type: uint256
           Source: "uint256 c"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator +
           Type: uint256
           Source: "a + b"
          Identifier a
             Type: uint256
             Source: "a"
          Identifier b
             Type: uint256
             Source: "b"
      ExpressionStatement
         Gas costs: 32
         Source: "assert(c >= a)"
        FunctionCall
           Type: tuple()
           Source: "assert(c >= a)"
          Identifier assert
             Type: function (bool) pure
             Source: "assert"
          BinaryOperation using operator >=
             Type: bool
             Source: "c >= a"
            Identifier c
               Type: uint256
               Source: "c"
            Identifier a
               Type: uint256
               Source: "a"
      Return
         Gas costs: 8
         Source: "return c"
        Identifier c
           Type: uint256
           Source: "c"
ContractDefinition "StandardAssetRegistry"
   Source: "contract StandardAssetRegistry is AssetRegistryStorage, IAssetRegistry, EIP820 {\r\n  using SafeMath for uint256;\r\n\r\n  //\r\n  // Global Getters\r\n  //\r\n\r\n  function name() public view returns (string) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() public view returns (string) {\r\n    return _symbol;\r\n  }\r\n\r\n  function description() public view returns (string) {\r\n    return _description;\r\n  }\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return _count;\r\n  }\r\n\r\n  //\r\n  // Asset-centric getter functions\r\n  //\r\n\r\n  function exists(uint256 assetId) public view returns (bool) {\r\n    return _holderOf[assetId] != 0;\r\n  }\r\n\r\n  function holderOf(uint256 assetId) public view returns (address) {\r\n    return _holderOf[assetId];\r\n  }\r\n\r\n  function safeHolderOf(uint256 assetId) public view returns (address) {\r\n    address holder = _holderOf[assetId];\r\n    require(holder != 0);\r\n    return holder;\r\n  }\r\n\r\n  function assetData(uint256 assetId) public view returns (string) {\r\n    return _assetData[assetId];\r\n  }\r\n\r\n  function safeAssetData(uint256 assetId) public view returns (string) {\r\n    require(_holderOf[assetId] != 0);\r\n    return _assetData[assetId];\r\n  }\r\n\r\n  //\r\n  // Holder-centric getter functions\r\n  //\r\n\r\n  function assetCount(address holder) public view returns (uint256) {\r\n    return _assetsOf[holder].length;\r\n  }\r\n\r\n  function assetByIndex(address holder, uint256 index) public view returns (uint256) {\r\n    require(index < _assetsOf[holder].length);\r\n    require(index < (1<<127));\r\n    return _assetsOf[holder][index];\r\n  }\r\n\r\n  function assetsOf(address holder) external view returns (uint256[]) {\r\n    return _assetsOf[holder];\r\n  }\r\n\r\n  //\r\n  // Authorization getters\r\n  //\r\n\r\n  function isOperatorAuthorizedFor(address operator, address assetHolder)\r\n    public view returns (bool)\r\n  {\r\n    return _operators[assetHolder][operator];\r\n  }\r\n\r\n  function authorizeOperator(address operator, bool authorized) public {\r\n    if (authorized) {\r\n      require(!isOperatorAuthorizedFor(operator, msg.sender));\r\n      _addAuthorization(operator, msg.sender);\r\n    } else {\r\n      require(isOperatorAuthorizedFor(operator, msg.sender));\r\n      _clearAuthorization(operator, msg.sender);\r\n    }\r\n    AuthorizeOperator(operator, msg.sender, authorized);\r\n  }\r\n\r\n  function _addAuthorization(address operator, address holder) private {\r\n    _operators[holder][operator] = true;\r\n  }\r\n\r\n  function _clearAuthorization(address operator, address holder) private {\r\n    _operators[holder][operator] = false;\r\n  }\r\n\r\n  //\r\n  // Internal Operations\r\n  //\r\n\r\n  function _addAssetTo(address to, uint256 assetId) internal {\r\n    _holderOf[assetId] = to;\r\n\r\n    uint256 length = assetCount(to);\r\n\r\n    _assetsOf[to].push(assetId);\r\n\r\n    _indexOfAsset[assetId] = length;\r\n\r\n    _count = _count.add(1);\r\n  }\r\n\r\n  function _addAssetTo(address to, uint256 assetId, string data) internal {\r\n    _addAssetTo(to, assetId);\r\n\r\n    _assetData[assetId] = data;\r\n  }\r\n\r\n  function _removeAssetFrom(address from, uint256 assetId) internal {\r\n    uint256 assetIndex = _indexOfAsset[assetId];\r\n    uint256 lastAssetIndex = assetCount(from).sub(1);\r\n    uint256 lastAssetId = _assetsOf[from][lastAssetIndex];\r\n\r\n    _holderOf[assetId] = 0;\r\n\r\n    // Insert the last asset into the position previously occupied by the asset to be removed\r\n    _assetsOf[from][assetIndex] = lastAssetId;\r\n\r\n    // Resize the array\r\n    _assetsOf[from][lastAssetIndex] = 0;\r\n    _assetsOf[from].length--;\r\n\r\n    // Remove the array if no more assets are owned to prevent pollution\r\n    if (_assetsOf[from].length == 0) {\r\n      delete _assetsOf[from];\r\n    }\r\n\r\n    // Update the index of positions for the asset\r\n    _indexOfAsset[assetId] = 0;\r\n    _indexOfAsset[lastAssetId] = assetIndex;\r\n\r\n    _count = _count.sub(1);\r\n  }\r\n\r\n  function _removeAssetData(uint256 assetId) internal {\r\n    _assetData[assetId] = '';\r\n  }\r\n\r\n  //\r\n  // Supply-altering functions\r\n  //\r\n\r\n  function _generate(uint256 assetId, address beneficiary, string data) internal {\r\n    require(_holderOf[assetId] == 0);\r\n\r\n    _addAssetTo(beneficiary, assetId, data);\r\n\r\n    Transfer(0, beneficiary, assetId, msg.sender, bytes(data), '');\r\n  }\r\n\r\n  function _destroy(uint256 assetId) internal {\r\n    address holder = _holderOf[assetId];\r\n    require(holder != 0);\r\n\r\n    _removeAssetFrom(holder, assetId);\r\n    _removeAssetData(assetId);\r\n\r\n    Transfer(holder, 0, assetId, msg.sender, '', '');\r\n  }\r\n\r\n  //\r\n  // Transaction related operations\r\n  //\r\n\r\n  modifier onlyHolder(uint256 assetId) {\r\n    require(_holderOf[assetId] == msg.sender);\r\n    _;\r\n  }\r\n\r\n  modifier onlyOperatorOrHolder(uint256 assetId) {\r\n    require(_holderOf[assetId] == msg.sender\r\n         || isOperatorAuthorizedFor(msg.sender, _holderOf[assetId]));\r\n    _;\r\n  }\r\n\r\n  modifier isDestinataryDefined(address destinatary) {\r\n    require(destinatary != 0);\r\n    _;\r\n  }\r\n\r\n  modifier destinataryIsNotHolder(uint256 assetId, address to) {\r\n    require(_holderOf[assetId] != to);\r\n    _;\r\n  }\r\n\r\n  function transfer(address to, uint256 assetId) public {\r\n    return _doTransfer(to, assetId, '', 0, '');\r\n  }\r\n\r\n  function transfer(address to, uint256 assetId, bytes userData) public {\r\n    return _doTransfer(to, assetId, userData, 0, '');\r\n  }\r\n\r\n  function transfer(address to, uint256 assetId, bytes userData, bytes operatorData) public {\r\n    return _doTransfer(to, assetId, userData, msg.sender, operatorData);\r\n  }\r\n\r\n  function _doTransfer(\r\n    address to, uint256 assetId, bytes userData, address operator, bytes operatorData\r\n  )\r\n    isDestinataryDefined(to)\r\n    destinataryIsNotHolder(assetId, to)\r\n    onlyOperatorOrHolder(assetId)\r\n    internal\r\n  {\r\n    return _doSend(to, assetId, userData, operator, operatorData);\r\n  }\r\n\r\n\r\n  function _doSend(\r\n    address to, uint256 assetId, bytes userData, address operator, bytes operatorData\r\n  )\r\n    internal\r\n  {\r\n    address holder = _holderOf[assetId];\r\n    _removeAssetFrom(holder, assetId);\r\n    _addAssetTo(to, assetId);\r\n\r\n    if (_isContract(to)) {\r\n      require(!_reentrancy);\r\n      _reentrancy = true;\r\n\r\n      address recipient = interfaceAddr(to, 'IAssetHolder');\r\n      require(recipient != 0);\r\n\r\n      IAssetHolder(recipient).onAssetReceived(assetId, holder, to, userData, operator, operatorData);\r\n\r\n      _reentrancy = false;\r\n    }\r\n\r\n    Transfer(holder, to, assetId, operator, userData, operatorData);\r\n  }\r\n\r\n  //\r\n  // Update related functions\r\n  //\r\n\r\n  function _update(uint256 assetId, string data) internal {\r\n    require(exists(assetId));\r\n    _assetData[assetId] = data;\r\n    Update(assetId, _holderOf[assetId], msg.sender, data);\r\n  }\r\n\r\n  //\r\n  // Utilities\r\n  //\r\n\r\n  function _isContract(address addr) internal view returns (bool) {\r\n    uint size;\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "AssetRegistryStorage"
    UserDefinedTypeName "AssetRegistryStorage"
       Source: "AssetRegistryStorage"
  InheritanceSpecifier
     Gas costs: 0
     Source: "IAssetRegistry"
    UserDefinedTypeName "IAssetRegistry"
       Source: "IAssetRegistry"
  InheritanceSpecifier
     Gas costs: 0
     Source: "EIP820"
    UserDefinedTypeName "EIP820"
       Source: "EIP820"
  UsingForDirective
     Gas costs: 0
     Source: "using SafeMath for uint256;"
    UserDefinedTypeName "SafeMath"
       Source: "SafeMath"
    ElementaryTypeName uint256
       Source: "uint256"
  FunctionDefinition "name" - public - const
     Source: "function name() public view returns (string) {\r\n    return _name;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(string)"
      VariableDeclaration ""
         Type: string memory
         Source: "string"
        ElementaryTypeName string
           Source: "string"
    Block
       Source: "{\r\n    return _name;\r\n  }"
      Return
         Gas costs: [???]
         Source: "return _name"
        Identifier _name
           Type: string storage ref
           Source: "_name"
  FunctionDefinition "symbol" - public - const
     Source: "function symbol() public view returns (string) {\r\n    return _symbol;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(string)"
      VariableDeclaration ""
         Type: string memory
         Source: "string"
        ElementaryTypeName string
           Source: "string"
    Block
       Source: "{\r\n    return _symbol;\r\n  }"
      Return
         Gas costs: [???]
         Source: "return _symbol"
        Identifier _symbol
           Type: string storage ref
           Source: "_symbol"
  FunctionDefinition "description" - public - const
     Source: "function description() public view returns (string) {\r\n    return _description;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(string)"
      VariableDeclaration ""
         Type: string memory
         Source: "string"
        ElementaryTypeName string
           Source: "string"
    Block
       Source: "{\r\n    return _description;\r\n  }"
      Return
         Gas costs: [???]
         Source: "return _description"
        Identifier _description
           Type: string storage ref
           Source: "_description"
  FunctionDefinition "totalSupply" - public - const
     Source: "function totalSupply() public view returns (uint256) {\r\n    return _count;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    return _count;\r\n  }"
      Return
         Gas costs: 208
         Source: "return _count"
        Identifier _count
           Type: uint256
           Source: "_count"
  FunctionDefinition "exists" - public - const
     Source: "function exists(uint256 assetId) public view returns (bool) {\r\n    return _holderOf[assetId] != 0;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 assetId)"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 assetId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n    return _holderOf[assetId] != 0;\r\n  }"
      Return
         Gas costs: 343
         Source: "return _holderOf[assetId] != 0"
        BinaryOperation using operator !=
           Type: bool
           Source: "_holderOf[assetId] != 0"
          IndexAccess
             Type: address
             Source: "_holderOf[assetId]"
            Identifier _holderOf
               Type: mapping(uint256 => address)
               Source: "_holderOf"
            Identifier assetId
               Type: uint256
               Source: "assetId"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
  FunctionDefinition "holderOf" - public - const
     Source: "function holderOf(uint256 assetId) public view returns (address) {\r\n    return _holderOf[assetId];\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 assetId)"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 assetId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(address)"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\r\n    return _holderOf[assetId];\r\n  }"
      Return
         Gas costs: 328
         Source: "return _holderOf[assetId]"
        IndexAccess
           Type: address
           Source: "_holderOf[assetId]"
          Identifier _holderOf
             Type: mapping(uint256 => address)
             Source: "_holderOf"
          Identifier assetId
             Type: uint256
             Source: "assetId"
  FunctionDefinition "safeHolderOf" - public - const
     Source: "function safeHolderOf(uint256 assetId) public view returns (address) {\r\n    address holder = _holderOf[assetId];\r\n    require(holder != 0);\r\n    return holder;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 assetId)"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 assetId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(address)"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\r\n    address holder = _holderOf[assetId];\r\n    require(holder != 0);\r\n    return holder;\r\n  }"
      VariableDeclarationStatement
         Gas costs: 331
         Source: "address holder = _holderOf[assetId]"
        VariableDeclaration "holder"
           Type: address
           Source: "address holder"
          ElementaryTypeName address
             Source: "address"
        IndexAccess
           Type: address
           Source: "_holderOf[assetId]"
          Identifier _holderOf
             Type: mapping(uint256 => address)
             Source: "_holderOf"
          Identifier assetId
             Type: uint256
             Source: "assetId"
      ExpressionStatement
         Gas costs: 44
         Source: "require(holder != 0)"
        FunctionCall
           Type: tuple()
           Source: "require(holder != 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "holder != 0"
            Identifier holder
               Type: address
               Source: "holder"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      Return
         Gas costs: 8
         Source: "return holder"
        Identifier holder
           Type: address
           Source: "holder"
  FunctionDefinition "assetData" - public - const
     Source: "function assetData(uint256 assetId) public view returns (string) {\r\n    return _assetData[assetId];\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 assetId)"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 assetId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(string)"
      VariableDeclaration ""
         Type: string memory
         Source: "string"
        ElementaryTypeName string
           Source: "string"
    Block
       Source: "{\r\n    return _assetData[assetId];\r\n  }"
      Return
         Gas costs: [???]
         Source: "return _assetData[assetId]"
        IndexAccess
           Type: string storage ref
           Source: "_assetData[assetId]"
          Identifier _assetData
             Type: mapping(uint256 => string storage ref)
             Source: "_assetData"
          Identifier assetId
             Type: uint256
             Source: "assetId"
  FunctionDefinition "safeAssetData" - public - const
     Source: "function safeAssetData(uint256 assetId) public view returns (string) {\r\n    require(_holderOf[assetId] != 0);\r\n    return _assetData[assetId];\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 assetId)"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 assetId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(string)"
      VariableDeclaration ""
         Type: string memory
         Source: "string"
        ElementaryTypeName string
           Source: "string"
    Block
       Source: "{\r\n    require(_holderOf[assetId] != 0);\r\n    return _assetData[assetId];\r\n  }"
      ExpressionStatement
         Gas costs: 364
         Source: "require(_holderOf[assetId] != 0)"
        FunctionCall
           Type: tuple()
           Source: "require(_holderOf[assetId] != 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "_holderOf[assetId] != 0"
            IndexAccess
               Type: address
               Source: "_holderOf[assetId]"
              Identifier _holderOf
                 Type: mapping(uint256 => address)
                 Source: "_holderOf"
              Identifier assetId
                 Type: uint256
                 Source: "assetId"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      Return
         Gas costs: [???]
         Source: "return _assetData[assetId]"
        IndexAccess
           Type: string storage ref
           Source: "_assetData[assetId]"
          Identifier _assetData
             Type: mapping(uint256 => string storage ref)
             Source: "_assetData"
          Identifier assetId
             Type: uint256
             Source: "assetId"
  FunctionDefinition "assetCount" - public - const
     Source: "function assetCount(address holder) public view returns (uint256) {\r\n    return _assetsOf[holder].length;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address holder)"
      VariableDeclaration "holder"
         Type: address
         Source: "address holder"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    return _assetsOf[holder].length;\r\n  }"
      Return
         Gas costs: 312
         Source: "return _assetsOf[holder].length"
        MemberAccess to member length
           Type: uint256
           Source: "_assetsOf[holder].length"
          IndexAccess
             Type: uint256[] storage ref
             Source: "_assetsOf[holder]"
            Identifier _assetsOf
               Type: mapping(address => uint256[] storage ref)
               Source: "_assetsOf"
            Identifier holder
               Type: address
               Source: "holder"
  FunctionDefinition "assetByIndex" - public - const
     Source: "function assetByIndex(address holder, uint256 index) public view returns (uint256) {\r\n    require(index < _assetsOf[holder].length);\r\n    require(index < (1<<127));\r\n    return _assetsOf[holder][index];\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address holder, uint256 index)"
      VariableDeclaration "holder"
         Type: address
         Source: "address holder"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "index"
         Type: uint256
         Source: "uint256 index"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    require(index < _assetsOf[holder].length);\r\n    require(index < (1<<127));\r\n    return _assetsOf[holder][index];\r\n  }"
      ExpressionStatement
         Gas costs: 339
         Source: "require(index < _assetsOf[holder].length)"
        FunctionCall
           Type: tuple()
           Source: "require(index < _assetsOf[holder].length)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator <
             Type: bool
             Source: "index < _assetsOf[holder].length"
            Identifier index
               Type: uint256
               Source: "index"
            MemberAccess to member length
               Type: uint256
               Source: "_assetsOf[holder].length"
              IndexAccess
                 Type: uint256[] storage ref
                 Source: "_assetsOf[holder]"
                Identifier _assetsOf
                   Type: mapping(address => uint256[] storage ref)
                   Source: "_assetsOf"
                Identifier holder
                   Type: address
                   Source: "holder"
      ExpressionStatement
         Gas costs: 35
         Source: "require(index < (1<<127))"
        FunctionCall
           Type: tuple()
           Source: "require(index < (1<<127))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator <
             Type: bool
             Source: "index < (1<<127)"
            Identifier index
               Type: uint256
               Source: "index"
            TupleExpression
               Type: int_const 1701...(31 digits omitted)...5728
               Source: "(1<<127)"
              BinaryOperation using operator <<
                 Type: int_const 1701...(31 digits omitted)...5728
                 Source: "1<<127"
                Literal, token: [no token] value: 1
                   Type: int_const 1
                   Source: "1"
                Literal, token: [no token] value: 127
                   Type: int_const 127
                   Source: "127"
      Return
         Gas costs: 593
         Source: "return _assetsOf[holder][index]"
        IndexAccess
           Type: uint256
           Source: "_assetsOf[holder][index]"
          IndexAccess
             Type: uint256[] storage ref
             Source: "_assetsOf[holder]"
            Identifier _assetsOf
               Type: mapping(address => uint256[] storage ref)
               Source: "_assetsOf"
            Identifier holder
               Type: address
               Source: "holder"
          Identifier index
             Type: uint256
             Source: "index"
  FunctionDefinition "assetsOf" - public - const
     Source: "function assetsOf(address holder) external view returns (uint256[]) {\r\n    return _assetsOf[holder];\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address holder)"
      VariableDeclaration "holder"
         Type: address
         Source: "address holder"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256[])"
      VariableDeclaration ""
         Type: uint256[] memory
         Source: "uint256[]"
        ArrayTypeName
           Source: "uint256[]"
          ElementaryTypeName uint256
             Source: "uint256"
    Block
       Source: "{\r\n    return _assetsOf[holder];\r\n  }"
      Return
         Gas costs: [???]
         Source: "return _assetsOf[holder]"
        IndexAccess
           Type: uint256[] storage ref
           Source: "_assetsOf[holder]"
          Identifier _assetsOf
             Type: mapping(address => uint256[] storage ref)
             Source: "_assetsOf"
          Identifier holder
             Type: address
             Source: "holder"
  FunctionDefinition "isOperatorAuthorizedFor" - public - const
     Source: "function isOperatorAuthorizedFor(address operator, address assetHolder)\r\n    public view returns (bool)\r\n  {\r\n    return _operators[assetHolder][operator];\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address operator, address assetHolder)"
      VariableDeclaration "operator"
         Type: address
         Source: "address operator"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "assetHolder"
         Type: address
         Source: "address assetHolder"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n    return _operators[assetHolder][operator];\r\n  }"
      Return
         Gas costs: 430
         Source: "return _operators[assetHolder][operator]"
        IndexAccess
           Type: bool
           Source: "_operators[assetHolder][operator]"
          IndexAccess
             Type: mapping(address => bool)
             Source: "_operators[assetHolder]"
            Identifier _operators
               Type: mapping(address => mapping(address => bool))
               Source: "_operators"
            Identifier assetHolder
               Type: address
               Source: "assetHolder"
          Identifier operator
             Type: address
             Source: "operator"
  FunctionDefinition "authorizeOperator" - public
     Source: "function authorizeOperator(address operator, bool authorized) public {\r\n    if (authorized) {\r\n      require(!isOperatorAuthorizedFor(operator, msg.sender));\r\n      _addAuthorization(operator, msg.sender);\r\n    } else {\r\n      require(isOperatorAuthorizedFor(operator, msg.sender));\r\n      _clearAuthorization(operator, msg.sender);\r\n    }\r\n    AuthorizeOperator(operator, msg.sender, authorized);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address operator, bool authorized)"
      VariableDeclaration "operator"
         Type: address
         Source: "address operator"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "authorized"
         Type: bool
         Source: "bool authorized"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    if (authorized) {\r\n      require(!isOperatorAuthorizedFor(operator, msg.sender));\r\n      _addAuthorization(operator, msg.sender);\r\n    } else {\r\n      require(isOperatorAuthorizedFor(operator, msg.sender));\r\n      _clearAuthorization(operator, msg.sender);\r\n    }\r\n    AuthorizeOperator(operator, msg.sender, authorized);\r\n  }"
      IfStatement
         Source: "if (authorized) {\r\n      require(!isOperatorAuthorizedFor(operator, msg.sender));\r\n      _addAuthorization(operator, msg.sender);\r\n    } else {\r\n      require(isOperatorAuthorizedFor(operator, msg.sender));\r\n      _clearAuthorization(operator, msg.sender);\r\n    }"
        Identifier authorized
           Type: bool
           Gas costs: 3
           Source: "authorized"
        Block
           Source: "{\r\n      require(!isOperatorAuthorizedFor(operator, msg.sender));\r\n      _addAuthorization(operator, msg.sender);\r\n    }"
          ExpressionStatement
             Gas costs: 49
             Source: "require(!isOperatorAuthorizedFor(operator, msg.sender))"
            FunctionCall
               Type: tuple()
               Source: "require(!isOperatorAuthorizedFor(operator, msg.sender))"
              Identifier require
                 Type: function (bool) pure
                 Source: "require"
              UnaryOperation (prefix) !
                 Type: bool
                 Source: "!isOperatorAuthorizedFor(operator, msg.sender)"
                FunctionCall
                   Type: bool
                   Source: "isOperatorAuthorizedFor(operator, msg.sender)"
                  Identifier isOperatorAuthorizedFor
                     Type: function (address,address) view returns (bool)
                     Source: "isOperatorAuthorizedFor"
                  Identifier operator
                     Type: address
                     Source: "operator"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
          ExpressionStatement
             Gas costs: 9
             Source: "_addAuthorization(operator, msg.sender)"
            FunctionCall
               Type: tuple()
               Source: "_addAuthorization(operator, msg.sender)"
              Identifier _addAuthorization
                 Type: function (address,address)
                 Source: "_addAuthorization"
              Identifier operator
                 Type: address
                 Source: "operator"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
        Block
           Source: "{\r\n      require(isOperatorAuthorizedFor(operator, msg.sender));\r\n      _clearAuthorization(operator, msg.sender);\r\n    }"
          ExpressionStatement
             Gas costs: 46
             Source: "require(isOperatorAuthorizedFor(operator, msg.sender))"
            FunctionCall
               Type: tuple()
               Source: "require(isOperatorAuthorizedFor(operator, msg.sender))"
              Identifier require
                 Type: function (bool) pure
                 Source: "require"
              FunctionCall
                 Type: bool
                 Source: "isOperatorAuthorizedFor(operator, msg.sender)"
                Identifier isOperatorAuthorizedFor
                   Type: function (address,address) view returns (bool)
                   Source: "isOperatorAuthorizedFor"
                Identifier operator
                   Type: address
                   Source: "operator"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
          ExpressionStatement
             Gas costs: 9
             Source: "_clearAuthorization(operator, msg.sender)"
            FunctionCall
               Type: tuple()
               Source: "_clearAuthorization(operator, msg.sender)"
              Identifier _clearAuthorization
                 Type: function (address,address)
                 Source: "_clearAuthorization"
              Identifier operator
                 Type: address
                 Source: "operator"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
      ExpressionStatement
         Gas costs: [???]
         Source: "AuthorizeOperator(operator, msg.sender, authorized)"
        FunctionCall
           Type: tuple()
           Source: "AuthorizeOperator(operator, msg.sender, authorized)"
          Identifier AuthorizeOperator
             Type: function (address,address,bool)
             Source: "AuthorizeOperator"
          Identifier operator
             Type: address
             Source: "operator"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier authorized
             Type: bool
             Source: "authorized"
  FunctionDefinition "_addAuthorization"
     Source: "function _addAuthorization(address operator, address holder) private {\r\n    _operators[holder][operator] = true;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address operator, address holder)"
      VariableDeclaration "operator"
         Type: address
         Source: "address operator"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "holder"
         Type: address
         Source: "address holder"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    _operators[holder][operator] = true;\r\n  }"
      ExpressionStatement
         Gas costs: 20453
         Source: "_operators[holder][operator] = true"
        Assignment using operator =
           Type: bool
           Source: "_operators[holder][operator] = true"
          IndexAccess
             Type: bool
             Source: "_operators[holder][operator]"
            IndexAccess
               Type: mapping(address => bool)
               Source: "_operators[holder]"
              Identifier _operators
                 Type: mapping(address => mapping(address => bool))
                 Source: "_operators"
              Identifier holder
                 Type: address
                 Source: "holder"
            Identifier operator
               Type: address
               Source: "operator"
          Literal, token: true value: true
             Type: bool
             Source: "true"
  FunctionDefinition "_clearAuthorization"
     Source: "function _clearAuthorization(address operator, address holder) private {\r\n    _operators[holder][operator] = false;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address operator, address holder)"
      VariableDeclaration "operator"
         Type: address
         Source: "address operator"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "holder"
         Type: address
         Source: "address holder"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    _operators[holder][operator] = false;\r\n  }"
      ExpressionStatement
         Gas costs: 20453
         Source: "_operators[holder][operator] = false"
        Assignment using operator =
           Type: bool
           Source: "_operators[holder][operator] = false"
          IndexAccess
             Type: bool
             Source: "_operators[holder][operator]"
            IndexAccess
               Type: mapping(address => bool)
               Source: "_operators[holder]"
              Identifier _operators
                 Type: mapping(address => mapping(address => bool))
                 Source: "_operators"
              Identifier holder
                 Type: address
                 Source: "holder"
            Identifier operator
               Type: address
               Source: "operator"
          Literal, token: false value: false
             Type: bool
             Source: "false"
  FunctionDefinition "_addAssetTo"
     Source: "function _addAssetTo(address to, uint256 assetId) internal {\r\n    _holderOf[assetId] = to;\r\n\r\n    uint256 length = assetCount(to);\r\n\r\n    _assetsOf[to].push(assetId);\r\n\r\n    _indexOfAsset[assetId] = length;\r\n\r\n    _count = _count.add(1);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address to, uint256 assetId)"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 assetId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    _holderOf[assetId] = to;\r\n\r\n    uint256 length = assetCount(to);\r\n\r\n    _assetsOf[to].push(assetId);\r\n\r\n    _indexOfAsset[assetId] = length;\r\n\r\n    _count = _count.add(1);\r\n  }"
      ExpressionStatement
         Gas costs: 20351
         Source: "_holderOf[assetId] = to"
        Assignment using operator =
           Type: address
           Source: "_holderOf[assetId] = to"
          IndexAccess
             Type: address
             Source: "_holderOf[assetId]"
            Identifier _holderOf
               Type: mapping(uint256 => address)
               Source: "_holderOf"
            Identifier assetId
               Type: uint256
               Source: "assetId"
          Identifier to
             Type: address
             Source: "to"
      VariableDeclarationStatement
         Gas costs: 26
         Source: "uint256 length = assetCount(to)"
        VariableDeclaration "length"
           Type: uint256
           Source: "uint256 length"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "assetCount(to)"
          Identifier assetCount
             Type: function (address) view returns (uint256)
             Source: "assetCount"
          Identifier to
             Type: address
             Source: "to"
      ExpressionStatement
         Gas costs: 20202
         Source: "_assetsOf[to].push(assetId)"
        FunctionCall
           Type: uint256
           Source: "_assetsOf[to].push(assetId)"
          MemberAccess to member push
             Type: function (uint256) returns (uint256)
             Source: "_assetsOf[to].push"
            IndexAccess
               Type: uint256[] storage ref
               Source: "_assetsOf[to]"
              Identifier _assetsOf
                 Type: mapping(address => uint256[] storage ref)
                 Source: "_assetsOf"
              Identifier to
                 Type: address
                 Source: "to"
          Identifier assetId
             Type: uint256
             Source: "assetId"
      ExpressionStatement
         Gas costs: 20092
         Source: "_indexOfAsset[assetId] = length"
        Assignment using operator =
           Type: uint256
           Source: "_indexOfAsset[assetId] = length"
          IndexAccess
             Type: uint256
             Source: "_indexOfAsset[assetId]"
            Identifier _indexOfAsset
               Type: mapping(uint256 => uint256)
               Source: "_indexOfAsset"
            Identifier assetId
               Type: uint256
               Source: "assetId"
          Identifier length
             Type: uint256
             Source: "length"
      ExpressionStatement
         Gas costs: 20247
         Source: "_count = _count.add(1)"
        Assignment using operator =
           Type: uint256
           Source: "_count = _count.add(1)"
          Identifier _count
             Type: uint256
             Source: "_count"
          FunctionCall
             Type: uint256
             Source: "_count.add(1)"
            MemberAccess to member add
               Type: function (uint256,uint256) pure returns (uint256)
               Source: "_count.add"
              Identifier _count
                 Type: uint256
                 Source: "_count"
            Literal, token: [no token] value: 1
               Type: int_const 1
               Source: "1"
  FunctionDefinition "_addAssetTo"
     Source: "function _addAssetTo(address to, uint256 assetId, string data) internal {\r\n    _addAssetTo(to, assetId);\r\n\r\n    _assetData[assetId] = data;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address to, uint256 assetId, string data)"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 assetId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "data"
         Type: string memory
         Source: "string data"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    _addAssetTo(to, assetId);\r\n\r\n    _assetData[assetId] = data;\r\n  }"
      ExpressionStatement
         Gas costs: 10
         Source: "_addAssetTo(to, assetId)"
        FunctionCall
           Type: tuple()
           Source: "_addAssetTo(to, assetId)"
          Identifier _addAssetTo
             Type: function (address,uint256)
             Source: "_addAssetTo"
          Identifier to
             Type: address
             Source: "to"
          Identifier assetId
             Type: uint256
             Source: "assetId"
      ExpressionStatement
         Gas costs: [???]
         Source: "_assetData[assetId] = data"
        Assignment using operator =
           Type: string storage ref
           Source: "_assetData[assetId] = data"
          IndexAccess
             Type: string storage ref
             Source: "_assetData[assetId]"
            Identifier _assetData
               Type: mapping(uint256 => string storage ref)
               Source: "_assetData"
            Identifier assetId
               Type: uint256
               Source: "assetId"
          Identifier data
             Type: string memory
             Source: "data"
  FunctionDefinition "_removeAssetFrom"
     Source: "function _removeAssetFrom(address from, uint256 assetId) internal {\r\n    uint256 assetIndex = _indexOfAsset[assetId];\r\n    uint256 lastAssetIndex = assetCount(from).sub(1);\r\n    uint256 lastAssetId = _assetsOf[from][lastAssetIndex];\r\n\r\n    _holderOf[assetId] = 0;\r\n\r\n    // Insert the last asset into the position previously occupied by the asset to be removed\r\n    _assetsOf[from][assetIndex] = lastAssetId;\r\n\r\n    // Resize the array\r\n    _assetsOf[from][lastAssetIndex] = 0;\r\n    _assetsOf[from].length--;\r\n\r\n    // Remove the array if no more assets are owned to prevent pollution\r\n    if (_assetsOf[from].length == 0) {\r\n      delete _assetsOf[from];\r\n    }\r\n\r\n    // Update the index of positions for the asset\r\n    _indexOfAsset[assetId] = 0;\r\n    _indexOfAsset[lastAssetId] = assetIndex;\r\n\r\n    _count = _count.sub(1);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address from, uint256 assetId)"
      VariableDeclaration "from"
         Type: address
         Source: "address from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 assetId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    uint256 assetIndex = _indexOfAsset[assetId];\r\n    uint256 lastAssetIndex = assetCount(from).sub(1);\r\n    uint256 lastAssetId = _assetsOf[from][lastAssetIndex];\r\n\r\n    _holderOf[assetId] = 0;\r\n\r\n    // Insert the last asset into the position previously occupied by the asset to be removed\r\n    _assetsOf[from][assetIndex] = lastAssetId;\r\n\r\n    // Resize the array\r\n    _assetsOf[from][lastAssetIndex] = 0;\r\n    _assetsOf[from].length--;\r\n\r\n    // Remove the array if no more assets are owned to prevent pollution\r\n    if (_assetsOf[from].length == 0) {\r\n      delete _assetsOf[from];\r\n    }\r\n\r\n    // Update the index of positions for the asset\r\n    _indexOfAsset[assetId] = 0;\r\n    _indexOfAsset[lastAssetId] = assetIndex;\r\n\r\n    _count = _count.sub(1);\r\n  }"
      VariableDeclarationStatement
         Gas costs: 295
         Source: "uint256 assetIndex = _indexOfAsset[assetId]"
        VariableDeclaration "assetIndex"
           Type: uint256
           Source: "uint256 assetIndex"
          ElementaryTypeName uint256
             Source: "uint256"
        IndexAccess
           Type: uint256
           Source: "_indexOfAsset[assetId]"
          Identifier _indexOfAsset
             Type: mapping(uint256 => uint256)
             Source: "_indexOfAsset"
          Identifier assetId
             Type: uint256
             Source: "assetId"
      VariableDeclarationStatement
         Gas costs: 59
         Source: "uint256 lastAssetIndex = assetCount(from).sub(1)"
        VariableDeclaration "lastAssetIndex"
           Type: uint256
           Source: "uint256 lastAssetIndex"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "assetCount(from).sub(1)"
          MemberAccess to member sub
             Type: function (uint256,uint256) pure returns (uint256)
             Source: "assetCount(from).sub"
            FunctionCall
               Type: uint256
               Source: "assetCount(from)"
              Identifier assetCount
                 Type: function (address) view returns (uint256)
                 Source: "assetCount"
              Identifier from
                 Type: address
                 Source: "from"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
      VariableDeclarationStatement
         Gas costs: 596
         Source: "uint256 lastAssetId = _assetsOf[from][lastAssetIndex]"
        VariableDeclaration "lastAssetId"
           Type: uint256
           Source: "uint256 lastAssetId"
          ElementaryTypeName uint256
             Source: "uint256"
        IndexAccess
           Type: uint256
           Source: "_assetsOf[from][lastAssetIndex]"
          IndexAccess
             Type: uint256[] storage ref
             Source: "_assetsOf[from]"
            Identifier _assetsOf
               Type: mapping(address => uint256[] storage ref)
               Source: "_assetsOf"
            Identifier from
               Type: address
               Source: "from"
          Identifier lastAssetIndex
             Type: uint256
             Source: "lastAssetIndex"
      ExpressionStatement
         Gas costs: 20348
         Source: "_holderOf[assetId] = 0"
        Assignment using operator =
           Type: address
           Source: "_holderOf[assetId] = 0"
          IndexAccess
             Type: address
             Source: "_holderOf[assetId]"
            Identifier _holderOf
               Type: mapping(uint256 => address)
               Source: "_holderOf"
            Identifier assetId
               Type: uint256
               Source: "assetId"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 20393
         Source: "_assetsOf[from][assetIndex] = lastAssetId"
        Assignment using operator =
           Type: uint256
           Source: "_assetsOf[from][assetIndex] = lastAssetId"
          IndexAccess
             Type: uint256
             Source: "_assetsOf[from][assetIndex]"
            IndexAccess
               Type: uint256[] storage ref
               Source: "_assetsOf[from]"
              Identifier _assetsOf
                 Type: mapping(address => uint256[] storage ref)
                 Source: "_assetsOf"
              Identifier from
                 Type: address
                 Source: "from"
            Identifier assetIndex
               Type: uint256
               Source: "assetIndex"
          Identifier lastAssetId
             Type: uint256
             Source: "lastAssetId"
      ExpressionStatement
         Gas costs: 20396
         Source: "_assetsOf[from][lastAssetIndex] = 0"
        Assignment using operator =
           Type: uint256
           Source: "_assetsOf[from][lastAssetIndex] = 0"
          IndexAccess
             Type: uint256
             Source: "_assetsOf[from][lastAssetIndex]"
            IndexAccess
               Type: uint256[] storage ref
               Source: "_assetsOf[from]"
              Identifier _assetsOf
                 Type: mapping(address => uint256[] storage ref)
                 Source: "_assetsOf"
              Identifier from
                 Type: address
                 Source: "from"
            Identifier lastAssetIndex
               Type: uint256
               Source: "lastAssetIndex"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 329
         Source: "_assetsOf[from].length--"
        UnaryOperation (postfix) --
           Type: uint256
           Source: "_assetsOf[from].length--"
          MemberAccess to member length
             Type: uint256
             Source: "_assetsOf[from].length"
            IndexAccess
               Type: uint256[] storage ref
               Source: "_assetsOf[from]"
              Identifier _assetsOf
                 Type: mapping(address => uint256[] storage ref)
                 Source: "_assetsOf"
              Identifier from
                 Type: address
                 Source: "from"
      IfStatement
         Source: "if (_assetsOf[from].length == 0) {\r\n      delete _assetsOf[from];\r\n    }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 313
           Source: "_assetsOf[from].length == 0"
          MemberAccess to member length
             Type: uint256
             Source: "_assetsOf[from].length"
            IndexAccess
               Type: uint256[] storage ref
               Source: "_assetsOf[from]"
              Identifier _assetsOf
                 Type: mapping(address => uint256[] storage ref)
                 Source: "_assetsOf"
              Identifier from
                 Type: address
                 Source: "from"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n      delete _assetsOf[from];\r\n    }"
          ExpressionStatement
             Gas costs: 112
             Source: "delete _assetsOf[from]"
            UnaryOperation (prefix) delete
               Type: tuple()
               Source: "delete _assetsOf[from]"
              IndexAccess
                 Type: uint256[] storage ref
                 Source: "_assetsOf[from]"
                Identifier _assetsOf
                   Type: mapping(address => uint256[] storage ref)
                   Source: "_assetsOf"
                Identifier from
                   Type: address
                   Source: "from"
      ExpressionStatement
         Gas costs: 5098
         Source: "_indexOfAsset[assetId] = 0"
        Assignment using operator =
           Type: uint256
           Source: "_indexOfAsset[assetId] = 0"
          IndexAccess
             Type: uint256
             Source: "_indexOfAsset[assetId]"
            Identifier _indexOfAsset
               Type: mapping(uint256 => uint256)
               Source: "_indexOfAsset"
            Identifier assetId
               Type: uint256
               Source: "assetId"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 20092
         Source: "_indexOfAsset[lastAssetId] = assetIndex"
        Assignment using operator =
           Type: uint256
           Source: "_indexOfAsset[lastAssetId] = assetIndex"
          IndexAccess
             Type: uint256
             Source: "_indexOfAsset[lastAssetId]"
            Identifier _indexOfAsset
               Type: mapping(uint256 => uint256)
               Source: "_indexOfAsset"
            Identifier lastAssetId
               Type: uint256
               Source: "lastAssetId"
          Identifier assetIndex
             Type: uint256
             Source: "assetIndex"
      ExpressionStatement
         Gas costs: 20247
         Source: "_count = _count.sub(1)"
        Assignment using operator =
           Type: uint256
           Source: "_count = _count.sub(1)"
          Identifier _count
             Type: uint256
             Source: "_count"
          FunctionCall
             Type: uint256
             Source: "_count.sub(1)"
            MemberAccess to member sub
               Type: function (uint256,uint256) pure returns (uint256)
               Source: "_count.sub"
              Identifier _count
                 Type: uint256
                 Source: "_count"
            Literal, token: [no token] value: 1
               Type: int_const 1
               Source: "1"
  FunctionDefinition "_removeAssetData"
     Source: "function _removeAssetData(uint256 assetId) internal {\r\n    _assetData[assetId] = '';\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 assetId)"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 assetId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    _assetData[assetId] = '';\r\n  }"
      ExpressionStatement
         Gas costs: [???]
         Source: "_assetData[assetId] = ''"
        Assignment using operator =
           Type: string storage ref
           Source: "_assetData[assetId] = ''"
          IndexAccess
             Type: string storage ref
             Source: "_assetData[assetId]"
            Identifier _assetData
               Type: mapping(uint256 => string storage ref)
               Source: "_assetData"
            Identifier assetId
               Type: uint256
               Source: "assetId"
          Literal, token: [no token] value: 
             Type: literal_string ""
             Source: "''"
  FunctionDefinition "_generate"
     Source: "function _generate(uint256 assetId, address beneficiary, string data) internal {\r\n    require(_holderOf[assetId] == 0);\r\n\r\n    _addAssetTo(beneficiary, assetId, data);\r\n\r\n    Transfer(0, beneficiary, assetId, msg.sender, bytes(data), '');\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 assetId, address beneficiary, string data)"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 assetId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "beneficiary"
         Type: address
         Source: "address beneficiary"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "data"
         Type: string memory
         Source: "string data"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    require(_holderOf[assetId] == 0);\r\n\r\n    _addAssetTo(beneficiary, assetId, data);\r\n\r\n    Transfer(0, beneficiary, assetId, msg.sender, bytes(data), '');\r\n  }"
      ExpressionStatement
         Gas costs: 361
         Source: "require(_holderOf[assetId] == 0)"
        FunctionCall
           Type: tuple()
           Source: "require(_holderOf[assetId] == 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "_holderOf[assetId] == 0"
            IndexAccess
               Type: address
               Source: "_holderOf[assetId]"
              Identifier _holderOf
                 Type: mapping(uint256 => address)
                 Source: "_holderOf"
              Identifier assetId
                 Type: uint256
                 Source: "assetId"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: 13
         Source: "_addAssetTo(beneficiary, assetId, data)"
        FunctionCall
           Type: tuple()
           Source: "_addAssetTo(beneficiary, assetId, data)"
          Identifier _addAssetTo
             Type: function (address,uint256,string memory)
             Source: "_addAssetTo"
          Identifier beneficiary
             Type: address
             Source: "beneficiary"
          Identifier assetId
             Type: uint256
             Source: "assetId"
          Identifier data
             Type: string memory
             Source: "data"
      ExpressionStatement
         Gas costs: [???]
         Source: "Transfer(0, beneficiary, assetId, msg.sender, bytes(data), '')"
        FunctionCall
           Type: tuple()
           Source: "Transfer(0, beneficiary, assetId, msg.sender, bytes(data), '')"
          Identifier Transfer
             Type: function (address,address,uint256,address,bytes memory,bytes memory)
             Source: "Transfer"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
          Identifier beneficiary
             Type: address
             Source: "beneficiary"
          Identifier assetId
             Type: uint256
             Source: "assetId"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          FunctionCall
             Type: bytes memory
             Source: "bytes(data)"
            ElementaryTypeNameExpression bytes
               Type: type(bytes storage pointer)
               Source: "bytes"
            Identifier data
               Type: string memory
               Source: "data"
          Literal, token: [no token] value: 
             Type: literal_string ""
             Source: "''"
  FunctionDefinition "_destroy"
     Source: "function _destroy(uint256 assetId) internal {\r\n    address holder = _holderOf[assetId];\r\n    require(holder != 0);\r\n\r\n    _removeAssetFrom(holder, assetId);\r\n    _removeAssetData(assetId);\r\n\r\n    Transfer(holder, 0, assetId, msg.sender, '', '');\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 assetId)"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 assetId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    address holder = _holderOf[assetId];\r\n    require(holder != 0);\r\n\r\n    _removeAssetFrom(holder, assetId);\r\n    _removeAssetData(assetId);\r\n\r\n    Transfer(holder, 0, assetId, msg.sender, '', '');\r\n  }"
      VariableDeclarationStatement
         Gas costs: 331
         Source: "address holder = _holderOf[assetId]"
        VariableDeclaration "holder"
           Type: address
           Source: "address holder"
          ElementaryTypeName address
             Source: "address"
        IndexAccess
           Type: address
           Source: "_holderOf[assetId]"
          Identifier _holderOf
             Type: mapping(uint256 => address)
             Source: "_holderOf"
          Identifier assetId
             Type: uint256
             Source: "assetId"
      ExpressionStatement
         Gas costs: 44
         Source: "require(holder != 0)"
        FunctionCall
           Type: tuple()
           Source: "require(holder != 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "holder != 0"
            Identifier holder
               Type: address
               Source: "holder"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: 10
         Source: "_removeAssetFrom(holder, assetId)"
        FunctionCall
           Type: tuple()
           Source: "_removeAssetFrom(holder, assetId)"
          Identifier _removeAssetFrom
             Type: function (address,uint256)
             Source: "_removeAssetFrom"
          Identifier holder
             Type: address
             Source: "holder"
          Identifier assetId
             Type: uint256
             Source: "assetId"
      ExpressionStatement
         Gas costs: 7
         Source: "_removeAssetData(assetId)"
        FunctionCall
           Type: tuple()
           Source: "_removeAssetData(assetId)"
          Identifier _removeAssetData
             Type: function (uint256)
             Source: "_removeAssetData"
          Identifier assetId
             Type: uint256
             Source: "assetId"
      ExpressionStatement
         Gas costs: [???]
         Source: "Transfer(holder, 0, assetId, msg.sender, '', '')"
        FunctionCall
           Type: tuple()
           Source: "Transfer(holder, 0, assetId, msg.sender, '', '')"
          Identifier Transfer
             Type: function (address,address,uint256,address,bytes memory,bytes memory)
             Source: "Transfer"
          Identifier holder
             Type: address
             Source: "holder"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
          Identifier assetId
             Type: uint256
             Source: "assetId"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Literal, token: [no token] value: 
             Type: literal_string ""
             Source: "''"
          Literal, token: [no token] value: 
             Type: literal_string ""
             Source: "''"
  ModifierDefinition "onlyHolder"
     Source: "modifier onlyHolder(uint256 assetId) {\r\n    require(_holderOf[assetId] == msg.sender);\r\n    _;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 assetId)"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 assetId"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    require(_holderOf[assetId] == msg.sender);\r\n    _;\r\n  }"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_holderOf[assetId] == msg.sender)"
        FunctionCall
           Type: tuple()
           Source: "require(_holderOf[assetId] == msg.sender)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "_holderOf[assetId] == msg.sender"
            IndexAccess
               Type: address
               Source: "_holderOf[assetId]"
              Identifier _holderOf
                 Type: mapping(uint256 => address)
                 Source: "_holderOf"
              Identifier assetId
                 Type: uint256
                 Source: "assetId"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "onlyOperatorOrHolder"
     Source: "modifier onlyOperatorOrHolder(uint256 assetId) {\r\n    require(_holderOf[assetId] == msg.sender\r\n         || isOperatorAuthorizedFor(msg.sender, _holderOf[assetId]));\r\n    _;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 assetId)"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 assetId"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    require(_holderOf[assetId] == msg.sender\r\n         || isOperatorAuthorizedFor(msg.sender, _holderOf[assetId]));\r\n    _;\r\n  }"
      ExpressionStatement
         Gas costs: 1450
         Source: "require(_holderOf[assetId] == msg.sender\r\n         || isOperatorAuthorizedFor(msg.sender, _holderOf[assetId]))"
        FunctionCall
           Type: tuple()
           Source: "require(_holderOf[assetId] == msg.sender\r\n         || isOperatorAuthorizedFor(msg.sender, _holderOf[assetId]))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ||
             Type: bool
             Source: "_holderOf[assetId] == msg.sender\r\n         || isOperatorAuthorizedFor(msg.sender, _holderOf[assetId])"
            BinaryOperation using operator ==
               Type: bool
               Source: "_holderOf[assetId] == msg.sender"
              IndexAccess
                 Type: address
                 Source: "_holderOf[assetId]"
                Identifier _holderOf
                   Type: mapping(uint256 => address)
                   Source: "_holderOf"
                Identifier assetId
                   Type: uint256
                   Source: "assetId"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            FunctionCall
               Type: bool
               Source: "isOperatorAuthorizedFor(msg.sender, _holderOf[assetId])"
              Identifier isOperatorAuthorizedFor
                 Type: function (address,address) view returns (bool)
                 Source: "isOperatorAuthorizedFor"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              IndexAccess
                 Type: address
                 Source: "_holderOf[assetId]"
                Identifier _holderOf
                   Type: mapping(uint256 => address)
                   Source: "_holderOf"
                Identifier assetId
                   Type: uint256
                   Source: "assetId"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "isDestinataryDefined"
     Source: "modifier isDestinataryDefined(address destinatary) {\r\n    require(destinatary != 0);\r\n    _;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address destinatary)"
      VariableDeclaration "destinatary"
         Type: address
         Source: "address destinatary"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\r\n    require(destinatary != 0);\r\n    _;\r\n  }"
      ExpressionStatement
         Gas costs: 44
         Source: "require(destinatary != 0)"
        FunctionCall
           Type: tuple()
           Source: "require(destinatary != 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "destinatary != 0"
            Identifier destinatary
               Type: address
               Source: "destinatary"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      PlaceholderStatement
         Gas costs: 4
         Source: "_"
  ModifierDefinition "destinataryIsNotHolder"
     Source: "modifier destinataryIsNotHolder(uint256 assetId, address to) {\r\n    require(_holderOf[assetId] != to);\r\n    _;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 assetId, address to)"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 assetId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\r\n    require(_holderOf[assetId] != to);\r\n    _;\r\n  }"
      ExpressionStatement
         Gas costs: 370
         Source: "require(_holderOf[assetId] != to)"
        FunctionCall
           Type: tuple()
           Source: "require(_holderOf[assetId] != to)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "_holderOf[assetId] != to"
            IndexAccess
               Type: address
               Source: "_holderOf[assetId]"
              Identifier _holderOf
                 Type: mapping(uint256 => address)
                 Source: "_holderOf"
              Identifier assetId
                 Type: uint256
                 Source: "assetId"
            Identifier to
               Type: address
               Source: "to"
      PlaceholderStatement
         Gas costs: 2
         Source: "_"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address to, uint256 assetId) public {\r\n    return _doTransfer(to, assetId, '', 0, '');\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address to, uint256 assetId)"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 assetId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    return _doTransfer(to, assetId, '', 0, '');\r\n  }"
      Return
         Gas costs: [???]
         Source: "return _doTransfer(to, assetId, '', 0, '')"
        FunctionCall
           Type: tuple()
           Source: "_doTransfer(to, assetId, '', 0, '')"
          Identifier _doTransfer
             Type: function (address,uint256,bytes memory,address,bytes memory)
             Source: "_doTransfer"
          Identifier to
             Type: address
             Source: "to"
          Identifier assetId
             Type: uint256
             Source: "assetId"
          Literal, token: [no token] value: 
             Type: literal_string ""
             Source: "''"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
          Literal, token: [no token] value: 
             Type: literal_string ""
             Source: "''"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address to, uint256 assetId, bytes userData) public {\r\n    return _doTransfer(to, assetId, userData, 0, '');\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address to, uint256 assetId, bytes userData)"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 assetId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "userData"
         Type: bytes memory
         Source: "bytes userData"
        ElementaryTypeName bytes
           Source: "bytes"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    return _doTransfer(to, assetId, userData, 0, '');\r\n  }"
      Return
         Gas costs: [???]
         Source: "return _doTransfer(to, assetId, userData, 0, '')"
        FunctionCall
           Type: tuple()
           Source: "_doTransfer(to, assetId, userData, 0, '')"
          Identifier _doTransfer
             Type: function (address,uint256,bytes memory,address,bytes memory)
             Source: "_doTransfer"
          Identifier to
             Type: address
             Source: "to"
          Identifier assetId
             Type: uint256
             Source: "assetId"
          Identifier userData
             Type: bytes memory
             Source: "userData"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
          Literal, token: [no token] value: 
             Type: literal_string ""
             Source: "''"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address to, uint256 assetId, bytes userData, bytes operatorData) public {\r\n    return _doTransfer(to, assetId, userData, msg.sender, operatorData);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address to, uint256 assetId, bytes userData, bytes operatorData)"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 assetId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "userData"
         Type: bytes memory
         Source: "bytes userData"
        ElementaryTypeName bytes
           Source: "bytes"
      VariableDeclaration "operatorData"
         Type: bytes memory
         Source: "bytes operatorData"
        ElementaryTypeName bytes
           Source: "bytes"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    return _doTransfer(to, assetId, userData, msg.sender, operatorData);\r\n  }"
      Return
         Gas costs: 29
         Source: "return _doTransfer(to, assetId, userData, msg.sender, operatorData)"
        FunctionCall
           Type: tuple()
           Source: "_doTransfer(to, assetId, userData, msg.sender, operatorData)"
          Identifier _doTransfer
             Type: function (address,uint256,bytes memory,address,bytes memory)
             Source: "_doTransfer"
          Identifier to
             Type: address
             Source: "to"
          Identifier assetId
             Type: uint256
             Source: "assetId"
          Identifier userData
             Type: bytes memory
             Source: "userData"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier operatorData
             Type: bytes memory
             Source: "operatorData"
  FunctionDefinition "_doTransfer"
     Source: "function _doTransfer(\r\n    address to, uint256 assetId, bytes userData, address operator, bytes operatorData\r\n  )\r\n    isDestinataryDefined(to)\r\n    destinataryIsNotHolder(assetId, to)\r\n    onlyOperatorOrHolder(assetId)\r\n    internal\r\n  {\r\n    return _doSend(to, assetId, userData, operator, operatorData);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(\r\n    address to, uint256 assetId, bytes userData, address operator, bytes operatorData\r\n  )"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 assetId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "userData"
         Type: bytes memory
         Source: "bytes userData"
        ElementaryTypeName bytes
           Source: "bytes"
      VariableDeclaration "operator"
         Type: address
         Source: "address operator"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "operatorData"
         Type: bytes memory
         Source: "bytes operatorData"
        ElementaryTypeName bytes
           Source: "bytes"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "isDestinataryDefined"
       Gas costs: 3
       Source: "isDestinataryDefined(to)"
      Identifier isDestinataryDefined
         Type: modifier (address)
         Source: "isDestinataryDefined"
      Identifier to
         Type: address
         Source: "to"
    ModifierInvocation "destinataryIsNotHolder"
       Gas costs: 6
       Source: "destinataryIsNotHolder(assetId, to)"
      Identifier destinataryIsNotHolder
         Type: modifier (uint256,address)
         Source: "destinataryIsNotHolder"
      Identifier assetId
         Type: uint256
         Source: "assetId"
      Identifier to
         Type: address
         Source: "to"
    ModifierInvocation "onlyOperatorOrHolder"
       Gas costs: 3
       Source: "onlyOperatorOrHolder(assetId)"
      Identifier onlyOperatorOrHolder
         Type: modifier (uint256)
         Source: "onlyOperatorOrHolder"
      Identifier assetId
         Type: uint256
         Source: "assetId"
    Block
       Source: "{\r\n    return _doSend(to, assetId, userData, operator, operatorData);\r\n  }"
      Return
         Gas costs: 19
         Source: "return _doSend(to, assetId, userData, operator, operatorData)"
        FunctionCall
           Type: tuple()
           Source: "_doSend(to, assetId, userData, operator, operatorData)"
          Identifier _doSend
             Type: function (address,uint256,bytes memory,address,bytes memory)
             Source: "_doSend"
          Identifier to
             Type: address
             Source: "to"
          Identifier assetId
             Type: uint256
             Source: "assetId"
          Identifier userData
             Type: bytes memory
             Source: "userData"
          Identifier operator
             Type: address
             Source: "operator"
          Identifier operatorData
             Type: bytes memory
             Source: "operatorData"
  FunctionDefinition "_doSend"
     Source: "function _doSend(\r\n    address to, uint256 assetId, bytes userData, address operator, bytes operatorData\r\n  )\r\n    internal\r\n  {\r\n    address holder = _holderOf[assetId];\r\n    _removeAssetFrom(holder, assetId);\r\n    _addAssetTo(to, assetId);\r\n\r\n    if (_isContract(to)) {\r\n      require(!_reentrancy);\r\n      _reentrancy = true;\r\n\r\n      address recipient = interfaceAddr(to, 'IAssetHolder');\r\n      require(recipient != 0);\r\n\r\n      IAssetHolder(recipient).onAssetReceived(assetId, holder, to, userData, operator, operatorData);\r\n\r\n      _reentrancy = false;\r\n    }\r\n\r\n    Transfer(holder, to, assetId, operator, userData, operatorData);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(\r\n    address to, uint256 assetId, bytes userData, address operator, bytes operatorData\r\n  )"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 assetId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "userData"
         Type: bytes memory
         Source: "bytes userData"
        ElementaryTypeName bytes
           Source: "bytes"
      VariableDeclaration "operator"
         Type: address
         Source: "address operator"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "operatorData"
         Type: bytes memory
         Source: "bytes operatorData"
        ElementaryTypeName bytes
           Source: "bytes"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    address holder = _holderOf[assetId];\r\n    _removeAssetFrom(holder, assetId);\r\n    _addAssetTo(to, assetId);\r\n\r\n    if (_isContract(to)) {\r\n      require(!_reentrancy);\r\n      _reentrancy = true;\r\n\r\n      address recipient = interfaceAddr(to, 'IAssetHolder');\r\n      require(recipient != 0);\r\n\r\n      IAssetHolder(recipient).onAssetReceived(assetId, holder, to, userData, operator, operatorData);\r\n\r\n      _reentrancy = false;\r\n    }\r\n\r\n    Transfer(holder, to, assetId, operator, userData, operatorData);\r\n  }"
      VariableDeclarationStatement
         Gas costs: 331
         Source: "address holder = _holderOf[assetId]"
        VariableDeclaration "holder"
           Type: address
           Source: "address holder"
          ElementaryTypeName address
             Source: "address"
        IndexAccess
           Type: address
           Source: "_holderOf[assetId]"
          Identifier _holderOf
             Type: mapping(uint256 => address)
             Source: "_holderOf"
          Identifier assetId
             Type: uint256
             Source: "assetId"
      ExpressionStatement
         Gas costs: 21
         Source: "_removeAssetFrom(holder, assetId)"
        FunctionCall
           Type: tuple()
           Source: "_removeAssetFrom(holder, assetId)"
          Identifier _removeAssetFrom
             Type: function (address,uint256)
             Source: "_removeAssetFrom"
          Identifier holder
             Type: address
             Source: "holder"
          Identifier assetId
             Type: uint256
             Source: "assetId"
      ExpressionStatement
         Gas costs: 21
         Source: "_addAssetTo(to, assetId)"
        FunctionCall
           Type: tuple()
           Source: "_addAssetTo(to, assetId)"
          Identifier _addAssetTo
             Type: function (address,uint256)
             Source: "_addAssetTo"
          Identifier to
             Type: address
             Source: "to"
          Identifier assetId
             Type: uint256
             Source: "assetId"
      IfStatement
         Source: "if (_isContract(to)) {\r\n      require(!_reentrancy);\r\n      _reentrancy = true;\r\n\r\n      address recipient = interfaceAddr(to, 'IAssetHolder');\r\n      require(recipient != 0);\r\n\r\n      IAssetHolder(recipient).onAssetReceived(assetId, holder, to, userData, operator, operatorData);\r\n\r\n      _reentrancy = false;\r\n    }"
        FunctionCall
           Type: bool
           Gas costs: 7
           Source: "_isContract(to)"
          Identifier _isContract
             Type: function (address) view returns (bool)
             Source: "_isContract"
          Identifier to
             Type: address
             Source: "to"
        Block
           Source: "{\r\n      require(!_reentrancy);\r\n      _reentrancy = true;\r\n\r\n      address recipient = interfaceAddr(to, 'IAssetHolder');\r\n      require(recipient != 0);\r\n\r\n      IAssetHolder(recipient).onAssetReceived(assetId, holder, to, userData, operator, operatorData);\r\n\r\n      _reentrancy = false;\r\n    }"
          ExpressionStatement
             Gas costs: 268
             Source: "require(!_reentrancy)"
            FunctionCall
               Type: tuple()
               Source: "require(!_reentrancy)"
              Identifier require
                 Type: function (bool) pure
                 Source: "require"
              UnaryOperation (prefix) !
                 Type: bool
                 Source: "!_reentrancy"
                Identifier _reentrancy
                   Type: bool
                   Source: "_reentrancy"
          ExpressionStatement
             Gas costs: 20267
             Source: "_reentrancy = true"
            Assignment using operator =
               Type: bool
               Source: "_reentrancy = true"
              Identifier _reentrancy
                 Type: bool
                 Source: "_reentrancy"
              Literal, token: true value: true
                 Type: bool
                 Source: "true"
          VariableDeclarationStatement
             Gas costs: [???]
             Source: "address recipient = interfaceAddr(to, 'IAssetHolder')"
            VariableDeclaration "recipient"
               Type: address
               Source: "address recipient"
              ElementaryTypeName address
                 Source: "address"
            FunctionCall
               Type: address
               Source: "interfaceAddr(to, 'IAssetHolder')"
              Identifier interfaceAddr
                 Type: function (address,string memory) view returns (address)
                 Source: "interfaceAddr"
              Identifier to
                 Type: address
                 Source: "to"
              Literal, token: [no token] value: IAssetHolder
                 Type: literal_string "IAssetHolder"
                 Source: "'IAssetHolder'"
          ExpressionStatement
             Gas costs: 44
             Source: "require(recipient != 0)"
            FunctionCall
               Type: tuple()
               Source: "require(recipient != 0)"
              Identifier require
                 Type: function (bool) pure
                 Source: "require"
              BinaryOperation using operator !=
                 Type: bool
                 Source: "recipient != 0"
                Identifier recipient
                   Type: address
                   Source: "recipient"
                Literal, token: [no token] value: 0
                   Type: int_const 0
                   Source: "0"
          ExpressionStatement
             Gas costs: [???]
             Source: "IAssetHolder(recipient).onAssetReceived(assetId, holder, to, userData, operator, operatorData)"
            FunctionCall
               Type: tuple()
               Source: "IAssetHolder(recipient).onAssetReceived(assetId, holder, to, userData, operator, operatorData)"
              MemberAccess to member onAssetReceived
                 Type: function (uint256,address,address,bytes memory,address,bytes memory) external
                 Source: "IAssetHolder(recipient).onAssetReceived"
                FunctionCall
                   Type: contract IAssetHolder
                   Source: "IAssetHolder(recipient)"
                  Identifier IAssetHolder
                     Type: type(contract IAssetHolder)
                     Source: "IAssetHolder"
                  Identifier recipient
                     Type: address
                     Source: "recipient"
              Identifier assetId
                 Type: uint256
                 Source: "assetId"
              Identifier holder
                 Type: address
                 Source: "holder"
              Identifier to
                 Type: address
                 Source: "to"
              Identifier userData
                 Type: bytes memory
                 Source: "userData"
              Identifier operator
                 Type: address
                 Source: "operator"
              Identifier operatorData
                 Type: bytes memory
                 Source: "operatorData"
          ExpressionStatement
             Gas costs: 20267
             Source: "_reentrancy = false"
            Assignment using operator =
               Type: bool
               Source: "_reentrancy = false"
              Identifier _reentrancy
                 Type: bool
                 Source: "_reentrancy"
              Literal, token: false value: false
                 Type: bool
                 Source: "false"
      ExpressionStatement
         Gas costs: [???]
         Source: "Transfer(holder, to, assetId, operator, userData, operatorData)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(holder, to, assetId, operator, userData, operatorData)"
          Identifier Transfer
             Type: function (address,address,uint256,address,bytes memory,bytes memory)
             Source: "Transfer"
          Identifier holder
             Type: address
             Source: "holder"
          Identifier to
             Type: address
             Source: "to"
          Identifier assetId
             Type: uint256
             Source: "assetId"
          Identifier operator
             Type: address
             Source: "operator"
          Identifier userData
             Type: bytes memory
             Source: "userData"
          Identifier operatorData
             Type: bytes memory
             Source: "operatorData"
  FunctionDefinition "_update"
     Source: "function _update(uint256 assetId, string data) internal {\r\n    require(exists(assetId));\r\n    _assetData[assetId] = data;\r\n    Update(assetId, _holderOf[assetId], msg.sender, data);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 assetId, string data)"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 assetId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "data"
         Type: string memory
         Source: "string data"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    require(exists(assetId));\r\n    _assetData[assetId] = data;\r\n    Update(assetId, _holderOf[assetId], msg.sender, data);\r\n  }"
      ExpressionStatement
         Gas costs: 44
         Source: "require(exists(assetId))"
        FunctionCall
           Type: tuple()
           Source: "require(exists(assetId))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "exists(assetId)"
            Identifier exists
               Type: function (uint256) view returns (bool)
               Source: "exists"
            Identifier assetId
               Type: uint256
               Source: "assetId"
      ExpressionStatement
         Gas costs: [???]
         Source: "_assetData[assetId] = data"
        Assignment using operator =
           Type: string storage ref
           Source: "_assetData[assetId] = data"
          IndexAccess
             Type: string storage ref
             Source: "_assetData[assetId]"
            Identifier _assetData
               Type: mapping(uint256 => string storage ref)
               Source: "_assetData"
            Identifier assetId
               Type: uint256
               Source: "assetId"
          Identifier data
             Type: string memory
             Source: "data"
      ExpressionStatement
         Gas costs: [???]
         Source: "Update(assetId, _holderOf[assetId], msg.sender, data)"
        FunctionCall
           Type: tuple()
           Source: "Update(assetId, _holderOf[assetId], msg.sender, data)"
          Identifier Update
             Type: function (uint256,address,address,string memory)
             Source: "Update"
          Identifier assetId
             Type: uint256
             Source: "assetId"
          IndexAccess
             Type: address
             Source: "_holderOf[assetId]"
            Identifier _holderOf
               Type: mapping(uint256 => address)
               Source: "_holderOf"
            Identifier assetId
               Type: uint256
               Source: "assetId"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier data
             Type: string memory
             Source: "data"
  FunctionDefinition "_isContract" - const
     Source: "function _isContract(address addr) internal view returns (bool) {\r\n    uint size;\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address addr)"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n    uint size;\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }"
      VariableDeclarationStatement
         Gas costs: 3
         Source: "uint size"
        VariableDeclaration "size"
           Type: uint256
           Source: "uint size"
          ElementaryTypeName uint
             Source: "uint"
      InlineAssembly
         Gas costs: 0
         Source: "assembly { size := extcodesize(addr) }\r\n    return"
      Return
         Gas costs: 14
         Source: "return size > 0"
        BinaryOperation using operator >
           Type: bool
           Source: "size > 0"
          Identifier size
             Type: uint256
             Source: "size"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
ContractDefinition "LANDRegistry"
   Source: "contract LANDRegistry is Storage,\r\n  Ownable, StandardAssetRegistry,\r\n  ILANDRegistry\r\n{\r\n\r\n  function initialize(bytes data) public {\r\n    _name = 'Decentraland LAND';\r\n    _symbol = 'LAND';\r\n    _description = 'Contract that stores the Decentraland LAND registry';\r\n    super.initialize(data);\r\n  }\r\n\r\n  function authorizeDeploy(address beneficiary) public onlyOwner {\r\n    authorizedDeploy[beneficiary] = true;\r\n  }\r\n  function forbidDeploy(address beneficiary) public onlyOwner {\r\n    authorizedDeploy[beneficiary] = false;\r\n  }\r\n\r\n  function assignNewParcel(int x, int y, address beneficiary) public {\r\n    require(authorizedDeploy[msg.sender]);\r\n    _generate(encodeTokenId(x, y), beneficiary, '');\r\n  }\r\n\r\n  function assignMultipleParcels(int[] x, int[] y, address beneficiary) public {\r\n    require(authorizedDeploy[msg.sender]);\r\n    for (uint i = 0; i < x.length; i++) {\r\n      _generate(encodeTokenId(x[i], y[i]), beneficiary, '');\r\n    }\r\n  }\r\n\r\n  function destroy(uint256 assetId) onlyOwner public {\r\n    _destroy(assetId);\r\n  }\r\n\r\n  //\r\n  // Inactive keys after 1 year lose ownership\r\n  //\r\n\r\n  function ping() public {\r\n    latestPing[msg.sender] = now;\r\n  }\r\n\r\n  function setLatestToNow(address user) onlyOwner public {\r\n    latestPing[user] = now;\r\n  }\r\n\r\n  function clearLand(int[] x, int[] y) public {\r\n    require(x.length == y.length);\r\n    for (uint i = 0; i < x.length; i++) {\r\n      uint landId = encodeTokenId(x[i], y[i]);\r\n      address holder = holderOf(landId);\r\n      if (latestPing[holder] < now - 1 years) {\r\n        _destroy(landId);\r\n      }\r\n    }\r\n  }\r\n\r\n  //\r\n  // LAND Getters\r\n  //\r\n\r\n  function encodeTokenId(int x, int y) view public returns (uint) {\r\n    return ((uint(x) * factor) & clearLow) | (uint(y) & clearHigh);\r\n  }\r\n\r\n  function decodeTokenId(uint value) view public returns (int, int) {\r\n    uint x = (value & clearLow) >> 128;\r\n    uint y = (value & clearHigh);\r\n    return (expandNegative128BitCast(x), expandNegative128BitCast(y));\r\n  }\r\n\r\n  function expandNegative128BitCast(uint value) view public returns (int) {\r\n    if (value & (1<<127) != 0) {\r\n      return int(value | clearLow);\r\n    }\r\n    return int(value);\r\n  }\r\n\r\n  function exists(int x, int y) view public returns (bool) {\r\n    return exists(encodeTokenId(x, y));\r\n  }\r\n\r\n  function ownerOfLand(int x, int y) view public returns (address) {\r\n    return holderOf(encodeTokenId(x, y));\r\n  }\r\n\r\n  function ownerOfLandMany(int[] x, int[] y) view public returns (address[]) {\r\n    require(x.length > 0);\r\n    require(x.length == y.length);\r\n\r\n    address[] memory addrs = new address[](x.length);\r\n    for (uint i = 0; i < x.length; i++) {\r\n      addrs[i] = ownerOfLand(x[i], y[i]);\r\n    }\r\n\r\n    return addrs;\r\n  }\r\n\r\n  function landOf(address owner) public view returns (int[], int[]) {\r\n    int[] memory x = new int[](_assetsOf[owner].length);\r\n    int[] memory y = new int[](_assetsOf[owner].length);\r\n\r\n    int assetX;\r\n    int assetY;\r\n    uint length = _assetsOf[owner].length;\r\n    for (uint i = 0; i < length; i++) {\r\n      (assetX, assetY) = decodeTokenId(_assetsOf[owner][i]);\r\n      x[i] = assetX;\r\n      y[i] = assetY;\r\n    }\r\n\r\n    return (x, y);\r\n  }\r\n\r\n  function landData(int x, int y) view public returns (string) {\r\n    return assetData(encodeTokenId(x, y));\r\n  }\r\n\r\n  //\r\n  // Transfer LAND\r\n  //\r\n\r\n  function transferLand(int x, int y, address to) public {\r\n    transfer(to, encodeTokenId(x, y));\r\n  }\r\n\r\n  function transferManyLand(int[] x, int[] y, address to) public {\r\n    require(x.length == y.length);\r\n    for (uint i = 0; i < x.length; i++) {\r\n      transfer(to, encodeTokenId(x[i], y[i]));\r\n    }\r\n  }\r\n\r\n  //\r\n  // Update LAND\r\n  //\r\n\r\n  function updateLandData(int x, int y, string data) public onlyOperatorOrHolder(encodeTokenId(x, y)) {\r\n    return _update(encodeTokenId(x, y), data);\r\n  }\r\n\r\n  function updateManyLandData(int[] x, int[] y, string data) public {\r\n    require(x.length == y.length);\r\n    for (uint i = 0; i < x.length; i++) {\r\n      updateLandData(x[i], y[i], data);\r\n    }\r\n  }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Storage"
    UserDefinedTypeName "Storage"
       Source: "Storage"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Ownable"
    UserDefinedTypeName "Ownable"
       Source: "Ownable"
  InheritanceSpecifier
     Gas costs: 0
     Source: "StandardAssetRegistry"
    UserDefinedTypeName "StandardAssetRegistry"
       Source: "StandardAssetRegistry"
  InheritanceSpecifier
     Gas costs: 0
     Source: "ILANDRegistry"
    UserDefinedTypeName "ILANDRegistry"
       Source: "ILANDRegistry"
  FunctionDefinition "initialize" - public
     Source: "function initialize(bytes data) public {\r\n    _name = 'Decentraland LAND';\r\n    _symbol = 'LAND';\r\n    _description = 'Contract that stores the Decentraland LAND registry';\r\n    super.initialize(data);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(bytes data)"
      VariableDeclaration "data"
         Type: bytes memory
         Source: "bytes data"
        ElementaryTypeName bytes
           Source: "bytes"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    _name = 'Decentraland LAND';\r\n    _symbol = 'LAND';\r\n    _description = 'Contract that stores the Decentraland LAND registry';\r\n    super.initialize(data);\r\n  }"
      ExpressionStatement
         Gas costs: [???]
         Source: "_name = 'Decentraland LAND'"
        Assignment using operator =
           Type: string storage ref
           Source: "_name = 'Decentraland LAND'"
          Identifier _name
             Type: string storage ref
             Source: "_name"
          Literal, token: [no token] value: Decentraland LAND
             Type: literal_string "Decentraland LAND"
             Source: "'Decentraland LAND'"
      ExpressionStatement
         Gas costs: [???]
         Source: "_symbol = 'LAND'"
        Assignment using operator =
           Type: string storage ref
           Source: "_symbol = 'LAND'"
          Identifier _symbol
             Type: string storage ref
             Source: "_symbol"
          Literal, token: [no token] value: LAND
             Type: literal_string "LAND"
             Source: "'LAND'"
      ExpressionStatement
         Gas costs: [???]
         Source: "_description = 'Contract that stores the Decentraland LAND registry'"
        Assignment using operator =
           Type: string storage ref
           Source: "_description = 'Contract that stores the Decentraland LAND registry'"
          Identifier _description
             Type: string storage ref
             Source: "_description"
          Literal, token: [no token] value: Contract that stores the Decentraland LAND registry
             Type: literal_string "Contract that stores the Decentraland LAND registry"
             Source: "'Contract that stores the Decentraland LAND registry'"
      ExpressionStatement
         Gas costs: 7
         Source: "super.initialize(data)"
        FunctionCall
           Type: tuple()
           Source: "super.initialize(data)"
          MemberAccess to member initialize
             Type: function (bytes memory)
             Source: "super.initialize"
            Identifier super
               Type: contract super LANDRegistry
               Source: "super"
          Identifier data
             Type: bytes memory
             Source: "data"
  FunctionDefinition "authorizeDeploy" - public
     Source: "function authorizeDeploy(address beneficiary) public onlyOwner {\r\n    authorizedDeploy[beneficiary] = true;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address beneficiary)"
      VariableDeclaration "beneficiary"
         Type: address
         Source: "address beneficiary"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n    authorizedDeploy[beneficiary] = true;\r\n  }"
      ExpressionStatement
         Gas costs: 20363
         Source: "authorizedDeploy[beneficiary] = true"
        Assignment using operator =
           Type: bool
           Source: "authorizedDeploy[beneficiary] = true"
          IndexAccess
             Type: bool
             Source: "authorizedDeploy[beneficiary]"
            Identifier authorizedDeploy
               Type: mapping(address => bool)
               Source: "authorizedDeploy"
            Identifier beneficiary
               Type: address
               Source: "beneficiary"
          Literal, token: true value: true
             Type: bool
             Source: "true"
  FunctionDefinition "forbidDeploy" - public
     Source: "function forbidDeploy(address beneficiary) public onlyOwner {\r\n    authorizedDeploy[beneficiary] = false;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address beneficiary)"
      VariableDeclaration "beneficiary"
         Type: address
         Source: "address beneficiary"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n    authorizedDeploy[beneficiary] = false;\r\n  }"
      ExpressionStatement
         Gas costs: 20363
         Source: "authorizedDeploy[beneficiary] = false"
        Assignment using operator =
           Type: bool
           Source: "authorizedDeploy[beneficiary] = false"
          IndexAccess
             Type: bool
             Source: "authorizedDeploy[beneficiary]"
            Identifier authorizedDeploy
               Type: mapping(address => bool)
               Source: "authorizedDeploy"
            Identifier beneficiary
               Type: address
               Source: "beneficiary"
          Literal, token: false value: false
             Type: bool
             Source: "false"
  FunctionDefinition "assignNewParcel" - public
     Source: "function assignNewParcel(int x, int y, address beneficiary) public {\r\n    require(authorizedDeploy[msg.sender]);\r\n    _generate(encodeTokenId(x, y), beneficiary, '');\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(int x, int y, address beneficiary)"
      VariableDeclaration "x"
         Type: int256
         Source: "int x"
        ElementaryTypeName int
           Source: "int"
      VariableDeclaration "y"
         Type: int256
         Source: "int y"
        ElementaryTypeName int
           Source: "int"
      VariableDeclaration "beneficiary"
         Type: address
         Source: "address beneficiary"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    require(authorizedDeploy[msg.sender]);\r\n    _generate(encodeTokenId(x, y), beneficiary, '');\r\n  }"
      ExpressionStatement
         Gas costs: 360
         Source: "require(authorizedDeploy[msg.sender])"
        FunctionCall
           Type: tuple()
           Source: "require(authorizedDeploy[msg.sender])"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          IndexAccess
             Type: bool
             Source: "authorizedDeploy[msg.sender]"
            Identifier authorizedDeploy
               Type: mapping(address => bool)
               Source: "authorizedDeploy"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
      ExpressionStatement
         Gas costs: [???]
         Source: "_generate(encodeTokenId(x, y), beneficiary, '')"
        FunctionCall
           Type: tuple()
           Source: "_generate(encodeTokenId(x, y), beneficiary, '')"
          Identifier _generate
             Type: function (uint256,address,string memory)
             Source: "_generate"
          FunctionCall
             Type: uint256
             Source: "encodeTokenId(x, y)"
            Identifier encodeTokenId
               Type: function (int256,int256) view returns (uint256)
               Source: "encodeTokenId"
            Identifier x
               Type: int256
               Source: "x"
            Identifier y
               Type: int256
               Source: "y"
          Identifier beneficiary
             Type: address
             Source: "beneficiary"
          Literal, token: [no token] value: 
             Type: literal_string ""
             Source: "''"
  FunctionDefinition "assignMultipleParcels" - public
     Source: "function assignMultipleParcels(int[] x, int[] y, address beneficiary) public {\r\n    require(authorizedDeploy[msg.sender]);\r\n    for (uint i = 0; i < x.length; i++) {\r\n      _generate(encodeTokenId(x[i], y[i]), beneficiary, '');\r\n    }\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(int[] x, int[] y, address beneficiary)"
      VariableDeclaration "x"
         Type: int256[] memory
         Source: "int[] x"
        ArrayTypeName
           Source: "int[]"
          ElementaryTypeName int
             Source: "int"
      VariableDeclaration "y"
         Type: int256[] memory
         Source: "int[] y"
        ArrayTypeName
           Source: "int[]"
          ElementaryTypeName int
             Source: "int"
      VariableDeclaration "beneficiary"
         Type: address
         Source: "address beneficiary"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    require(authorizedDeploy[msg.sender]);\r\n    for (uint i = 0; i < x.length; i++) {\r\n      _generate(encodeTokenId(x[i], y[i]), beneficiary, '');\r\n    }\r\n  }"
      ExpressionStatement
         Gas costs: 360
         Source: "require(authorizedDeploy[msg.sender])"
        FunctionCall
           Type: tuple()
           Source: "require(authorizedDeploy[msg.sender])"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          IndexAccess
             Type: bool
             Source: "authorizedDeploy[msg.sender]"
            Identifier authorizedDeploy
               Type: mapping(address => bool)
               Source: "authorizedDeploy"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
      ForStatement
         Source: "for (uint i = 0; i < x.length; i++) {\r\n      _generate(encodeTokenId(x[i], y[i]), beneficiary, '');\r\n    }"
        VariableDeclarationStatement
           Gas costs: 11
           Source: "uint i = 0"
          VariableDeclaration "i"
             Type: uint256
             Source: "uint i"
            ElementaryTypeName uint
               Source: "uint"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        BinaryOperation using operator <
           Type: bool
           Gas costs: [???]
           Source: "i < x.length"
          Identifier i
             Type: uint256
             Source: "i"
          MemberAccess to member length
             Type: uint256
             Source: "x.length"
            Identifier x
               Type: int256[] memory
               Source: "x"
        ExpressionStatement
           Gas costs: 19
           Source: "i++"
          UnaryOperation (postfix) ++
             Type: uint256
             Source: "i++"
            Identifier i
               Type: uint256
               Source: "i"
        Block
           Source: "{\r\n      _generate(encodeTokenId(x[i], y[i]), beneficiary, '');\r\n    }"
          ExpressionStatement
             Gas costs: [???]
             Source: "_generate(encodeTokenId(x[i], y[i]), beneficiary, '')"
            FunctionCall
               Type: tuple()
               Source: "_generate(encodeTokenId(x[i], y[i]), beneficiary, '')"
              Identifier _generate
                 Type: function (uint256,address,string memory)
                 Source: "_generate"
              FunctionCall
                 Type: uint256
                 Source: "encodeTokenId(x[i], y[i])"
                Identifier encodeTokenId
                   Type: function (int256,int256) view returns (uint256)
                   Source: "encodeTokenId"
                IndexAccess
                   Type: int256
                   Source: "x[i]"
                  Identifier x
                     Type: int256[] memory
                     Source: "x"
                  Identifier i
                     Type: uint256
                     Source: "i"
                IndexAccess
                   Type: int256
                   Source: "y[i]"
                  Identifier y
                     Type: int256[] memory
                     Source: "y"
                  Identifier i
                     Type: uint256
                     Source: "i"
              Identifier beneficiary
                 Type: address
                 Source: "beneficiary"
              Literal, token: [no token] value: 
                 Type: literal_string ""
                 Source: "''"
  FunctionDefinition "destroy" - public
     Source: "function destroy(uint256 assetId) onlyOwner public {\r\n    _destroy(assetId);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 assetId)"
      VariableDeclaration "assetId"
         Type: uint256
         Source: "uint256 assetId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n    _destroy(assetId);\r\n  }"
      ExpressionStatement
         Gas costs: 7
         Source: "_destroy(assetId)"
        FunctionCall
           Type: tuple()
           Source: "_destroy(assetId)"
          Identifier _destroy
             Type: function (uint256)
             Source: "_destroy"
          Identifier assetId
             Type: uint256
             Source: "assetId"
  FunctionDefinition "ping" - public
     Source: "function ping() public {\r\n    latestPing[msg.sender] = now;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    latestPing[msg.sender] = now;\r\n  }"
      ExpressionStatement
         Gas costs: 20108
         Source: "latestPing[msg.sender] = now"
        Assignment using operator =
           Type: uint256
           Source: "latestPing[msg.sender] = now"
          IndexAccess
             Type: uint256
             Source: "latestPing[msg.sender]"
            Identifier latestPing
               Type: mapping(address => uint256)
               Source: "latestPing"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier now
             Type: uint256
             Source: "now"
  FunctionDefinition "setLatestToNow" - public
     Source: "function setLatestToNow(address user) onlyOwner public {\r\n    latestPing[user] = now;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address user)"
      VariableDeclaration "user"
         Type: address
         Source: "address user"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n    latestPing[user] = now;\r\n  }"
      ExpressionStatement
         Gas costs: 20109
         Source: "latestPing[user] = now"
        Assignment using operator =
           Type: uint256
           Source: "latestPing[user] = now"
          IndexAccess
             Type: uint256
             Source: "latestPing[user]"
            Identifier latestPing
               Type: mapping(address => uint256)
               Source: "latestPing"
            Identifier user
               Type: address
               Source: "user"
          Identifier now
             Type: uint256
             Source: "now"
  FunctionDefinition "clearLand" - public
     Source: "function clearLand(int[] x, int[] y) public {\r\n    require(x.length == y.length);\r\n    for (uint i = 0; i < x.length; i++) {\r\n      uint landId = encodeTokenId(x[i], y[i]);\r\n      address holder = holderOf(landId);\r\n      if (latestPing[holder] < now - 1 years) {\r\n        _destroy(landId);\r\n      }\r\n    }\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(int[] x, int[] y)"
      VariableDeclaration "x"
         Type: int256[] memory
         Source: "int[] x"
        ArrayTypeName
           Source: "int[]"
          ElementaryTypeName int
             Source: "int"
      VariableDeclaration "y"
         Type: int256[] memory
         Source: "int[] y"
        ArrayTypeName
           Source: "int[]"
          ElementaryTypeName int
             Source: "int"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    require(x.length == y.length);\r\n    for (uint i = 0; i < x.length; i++) {\r\n      uint landId = encodeTokenId(x[i], y[i]);\r\n      address holder = holderOf(landId);\r\n      if (latestPing[holder] < now - 1 years) {\r\n        _destroy(landId);\r\n      }\r\n    }\r\n  }"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(x.length == y.length)"
        FunctionCall
           Type: tuple()
           Source: "require(x.length == y.length)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "x.length == y.length"
            MemberAccess to member length
               Type: uint256
               Source: "x.length"
              Identifier x
                 Type: int256[] memory
                 Source: "x"
            MemberAccess to member length
               Type: uint256
               Source: "y.length"
              Identifier y
                 Type: int256[] memory
                 Source: "y"
      ForStatement
         Source: "for (uint i = 0; i < x.length; i++) {\r\n      uint landId = encodeTokenId(x[i], y[i]);\r\n      address holder = holderOf(landId);\r\n      if (latestPing[holder] < now - 1 years) {\r\n        _destroy(landId);\r\n      }\r\n    }"
        VariableDeclarationStatement
           Gas costs: 11
           Source: "uint i = 0"
          VariableDeclaration "i"
             Type: uint256
             Source: "uint i"
            ElementaryTypeName uint
               Source: "uint"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        BinaryOperation using operator <
           Type: bool
           Gas costs: [???]
           Source: "i < x.length"
          Identifier i
             Type: uint256
             Source: "i"
          MemberAccess to member length
             Type: uint256
             Source: "x.length"
            Identifier x
               Type: int256[] memory
               Source: "x"
        ExpressionStatement
           Gas costs: 19
           Source: "i++"
          UnaryOperation (postfix) ++
             Type: uint256
             Source: "i++"
            Identifier i
               Type: uint256
               Source: "i"
        Block
           Source: "{\r\n      uint landId = encodeTokenId(x[i], y[i]);\r\n      address holder = holderOf(landId);\r\n      if (latestPing[holder] < now - 1 years) {\r\n        _destroy(landId);\r\n      }\r\n    }"
          VariableDeclarationStatement
             Gas costs: [???]
             Source: "uint landId = encodeTokenId(x[i], y[i])"
            VariableDeclaration "landId"
               Type: uint256
               Source: "uint landId"
              ElementaryTypeName uint
                 Source: "uint"
            FunctionCall
               Type: uint256
               Source: "encodeTokenId(x[i], y[i])"
              Identifier encodeTokenId
                 Type: function (int256,int256) view returns (uint256)
                 Source: "encodeTokenId"
              IndexAccess
                 Type: int256
                 Source: "x[i]"
                Identifier x
                   Type: int256[] memory
                   Source: "x"
                Identifier i
                   Type: uint256
                   Source: "i"
              IndexAccess
                 Type: int256
                 Source: "y[i]"
                Identifier y
                   Type: int256[] memory
                   Source: "y"
                Identifier i
                   Type: uint256
                   Source: "i"
          VariableDeclarationStatement
             Gas costs: 26
             Source: "address holder = holderOf(landId)"
            VariableDeclaration "holder"
               Type: address
               Source: "address holder"
              ElementaryTypeName address
                 Source: "address"
            FunctionCall
               Type: address
               Source: "holderOf(landId)"
              Identifier holderOf
                 Type: function (uint256) view returns (address)
                 Source: "holderOf"
              Identifier landId
                 Type: uint256
                 Source: "landId"
          IfStatement
             Source: "if (latestPing[holder] < now - 1 years) {\r\n        _destroy(landId);\r\n      }"
            BinaryOperation using operator <
               Type: bool
               Gas costs: 310
               Source: "latestPing[holder] < now - 1 years"
              IndexAccess
                 Type: uint256
                 Source: "latestPing[holder]"
                Identifier latestPing
                   Type: mapping(address => uint256)
                   Source: "latestPing"
                Identifier holder
                   Type: address
                   Source: "holder"
              BinaryOperation using operator -
                 Type: uint256
                 Source: "now - 1 years"
                Identifier now
                   Type: uint256
                   Source: "now"
                Literal, token: [no token] value: 1
                   Type: int_const 31536000
                   Source: "1 years"
            Block
               Source: "{\r\n        _destroy(landId);\r\n      }"
              ExpressionStatement
                 Gas costs: 18
                 Source: "_destroy(landId)"
                FunctionCall
                   Type: tuple()
                   Source: "_destroy(landId)"
                  Identifier _destroy
                     Type: function (uint256)
                     Source: "_destroy"
                  Identifier landId
                     Type: uint256
                     Source: "landId"
  FunctionDefinition "encodeTokenId" - public - const
     Source: "function encodeTokenId(int x, int y) view public returns (uint) {\r\n    return ((uint(x) * factor) & clearLow) | (uint(y) & clearHigh);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(int x, int y)"
      VariableDeclaration "x"
         Type: int256
         Source: "int x"
        ElementaryTypeName int
           Source: "int"
      VariableDeclaration "y"
         Type: int256
         Source: "int y"
        ElementaryTypeName int
           Source: "int"
    ParameterList
       Gas costs: 3
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n    return ((uint(x) * factor) & clearLow) | (uint(y) & clearHigh);\r\n  }"
      Return
         Gas costs: 25
         Source: "return ((uint(x) * factor) & clearLow) | (uint(y) & clearHigh)"
        BinaryOperation using operator |
           Type: uint256
           Source: "((uint(x) * factor) & clearLow) | (uint(y) & clearHigh)"
          TupleExpression
             Type: uint256
             Source: "((uint(x) * factor) & clearLow)"
            BinaryOperation using operator &
               Type: uint256
               Source: "(uint(x) * factor) & clearLow"
              TupleExpression
                 Type: uint256
                 Source: "(uint(x) * factor)"
                BinaryOperation using operator *
                   Type: uint256
                   Source: "uint(x) * factor"
                  FunctionCall
                     Type: uint256
                     Source: "uint(x)"
                    ElementaryTypeNameExpression uint
                       Type: type(uint256)
                       Source: "uint"
                    Identifier x
                       Type: int256
                       Source: "x"
                  Identifier factor
                     Type: uint256
                     Source: "factor"
              Identifier clearLow
                 Type: uint256
                 Source: "clearLow"
          TupleExpression
             Type: uint256
             Source: "(uint(y) & clearHigh)"
            BinaryOperation using operator &
               Type: uint256
               Source: "uint(y) & clearHigh"
              FunctionCall
                 Type: uint256
                 Source: "uint(y)"
                ElementaryTypeNameExpression uint
                   Type: type(uint256)
                   Source: "uint"
                Identifier y
                   Type: int256
                   Source: "y"
              Identifier clearHigh
                 Type: uint256
                 Source: "clearHigh"
  FunctionDefinition "decodeTokenId" - public - const
     Source: "function decodeTokenId(uint value) view public returns (int, int) {\r\n    uint x = (value & clearLow) >> 128;\r\n    uint y = (value & clearHigh);\r\n    return (expandNegative128BitCast(x), expandNegative128BitCast(y));\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint value)"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 6
       Source: "(int, int)"
      VariableDeclaration ""
         Type: int256
         Source: "int"
        ElementaryTypeName int
           Source: "int"
      VariableDeclaration ""
         Type: int256
         Source: "int"
        ElementaryTypeName int
           Source: "int"
    Block
       Source: "{\r\n    uint x = (value & clearLow) >> 128;\r\n    uint y = (value & clearHigh);\r\n    return (expandNegative128BitCast(x), expandNegative128BitCast(y));\r\n  }"
      VariableDeclarationStatement
         Gas costs: 91
         Source: "uint x = (value & clearLow) >> 128"
        VariableDeclaration "x"
           Type: uint256
           Source: "uint x"
          ElementaryTypeName uint
             Source: "uint"
        BinaryOperation using operator >>
           Type: uint256
           Source: "(value & clearLow) >> 128"
          TupleExpression
             Type: uint256
             Source: "(value & clearLow)"
            BinaryOperation using operator &
               Type: uint256
               Source: "value & clearLow"
              Identifier value
                 Type: uint256
                 Source: "value"
              Identifier clearLow
                 Type: uint256
                 Source: "clearLow"
          Literal, token: [no token] value: 128
             Type: int_const 128
             Source: "128"
      VariableDeclarationStatement
         Gas costs: 14
         Source: "uint y = (value & clearHigh)"
        VariableDeclaration "y"
           Type: uint256
           Source: "uint y"
          ElementaryTypeName uint
             Source: "uint"
        TupleExpression
           Type: uint256
           Source: "(value & clearHigh)"
          BinaryOperation using operator &
             Type: uint256
             Source: "value & clearHigh"
            Identifier value
               Type: uint256
               Source: "value"
            Identifier clearHigh
               Type: uint256
               Source: "clearHigh"
      Return
         Gas costs: 46
         Source: "return (expandNegative128BitCast(x), expandNegative128BitCast(y))"
        TupleExpression
           Type: tuple(int256,int256)
           Source: "(expandNegative128BitCast(x), expandNegative128BitCast(y))"
          FunctionCall
             Type: int256
             Source: "expandNegative128BitCast(x)"
            Identifier expandNegative128BitCast
               Type: function (uint256) view returns (int256)
               Source: "expandNegative128BitCast"
            Identifier x
               Type: uint256
               Source: "x"
          FunctionCall
             Type: int256
             Source: "expandNegative128BitCast(y)"
            Identifier expandNegative128BitCast
               Type: function (uint256) view returns (int256)
               Source: "expandNegative128BitCast"
            Identifier y
               Type: uint256
               Source: "y"
  FunctionDefinition "expandNegative128BitCast" - public - const
     Source: "function expandNegative128BitCast(uint value) view public returns (int) {\r\n    if (value & (1<<127) != 0) {\r\n      return int(value | clearLow);\r\n    }\r\n    return int(value);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint value)"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(int)"
      VariableDeclaration ""
         Type: int256
         Source: "int"
        ElementaryTypeName int
           Source: "int"
    Block
       Source: "{\r\n    if (value & (1<<127) != 0) {\r\n      return int(value | clearLow);\r\n    }\r\n    return int(value);\r\n  }"
      IfStatement
         Source: "if (value & (1<<127) != 0) {\r\n      return int(value | clearLow);\r\n    }"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 18
           Source: "value & (1<<127) != 0"
          BinaryOperation using operator &
             Type: uint256
             Source: "value & (1<<127)"
            Identifier value
               Type: uint256
               Source: "value"
            TupleExpression
               Type: int_const 1701...(31 digits omitted)...5728
               Source: "(1<<127)"
              BinaryOperation using operator <<
                 Type: int_const 1701...(31 digits omitted)...5728
                 Source: "1<<127"
                Literal, token: [no token] value: 1
                   Type: int_const 1
                   Source: "1"
                Literal, token: [no token] value: 127
                   Type: int_const 127
                   Source: "127"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n      return int(value | clearLow);\r\n    }"
          Return
             Gas costs: 22
             Source: "return int(value | clearLow)"
            FunctionCall
               Type: int256
               Source: "int(value | clearLow)"
              ElementaryTypeNameExpression int
                 Type: type(int256)
                 Source: "int"
              BinaryOperation using operator |
                 Type: uint256
                 Source: "value | clearLow"
                Identifier value
                   Type: uint256
                   Source: "value"
                Identifier clearLow
                   Type: uint256
                   Source: "clearLow"
      Return
         Gas costs: 8
         Source: "return int(value)"
        FunctionCall
           Type: int256
           Source: "int(value)"
          ElementaryTypeNameExpression int
             Type: type(int256)
             Source: "int"
          Identifier value
             Type: uint256
             Source: "value"
  FunctionDefinition "exists" - public - const
     Source: "function exists(int x, int y) view public returns (bool) {\r\n    return exists(encodeTokenId(x, y));\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(int x, int y)"
      VariableDeclaration "x"
         Type: int256
         Source: "int x"
        ElementaryTypeName int
           Source: "int"
      VariableDeclaration "y"
         Type: int256
         Source: "int y"
        ElementaryTypeName int
           Source: "int"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n    return exists(encodeTokenId(x, y));\r\n  }"
      Return
         Gas costs: 41
         Source: "return exists(encodeTokenId(x, y))"
        FunctionCall
           Type: bool
           Source: "exists(encodeTokenId(x, y))"
          Identifier exists
             Type: function (uint256) view returns (bool)
             Source: "exists"
          FunctionCall
             Type: uint256
             Source: "encodeTokenId(x, y)"
            Identifier encodeTokenId
               Type: function (int256,int256) view returns (uint256)
               Source: "encodeTokenId"
            Identifier x
               Type: int256
               Source: "x"
            Identifier y
               Type: int256
               Source: "y"
  FunctionDefinition "ownerOfLand" - public - const
     Source: "function ownerOfLand(int x, int y) view public returns (address) {\r\n    return holderOf(encodeTokenId(x, y));\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(int x, int y)"
      VariableDeclaration "x"
         Type: int256
         Source: "int x"
        ElementaryTypeName int
           Source: "int"
      VariableDeclaration "y"
         Type: int256
         Source: "int y"
        ElementaryTypeName int
           Source: "int"
    ParameterList
       Gas costs: 3
       Source: "(address)"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\r\n    return holderOf(encodeTokenId(x, y));\r\n  }"
      Return
         Gas costs: 30
         Source: "return holderOf(encodeTokenId(x, y))"
        FunctionCall
           Type: address
           Source: "holderOf(encodeTokenId(x, y))"
          Identifier holderOf
             Type: function (uint256) view returns (address)
             Source: "holderOf"
          FunctionCall
             Type: uint256
             Source: "encodeTokenId(x, y)"
            Identifier encodeTokenId
               Type: function (int256,int256) view returns (uint256)
               Source: "encodeTokenId"
            Identifier x
               Type: int256
               Source: "x"
            Identifier y
               Type: int256
               Source: "y"
  FunctionDefinition "ownerOfLandMany" - public - const
     Source: "function ownerOfLandMany(int[] x, int[] y) view public returns (address[]) {\r\n    require(x.length > 0);\r\n    require(x.length == y.length);\r\n\r\n    address[] memory addrs = new address[](x.length);\r\n    for (uint i = 0; i < x.length; i++) {\r\n      addrs[i] = ownerOfLand(x[i], y[i]);\r\n    }\r\n\r\n    return addrs;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(int[] x, int[] y)"
      VariableDeclaration "x"
         Type: int256[] memory
         Source: "int[] x"
        ArrayTypeName
           Source: "int[]"
          ElementaryTypeName int
             Source: "int"
      VariableDeclaration "y"
         Type: int256[] memory
         Source: "int[] y"
        ArrayTypeName
           Source: "int[]"
          ElementaryTypeName int
             Source: "int"
    ParameterList
       Gas costs: 3
       Source: "(address[])"
      VariableDeclaration ""
         Type: address[] memory
         Source: "address[]"
        ArrayTypeName
           Source: "address[]"
          ElementaryTypeName address
             Source: "address"
    Block
       Source: "{\r\n    require(x.length > 0);\r\n    require(x.length == y.length);\r\n\r\n    address[] memory addrs = new address[](x.length);\r\n    for (uint i = 0; i < x.length; i++) {\r\n      addrs[i] = ownerOfLand(x[i], y[i]);\r\n    }\r\n\r\n    return addrs;\r\n  }"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(x.length > 0)"
        FunctionCall
           Type: tuple()
           Source: "require(x.length > 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "x.length > 0"
            MemberAccess to member length
               Type: uint256
               Source: "x.length"
              Identifier x
                 Type: int256[] memory
                 Source: "x"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(x.length == y.length)"
        FunctionCall
           Type: tuple()
           Source: "require(x.length == y.length)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "x.length == y.length"
            MemberAccess to member length
               Type: uint256
               Source: "x.length"
              Identifier x
                 Type: int256[] memory
                 Source: "x"
            MemberAccess to member length
               Type: uint256
               Source: "y.length"
              Identifier y
                 Type: int256[] memory
                 Source: "y"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "address[] memory addrs = new address[](x.length)"
        VariableDeclaration "addrs"
           Type: address[] memory
           Source: "address[] memory addrs"
          ArrayTypeName
             Source: "address[]"
            ElementaryTypeName address
               Source: "address"
        FunctionCall
           Type: address[] memory
           Source: "new address[](x.length)"
          NewExpression
             Type: function (uint256) pure returns (address[] memory)
             Source: "new address[]"
            ArrayTypeName
               Source: "address[]"
              ElementaryTypeName address
                 Source: "address"
          MemberAccess to member length
             Type: uint256
             Source: "x.length"
            Identifier x
               Type: int256[] memory
               Source: "x"
      ForStatement
         Source: "for (uint i = 0; i < x.length; i++) {\r\n      addrs[i] = ownerOfLand(x[i], y[i]);\r\n    }"
        VariableDeclarationStatement
           Gas costs: 11
           Source: "uint i = 0"
          VariableDeclaration "i"
             Type: uint256
             Source: "uint i"
            ElementaryTypeName uint
               Source: "uint"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        BinaryOperation using operator <
           Type: bool
           Gas costs: [???]
           Source: "i < x.length"
          Identifier i
             Type: uint256
             Source: "i"
          MemberAccess to member length
             Type: uint256
             Source: "x.length"
            Identifier x
               Type: int256[] memory
               Source: "x"
        ExpressionStatement
           Gas costs: 19
           Source: "i++"
          UnaryOperation (postfix) ++
             Type: uint256
             Source: "i++"
            Identifier i
               Type: uint256
               Source: "i"
        Block
           Source: "{\r\n      addrs[i] = ownerOfLand(x[i], y[i]);\r\n    }"
          ExpressionStatement
             Gas costs: [???]
             Source: "addrs[i] = ownerOfLand(x[i], y[i])"
            Assignment using operator =
               Type: address
               Source: "addrs[i] = ownerOfLand(x[i], y[i])"
              IndexAccess
                 Type: address
                 Source: "addrs[i]"
                Identifier addrs
                   Type: address[] memory
                   Source: "addrs"
                Identifier i
                   Type: uint256
                   Source: "i"
              FunctionCall
                 Type: address
                 Source: "ownerOfLand(x[i], y[i])"
                Identifier ownerOfLand
                   Type: function (int256,int256) view returns (address)
                   Source: "ownerOfLand"
                IndexAccess
                   Type: int256
                   Source: "x[i]"
                  Identifier x
                     Type: int256[] memory
                     Source: "x"
                  Identifier i
                     Type: uint256
                     Source: "i"
                IndexAccess
                   Type: int256
                   Source: "y[i]"
                  Identifier y
                     Type: int256[] memory
                     Source: "y"
                  Identifier i
                     Type: uint256
                     Source: "i"
      Return
         Gas costs: 8
         Source: "return addrs"
        Identifier addrs
           Type: address[] memory
           Source: "addrs"
  FunctionDefinition "landOf" - public - const
     Source: "function landOf(address owner) public view returns (int[], int[]) {\r\n    int[] memory x = new int[](_assetsOf[owner].length);\r\n    int[] memory y = new int[](_assetsOf[owner].length);\r\n\r\n    int assetX;\r\n    int assetY;\r\n    uint length = _assetsOf[owner].length;\r\n    for (uint i = 0; i < length; i++) {\r\n      (assetX, assetY) = decodeTokenId(_assetsOf[owner][i]);\r\n      x[i] = assetX;\r\n      y[i] = assetY;\r\n    }\r\n\r\n    return (x, y);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address owner)"
      VariableDeclaration "owner"
         Type: address
         Source: "address owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 6
       Source: "(int[], int[])"
      VariableDeclaration ""
         Type: int256[] memory
         Source: "int[]"
        ArrayTypeName
           Source: "int[]"
          ElementaryTypeName int
             Source: "int"
      VariableDeclaration ""
         Type: int256[] memory
         Source: "int[]"
        ArrayTypeName
           Source: "int[]"
          ElementaryTypeName int
             Source: "int"
    Block
       Source: "{\r\n    int[] memory x = new int[](_assetsOf[owner].length);\r\n    int[] memory y = new int[](_assetsOf[owner].length);\r\n\r\n    int assetX;\r\n    int assetY;\r\n    uint length = _assetsOf[owner].length;\r\n    for (uint i = 0; i < length; i++) {\r\n      (assetX, assetY) = decodeTokenId(_assetsOf[owner][i]);\r\n      x[i] = assetX;\r\n      y[i] = assetY;\r\n    }\r\n\r\n    return (x, y);\r\n  }"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "int[] memory x = new int[](_assetsOf[owner].length)"
        VariableDeclaration "x"
           Type: int256[] memory
           Source: "int[] memory x"
          ArrayTypeName
             Source: "int[]"
            ElementaryTypeName int
               Source: "int"
        FunctionCall
           Type: int256[] memory
           Source: "new int[](_assetsOf[owner].length)"
          NewExpression
             Type: function (uint256) pure returns (int256[] memory)
             Source: "new int[]"
            ArrayTypeName
               Source: "int[]"
              ElementaryTypeName int
                 Source: "int"
          MemberAccess to member length
             Type: uint256
             Source: "_assetsOf[owner].length"
            IndexAccess
               Type: uint256[] storage ref
               Source: "_assetsOf[owner]"
              Identifier _assetsOf
                 Type: mapping(address => uint256[] storage ref)
                 Source: "_assetsOf"
              Identifier owner
                 Type: address
                 Source: "owner"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "int[] memory y = new int[](_assetsOf[owner].length)"
        VariableDeclaration "y"
           Type: int256[] memory
           Source: "int[] memory y"
          ArrayTypeName
             Source: "int[]"
            ElementaryTypeName int
               Source: "int"
        FunctionCall
           Type: int256[] memory
           Source: "new int[](_assetsOf[owner].length)"
          NewExpression
             Type: function (uint256) pure returns (int256[] memory)
             Source: "new int[]"
            ArrayTypeName
               Source: "int[]"
              ElementaryTypeName int
                 Source: "int"
          MemberAccess to member length
             Type: uint256
             Source: "_assetsOf[owner].length"
            IndexAccess
               Type: uint256[] storage ref
               Source: "_assetsOf[owner]"
              Identifier _assetsOf
                 Type: mapping(address => uint256[] storage ref)
                 Source: "_assetsOf"
              Identifier owner
                 Type: address
                 Source: "owner"
      VariableDeclarationStatement
         Gas costs: 3
         Source: "int assetX"
        VariableDeclaration "assetX"
           Type: int256
           Source: "int assetX"
          ElementaryTypeName int
             Source: "int"
      VariableDeclarationStatement
         Gas costs: 3
         Source: "int assetY"
        VariableDeclaration "assetY"
           Type: int256
           Source: "int assetY"
          ElementaryTypeName int
             Source: "int"
      VariableDeclarationStatement
         Gas costs: 315
         Source: "uint length = _assetsOf[owner].length"
        VariableDeclaration "length"
           Type: uint256
           Source: "uint length"
          ElementaryTypeName uint
             Source: "uint"
        MemberAccess to member length
           Type: uint256
           Source: "_assetsOf[owner].length"
          IndexAccess
             Type: uint256[] storage ref
             Source: "_assetsOf[owner]"
            Identifier _assetsOf
               Type: mapping(address => uint256[] storage ref)
               Source: "_assetsOf"
            Identifier owner
               Type: address
               Source: "owner"
      ForStatement
         Source: "for (uint i = 0; i < length; i++) {\r\n      (assetX, assetY) = decodeTokenId(_assetsOf[owner][i]);\r\n      x[i] = assetX;\r\n      y[i] = assetY;\r\n    }"
        VariableDeclarationStatement
           Gas costs: 11
           Source: "uint i = 0"
          VariableDeclaration "i"
             Type: uint256
             Source: "uint i"
            ElementaryTypeName uint
               Source: "uint"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 9
           Source: "i < length"
          Identifier i
             Type: uint256
             Source: "i"
          Identifier length
             Type: uint256
             Source: "length"
        ExpressionStatement
           Gas costs: 19
           Source: "i++"
          UnaryOperation (postfix) ++
             Type: uint256
             Source: "i++"
            Identifier i
               Type: uint256
               Source: "i"
        Block
           Source: "{\r\n      (assetX, assetY) = decodeTokenId(_assetsOf[owner][i]);\r\n      x[i] = assetX;\r\n      y[i] = assetY;\r\n    }"
          ExpressionStatement
             Gas costs: 623
             Source: "(assetX, assetY) = decodeTokenId(_assetsOf[owner][i])"
            Assignment using operator =
               Type: tuple()
               Source: "(assetX, assetY) = decodeTokenId(_assetsOf[owner][i])"
              TupleExpression
                 Type: tuple(int256,int256)
                 Source: "(assetX, assetY)"
                Identifier assetX
                   Type: int256
                   Source: "assetX"
                Identifier assetY
                   Type: int256
                   Source: "assetY"
              FunctionCall
                 Type: tuple(int256,int256)
                 Source: "decodeTokenId(_assetsOf[owner][i])"
                Identifier decodeTokenId
                   Type: function (uint256) view returns (int256,int256)
                   Source: "decodeTokenId"
                IndexAccess
                   Type: uint256
                   Source: "_assetsOf[owner][i]"
                  IndexAccess
                     Type: uint256[] storage ref
                     Source: "_assetsOf[owner]"
                    Identifier _assetsOf
                       Type: mapping(address => uint256[] storage ref)
                       Source: "_assetsOf"
                    Identifier owner
                       Type: address
                       Source: "owner"
                  Identifier i
                     Type: uint256
                     Source: "i"
          ExpressionStatement
             Gas costs: [???]
             Source: "x[i] = assetX"
            Assignment using operator =
               Type: int256
               Source: "x[i] = assetX"
              IndexAccess
                 Type: int256
                 Source: "x[i]"
                Identifier x
                   Type: int256[] memory
                   Source: "x"
                Identifier i
                   Type: uint256
                   Source: "i"
              Identifier assetX
                 Type: int256
                 Source: "assetX"
          ExpressionStatement
             Gas costs: [???]
             Source: "y[i] = assetY"
            Assignment using operator =
               Type: int256
               Source: "y[i] = assetY"
              IndexAccess
                 Type: int256
                 Source: "y[i]"
                Identifier y
                   Type: int256[] memory
                   Source: "y"
                Identifier i
                   Type: uint256
                   Source: "i"
              Identifier assetY
                 Type: int256
                 Source: "assetY"
      Return
         Gas costs: 16
         Source: "return (x, y)"
        TupleExpression
           Type: tuple(int256[] memory,int256[] memory)
           Source: "(x, y)"
          Identifier x
             Type: int256[] memory
             Source: "x"
          Identifier y
             Type: int256[] memory
             Source: "y"
  FunctionDefinition "landData" - public - const
     Source: "function landData(int x, int y) view public returns (string) {\r\n    return assetData(encodeTokenId(x, y));\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(int x, int y)"
      VariableDeclaration "x"
         Type: int256
         Source: "int x"
        ElementaryTypeName int
           Source: "int"
      VariableDeclaration "y"
         Type: int256
         Source: "int y"
        ElementaryTypeName int
           Source: "int"
    ParameterList
       Gas costs: 3
       Source: "(string)"
      VariableDeclaration ""
         Type: string memory
         Source: "string"
        ElementaryTypeName string
           Source: "string"
    Block
       Source: "{\r\n    return assetData(encodeTokenId(x, y));\r\n  }"
      Return
         Gas costs: 41
         Source: "return assetData(encodeTokenId(x, y))"
        FunctionCall
           Type: string memory
           Source: "assetData(encodeTokenId(x, y))"
          Identifier assetData
             Type: function (uint256) view returns (string memory)
             Source: "assetData"
          FunctionCall
             Type: uint256
             Source: "encodeTokenId(x, y)"
            Identifier encodeTokenId
               Type: function (int256,int256) view returns (uint256)
               Source: "encodeTokenId"
            Identifier x
               Type: int256
               Source: "x"
            Identifier y
               Type: int256
               Source: "y"
  FunctionDefinition "transferLand" - public
     Source: "function transferLand(int x, int y, address to) public {\r\n    transfer(to, encodeTokenId(x, y));\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(int x, int y, address to)"
      VariableDeclaration "x"
         Type: int256
         Source: "int x"
        ElementaryTypeName int
           Source: "int"
      VariableDeclaration "y"
         Type: int256
         Source: "int y"
        ElementaryTypeName int
           Source: "int"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    transfer(to, encodeTokenId(x, y));\r\n  }"
      ExpressionStatement
         Gas costs: 39
         Source: "transfer(to, encodeTokenId(x, y))"
        FunctionCall
           Type: tuple()
           Source: "transfer(to, encodeTokenId(x, y))"
          Identifier transfer
             Type: function (address,uint256)
             Source: "transfer"
          Identifier to
             Type: address
             Source: "to"
          FunctionCall
             Type: uint256
             Source: "encodeTokenId(x, y)"
            Identifier encodeTokenId
               Type: function (int256,int256) view returns (uint256)
               Source: "encodeTokenId"
            Identifier x
               Type: int256
               Source: "x"
            Identifier y
               Type: int256
               Source: "y"
  FunctionDefinition "transferManyLand" - public
     Source: "function transferManyLand(int[] x, int[] y, address to) public {\r\n    require(x.length == y.length);\r\n    for (uint i = 0; i < x.length; i++) {\r\n      transfer(to, encodeTokenId(x[i], y[i]));\r\n    }\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(int[] x, int[] y, address to)"
      VariableDeclaration "x"
         Type: int256[] memory
         Source: "int[] x"
        ArrayTypeName
           Source: "int[]"
          ElementaryTypeName int
             Source: "int"
      VariableDeclaration "y"
         Type: int256[] memory
         Source: "int[] y"
        ArrayTypeName
           Source: "int[]"
          ElementaryTypeName int
             Source: "int"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    require(x.length == y.length);\r\n    for (uint i = 0; i < x.length; i++) {\r\n      transfer(to, encodeTokenId(x[i], y[i]));\r\n    }\r\n  }"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(x.length == y.length)"
        FunctionCall
           Type: tuple()
           Source: "require(x.length == y.length)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "x.length == y.length"
            MemberAccess to member length
               Type: uint256
               Source: "x.length"
              Identifier x
                 Type: int256[] memory
                 Source: "x"
            MemberAccess to member length
               Type: uint256
               Source: "y.length"
              Identifier y
                 Type: int256[] memory
                 Source: "y"
      ForStatement
         Source: "for (uint i = 0; i < x.length; i++) {\r\n      transfer(to, encodeTokenId(x[i], y[i]));\r\n    }"
        VariableDeclarationStatement
           Gas costs: 11
           Source: "uint i = 0"
          VariableDeclaration "i"
             Type: uint256
             Source: "uint i"
            ElementaryTypeName uint
               Source: "uint"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        BinaryOperation using operator <
           Type: bool
           Gas costs: [???]
           Source: "i < x.length"
          Identifier i
             Type: uint256
             Source: "i"
          MemberAccess to member length
             Type: uint256
             Source: "x.length"
            Identifier x
               Type: int256[] memory
               Source: "x"
        ExpressionStatement
           Gas costs: 19
           Source: "i++"
          UnaryOperation (postfix) ++
             Type: uint256
             Source: "i++"
            Identifier i
               Type: uint256
               Source: "i"
        Block
           Source: "{\r\n      transfer(to, encodeTokenId(x[i], y[i]));\r\n    }"
          ExpressionStatement
             Gas costs: [???]
             Source: "transfer(to, encodeTokenId(x[i], y[i]))"
            FunctionCall
               Type: tuple()
               Source: "transfer(to, encodeTokenId(x[i], y[i]))"
              Identifier transfer
                 Type: function (address,uint256)
                 Source: "transfer"
              Identifier to
                 Type: address
                 Source: "to"
              FunctionCall
                 Type: uint256
                 Source: "encodeTokenId(x[i], y[i])"
                Identifier encodeTokenId
                   Type: function (int256,int256) view returns (uint256)
                   Source: "encodeTokenId"
                IndexAccess
                   Type: int256
                   Source: "x[i]"
                  Identifier x
                     Type: int256[] memory
                     Source: "x"
                  Identifier i
                     Type: uint256
                     Source: "i"
                IndexAccess
                   Type: int256
                   Source: "y[i]"
                  Identifier y
                     Type: int256[] memory
                     Source: "y"
                  Identifier i
                     Type: uint256
                     Source: "i"
  FunctionDefinition "updateLandData" - public
     Source: "function updateLandData(int x, int y, string data) public onlyOperatorOrHolder(encodeTokenId(x, y)) {\r\n    return _update(encodeTokenId(x, y), data);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(int x, int y, string data)"
      VariableDeclaration "x"
         Type: int256
         Source: "int x"
        ElementaryTypeName int
           Source: "int"
      VariableDeclaration "y"
         Type: int256
         Source: "int y"
        ElementaryTypeName int
           Source: "int"
      VariableDeclaration "data"
         Type: string memory
         Source: "string data"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOperatorOrHolder"
       Gas costs: 21
       Source: "onlyOperatorOrHolder(encodeTokenId(x, y))"
      Identifier onlyOperatorOrHolder
         Type: modifier (uint256)
         Source: "onlyOperatorOrHolder"
      FunctionCall
         Type: uint256
         Source: "encodeTokenId(x, y)"
        Identifier encodeTokenId
           Type: function (int256,int256) view returns (uint256)
           Source: "encodeTokenId"
        Identifier x
           Type: int256
           Source: "x"
        Identifier y
           Type: int256
           Source: "y"
    Block
       Source: "{\r\n    return _update(encodeTokenId(x, y), data);\r\n  }"
      Return
         Gas costs: 28
         Source: "return _update(encodeTokenId(x, y), data)"
        FunctionCall
           Type: tuple()
           Source: "_update(encodeTokenId(x, y), data)"
          Identifier _update
             Type: function (uint256,string memory)
             Source: "_update"
          FunctionCall
             Type: uint256
             Source: "encodeTokenId(x, y)"
            Identifier encodeTokenId
               Type: function (int256,int256) view returns (uint256)
               Source: "encodeTokenId"
            Identifier x
               Type: int256
               Source: "x"
            Identifier y
               Type: int256
               Source: "y"
          Identifier data
             Type: string memory
             Source: "data"
  FunctionDefinition "updateManyLandData" - public
     Source: "function updateManyLandData(int[] x, int[] y, string data) public {\r\n    require(x.length == y.length);\r\n    for (uint i = 0; i < x.length; i++) {\r\n      updateLandData(x[i], y[i], data);\r\n    }\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(int[] x, int[] y, string data)"
      VariableDeclaration "x"
         Type: int256[] memory
         Source: "int[] x"
        ArrayTypeName
           Source: "int[]"
          ElementaryTypeName int
             Source: "int"
      VariableDeclaration "y"
         Type: int256[] memory
         Source: "int[] y"
        ArrayTypeName
           Source: "int[]"
          ElementaryTypeName int
             Source: "int"
      VariableDeclaration "data"
         Type: string memory
         Source: "string data"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    require(x.length == y.length);\r\n    for (uint i = 0; i < x.length; i++) {\r\n      updateLandData(x[i], y[i], data);\r\n    }\r\n  }"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(x.length == y.length)"
        FunctionCall
           Type: tuple()
           Source: "require(x.length == y.length)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "x.length == y.length"
            MemberAccess to member length
               Type: uint256
               Source: "x.length"
              Identifier x
                 Type: int256[] memory
                 Source: "x"
            MemberAccess to member length
               Type: uint256
               Source: "y.length"
              Identifier y
                 Type: int256[] memory
                 Source: "y"
      ForStatement
         Source: "for (uint i = 0; i < x.length; i++) {\r\n      updateLandData(x[i], y[i], data);\r\n    }"
        VariableDeclarationStatement
           Gas costs: 11
           Source: "uint i = 0"
          VariableDeclaration "i"
             Type: uint256
             Source: "uint i"
            ElementaryTypeName uint
               Source: "uint"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        BinaryOperation using operator <
           Type: bool
           Gas costs: [???]
           Source: "i < x.length"
          Identifier i
             Type: uint256
             Source: "i"
          MemberAccess to member length
             Type: uint256
             Source: "x.length"
            Identifier x
               Type: int256[] memory
               Source: "x"
        ExpressionStatement
           Gas costs: 19
           Source: "i++"
          UnaryOperation (postfix) ++
             Type: uint256
             Source: "i++"
            Identifier i
               Type: uint256
               Source: "i"
        Block
           Source: "{\r\n      updateLandData(x[i], y[i], data);\r\n    }"
          ExpressionStatement
             Gas costs: [???]
             Source: "updateLandData(x[i], y[i], data)"
            FunctionCall
               Type: tuple()
               Source: "updateLandData(x[i], y[i], data)"
              Identifier updateLandData
                 Type: function (int256,int256,string memory)
                 Source: "updateLandData"
              IndexAccess
                 Type: int256
                 Source: "x[i]"
                Identifier x
                   Type: int256[] memory
                   Source: "x"
                Identifier i
                   Type: uint256
                   Source: "i"
              IndexAccess
                 Type: int256
                 Source: "y[i]"
                Identifier y
                   Type: int256[] memory
                   Source: "y"
                Identifier i
                   Type: uint256
                   Source: "i"
              Identifier data
                 Type: string memory
                 Source: "data"
