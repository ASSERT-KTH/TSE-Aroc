Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0xce7382bf7f277a2b661aaf71408ac65b287305a0.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^ 0.4 .11;"
ContractDefinition "tokenRecipient"
   Gas costs: 0
   Source: "contract tokenRecipient {\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\r\n}"
  FunctionDefinition "receiveApproval" - public
     Source: "function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);"
    ParameterList
       Source: "(address _from, uint256 _value, address _token, bytes _extraData)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_token"
         Type: address
         Source: "address _token"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_extraData"
         Type: bytes memory
         Source: "bytes _extraData"
        ElementaryTypeName bytes
           Source: "bytes"
    ParameterList
       Source: ""
ContractDefinition "ERC20"
   Gas costs: 0
   Source: "contract ERC20 {\r\n\r\n    function totalSupply() constant returns(uint _totalSupply);\r\n\r\n    function balanceOf(address who) constant returns(uint256);\r\n\r\n    function transfer(address to, uint value) returns(bool ok);\r\n\r\n    function transferFrom(address from, address to, uint value) returns(bool ok);\r\n\r\n    function approve(address spender, uint value) returns(bool ok);\r\n\r\n    function allowance(address owner, address spender) constant returns(uint);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n}"
  FunctionDefinition "totalSupply" - public - const
     Source: "function totalSupply() constant returns(uint _totalSupply);"
    ParameterList
       Source: "()"
    ParameterList
       Source: "(uint _totalSupply)"
      VariableDeclaration "_totalSupply"
         Type: uint256
         Source: "uint _totalSupply"
        ElementaryTypeName uint
           Source: "uint"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address who) constant returns(uint256);"
    ParameterList
       Source: "(address who)"
      VariableDeclaration "who"
         Type: address
         Source: "address who"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address to, uint value) returns(bool ok);"
    ParameterList
       Source: "(address to, uint value)"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(bool ok)"
      VariableDeclaration "ok"
         Type: bool
         Source: "bool ok"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address from, address to, uint value) returns(bool ok);"
    ParameterList
       Source: "(address from, address to, uint value)"
      VariableDeclaration "from"
         Type: address
         Source: "address from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(bool ok)"
      VariableDeclaration "ok"
         Type: bool
         Source: "bool ok"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "approve" - public
     Source: "function approve(address spender, uint value) returns(bool ok);"
    ParameterList
       Source: "(address spender, uint value)"
      VariableDeclaration "spender"
         Type: address
         Source: "address spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(bool ok)"
      VariableDeclaration "ok"
         Type: bool
         Source: "bool ok"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address owner, address spender) constant returns(uint);"
    ParameterList
       Source: "(address owner, address spender)"
      VariableDeclaration "owner"
         Type: address
         Source: "address owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "spender"
         Type: address
         Source: "address spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "Transfer"
     Source: "event Transfer(address indexed from, address indexed to, uint value);"
    ParameterList
       Source: "(address indexed from, address indexed to, uint value)"
      VariableDeclaration "from"
         Type: address
         Source: "address indexed from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "to"
         Type: address
         Source: "address indexed to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "Approval"
     Source: "event Approval(address indexed owner, address indexed spender, uint value);"
    ParameterList
       Source: "(address indexed owner, address indexed spender, uint value)"
      VariableDeclaration "owner"
         Type: address
         Source: "address indexed owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "spender"
         Type: address
         Source: "address indexed spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
ContractDefinition "Maccabi"
   Source: "contract Maccabi is ERC20 {\r\n\r\n\r\n    string public standard = 'MCB 1.0';\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    \r\n    \r\n    \r\n   \r\n    mapping( address => uint256) public balanceOf;\r\n    mapping( uint => address) public accountIndex;\r\n    uint accountCount;\r\n    \r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n   \r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed spender, uint value);\r\n    event Message ( address a, uint256 amount );\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n\r\n   \r\n    \r\n    function Maccabi() {\r\n         \r\n        uint supply = 15200000000000000; \r\n        appendTokenHolders( msg.sender );\r\n        balanceOf[msg.sender] =  supply;\r\n        totalSupply = supply; \r\n        name = \"MACCABI\"; \r\n        symbol = \"MCB\"; \r\n        decimals = 8; \r\n       \r\n \r\n        \r\n  \r\n    }\r\n    \r\n  \r\n  \r\n    function balanceOf(address tokenHolder) constant returns(uint256) {\r\n\r\n        return balanceOf[tokenHolder];\r\n    }\r\n\r\n    function totalSupply() constant returns(uint256) {\r\n\r\n        return totalSupply;\r\n    }\r\n\r\n    function getAccountCount() constant returns(uint256) {\r\n\r\n        return accountCount;\r\n    }\r\n\r\n    function getAddress(uint slot) constant returns(address) {\r\n\r\n        return accountIndex[slot];\r\n\r\n    }\r\n\r\n    \r\n    function appendTokenHolders(address tokenHolder) private {\r\n\r\n        if (balanceOf[tokenHolder] == 0) {\r\n          \r\n            accountIndex[accountCount] = tokenHolder;\r\n            accountCount++;\r\n        }\r\n\r\n    }\r\n\r\n    \r\n    function transfer(address _to, uint256 _value) returns(bool ok) {\r\n        if (_to == 0x0) throw; \r\n        if (balanceOf[msg.sender] < _value) throw; \r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;\r\n        \r\n        appendTokenHolders(_to);\r\n        balanceOf[msg.sender] -= _value; \r\n        balanceOf[_to] += _value; \r\n        Transfer(msg.sender, _to, _value); \r\n    \r\n        \r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value)\r\n    returns(bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval( msg.sender ,_spender, _value);\r\n        return true;\r\n    }\r\n\r\n \r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n    returns(bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\r\n        return allowance[_owner][_spender];\r\n    }\r\n\r\n \r\n    function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {\r\n        if (_to == 0x0) throw;  \r\n        if (balanceOf[_from] < _value) throw;  \r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  \r\n        if (_value > allowance[_from][msg.sender]) throw; \r\n        appendTokenHolders(_to);\r\n        balanceOf[_from] -= _value; \r\n        balanceOf[_to] += _value; \r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n       \r\n        return true;\r\n    }\r\n  \r\n    function burn(uint256 _value) returns(bool success) {\r\n        if (balanceOf[msg.sender] < _value) throw; \r\n        if( totalSupply -  _value < 2100000000000000) throw;\r\n        balanceOf[msg.sender] -= _value; \r\n        totalSupply -= _value; \r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address _from, uint256 _value) returns(bool success) {\r\n    \r\n        if (balanceOf[_from] < _value) throw; \r\n        if (_value > allowance[_from][msg.sender]) throw; \r\n        balanceOf[_from] -= _value; \r\n        totalSupply -= _value; \r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n    \r\n  \r\n \r\n    \r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "ERC20"
    UserDefinedTypeName "ERC20"
       Source: "ERC20"
  VariableDeclaration "standard"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public standard = 'MCB 1.0'"
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: MCB 1.0
       Type: literal_string "MCB 1.0"
       Source: "'MCB 1.0'"
  VariableDeclaration "name"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public name"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "symbol"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public symbol"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "decimals"
     Type: uint8
     Gas costs: [???]
     Source: "uint8 public decimals"
    ElementaryTypeName uint8
       Source: "uint8"
  VariableDeclaration "totalSupply"
     Type: uint256
     Gas costs: 0
     Source: "uint256 public totalSupply"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "balanceOf"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping( address => uint256) public balanceOf"
    Mapping
       Source: "mapping( address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "accountIndex"
     Type: mapping(uint256 => address)
     Gas costs: [???]
     Source: "mapping( uint => address) public accountIndex"
    Mapping
       Source: "mapping( uint => address)"
      ElementaryTypeName uint
         Source: "uint"
      ElementaryTypeName address
         Source: "address"
  VariableDeclaration "accountCount"
     Type: uint256
     Gas costs: 0
     Source: "uint accountCount"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "allowance"
     Type: mapping(address => mapping(address => uint256))
     Gas costs: 0
     Source: "mapping(address => mapping(address => uint256)) public allowance"
    Mapping
       Source: "mapping(address => mapping(address => uint256))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping(address => uint256)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Transfer"
     Gas costs: 0
     Source: "event Transfer(address indexed from, address indexed to, uint256 value);"
    ParameterList
       Source: "(address indexed from, address indexed to, uint256 value)"
      VariableDeclaration "from"
         Type: address
         Source: "address indexed from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "to"
         Type: address
         Source: "address indexed to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Approval"
     Gas costs: 0
     Source: "event Approval(address indexed _owner, address indexed spender, uint value);"
    ParameterList
       Source: "(address indexed _owner, address indexed spender, uint value)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address indexed _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "spender"
         Type: address
         Source: "address indexed spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "Message"
     Gas costs: 0
     Source: "event Message ( address a, uint256 amount );"
    ParameterList
       Source: "( address a, uint256 amount )"
      VariableDeclaration "a"
         Type: address
         Source: "address a"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "amount"
         Type: uint256
         Source: "uint256 amount"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Burn"
     Gas costs: 0
     Source: "event Burn(address indexed from, uint256 value);"
    ParameterList
       Source: "(address indexed from, uint256 value)"
      VariableDeclaration "from"
         Type: address
         Source: "address indexed from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint256 value"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "Maccabi" - public
     Source: "function Maccabi() {\r\n         \r\n        uint supply = 15200000000000000; \r\n        appendTokenHolders( msg.sender );\r\n        balanceOf[msg.sender] =  supply;\r\n        totalSupply = supply; \r\n        name = \"MACCABI\"; \r\n        symbol = \"MCB\"; \r\n        decimals = 8; \r\n       \r\n \r\n        \r\n  \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n         \r\n        uint supply = 15200000000000000; \r\n        appendTokenHolders( msg.sender );\r\n        balanceOf[msg.sender] =  supply;\r\n        totalSupply = supply; \r\n        name = \"MACCABI\"; \r\n        symbol = \"MCB\"; \r\n        decimals = 8; \r\n       \r\n \r\n        \r\n  \r\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint supply = 15200000000000000"
        VariableDeclaration "supply"
           Type: uint256
           Source: "uint supply"
          ElementaryTypeName uint
             Source: "uint"
        Literal, token: [no token] value: 15200000000000000
           Type: int_const 15200000000000000
           Source: "15200000000000000"
      ExpressionStatement
         Gas costs: 0
         Source: "appendTokenHolders( msg.sender )"
        FunctionCall
           Type: tuple()
           Source: "appendTokenHolders( msg.sender )"
          Identifier appendTokenHolders
             Type: function (address)
             Source: "appendTokenHolders"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 0
         Source: "balanceOf[msg.sender] =  supply"
        Assignment using operator =
           Type: uint256
           Source: "balanceOf[msg.sender] =  supply"
          IndexAccess
             Type: uint256
             Source: "balanceOf[msg.sender]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier supply
             Type: uint256
             Source: "supply"
      ExpressionStatement
         Gas costs: 0
         Source: "totalSupply = supply"
        Assignment using operator =
           Type: uint256
           Source: "totalSupply = supply"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          Identifier supply
             Type: uint256
             Source: "supply"
      ExpressionStatement
         Gas costs: 0
         Source: "name = \"MACCABI\""
        Assignment using operator =
           Type: string storage ref
           Source: "name = \"MACCABI\""
          Identifier name
             Type: string storage ref
             Source: "name"
          Literal, token: [no token] value: MACCABI
             Type: literal_string "MACCABI"
             Source: "\"MACCABI\""
      ExpressionStatement
         Gas costs: 0
         Source: "symbol = \"MCB\""
        Assignment using operator =
           Type: string storage ref
           Source: "symbol = \"MCB\""
          Identifier symbol
             Type: string storage ref
             Source: "symbol"
          Literal, token: [no token] value: MCB
             Type: literal_string "MCB"
             Source: "\"MCB\""
      ExpressionStatement
         Gas costs: 0
         Source: "decimals = 8"
        Assignment using operator =
           Type: uint8
           Source: "decimals = 8"
          Identifier decimals
             Type: uint8
             Source: "decimals"
          Literal, token: [no token] value: 8
             Type: int_const 8
             Source: "8"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address tokenHolder) constant returns(uint256) {\r\n\r\n        return balanceOf[tokenHolder];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address tokenHolder)"
      VariableDeclaration "tokenHolder"
         Type: address
         Source: "address tokenHolder"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n\r\n        return balanceOf[tokenHolder];\r\n    }"
      Return
         Gas costs: 304
         Source: "return balanceOf[tokenHolder]"
        IndexAccess
           Type: uint256
           Source: "balanceOf[tokenHolder]"
          Identifier balanceOf
             Type: mapping(address => uint256)
             Source: "balanceOf"
          Identifier tokenHolder
             Type: address
             Source: "tokenHolder"
  FunctionDefinition "totalSupply" - public - const
     Source: "function totalSupply() constant returns(uint256) {\r\n\r\n        return totalSupply;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n\r\n        return totalSupply;\r\n    }"
      Return
         Gas costs: 208
         Source: "return totalSupply"
        Identifier totalSupply
           Type: uint256
           Source: "totalSupply"
  FunctionDefinition "getAccountCount" - public - const
     Source: "function getAccountCount() constant returns(uint256) {\r\n\r\n        return accountCount;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n\r\n        return accountCount;\r\n    }"
      Return
         Gas costs: 208
         Source: "return accountCount"
        Identifier accountCount
           Type: uint256
           Source: "accountCount"
  FunctionDefinition "getAddress" - public - const
     Source: "function getAddress(uint slot) constant returns(address) {\r\n\r\n        return accountIndex[slot];\r\n\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint slot)"
      VariableDeclaration "slot"
         Type: uint256
         Source: "uint slot"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(address)"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\r\n\r\n        return accountIndex[slot];\r\n\r\n    }"
      Return
         Gas costs: 328
         Source: "return accountIndex[slot]"
        IndexAccess
           Type: address
           Source: "accountIndex[slot]"
          Identifier accountIndex
             Type: mapping(uint256 => address)
             Source: "accountIndex"
          Identifier slot
             Type: uint256
             Source: "slot"
  FunctionDefinition "appendTokenHolders"
     Source: "function appendTokenHolders(address tokenHolder) private {\r\n\r\n        if (balanceOf[tokenHolder] == 0) {\r\n          \r\n            accountIndex[accountCount] = tokenHolder;\r\n            accountCount++;\r\n        }\r\n\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address tokenHolder)"
      VariableDeclaration "tokenHolder"
         Type: address
         Source: "address tokenHolder"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n\r\n        if (balanceOf[tokenHolder] == 0) {\r\n          \r\n            accountIndex[accountCount] = tokenHolder;\r\n            accountCount++;\r\n        }\r\n\r\n    }"
      IfStatement
         Source: "if (balanceOf[tokenHolder] == 0) {\r\n          \r\n            accountIndex[accountCount] = tokenHolder;\r\n            accountCount++;\r\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 305
           Source: "balanceOf[tokenHolder] == 0"
          IndexAccess
             Type: uint256
             Source: "balanceOf[tokenHolder]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier tokenHolder
               Type: address
               Source: "tokenHolder"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n          \r\n            accountIndex[accountCount] = tokenHolder;\r\n            accountCount++;\r\n        }"
          ExpressionStatement
             Gas costs: 20551
             Source: "accountIndex[accountCount] = tokenHolder"
            Assignment using operator =
               Type: address
               Source: "accountIndex[accountCount] = tokenHolder"
              IndexAccess
                 Type: address
                 Source: "accountIndex[accountCount]"
                Identifier accountIndex
                   Type: mapping(uint256 => address)
                   Source: "accountIndex"
                Identifier accountCount
                   Type: uint256
                   Source: "accountCount"
              Identifier tokenHolder
                 Type: address
                 Source: "tokenHolder"
          ExpressionStatement
             Gas costs: 20237
             Source: "accountCount++"
            UnaryOperation (postfix) ++
               Type: uint256
               Source: "accountCount++"
              Identifier accountCount
                 Type: uint256
                 Source: "accountCount"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) returns(bool ok) {\r\n        if (_to == 0x0) throw; \r\n        if (balanceOf[msg.sender] < _value) throw; \r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;\r\n        \r\n        appendTokenHolders(_to);\r\n        balanceOf[msg.sender] -= _value; \r\n        balanceOf[_to] += _value; \r\n        Transfer(msg.sender, _to, _value); \r\n    \r\n        \r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool ok)"
      VariableDeclaration "ok"
         Type: bool
         Source: "bool ok"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        if (_to == 0x0) throw; \r\n        if (balanceOf[msg.sender] < _value) throw; \r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;\r\n        \r\n        appendTokenHolders(_to);\r\n        balanceOf[msg.sender] -= _value; \r\n        balanceOf[_to] += _value; \r\n        Transfer(msg.sender, _to, _value); \r\n    \r\n        \r\n        return true;\r\n    }"
      IfStatement
         Source: "if (_to == 0x0) throw"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 15
           Source: "_to == 0x0"
          Identifier _to
             Type: address
             Source: "_to"
          Literal, token: [no token] value: 0x0
             Type: int_const 0
             Source: "0x0"
        Throw
           Gas costs: 6
           Source: "throw"
      IfStatement
         Source: "if (balanceOf[msg.sender] < _value) throw"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 304
           Source: "balanceOf[msg.sender] < _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[msg.sender]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
        Throw
           Gas costs: 6
           Source: "throw"
      IfStatement
         Source: "if (balanceOf[_to] + _value < balanceOf[_to]) throw"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 601
           Source: "balanceOf[_to] + _value < balanceOf[_to]"
          BinaryOperation using operator +
             Type: uint256
             Source: "balanceOf[_to] + _value"
            IndexAccess
               Type: uint256
               Source: "balanceOf[_to]"
              Identifier balanceOf
                 Type: mapping(address => uint256)
                 Source: "balanceOf"
              Identifier _to
                 Type: address
                 Source: "_to"
            Identifier _value
               Type: uint256
               Source: "_value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[_to]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier _to
               Type: address
               Source: "_to"
        Throw
           Gas costs: 6
           Source: "throw"
      ExpressionStatement
         Gas costs: 18
         Source: "appendTokenHolders(_to)"
        FunctionCall
           Type: tuple()
           Source: "appendTokenHolders(_to)"
          Identifier appendTokenHolders
             Type: function (address)
             Source: "appendTokenHolders"
          Identifier _to
             Type: address
             Source: "_to"
      ExpressionStatement
         Gas costs: 20328
         Source: "balanceOf[msg.sender] -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "balanceOf[msg.sender] -= _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[msg.sender]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 20323
         Source: "balanceOf[_to] += _value"
        Assignment using operator +=
           Type: uint256
           Source: "balanceOf[_to] += _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[_to]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier _to
               Type: address
               Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: [???]
         Source: "Transfer(msg.sender, _to, _value)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(msg.sender, _to, _value)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint256 _value)\r\n    returns(bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval( msg.sender ,_spender, _value);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval( msg.sender ,_spender, _value);\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 20199
         Source: "allowance[msg.sender][_spender] = _value"
        Assignment using operator =
           Type: uint256
           Source: "allowance[msg.sender][_spender] = _value"
          IndexAccess
             Type: uint256
             Source: "allowance[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowance[msg.sender]"
              Identifier allowance
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowance"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: [???]
         Source: "Approval( msg.sender ,_spender, _value)"
        FunctionCall
           Type: tuple()
           Source: "Approval( msg.sender ,_spender, _value)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "approveAndCall" - public
     Source: "function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n    returns(bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint256 _value, bytes _extraData)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_extraData"
         Type: bytes memory
         Source: "bytes _extraData"
        ElementaryTypeName bytes
           Source: "bytes"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }"
      VariableDeclarationStatement
         Gas costs: 11
         Source: "tokenRecipient spender = tokenRecipient(_spender)"
        VariableDeclaration "spender"
           Type: contract tokenRecipient
           Source: "tokenRecipient spender"
          UserDefinedTypeName "tokenRecipient"
             Source: "tokenRecipient"
        FunctionCall
           Type: contract tokenRecipient
           Source: "tokenRecipient(_spender)"
          Identifier tokenRecipient
             Type: type(contract tokenRecipient)
             Source: "tokenRecipient"
          Identifier _spender
             Type: address
             Source: "_spender"
      IfStatement
         Source: "if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }"
        FunctionCall
           Type: bool
           Gas costs: 21
           Source: "approve(_spender, _value)"
          Identifier approve
             Type: function (address,uint256) returns (bool)
             Source: "approve"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
        Block
           Source: "{\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }"
          ExpressionStatement
             Gas costs: [???]
             Source: "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            FunctionCall
               Type: tuple()
               Source: "spender.receiveApproval(msg.sender, _value, this, _extraData)"
              MemberAccess to member receiveApproval
                 Type: function (address,uint256,address,bytes memory) external
                 Source: "spender.receiveApproval"
                Identifier spender
                   Type: contract tokenRecipient
                   Source: "spender"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
              Identifier this
                 Type: contract Maccabi
                 Source: "this"
              Identifier _extraData
                 Type: bytes memory
                 Source: "_extraData"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\r\n        return allowance[_owner][_spender];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint256 remaining"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return allowance[_owner][_spender];\r\n    }"
      Return
         Gas costs: 394
         Source: "return allowance[_owner][_spender]"
        IndexAccess
           Type: uint256
           Source: "allowance[_owner][_spender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowance[_owner]"
            Identifier allowance
               Type: mapping(address => mapping(address => uint256))
               Source: "allowance"
            Identifier _owner
               Type: address
               Source: "_owner"
          Identifier _spender
             Type: address
             Source: "_spender"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {\r\n        if (_to == 0x0) throw;  \r\n        if (balanceOf[_from] < _value) throw;  \r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  \r\n        if (_value > allowance[_from][msg.sender]) throw; \r\n        appendTokenHolders(_to);\r\n        balanceOf[_from] -= _value; \r\n        balanceOf[_to] += _value; \r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n       \r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        if (_to == 0x0) throw;  \r\n        if (balanceOf[_from] < _value) throw;  \r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  \r\n        if (_value > allowance[_from][msg.sender]) throw; \r\n        appendTokenHolders(_to);\r\n        balanceOf[_from] -= _value; \r\n        balanceOf[_to] += _value; \r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n       \r\n        return true;\r\n    }"
      IfStatement
         Source: "if (_to == 0x0) throw"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 15
           Source: "_to == 0x0"
          Identifier _to
             Type: address
             Source: "_to"
          Literal, token: [no token] value: 0x0
             Type: int_const 0
             Source: "0x0"
        Throw
           Gas costs: 6
           Source: "throw"
      IfStatement
         Source: "if (balanceOf[_from] < _value) throw"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 305
           Source: "balanceOf[_from] < _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[_from]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier _from
               Type: address
               Source: "_from"
          Identifier _value
             Type: uint256
             Source: "_value"
        Throw
           Gas costs: 6
           Source: "throw"
      IfStatement
         Source: "if (balanceOf[_to] + _value < balanceOf[_to]) throw"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 601
           Source: "balanceOf[_to] + _value < balanceOf[_to]"
          BinaryOperation using operator +
             Type: uint256
             Source: "balanceOf[_to] + _value"
            IndexAccess
               Type: uint256
               Source: "balanceOf[_to]"
              Identifier balanceOf
                 Type: mapping(address => uint256)
                 Source: "balanceOf"
              Identifier _to
                 Type: address
                 Source: "_to"
            Identifier _value
               Type: uint256
               Source: "_value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[_to]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier _to
               Type: address
               Source: "_to"
        Throw
           Gas costs: 6
           Source: "throw"
      IfStatement
         Source: "if (_value > allowance[_from][msg.sender]) throw"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 394
           Source: "_value > allowance[_from][msg.sender]"
          Identifier _value
             Type: uint256
             Source: "_value"
          IndexAccess
             Type: uint256
             Source: "allowance[_from][msg.sender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowance[_from]"
              Identifier allowance
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowance"
              Identifier _from
                 Type: address
                 Source: "_from"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
        Throw
           Gas costs: 6
           Source: "throw"
      ExpressionStatement
         Gas costs: 7
         Source: "appendTokenHolders(_to)"
        FunctionCall
           Type: tuple()
           Source: "appendTokenHolders(_to)"
          Identifier appendTokenHolders
             Type: function (address)
             Source: "appendTokenHolders"
          Identifier _to
             Type: address
             Source: "_to"
      ExpressionStatement
         Gas costs: 20329
         Source: "balanceOf[_from] -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "balanceOf[_from] -= _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[_from]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier _from
               Type: address
               Source: "_from"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 20323
         Source: "balanceOf[_to] += _value"
        Assignment using operator +=
           Type: uint256
           Source: "balanceOf[_to] += _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[_to]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier _to
               Type: address
               Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 20412
         Source: "allowance[_from][msg.sender] -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "allowance[_from][msg.sender] -= _value"
          IndexAccess
             Type: uint256
             Source: "allowance[_from][msg.sender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowance[_from]"
              Identifier allowance
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowance"
              Identifier _from
                 Type: address
                 Source: "_from"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: [???]
         Source: "Transfer(_from, _to, _value)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(_from, _to, _value)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "burn" - public
     Source: "function burn(uint256 _value) returns(bool success) {\r\n        if (balanceOf[msg.sender] < _value) throw; \r\n        if( totalSupply -  _value < 2100000000000000) throw;\r\n        balanceOf[msg.sender] -= _value; \r\n        totalSupply -= _value; \r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _value)"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        if (balanceOf[msg.sender] < _value) throw; \r\n        if( totalSupply -  _value < 2100000000000000) throw;\r\n        balanceOf[msg.sender] -= _value; \r\n        totalSupply -= _value; \r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }"
      IfStatement
         Source: "if (balanceOf[msg.sender] < _value) throw"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 304
           Source: "balanceOf[msg.sender] < _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[msg.sender]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
        Throw
           Gas costs: 6
           Source: "throw"
      IfStatement
         Source: "if( totalSupply -  _value < 2100000000000000) throw"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 215
           Source: "totalSupply -  _value < 2100000000000000"
          BinaryOperation using operator -
             Type: uint256
             Source: "totalSupply -  _value"
            Identifier totalSupply
               Type: uint256
               Source: "totalSupply"
            Identifier _value
               Type: uint256
               Source: "_value"
          Literal, token: [no token] value: 2100000000000000
             Type: int_const 2100000000000000
             Source: "2100000000000000"
        Throw
           Gas costs: 6
           Source: "throw"
      ExpressionStatement
         Gas costs: 20328
         Source: "balanceOf[msg.sender] -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "balanceOf[msg.sender] -= _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[msg.sender]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 20233
         Source: "totalSupply -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "totalSupply -= _value"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: [???]
         Source: "Burn(msg.sender, _value)"
        FunctionCall
           Type: tuple()
           Source: "Burn(msg.sender, _value)"
          Identifier Burn
             Type: function (address,uint256)
             Source: "Burn"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "burnFrom" - public
     Source: "function burnFrom(address _from, uint256 _value) returns(bool success) {\r\n    \r\n        if (balanceOf[_from] < _value) throw; \r\n        if (_value > allowance[_from][msg.sender]) throw; \r\n        balanceOf[_from] -= _value; \r\n        totalSupply -= _value; \r\n        Burn(_from, _value);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n    \r\n        if (balanceOf[_from] < _value) throw; \r\n        if (_value > allowance[_from][msg.sender]) throw; \r\n        balanceOf[_from] -= _value; \r\n        totalSupply -= _value; \r\n        Burn(_from, _value);\r\n        return true;\r\n    }"
      IfStatement
         Source: "if (balanceOf[_from] < _value) throw"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 305
           Source: "balanceOf[_from] < _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[_from]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier _from
               Type: address
               Source: "_from"
          Identifier _value
             Type: uint256
             Source: "_value"
        Throw
           Gas costs: 6
           Source: "throw"
      IfStatement
         Source: "if (_value > allowance[_from][msg.sender]) throw"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 394
           Source: "_value > allowance[_from][msg.sender]"
          Identifier _value
             Type: uint256
             Source: "_value"
          IndexAccess
             Type: uint256
             Source: "allowance[_from][msg.sender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowance[_from]"
              Identifier allowance
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowance"
              Identifier _from
                 Type: address
                 Source: "_from"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
        Throw
           Gas costs: 6
           Source: "throw"
      ExpressionStatement
         Gas costs: 20329
         Source: "balanceOf[_from] -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "balanceOf[_from] -= _value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[_from]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier _from
               Type: address
               Source: "_from"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 20233
         Source: "totalSupply -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "totalSupply -= _value"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: [???]
         Source: "Burn(_from, _value)"
        FunctionCall
           Type: tuple()
           Source: "Burn(_from, _value)"
          Identifier Burn
             Type: function (address,uint256)
             Source: "Burn"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
