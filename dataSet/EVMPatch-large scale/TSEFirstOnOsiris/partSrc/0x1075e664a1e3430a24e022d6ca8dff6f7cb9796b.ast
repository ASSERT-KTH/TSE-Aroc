Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0x1075e664a1e3430a24e022d6ca8dff6f7cb9796b.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.0;"
ContractDefinition "IconomiToken"
   Source: "contract IconomiToken {\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n  event BlockLockSet(uint256 _value);\r\n  event NewOwner(address _newOwner);\r\n\r\n  modifier onlyOwner {\r\n    if (msg.sender == owner) {\r\n      _;\r\n    }\r\n  }\r\n\r\n  modifier blockLock {\r\n    if (!isLocked() || msg.sender == owner) {\r\n      _;\r\n    }\r\n  }\r\n\r\n  modifier checkIfToContract(address _to) {\r\n    if(_to != address(this))  {\r\n      _;\r\n    }\r\n  }\r\n\r\n  uint256 public totalSupply;\r\n  string public name;\r\n  uint8 public decimals;\r\n  string public symbol;\r\n  string public version = '0.0.1';\r\n  address public owner;\r\n  uint256 public lockedUntilBlock;\r\n\r\n  function IconomiToken(\r\n    uint256 _initialAmount,\r\n    string _tokenName,\r\n    uint8 _decimalUnits,\r\n    string _tokenSymbol,\r\n    uint256 _lockedUntilBlock\r\n    ) {\r\n    balances[msg.sender] = _initialAmount;\r\n    totalSupply = _initialAmount;\r\n    name = _tokenName;\r\n    decimals = _decimalUnits;\r\n    symbol = _tokenSymbol;\r\n    lockedUntilBlock = _lockedUntilBlock;\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /* Approves and then calls the receiving contract */\r\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n\r\n    //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\r\n    //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\r\n    //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\r\n    if(!_spender.call(bytes4(sha3(\"receiveApproval(address,uint256,address,bytes)\")), msg.sender, _value, this, _extraData)) { throw; }\r\n    return true;\r\n\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) blockLock checkIfToContract(_to) returns (bool success) {\r\n\r\n    if (balances[msg.sender] >= _value && _value > 0) {\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] += _value;\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) blockLock checkIfToContract(_to) returns (bool success) {\r\n\r\n    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n      balances[_to] += _value;\r\n      balances[_from] -= _value;\r\n      allowed[_from][msg.sender] -= _value;\r\n      Transfer(_from, _to, _value);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) returns (bool success) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  function setBlockLock(uint256 _lockedUntilBlock) onlyOwner returns (bool success) {\r\n    lockedUntilBlock = _lockedUntilBlock;\r\n    BlockLockSet(_lockedUntilBlock);\r\n    return true;\r\n  }\r\n\r\n  function isLocked() constant returns (bool success) {\r\n    return lockedUntilBlock > block.number;\r\n  }\r\n\r\n  function replaceOwner(address _newOwner) onlyOwner returns (bool success) {\r\n    owner = _newOwner;\r\n    NewOwner(_newOwner);\r\n    return true;\r\n  }\r\n\r\n  mapping (address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n}"
  EventDefinition "Transfer"
     Gas costs: 0
     Source: "event Transfer(address indexed _from, address indexed _to, uint256 _value);"
    ParameterList
       Source: "(address indexed _from, address indexed _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address indexed _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address indexed _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Approval"
     Gas costs: 0
     Source: "event Approval(address indexed _owner, address indexed _spender, uint256 _value);"
    ParameterList
       Source: "(address indexed _owner, address indexed _spender, uint256 _value)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address indexed _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address indexed _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "BlockLockSet"
     Gas costs: 0
     Source: "event BlockLockSet(uint256 _value);"
    ParameterList
       Source: "(uint256 _value)"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "NewOwner"
     Gas costs: 0
     Source: "event NewOwner(address _newOwner);"
    ParameterList
       Source: "(address _newOwner)"
      VariableDeclaration "_newOwner"
         Type: address
         Source: "address _newOwner"
        ElementaryTypeName address
           Source: "address"
  ModifierDefinition "onlyOwner"
     Source: "modifier onlyOwner {\r\n    if (msg.sender == owner) {\r\n      _;\r\n    }\r\n  }"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    if (msg.sender == owner) {\r\n      _;\r\n    }\r\n  }"
      IfStatement
         Source: "if (msg.sender == owner) {\r\n      _;\r\n    }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 768
           Source: "msg.sender == owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier owner
             Type: address
             Source: "owner"
        Block
           Source: "{\r\n      _;\r\n    }"
          PlaceholderStatement
             Gas costs: 0
             Source: "_"
  ModifierDefinition "blockLock"
     Source: "modifier blockLock {\r\n    if (!isLocked() || msg.sender == owner) {\r\n      _;\r\n    }\r\n  }"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    if (!isLocked() || msg.sender == owner) {\r\n      _;\r\n    }\r\n  }"
      IfStatement
         Source: "if (!isLocked() || msg.sender == owner) {\r\n      _;\r\n    }"
        BinaryOperation using operator ||
           Type: bool
           Gas costs: 575
           Source: "!isLocked() || msg.sender == owner"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!isLocked()"
            FunctionCall
               Type: bool
               Source: "isLocked()"
              Identifier isLocked
                 Type: function () view returns (bool)
                 Source: "isLocked"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == owner"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier owner
               Type: address
               Source: "owner"
        Block
           Source: "{\r\n      _;\r\n    }"
          PlaceholderStatement
             Gas costs: 4
             Source: "_"
  ModifierDefinition "checkIfToContract"
     Source: "modifier checkIfToContract(address _to) {\r\n    if(_to != address(this))  {\r\n      _;\r\n    }\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _to)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\r\n    if(_to != address(this))  {\r\n      _;\r\n    }\r\n  }"
      IfStatement
         Source: "if(_to != address(this))  {\r\n      _;\r\n    }"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 46
           Source: "_to != address(this)"
          Identifier _to
             Type: address
             Source: "_to"
          FunctionCall
             Type: address
             Source: "address(this)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Identifier this
               Type: contract IconomiToken
               Source: "this"
        Block
           Source: "{\r\n      _;\r\n    }"
          PlaceholderStatement
             Gas costs: 2
             Source: "_"
  VariableDeclaration "totalSupply"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public totalSupply"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "name"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public name"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "decimals"
     Type: uint8
     Gas costs: [???]
     Source: "uint8 public decimals"
    ElementaryTypeName uint8
       Source: "uint8"
  VariableDeclaration "symbol"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public symbol"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "version"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public version = '0.0.1'"
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: 0.0.1
       Type: literal_string "0.0.1"
       Source: "'0.0.1'"
  VariableDeclaration "owner"
     Type: address
     Gas costs: [???]
     Source: "address public owner"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "lockedUntilBlock"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public lockedUntilBlock"
    ElementaryTypeName uint256
       Source: "uint256"
  FunctionDefinition "IconomiToken" - public
     Source: "function IconomiToken(\r\n    uint256 _initialAmount,\r\n    string _tokenName,\r\n    uint8 _decimalUnits,\r\n    string _tokenSymbol,\r\n    uint256 _lockedUntilBlock\r\n    ) {\r\n    balances[msg.sender] = _initialAmount;\r\n    totalSupply = _initialAmount;\r\n    name = _tokenName;\r\n    decimals = _decimalUnits;\r\n    symbol = _tokenSymbol;\r\n    lockedUntilBlock = _lockedUntilBlock;\r\n    owner = msg.sender;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(\r\n    uint256 _initialAmount,\r\n    string _tokenName,\r\n    uint8 _decimalUnits,\r\n    string _tokenSymbol,\r\n    uint256 _lockedUntilBlock\r\n    )"
      VariableDeclaration "_initialAmount"
         Type: uint256
         Source: "uint256 _initialAmount"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_tokenName"
         Type: string memory
         Source: "string _tokenName"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "_decimalUnits"
         Type: uint8
         Source: "uint8 _decimalUnits"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "_tokenSymbol"
         Type: string memory
         Source: "string _tokenSymbol"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "_lockedUntilBlock"
         Type: uint256
         Source: "uint256 _lockedUntilBlock"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n    balances[msg.sender] = _initialAmount;\r\n    totalSupply = _initialAmount;\r\n    name = _tokenName;\r\n    decimals = _decimalUnits;\r\n    symbol = _tokenSymbol;\r\n    lockedUntilBlock = _lockedUntilBlock;\r\n    owner = msg.sender;\r\n  }"
      ExpressionStatement
         Gas costs: 0
         Source: "balances[msg.sender] = _initialAmount"
        Assignment using operator =
           Type: uint256
           Source: "balances[msg.sender] = _initialAmount"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _initialAmount
             Type: uint256
             Source: "_initialAmount"
      ExpressionStatement
         Gas costs: 0
         Source: "totalSupply = _initialAmount"
        Assignment using operator =
           Type: uint256
           Source: "totalSupply = _initialAmount"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          Identifier _initialAmount
             Type: uint256
             Source: "_initialAmount"
      ExpressionStatement
         Gas costs: 0
         Source: "name = _tokenName"
        Assignment using operator =
           Type: string storage ref
           Source: "name = _tokenName"
          Identifier name
             Type: string storage ref
             Source: "name"
          Identifier _tokenName
             Type: string memory
             Source: "_tokenName"
      ExpressionStatement
         Gas costs: 0
         Source: "decimals = _decimalUnits"
        Assignment using operator =
           Type: uint8
           Source: "decimals = _decimalUnits"
          Identifier decimals
             Type: uint8
             Source: "decimals"
          Identifier _decimalUnits
             Type: uint8
             Source: "_decimalUnits"
      ExpressionStatement
         Gas costs: 0
         Source: "symbol = _tokenSymbol"
        Assignment using operator =
           Type: string storage ref
           Source: "symbol = _tokenSymbol"
          Identifier symbol
             Type: string storage ref
             Source: "symbol"
          Identifier _tokenSymbol
             Type: string memory
             Source: "_tokenSymbol"
      ExpressionStatement
         Gas costs: 0
         Source: "lockedUntilBlock = _lockedUntilBlock"
        Assignment using operator =
           Type: uint256
           Source: "lockedUntilBlock = _lockedUntilBlock"
          Identifier lockedUntilBlock
             Type: uint256
             Source: "lockedUntilBlock"
          Identifier _lockedUntilBlock
             Type: uint256
             Source: "_lockedUntilBlock"
      ExpressionStatement
         Gas costs: 0
         Source: "owner = msg.sender"
        Assignment using operator =
           Type: address
           Source: "owner = msg.sender"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "approveAndCall" - public
     Source: "function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n\r\n    //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\r\n    //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\r\n    //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\r\n    if(!_spender.call(bytes4(sha3(\"receiveApproval(address,uint256,address,bytes)\")), msg.sender, _value, this, _extraData)) { throw; }\r\n    return true;\r\n\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint256 _value, bytes _extraData)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_extraData"
         Type: bytes memory
         Source: "bytes _extraData"
        ElementaryTypeName bytes
           Source: "bytes"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n\r\n    //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\r\n    //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\r\n    //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\r\n    if(!_spender.call(bytes4(sha3(\"receiveApproval(address,uint256,address,bytes)\")), msg.sender, _value, this, _extraData)) { throw; }\r\n    return true;\r\n\r\n  }"
      ExpressionStatement
         Gas costs: 20199
         Source: "allowed[msg.sender][_spender] = _value"
        Assignment using operator =
           Type: uint256
           Source: "allowed[msg.sender][_spender] = _value"
          IndexAccess
             Type: uint256
             Source: "allowed[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[msg.sender]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: [???]
         Source: "Approval(msg.sender, _spender, _value)"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender, _spender, _value)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      IfStatement
         Source: "if(!_spender.call(bytes4(sha3(\"receiveApproval(address,uint256,address,bytes)\")), msg.sender, _value, this, _extraData)) { throw; }"
        UnaryOperation (prefix) !
           Type: bool
           Gas costs: [???]
           Source: "!_spender.call(bytes4(sha3(\"receiveApproval(address,uint256,address,bytes)\")), msg.sender, _value, this, _extraData)"
          FunctionCall
             Type: bool
             Source: "_spender.call(bytes4(sha3(\"receiveApproval(address,uint256,address,bytes)\")), msg.sender, _value, this, _extraData)"
            MemberAccess to member call
               Type: function () payable returns (bool)
               Source: "_spender.call"
              Identifier _spender
                 Type: address
                 Source: "_spender"
            FunctionCall
               Type: bytes4
               Source: "bytes4(sha3(\"receiveApproval(address,uint256,address,bytes)\"))"
              ElementaryTypeNameExpression bytes4
                 Type: type(bytes4)
                 Source: "bytes4"
              FunctionCall
                 Type: bytes32
                 Source: "sha3(\"receiveApproval(address,uint256,address,bytes)\")"
                Identifier sha3
                   Type: function () pure returns (bytes32)
                   Source: "sha3"
                Literal, token: [no token] value: receiveApproval(address,uint256,address,bytes)
                   Type: literal_string "receiveApproval(address,uint256,address,bytes)"
                   Source: "\"receiveApproval(address,uint256,address,bytes)\""
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
            Identifier this
               Type: contract IconomiToken
               Source: "this"
            Identifier _extraData
               Type: bytes memory
               Source: "_extraData"
        Block
           Source: "{ throw; }"
          Throw
             Gas costs: 6
             Source: "throw"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) blockLock checkIfToContract(_to) returns (bool success) {\r\n\r\n    if (balances[msg.sender] >= _value && _value > 0) {\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] += _value;\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "blockLock"
       Gas costs: 0
       Source: "blockLock"
      Identifier blockLock
         Type: modifier ()
         Source: "blockLock"
    ModifierInvocation "checkIfToContract"
       Gas costs: 3
       Source: "checkIfToContract(_to)"
      Identifier checkIfToContract
         Type: modifier (address)
         Source: "checkIfToContract"
      Identifier _to
         Type: address
         Source: "_to"
    Block
       Source: "{\r\n\r\n    if (balances[msg.sender] >= _value && _value > 0) {\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] += _value;\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n\r\n  }"
      IfStatement
         Source: "if (balances[msg.sender] >= _value && _value > 0) {\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] += _value;\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 338
           Source: "balances[msg.sender] >= _value && _value > 0"
          BinaryOperation using operator >=
             Type: bool
             Source: "balances[msg.sender] >= _value"
            IndexAccess
               Type: uint256
               Source: "balances[msg.sender]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
          BinaryOperation using operator >
             Type: bool
             Source: "_value > 0"
            Identifier _value
               Type: uint256
               Source: "_value"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
        Block
           Source: "{\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] += _value;\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    }"
          ExpressionStatement
             Gas costs: 20328
             Source: "balances[msg.sender] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "balances[msg.sender] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20323
             Source: "balances[_to] += _value"
            Assignment using operator +=
               Type: uint256
               Source: "balances[_to] += _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: [???]
             Source: "Transfer(msg.sender, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(msg.sender, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{\r\n      return false;\r\n    }"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _value) blockLock checkIfToContract(_to) returns (bool success) {\r\n\r\n    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n      balances[_to] += _value;\r\n      balances[_from] -= _value;\r\n      allowed[_from][msg.sender] -= _value;\r\n      Transfer(_from, _to, _value);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "blockLock"
       Gas costs: 0
       Source: "blockLock"
      Identifier blockLock
         Type: modifier ()
         Source: "blockLock"
    ModifierInvocation "checkIfToContract"
       Gas costs: 3
       Source: "checkIfToContract(_to)"
      Identifier checkIfToContract
         Type: modifier (address)
         Source: "checkIfToContract"
      Identifier _to
         Type: address
         Source: "_to"
    Block
       Source: "{\r\n\r\n    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n      balances[_to] += _value;\r\n      balances[_from] -= _value;\r\n      allowed[_from][msg.sender] -= _value;\r\n      Transfer(_from, _to, _value);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n\r\n  }"
      IfStatement
         Source: "if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n      balances[_to] += _value;\r\n      balances[_from] -= _value;\r\n      allowed[_from][msg.sender] -= _value;\r\n      Transfer(_from, _to, _value);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 758
           Source: "balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0"
          BinaryOperation using operator &&
             Type: bool
             Source: "balances[_from] >= _value && allowed[_from][msg.sender] >= _value"
            BinaryOperation using operator >=
               Type: bool
               Source: "balances[_from] >= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_from]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _from
                   Type: address
                   Source: "_from"
              Identifier _value
                 Type: uint256
                 Source: "_value"
            BinaryOperation using operator >=
               Type: bool
               Source: "allowed[_from][msg.sender] >= _value"
              IndexAccess
                 Type: uint256
                 Source: "allowed[_from][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[_from]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  Identifier _from
                     Type: address
                     Source: "_from"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          BinaryOperation using operator >
             Type: bool
             Source: "_value > 0"
            Identifier _value
               Type: uint256
               Source: "_value"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
        Block
           Source: "{\r\n      balances[_to] += _value;\r\n      balances[_from] -= _value;\r\n      allowed[_from][msg.sender] -= _value;\r\n      Transfer(_from, _to, _value);\r\n      return true;\r\n    }"
          ExpressionStatement
             Gas costs: 20329
             Source: "balances[_to] += _value"
            Assignment using operator +=
               Type: uint256
               Source: "balances[_to] += _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20323
             Source: "balances[_from] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "balances[_from] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_from]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _from
                   Type: address
                   Source: "_from"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20412
             Source: "allowed[_from][msg.sender] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "allowed[_from][msg.sender] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "allowed[_from][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[_from]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  Identifier _from
                     Type: address
                     Source: "_from"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: [???]
             Source: "Transfer(_from, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(_from, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              Identifier _from
                 Type: address
                 Source: "_from"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{\r\n      return false;\r\n    }"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    return balances[_owner];\r\n  }"
      Return
         Gas costs: 304
         Source: "return balances[_owner]"
        IndexAccess
           Type: uint256
           Source: "balances[_owner]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          Identifier _owner
             Type: address
             Source: "_owner"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint256 _value) returns (bool success) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }"
      ExpressionStatement
         Gas costs: 20199
         Source: "allowed[msg.sender][_spender] = _value"
        Assignment using operator =
           Type: uint256
           Source: "allowed[msg.sender][_spender] = _value"
          IndexAccess
             Type: uint256
             Source: "allowed[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[msg.sender]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: [???]
         Source: "Approval(msg.sender, _spender, _value)"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender, _spender, _value)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint256 remaining"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    return allowed[_owner][_spender];\r\n  }"
      Return
         Gas costs: 394
         Source: "return allowed[_owner][_spender]"
        IndexAccess
           Type: uint256
           Source: "allowed[_owner][_spender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowed[_owner]"
            Identifier allowed
               Type: mapping(address => mapping(address => uint256))
               Source: "allowed"
            Identifier _owner
               Type: address
               Source: "_owner"
          Identifier _spender
             Type: address
             Source: "_spender"
  FunctionDefinition "setBlockLock" - public
     Source: "function setBlockLock(uint256 _lockedUntilBlock) onlyOwner returns (bool success) {\r\n    lockedUntilBlock = _lockedUntilBlock;\r\n    BlockLockSet(_lockedUntilBlock);\r\n    return true;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _lockedUntilBlock)"
      VariableDeclaration "_lockedUntilBlock"
         Type: uint256
         Source: "uint256 _lockedUntilBlock"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n    lockedUntilBlock = _lockedUntilBlock;\r\n    BlockLockSet(_lockedUntilBlock);\r\n    return true;\r\n  }"
      ExpressionStatement
         Gas costs: 20014
         Source: "lockedUntilBlock = _lockedUntilBlock"
        Assignment using operator =
           Type: uint256
           Source: "lockedUntilBlock = _lockedUntilBlock"
          Identifier lockedUntilBlock
             Type: uint256
             Source: "lockedUntilBlock"
          Identifier _lockedUntilBlock
             Type: uint256
             Source: "_lockedUntilBlock"
      ExpressionStatement
         Gas costs: [???]
         Source: "BlockLockSet(_lockedUntilBlock)"
        FunctionCall
           Type: tuple()
           Source: "BlockLockSet(_lockedUntilBlock)"
          Identifier BlockLockSet
             Type: function (uint256)
             Source: "BlockLockSet"
          Identifier _lockedUntilBlock
             Type: uint256
             Source: "_lockedUntilBlock"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "isLocked" - public - const
     Source: "function isLocked() constant returns (bool success) {\r\n    return lockedUntilBlock > block.number;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n    return lockedUntilBlock > block.number;\r\n  }"
      Return
         Gas costs: 213
         Source: "return lockedUntilBlock > block.number"
        BinaryOperation using operator >
           Type: bool
           Source: "lockedUntilBlock > block.number"
          Identifier lockedUntilBlock
             Type: uint256
             Source: "lockedUntilBlock"
          MemberAccess to member number
             Type: uint256
             Source: "block.number"
            Identifier block
               Type: block
               Source: "block"
  FunctionDefinition "replaceOwner" - public
     Source: "function replaceOwner(address _newOwner) onlyOwner returns (bool success) {\r\n    owner = _newOwner;\r\n    NewOwner(_newOwner);\r\n    return true;\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _newOwner)"
      VariableDeclaration "_newOwner"
         Type: address
         Source: "address _newOwner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n    owner = _newOwner;\r\n    NewOwner(_newOwner);\r\n    return true;\r\n  }"
      ExpressionStatement
         Gas costs: 20267
         Source: "owner = _newOwner"
        Assignment using operator =
           Type: address
           Source: "owner = _newOwner"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier _newOwner
             Type: address
             Source: "_newOwner"
      ExpressionStatement
         Gas costs: [???]
         Source: "NewOwner(_newOwner)"
        FunctionCall
           Type: tuple()
           Source: "NewOwner(_newOwner)"
          Identifier NewOwner
             Type: function (address)
             Source: "NewOwner"
          Identifier _newOwner
             Type: address
             Source: "_newOwner"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping (address => uint256) balances"
    Mapping
       Source: "mapping (address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "allowed"
     Type: mapping(address => mapping(address => uint256))
     Gas costs: 0
     Source: "mapping (address => mapping (address => uint256)) allowed"
    Mapping
       Source: "mapping (address => mapping (address => uint256))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping (address => uint256)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint256
           Source: "uint256"
ContractDefinition "IconomiTokenTest"
   Source: "contract IconomiTokenTest is IconomiToken {\r\n  function IconomiTokenTest(\r\n    uint256 _initialAmount,\r\n    string _tokenName,\r\n    uint8 _decimalUnits,\r\n    string _tokenSymbol,\r\n    uint256 _lockedUntilBlock\r\n    ) IconomiToken(_initialAmount, _tokenName, _decimalUnits, _tokenSymbol, _lockedUntilBlock) {\r\n  }\r\n\r\n  function destruct() onlyOwner {\r\n    selfdestruct(owner);\r\n  }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "IconomiToken"
    UserDefinedTypeName "IconomiToken"
       Source: "IconomiToken"
  FunctionDefinition "IconomiTokenTest" - public
     Source: "function IconomiTokenTest(\r\n    uint256 _initialAmount,\r\n    string _tokenName,\r\n    uint8 _decimalUnits,\r\n    string _tokenSymbol,\r\n    uint256 _lockedUntilBlock\r\n    ) IconomiToken(_initialAmount, _tokenName, _decimalUnits, _tokenSymbol, _lockedUntilBlock) {\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "(\r\n    uint256 _initialAmount,\r\n    string _tokenName,\r\n    uint8 _decimalUnits,\r\n    string _tokenSymbol,\r\n    uint256 _lockedUntilBlock\r\n    )"
      VariableDeclaration "_initialAmount"
         Type: uint256
         Source: "uint256 _initialAmount"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_tokenName"
         Type: string memory
         Source: "string _tokenName"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "_decimalUnits"
         Type: uint8
         Source: "uint8 _decimalUnits"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "_tokenSymbol"
         Type: string memory
         Source: "string _tokenSymbol"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "_lockedUntilBlock"
         Type: uint256
         Source: "uint256 _lockedUntilBlock"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "IconomiToken"
       Gas costs: 0
       Source: "IconomiToken(_initialAmount, _tokenName, _decimalUnits, _tokenSymbol, _lockedUntilBlock)"
      Identifier IconomiToken
         Type: type(contract IconomiToken)
         Source: "IconomiToken"
      Identifier _initialAmount
         Type: uint256
         Source: "_initialAmount"
      Identifier _tokenName
         Type: string memory
         Source: "_tokenName"
      Identifier _decimalUnits
         Type: uint8
         Source: "_decimalUnits"
      Identifier _tokenSymbol
         Type: string memory
         Source: "_tokenSymbol"
      Identifier _lockedUntilBlock
         Type: uint256
         Source: "_lockedUntilBlock"
    Block
       Gas costs: 0
       Source: "{\r\n  }"
  FunctionDefinition "destruct" - public
     Source: "function destruct() onlyOwner {\r\n    selfdestruct(owner);\r\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n    selfdestruct(owner);\r\n  }"
      ExpressionStatement
         Gas costs: 30245
         Source: "selfdestruct(owner)"
        FunctionCall
           Type: tuple()
           Source: "selfdestruct(owner)"
          Identifier selfdestruct
             Type: function (address)
             Source: "selfdestruct"
          Identifier owner
             Type: address
             Source: "owner"
