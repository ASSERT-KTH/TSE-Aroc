Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0x31c9c1e892b916fee242ec35fcb2220abfea3be9.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.8;"
ContractDefinition "Owned"
   Source: "contract Owned {\r\n\r\n    address owner;\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function changeOwner(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender==owner) _;\r\n    }\r\n}"
  VariableDeclaration "owner"
     Type: address
     Gas costs: 0
     Source: "address owner"
    ElementaryTypeName address
       Source: "address"
  FunctionDefinition "Owned" - public
     Source: "function Owned() {\r\n        owner = msg.sender;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        owner = msg.sender;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "owner = msg.sender"
        Assignment using operator =
           Type: address
           Source: "owner = msg.sender"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "changeOwner" - public
     Source: "function changeOwner(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address newOwner)"
      VariableDeclaration "newOwner"
         Type: address
         Source: "address newOwner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        owner = newOwner;\r\n    }"
      ExpressionStatement
         Gas costs: 20267
         Source: "owner = newOwner"
        Assignment using operator =
           Type: address
           Source: "owner = newOwner"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier newOwner
             Type: address
             Source: "newOwner"
  ModifierDefinition "onlyOwner"
     Source: "modifier onlyOwner() {\r\n        if (msg.sender==owner) _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\r\n        if (msg.sender==owner) _;\r\n    }"
      IfStatement
         Source: "if (msg.sender==owner) _"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 2304
           Source: "msg.sender==owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier owner
             Type: address
             Source: "owner"
        PlaceholderStatement
           Gas costs: 2
           Source: "_"
ContractDefinition "Token"
   Gas costs: 287
   Source: "contract Token is Owned {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Err(uint256 _value);\r\n}"
  InheritanceSpecifier
     Source: "Owned"
    UserDefinedTypeName "Owned"
       Source: "Owned"
  VariableDeclaration "totalSupply"
     Type: uint256
     Source: "uint256 public totalSupply"
    ElementaryTypeName uint256
       Source: "uint256"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) constant returns (uint256 balance);"
    ParameterList
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256 balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) returns (bool success);"
    ParameterList
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _value) returns (bool success);"
    ParameterList
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint256 _value) returns (bool success);"
    ParameterList
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) constant returns (uint256 remaining);"
    ParameterList
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256 remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint256 remaining"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Transfer"
     Source: "event Transfer(address indexed _from, address indexed _to, uint256 _value);"
    ParameterList
       Source: "(address indexed _from, address indexed _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address indexed _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address indexed _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Approval"
     Source: "event Approval(address indexed _owner, address indexed _spender, uint256 _value);"
    ParameterList
       Source: "(address indexed _owner, address indexed _spender, uint256 _value)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address indexed _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address indexed _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Err"
     Source: "event Err(uint256 _value);"
    ParameterList
       Source: "(uint256 _value)"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
ContractDefinition "ERC20Token"
   Source: "contract ERC20Token is Token {\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Token"
    UserDefinedTypeName "Token"
       Source: "Token"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _value) returns (bool success) {\r\n\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }"
      IfStatement
         Source: "if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 930
           Source: "balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]"
          BinaryOperation using operator >=
             Type: bool
             Source: "balances[msg.sender] >= _value"
            IndexAccess
               Type: uint256
               Source: "balances[msg.sender]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
          BinaryOperation using operator >
             Type: bool
             Source: "balances[_to] + _value > balances[_to]"
            BinaryOperation using operator +
               Type: uint256
               Source: "balances[_to] + _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
            IndexAccess
               Type: uint256
               Source: "balances[_to]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _to
                 Type: address
                 Source: "_to"
        Block
           Source: "{\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }"
          ExpressionStatement
             Gas costs: 20328
             Source: "balances[msg.sender] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "balances[msg.sender] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20323
             Source: "balances[_to] += _value"
            Assignment using operator +=
               Type: uint256
               Source: "balances[_to] += _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 1837
             Source: "Transfer(msg.sender, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(msg.sender, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{ return false; }"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }"
      IfStatement
         Source: "if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 1350
           Source: "balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]"
          BinaryOperation using operator &&
             Type: bool
             Source: "balances[_from] >= _value && allowed[_from][msg.sender] >= _value"
            BinaryOperation using operator >=
               Type: bool
               Source: "balances[_from] >= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_from]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _from
                   Type: address
                   Source: "_from"
              Identifier _value
                 Type: uint256
                 Source: "_value"
            BinaryOperation using operator >=
               Type: bool
               Source: "allowed[_from][msg.sender] >= _value"
              IndexAccess
                 Type: uint256
                 Source: "allowed[_from][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[_from]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  Identifier _from
                     Type: address
                     Source: "_from"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          BinaryOperation using operator >
             Type: bool
             Source: "balances[_to] + _value > balances[_to]"
            BinaryOperation using operator +
               Type: uint256
               Source: "balances[_to] + _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
            IndexAccess
               Type: uint256
               Source: "balances[_to]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _to
                 Type: address
                 Source: "_to"
        Block
           Source: "{\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }"
          ExpressionStatement
             Gas costs: 20329
             Source: "balances[_to] += _value"
            Assignment using operator +=
               Type: uint256
               Source: "balances[_to] += _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20323
             Source: "balances[_from] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "balances[_from] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_from]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _from
                   Type: address
                   Source: "_from"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 20412
             Source: "allowed[_from][msg.sender] -= _value"
            Assignment using operator -=
               Type: uint256
               Source: "allowed[_from][msg.sender] -= _value"
              IndexAccess
                 Type: uint256
                 Source: "allowed[_from][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowed[_from]"
                  Identifier allowed
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowed"
                  Identifier _from
                     Type: address
                     Source: "_from"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          ExpressionStatement
             Gas costs: 1838
             Source: "Transfer(_from, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(_from, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              Identifier _from
                 Type: address
                 Source: "_from"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
        Block
           Source: "{ return false; }"
          Return
             Gas costs: 8
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return balances[_owner];\r\n    }"
      Return
         Gas costs: 304
         Source: "return balances[_owner]"
        IndexAccess
           Type: uint256
           Source: "balances[_owner]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          Identifier _owner
             Type: address
             Source: "_owner"
  FunctionDefinition "approve" - public
     Source: "function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 20199
         Source: "allowed[msg.sender][_spender] = _value"
        Assignment using operator =
           Type: uint256
           Source: "allowed[msg.sender][_spender] = _value"
          IndexAccess
             Type: uint256
             Source: "allowed[msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[msg.sender]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 1837
         Source: "Approval(msg.sender, _spender, _value)"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender, _spender, _value)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint256 remaining"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n        return allowed[_owner][_spender];\r\n    }"
      Return
         Gas costs: 394
         Source: "return allowed[_owner][_spender]"
        IndexAccess
           Type: uint256
           Source: "allowed[_owner][_spender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowed[_owner]"
            Identifier allowed
               Type: mapping(address => mapping(address => uint256))
               Source: "allowed"
            Identifier _owner
               Type: address
               Source: "_owner"
          Identifier _spender
             Type: address
             Source: "_spender"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping (address => uint256) balances"
    Mapping
       Source: "mapping (address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "allowed"
     Type: mapping(address => mapping(address => uint256))
     Gas costs: 0
     Source: "mapping (address => mapping (address => uint256)) allowed"
    Mapping
       Source: "mapping (address => mapping (address => uint256))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping (address => uint256)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint256
           Source: "uint256"
ContractDefinition "RevvaCoin"
   Source: "contract RevvaCoin is ERC20Token {\r\n\r\n    bool public isTokenSale = true;\r\n    uint256 public price;\r\n    uint256 public limit;\r\n\r\n    address walletOut = 0x5eeF56FF0eE166bd0E4C36e55dB04CD87CaA6e9A;\r\n\r\n    function getWalletOut() constant returns (address _to) {\r\n        return walletOut;\r\n    }\r\n\r\n    function () external payable  {\r\n        if (isTokenSale == false) {\r\n            throw;\r\n        }\r\n\r\n        uint256 tokenAmount = (msg.value  * 100000000) / price;\r\n\r\n        if (balances[owner] >= tokenAmount && balances[msg.sender] + tokenAmount > balances[msg.sender]) {\r\n            if (balances[owner] - tokenAmount < limit) {\r\n                throw;\r\n            }\r\n            balances[owner] -= tokenAmount;\r\n            balances[msg.sender] += tokenAmount;\r\n            Transfer(owner, msg.sender, tokenAmount);\r\n        } else {\r\n            throw;\r\n        }\r\n    }\r\n\r\n    function stopSale() onlyOwner {\r\n        isTokenSale = false;\r\n    }\r\n\r\n    function startSale() onlyOwner {\r\n        isTokenSale = true;\r\n    }\r\n\r\n    function setPrice(uint256 newPrice) onlyOwner {\r\n        price = newPrice;\r\n    }\r\n\r\n    function setLimit(uint256 newLimit) onlyOwner {\r\n        limit = newLimit;\r\n    }\r\n\r\n    function setWallet(address _to) onlyOwner {\r\n        walletOut = _to;\r\n    }\r\n\r\n    function sendFund() onlyOwner {\r\n        walletOut.send(this.balance);\r\n    }\r\n\r\n    string public name;\r\n    uint8 public decimals;\r\n    string public symbol;\r\n    string public version = '1.0';\r\n\r\n    function RevvaCoin() {\r\n        totalSupply = 10000000 * 100000000;\r\n        balances[msg.sender] = totalSupply;\r\n        name = 'RevvaCoin';\r\n        decimals = 8;\r\n        symbol = 'REVVA';\r\n        price = 12500000000000000;\r\n        limit = totalSupply - 100000000000000;\r\n    }\r\n\r\n\r\n    /* \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430 \u0441\u0447\u0435\u0442 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 */\r\n    function add(uint256 _value) onlyOwner returns (bool success)\r\n    {\r\n        if (balances[msg.sender] + _value <= balances[msg.sender]) {\r\n            return false;\r\n        }\r\n        totalSupply += _value;\r\n        balances[msg.sender] += _value;\r\n\r\n        return true;\r\n    }\r\n\r\n    /* \u0423\u043d\u0438\u0447\u0442\u043e\u0436\u0430\u0435\u0442 \u0442\u043e\u043a\u0435\u043d\u044b \u043d\u0430 \u0441\u0447\u0435\u0442\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 */\r\n    function burn(uint256 _value) onlyOwner  returns (bool success)\r\n    {\r\n        if (balances[msg.sender] < _value) {\r\n            return false;\r\n        }\r\n        totalSupply -= _value;\r\n        balances[msg.sender] -= _value;\r\n        return true;\r\n    }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "ERC20Token"
    UserDefinedTypeName "ERC20Token"
       Source: "ERC20Token"
  VariableDeclaration "isTokenSale"
     Type: bool
     Gas costs: 335
     Source: "bool public isTokenSale = true"
    ElementaryTypeName bool
       Source: "bool"
    Literal, token: true value: true
       Type: bool
       Source: "true"
  VariableDeclaration "price"
     Type: uint256
     Gas costs: 287
     Source: "uint256 public price"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "limit"
     Type: uint256
     Gas costs: 287
     Source: "uint256 public limit"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "walletOut"
     Type: address
     Gas costs: 0
     Source: "address walletOut = 0x5eeF56FF0eE166bd0E4C36e55dB04CD87CaA6e9A"
    ElementaryTypeName address
       Source: "address"
    Literal, token: [no token] value: 0x5eeF56FF0eE166bd0E4C36e55dB04CD87CaA6e9A
       Type: address
       Source: "0x5eeF56FF0eE166bd0E4C36e55dB04CD87CaA6e9A"
  FunctionDefinition "getWalletOut" - public - const
     Source: "function getWalletOut() constant returns (address _to) {\r\n        return walletOut;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(address _to)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\r\n        return walletOut;\r\n    }"
      Return
         Gas costs: 244
         Source: "return walletOut"
        Identifier walletOut
           Type: address
           Source: "walletOut"
  FunctionDefinition "" - public
     Source: "function () external payable  {\r\n        if (isTokenSale == false) {\r\n            throw;\r\n        }\r\n\r\n        uint256 tokenAmount = (msg.value  * 100000000) / price;\r\n\r\n        if (balances[owner] >= tokenAmount && balances[msg.sender] + tokenAmount > balances[msg.sender]) {\r\n            if (balances[owner] - tokenAmount < limit) {\r\n                throw;\r\n            }\r\n            balances[owner] -= tokenAmount;\r\n            balances[msg.sender] += tokenAmount;\r\n            Transfer(owner, msg.sender, tokenAmount);\r\n        } else {\r\n            throw;\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if (isTokenSale == false) {\r\n            throw;\r\n        }\r\n\r\n        uint256 tokenAmount = (msg.value  * 100000000) / price;\r\n\r\n        if (balances[owner] >= tokenAmount && balances[msg.sender] + tokenAmount > balances[msg.sender]) {\r\n            if (balances[owner] - tokenAmount < limit) {\r\n                throw;\r\n            }\r\n            balances[owner] -= tokenAmount;\r\n            balances[msg.sender] += tokenAmount;\r\n            Transfer(owner, msg.sender, tokenAmount);\r\n        } else {\r\n            throw;\r\n        }\r\n    }"
      IfStatement
         Source: "if (isTokenSale == false) {\r\n            throw;\r\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 257
           Source: "isTokenSale == false"
          Identifier isTokenSale
             Type: bool
             Source: "isTokenSale"
          Literal, token: false value: false
             Type: bool
             Source: "false"
        Block
           Source: "{\r\n            throw;\r\n        }"
          Throw
             Gas costs: 6
             Source: "throw"
      VariableDeclarationStatement
         Gas costs: 249
         Source: "uint256 tokenAmount = (msg.value  * 100000000) / price"
        VariableDeclaration "tokenAmount"
           Type: uint256
           Source: "uint256 tokenAmount"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator /
           Type: uint256
           Source: "(msg.value  * 100000000) / price"
          TupleExpression
             Type: uint256
             Source: "(msg.value  * 100000000)"
            BinaryOperation using operator *
               Type: uint256
               Source: "msg.value  * 100000000"
              MemberAccess to member value
                 Type: uint256
                 Source: "msg.value"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Literal, token: [no token] value: 100000000
                 Type: int_const 100000000
                 Source: "100000000"
          Identifier price
             Type: uint256
             Source: "price"
      IfStatement
         Source: "if (balances[owner] >= tokenAmount && balances[msg.sender] + tokenAmount > balances[msg.sender]) {\r\n            if (balances[owner] - tokenAmount < limit) {\r\n                throw;\r\n            }\r\n            balances[owner] -= tokenAmount;\r\n            balances[msg.sender] += tokenAmount;\r\n            Transfer(owner, msg.sender, tokenAmount);\r\n        } else {\r\n            throw;\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 1165
           Source: "balances[owner] >= tokenAmount && balances[msg.sender] + tokenAmount > balances[msg.sender]"
          BinaryOperation using operator >=
             Type: bool
             Source: "balances[owner] >= tokenAmount"
            IndexAccess
               Type: uint256
               Source: "balances[owner]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier owner
                 Type: address
                 Source: "owner"
            Identifier tokenAmount
               Type: uint256
               Source: "tokenAmount"
          BinaryOperation using operator >
             Type: bool
             Source: "balances[msg.sender] + tokenAmount > balances[msg.sender]"
            BinaryOperation using operator +
               Type: uint256
               Source: "balances[msg.sender] + tokenAmount"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier tokenAmount
                 Type: uint256
                 Source: "tokenAmount"
            IndexAccess
               Type: uint256
               Source: "balances[msg.sender]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
        Block
           Source: "{\r\n            if (balances[owner] - tokenAmount < limit) {\r\n                throw;\r\n            }\r\n            balances[owner] -= tokenAmount;\r\n            balances[msg.sender] += tokenAmount;\r\n            Transfer(owner, msg.sender, tokenAmount);\r\n        }"
          IfStatement
             Source: "if (balances[owner] - tokenAmount < limit) {\r\n                throw;\r\n            }"
            BinaryOperation using operator <
               Type: bool
               Gas costs: 747
               Source: "balances[owner] - tokenAmount < limit"
              BinaryOperation using operator -
                 Type: uint256
                 Source: "balances[owner] - tokenAmount"
                IndexAccess
                   Type: uint256
                   Source: "balances[owner]"
                  Identifier balances
                     Type: mapping(address => uint256)
                     Source: "balances"
                  Identifier owner
                     Type: address
                     Source: "owner"
                Identifier tokenAmount
                   Type: uint256
                   Source: "tokenAmount"
              Identifier limit
                 Type: uint256
                 Source: "limit"
            Block
               Source: "{\r\n                throw;\r\n            }"
              Throw
                 Gas costs: 6
                 Source: "throw"
          ExpressionStatement
             Gas costs: 20565
             Source: "balances[owner] -= tokenAmount"
            Assignment using operator -=
               Type: uint256
               Source: "balances[owner] -= tokenAmount"
              IndexAccess
                 Type: uint256
                 Source: "balances[owner]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier owner
                   Type: address
                   Source: "owner"
              Identifier tokenAmount
                 Type: uint256
                 Source: "tokenAmount"
          ExpressionStatement
             Gas costs: 20322
             Source: "balances[msg.sender] += tokenAmount"
            Assignment using operator +=
               Type: uint256
               Source: "balances[msg.sender] += tokenAmount"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier tokenAmount
                 Type: uint256
                 Source: "tokenAmount"
          ExpressionStatement
             Gas costs: 2073
             Source: "Transfer(owner, msg.sender, tokenAmount)"
            FunctionCall
               Type: tuple()
               Source: "Transfer(owner, msg.sender, tokenAmount)"
              Identifier Transfer
                 Type: function (address,address,uint256)
                 Source: "Transfer"
              Identifier owner
                 Type: address
                 Source: "owner"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier tokenAmount
                 Type: uint256
                 Source: "tokenAmount"
        Block
           Source: "{\r\n            throw;\r\n        }"
          Throw
             Gas costs: 6
             Source: "throw"
  FunctionDefinition "stopSale" - public
     Source: "function stopSale() onlyOwner {\r\n        isTokenSale = false;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        isTokenSale = false;\r\n    }"
      ExpressionStatement
         Gas costs: 20267
         Source: "isTokenSale = false"
        Assignment using operator =
           Type: bool
           Source: "isTokenSale = false"
          Identifier isTokenSale
             Type: bool
             Source: "isTokenSale"
          Literal, token: false value: false
             Type: bool
             Source: "false"
  FunctionDefinition "startSale" - public
     Source: "function startSale() onlyOwner {\r\n        isTokenSale = true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        isTokenSale = true;\r\n    }"
      ExpressionStatement
         Gas costs: 20267
         Source: "isTokenSale = true"
        Assignment using operator =
           Type: bool
           Source: "isTokenSale = true"
          Identifier isTokenSale
             Type: bool
             Source: "isTokenSale"
          Literal, token: true value: true
             Type: bool
             Source: "true"
  FunctionDefinition "setPrice" - public
     Source: "function setPrice(uint256 newPrice) onlyOwner {\r\n        price = newPrice;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 newPrice)"
      VariableDeclaration "newPrice"
         Type: uint256
         Source: "uint256 newPrice"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        price = newPrice;\r\n    }"
      ExpressionStatement
         Gas costs: 20014
         Source: "price = newPrice"
        Assignment using operator =
           Type: uint256
           Source: "price = newPrice"
          Identifier price
             Type: uint256
             Source: "price"
          Identifier newPrice
             Type: uint256
             Source: "newPrice"
  FunctionDefinition "setLimit" - public
     Source: "function setLimit(uint256 newLimit) onlyOwner {\r\n        limit = newLimit;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 newLimit)"
      VariableDeclaration "newLimit"
         Type: uint256
         Source: "uint256 newLimit"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        limit = newLimit;\r\n    }"
      ExpressionStatement
         Gas costs: 20014
         Source: "limit = newLimit"
        Assignment using operator =
           Type: uint256
           Source: "limit = newLimit"
          Identifier limit
             Type: uint256
             Source: "limit"
          Identifier newLimit
             Type: uint256
             Source: "newLimit"
  FunctionDefinition "setWallet" - public
     Source: "function setWallet(address _to) onlyOwner {\r\n        walletOut = _to;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        walletOut = _to;\r\n    }"
      ExpressionStatement
         Gas costs: 20267
         Source: "walletOut = _to"
        Assignment using operator =
           Type: address
           Source: "walletOut = _to"
          Identifier walletOut
             Type: address
             Source: "walletOut"
          Identifier _to
             Type: address
             Source: "_to"
  FunctionDefinition "sendFund" - public
     Source: "function sendFund() onlyOwner {\r\n        walletOut.send(this.balance);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        walletOut.send(this.balance);\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "walletOut.send(this.balance)"
        FunctionCall
           Type: bool
           Source: "walletOut.send(this.balance)"
          MemberAccess to member send
             Type: function (uint256) returns (bool)
             Source: "walletOut.send"
            Identifier walletOut
               Type: address
               Source: "walletOut"
          MemberAccess to member balance
             Type: uint256
             Source: "this.balance"
            Identifier this
               Type: contract RevvaCoin
               Source: "this"
  VariableDeclaration "name"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public name"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "decimals"
     Type: uint8
     Gas costs: 335
     Source: "uint8 public decimals"
    ElementaryTypeName uint8
       Source: "uint8"
  VariableDeclaration "symbol"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public symbol"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "version"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public version = '1.0'"
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: 1.0
       Type: literal_string "1.0"
       Source: "'1.0'"
  FunctionDefinition "RevvaCoin" - public
     Source: "function RevvaCoin() {\r\n        totalSupply = 10000000 * 100000000;\r\n        balances[msg.sender] = totalSupply;\r\n        name = 'RevvaCoin';\r\n        decimals = 8;\r\n        symbol = 'REVVA';\r\n        price = 12500000000000000;\r\n        limit = totalSupply - 100000000000000;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        totalSupply = 10000000 * 100000000;\r\n        balances[msg.sender] = totalSupply;\r\n        name = 'RevvaCoin';\r\n        decimals = 8;\r\n        symbol = 'REVVA';\r\n        price = 12500000000000000;\r\n        limit = totalSupply - 100000000000000;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "totalSupply = 10000000 * 100000000"
        Assignment using operator =
           Type: uint256
           Source: "totalSupply = 10000000 * 100000000"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          BinaryOperation using operator *
             Type: int_const 1000000000000000
             Source: "10000000 * 100000000"
            Literal, token: [no token] value: 10000000
               Type: int_const 10000000
               Source: "10000000"
            Literal, token: [no token] value: 100000000
               Type: int_const 100000000
               Source: "100000000"
      ExpressionStatement
         Gas costs: 0
         Source: "balances[msg.sender] = totalSupply"
        Assignment using operator =
           Type: uint256
           Source: "balances[msg.sender] = totalSupply"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
      ExpressionStatement
         Gas costs: 0
         Source: "name = 'RevvaCoin'"
        Assignment using operator =
           Type: string storage ref
           Source: "name = 'RevvaCoin'"
          Identifier name
             Type: string storage ref
             Source: "name"
          Literal, token: [no token] value: RevvaCoin
             Type: literal_string "RevvaCoin"
             Source: "'RevvaCoin'"
      ExpressionStatement
         Gas costs: 0
         Source: "decimals = 8"
        Assignment using operator =
           Type: uint8
           Source: "decimals = 8"
          Identifier decimals
             Type: uint8
             Source: "decimals"
          Literal, token: [no token] value: 8
             Type: int_const 8
             Source: "8"
      ExpressionStatement
         Gas costs: 0
         Source: "symbol = 'REVVA'"
        Assignment using operator =
           Type: string storage ref
           Source: "symbol = 'REVVA'"
          Identifier symbol
             Type: string storage ref
             Source: "symbol"
          Literal, token: [no token] value: REVVA
             Type: literal_string "REVVA"
             Source: "'REVVA'"
      ExpressionStatement
         Gas costs: 0
         Source: "price = 12500000000000000"
        Assignment using operator =
           Type: uint256
           Source: "price = 12500000000000000"
          Identifier price
             Type: uint256
             Source: "price"
          Literal, token: [no token] value: 12500000000000000
             Type: int_const 12500000000000000
             Source: "12500000000000000"
      ExpressionStatement
         Gas costs: 0
         Source: "limit = totalSupply - 100000000000000"
        Assignment using operator =
           Type: uint256
           Source: "limit = totalSupply - 100000000000000"
          Identifier limit
             Type: uint256
             Source: "limit"
          BinaryOperation using operator -
             Type: uint256
             Source: "totalSupply - 100000000000000"
            Identifier totalSupply
               Type: uint256
               Source: "totalSupply"
            Literal, token: [no token] value: 100000000000000
               Type: int_const 100000000000000
               Source: "100000000000000"
  FunctionDefinition "add" - public
     Source: "function add(uint256 _value) onlyOwner returns (bool success)\r\n    {\r\n        if (balances[msg.sender] + _value <= balances[msg.sender]) {\r\n            return false;\r\n        }\r\n        totalSupply += _value;\r\n        balances[msg.sender] += _value;\r\n\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _value)"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        if (balances[msg.sender] + _value <= balances[msg.sender]) {\r\n            return false;\r\n        }\r\n        totalSupply += _value;\r\n        balances[msg.sender] += _value;\r\n\r\n        return true;\r\n    }"
      IfStatement
         Source: "if (balances[msg.sender] + _value <= balances[msg.sender]) {\r\n            return false;\r\n        }"
        BinaryOperation using operator <=
           Type: bool
           Gas costs: 602
           Source: "balances[msg.sender] + _value <= balances[msg.sender]"
          BinaryOperation using operator +
             Type: uint256
             Source: "balances[msg.sender] + _value"
            IndexAccess
               Type: uint256
               Source: "balances[msg.sender]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
        Block
           Source: "{\r\n            return false;\r\n        }"
          Return
             Gas costs: 19
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
      ExpressionStatement
         Gas costs: 20233
         Source: "totalSupply += _value"
        Assignment using operator +=
           Type: uint256
           Source: "totalSupply += _value"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 20328
         Source: "balances[msg.sender] += _value"
        Assignment using operator +=
           Type: uint256
           Source: "balances[msg.sender] += _value"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "burn" - public
     Source: "function burn(uint256 _value) onlyOwner  returns (bool success)\r\n    {\r\n        if (balances[msg.sender] < _value) {\r\n            return false;\r\n        }\r\n        totalSupply -= _value;\r\n        balances[msg.sender] -= _value;\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _value)"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        if (balances[msg.sender] < _value) {\r\n            return false;\r\n        }\r\n        totalSupply -= _value;\r\n        balances[msg.sender] -= _value;\r\n        return true;\r\n    }"
      IfStatement
         Source: "if (balances[msg.sender] < _value) {\r\n            return false;\r\n        }"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 304
           Source: "balances[msg.sender] < _value"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
        Block
           Source: "{\r\n            return false;\r\n        }"
          Return
             Gas costs: 19
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
      ExpressionStatement
         Gas costs: 20233
         Source: "totalSupply -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "totalSupply -= _value"
          Identifier totalSupply
             Type: uint256
             Source: "totalSupply"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 20328
         Source: "balances[msg.sender] -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "balances[msg.sender] -= _value"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
