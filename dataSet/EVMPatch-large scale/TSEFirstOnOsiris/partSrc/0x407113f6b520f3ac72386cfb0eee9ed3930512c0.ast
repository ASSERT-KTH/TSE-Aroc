Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0x407113f6b520f3ac72386cfb0eee9ed3930512c0.sol =======
ContractDefinition "WavesPresale"
   Source: "contract WavesPresale {\r\n    address public owner;\r\n    \r\n    struct Sale\r\n    {\r\n        uint amount;\r\n        uint date;\r\n    }\r\n\r\n    mapping (bytes16 => Sale) public sales;\r\n    uint32 public numberOfSales;\r\n    uint public totalTokens;\r\n\r\n    function WavesPresale() {\r\n        owner = msg.sender;\r\n        numberOfSales = 0;\r\n    }\r\n\r\n    function changeOwner(address newOwner) {\r\n        if (msg.sender != owner) return;\r\n\r\n        owner = newOwner;\r\n    }\r\n\r\n    function newSale(bytes16 txidHash, uint amount, uint timestamp) {\r\n        if (msg.sender != owner) return;\r\n\r\n        if (sales[txidHash].date == 0) {\r\n            sales[txidHash] = Sale({\r\n                    amount: amount,\r\n                    date: timestamp\r\n                });\r\n            numberOfSales += 1;\r\n            totalTokens += amount;\r\n        } else {\r\n            throw;\r\n        }\r\n    }\r\n\r\n    function getSaleDate(bytes16 txidHash) constant returns (uint, uint) {\r\n    \treturn (sales[txidHash].amount, sales[txidHash].date);\r\n    }\r\n\r\n    function () {\r\n        // This function gets executed if a\r\n        // transaction with invalid data is sent to\r\n        // the contract or just ether without data.\r\n        // We revert the send so that no-one\r\n        // accidentally loses money when using the\r\n        // contract.\r\n        throw;\r\n    }\r\n\r\n}"
  VariableDeclaration "owner"
     Type: address
     Gas costs: 335
     Source: "address public owner"
    ElementaryTypeName address
       Source: "address"
  StructDefinition "Sale"
     Gas costs: 0
     Source: "struct Sale\r\n    {\r\n        uint amount;\r\n        uint date;\r\n    }"
    VariableDeclaration "amount"
       Type: uint256
       Source: "uint amount"
      ElementaryTypeName uint
         Source: "uint"
    VariableDeclaration "date"
       Type: uint256
       Source: "uint date"
      ElementaryTypeName uint
         Source: "uint"
  VariableDeclaration "sales"
     Type: mapping(bytes16 => struct WavesPresale.Sale storage ref)
     Gas costs: 680
     Source: "mapping (bytes16 => Sale) public sales"
    Mapping
       Source: "mapping (bytes16 => Sale)"
      ElementaryTypeName bytes16
         Source: "bytes16"
      UserDefinedTypeName "Sale"
         Source: "Sale"
  VariableDeclaration "numberOfSales"
     Type: uint32
     Gas costs: 335
     Source: "uint32 public numberOfSales"
    ElementaryTypeName uint32
       Source: "uint32"
  VariableDeclaration "totalTokens"
     Type: uint256
     Gas costs: 287
     Source: "uint public totalTokens"
    ElementaryTypeName uint
       Source: "uint"
  FunctionDefinition "WavesPresale" - public
     Source: "function WavesPresale() {\r\n        owner = msg.sender;\r\n        numberOfSales = 0;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        owner = msg.sender;\r\n        numberOfSales = 0;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "owner = msg.sender"
        Assignment using operator =
           Type: address
           Source: "owner = msg.sender"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 0
         Source: "numberOfSales = 0"
        Assignment using operator =
           Type: uint32
           Source: "numberOfSales = 0"
          Identifier numberOfSales
             Type: uint32
             Source: "numberOfSales"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
  FunctionDefinition "changeOwner" - public
     Source: "function changeOwner(address newOwner) {\r\n        if (msg.sender != owner) return;\r\n\r\n        owner = newOwner;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address newOwner)"
      VariableDeclaration "newOwner"
         Type: address
         Source: "address newOwner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if (msg.sender != owner) return;\r\n\r\n        owner = newOwner;\r\n    }"
      IfStatement
         Source: "if (msg.sender != owner) return;"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 259
           Source: "msg.sender != owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier owner
             Type: address
             Source: "owner"
        Return
           Gas costs: 11
           Source: "return;"
      ExpressionStatement
         Gas costs: 20267
         Source: "owner = newOwner"
        Assignment using operator =
           Type: address
           Source: "owner = newOwner"
          Identifier owner
             Type: address
             Source: "owner"
          Identifier newOwner
             Type: address
             Source: "newOwner"
  FunctionDefinition "newSale" - public
     Source: "function newSale(bytes16 txidHash, uint amount, uint timestamp) {\r\n        if (msg.sender != owner) return;\r\n\r\n        if (sales[txidHash].date == 0) {\r\n            sales[txidHash] = Sale({\r\n                    amount: amount,\r\n                    date: timestamp\r\n                });\r\n            numberOfSales += 1;\r\n            totalTokens += amount;\r\n        } else {\r\n            throw;\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes16 txidHash, uint amount, uint timestamp)"
      VariableDeclaration "txidHash"
         Type: bytes16
         Source: "bytes16 txidHash"
        ElementaryTypeName bytes16
           Source: "bytes16"
      VariableDeclaration "amount"
         Type: uint256
         Source: "uint amount"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "timestamp"
         Type: uint256
         Source: "uint timestamp"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if (msg.sender != owner) return;\r\n\r\n        if (sales[txidHash].date == 0) {\r\n            sales[txidHash] = Sale({\r\n                    amount: amount,\r\n                    date: timestamp\r\n                });\r\n            numberOfSales += 1;\r\n            totalTokens += amount;\r\n        } else {\r\n            throw;\r\n        }\r\n    }"
      IfStatement
         Source: "if (msg.sender != owner) return;"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 259
           Source: "msg.sender != owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier owner
             Type: address
             Source: "owner"
        Return
           Gas costs: 11
           Source: "return;"
      IfStatement
         Source: "if (sales[txidHash].date == 0) {\r\n            sales[txidHash] = Sale({\r\n                    amount: amount,\r\n                    date: timestamp\r\n                });\r\n            numberOfSales += 1;\r\n            totalTokens += amount;\r\n        } else {\r\n            throw;\r\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 317
           Source: "sales[txidHash].date == 0"
          MemberAccess to member date
             Type: uint256
             Source: "sales[txidHash].date"
            IndexAccess
               Type: struct WavesPresale.Sale storage ref
               Source: "sales[txidHash]"
              Identifier sales
                 Type: mapping(bytes16 => struct WavesPresale.Sale storage ref)
                 Source: "sales"
              Identifier txidHash
                 Type: bytes16
                 Source: "txidHash"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n            sales[txidHash] = Sale({\r\n                    amount: amount,\r\n                    date: timestamp\r\n                });\r\n            numberOfSales += 1;\r\n            totalTokens += amount;\r\n        }"
          ExpressionStatement
             Gas costs: 40219
             Source: "sales[txidHash] = Sale({\r\n                    amount: amount,\r\n                    date: timestamp\r\n                })"
            Assignment using operator =
               Type: struct WavesPresale.Sale storage ref
               Source: "sales[txidHash] = Sale({\r\n                    amount: amount,\r\n                    date: timestamp\r\n                })"
              IndexAccess
                 Type: struct WavesPresale.Sale storage ref
                 Source: "sales[txidHash]"
                Identifier sales
                   Type: mapping(bytes16 => struct WavesPresale.Sale storage ref)
                   Source: "sales"
                Identifier txidHash
                   Type: bytes16
                   Source: "txidHash"
              FunctionCall
                 Type: struct WavesPresale.Sale memory
                 Source: "Sale({\r\n                    amount: amount,\r\n                    date: timestamp\r\n                })"
                Identifier Sale
                   Type: type(struct WavesPresale.Sale storage pointer)
                   Source: "Sale"
                Identifier amount
                   Type: uint256
                   Source: "amount"
                Identifier timestamp
                   Type: uint256
                   Source: "timestamp"
          ExpressionStatement
             Gas costs: 20517
             Source: "numberOfSales += 1"
            Assignment using operator +=
               Type: uint32
               Source: "numberOfSales += 1"
              Identifier numberOfSales
                 Type: uint32
                 Source: "numberOfSales"
              Literal, token: [no token] value: 1
                 Type: int_const 1
                 Source: "1"
          ExpressionStatement
             Gas costs: 20233
             Source: "totalTokens += amount"
            Assignment using operator +=
               Type: uint256
               Source: "totalTokens += amount"
              Identifier totalTokens
                 Type: uint256
                 Source: "totalTokens"
              Identifier amount
                 Type: uint256
                 Source: "amount"
        Block
           Source: "{\r\n            throw;\r\n        }"
          Throw
             Gas costs: 6
             Source: "throw"
  FunctionDefinition "getSaleDate" - public - const
     Source: "function getSaleDate(bytes16 txidHash) constant returns (uint, uint) {\r\n    \treturn (sales[txidHash].amount, sales[txidHash].date);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes16 txidHash)"
      VariableDeclaration "txidHash"
         Type: bytes16
         Source: "bytes16 txidHash"
        ElementaryTypeName bytes16
           Source: "bytes16"
    ParameterList
       Gas costs: 6
       Source: "(uint, uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n    \treturn (sales[txidHash].amount, sales[txidHash].date);\r\n    }"
      Return
         Gas costs: 626
         Source: "return (sales[txidHash].amount, sales[txidHash].date)"
        TupleExpression
           Type: tuple(uint256,uint256)
           Source: "(sales[txidHash].amount, sales[txidHash].date)"
          MemberAccess to member amount
             Type: uint256
             Source: "sales[txidHash].amount"
            IndexAccess
               Type: struct WavesPresale.Sale storage ref
               Source: "sales[txidHash]"
              Identifier sales
                 Type: mapping(bytes16 => struct WavesPresale.Sale storage ref)
                 Source: "sales"
              Identifier txidHash
                 Type: bytes16
                 Source: "txidHash"
          MemberAccess to member date
             Type: uint256
             Source: "sales[txidHash].date"
            IndexAccess
               Type: struct WavesPresale.Sale storage ref
               Source: "sales[txidHash]"
              Identifier sales
                 Type: mapping(bytes16 => struct WavesPresale.Sale storage ref)
                 Source: "sales"
              Identifier txidHash
                 Type: bytes16
                 Source: "txidHash"
  FunctionDefinition "" - public
     Source: "function () {\r\n        // This function gets executed if a\r\n        // transaction with invalid data is sent to\r\n        // the contract or just ether without data.\r\n        // We revert the send so that no-one\r\n        // accidentally loses money when using the\r\n        // contract.\r\n        throw;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        // This function gets executed if a\r\n        // transaction with invalid data is sent to\r\n        // the contract or just ether without data.\r\n        // We revert the send so that no-one\r\n        // accidentally loses money when using the\r\n        // contract.\r\n        throw;\r\n    }"
      Throw
         Gas costs: 6
         Source: "throw"
