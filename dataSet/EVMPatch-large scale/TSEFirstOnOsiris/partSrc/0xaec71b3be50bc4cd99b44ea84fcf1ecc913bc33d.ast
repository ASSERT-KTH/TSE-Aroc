Syntax trees:


======= /home/fabric/ArocRevision/Aroc/osirisData/contractSrc/0xaec71b3be50bc4cd99b44ea84fcf1ecc913bc33d.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.18;"
ContractDefinition "WETH"
   Source: "contract WETH {\r\n    string public name     = \"Wrapped Ether\";\r\n    string public symbol   = \"WETH\";\r\n    uint8  public decimals = 18;\r\n\r\n    event  Approval(address indexed src, address indexed guy, uint wad);\r\n    event  Transfer(address indexed src, address indexed dst, uint wad);\r\n    event  Deposit(address indexed dst, uint wad);\r\n    event  Withdraw(address indexed src, uint wad);\r\n\r\n    mapping (address => uint)                       public  balanceOf;\r\n    mapping (address => mapping (address => uint))  public  allowance;\r\n\r\n    function() public payable {\r\n        deposit();\r\n    }\r\n    function deposit() public payable {\r\n        balanceOf[msg.sender] += msg.value;\r\n        Deposit(msg.sender, msg.value);\r\n    }\r\n    function withdraw(uint wad) public {\r\n        require(balanceOf[msg.sender] >= wad);\r\n        balanceOf[msg.sender] -= wad;\r\n        msg.sender.transfer(wad);\r\n        Withdraw(msg.sender, wad);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return this.balance;\r\n    }\r\n\r\n    function approve(address guy, uint wad) public returns (bool) {\r\n        allowance[msg.sender][guy] = wad;\r\n        Approval(msg.sender, guy, wad);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address dst, uint wad) public returns (bool) {\r\n        return transferFrom(msg.sender, dst, wad);\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint wad) \r\n        public \r\n        returns (bool) \r\n    {\r\n        require(balanceOf[src] >= wad);\r\n\r\n        if (src != msg.sender && allowance[src][dst] != uint(-1)) {\r\n            require(allowance[src][msg.sender] >= wad);\r\n            allowance[src][msg.sender] -= wad;\r\n        }\r\n\r\n        balanceOf[src] -= wad;\r\n        balanceOf[dst] += wad;\r\n\r\n        Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }\r\n}"
  VariableDeclaration "name"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public name     = \"Wrapped Ether\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: Wrapped Ether
       Type: literal_string "Wrapped Ether"
       Source: "\"Wrapped Ether\""
  VariableDeclaration "symbol"
     Type: string storage ref
     Gas costs: [???]
     Source: "string public symbol   = \"WETH\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: WETH
       Type: literal_string "WETH"
       Source: "\"WETH\""
  VariableDeclaration "decimals"
     Type: uint8
     Gas costs: [???]
     Source: "uint8  public decimals = 18"
    ElementaryTypeName uint8
       Source: "uint8"
    Literal, token: [no token] value: 18
       Type: int_const 18
       Source: "18"
  EventDefinition "Approval"
     Gas costs: 0
     Source: "event  Approval(address indexed src, address indexed guy, uint wad);"
    ParameterList
       Source: "(address indexed src, address indexed guy, uint wad)"
      VariableDeclaration "src"
         Type: address
         Source: "address indexed src"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "guy"
         Type: address
         Source: "address indexed guy"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "wad"
         Type: uint256
         Source: "uint wad"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "Transfer"
     Gas costs: 0
     Source: "event  Transfer(address indexed src, address indexed dst, uint wad);"
    ParameterList
       Source: "(address indexed src, address indexed dst, uint wad)"
      VariableDeclaration "src"
         Type: address
         Source: "address indexed src"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "dst"
         Type: address
         Source: "address indexed dst"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "wad"
         Type: uint256
         Source: "uint wad"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "Deposit"
     Gas costs: 0
     Source: "event  Deposit(address indexed dst, uint wad);"
    ParameterList
       Source: "(address indexed dst, uint wad)"
      VariableDeclaration "dst"
         Type: address
         Source: "address indexed dst"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "wad"
         Type: uint256
         Source: "uint wad"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "Withdraw"
     Gas costs: 0
     Source: "event  Withdraw(address indexed src, uint wad);"
    ParameterList
       Source: "(address indexed src, uint wad)"
      VariableDeclaration "src"
         Type: address
         Source: "address indexed src"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "wad"
         Type: uint256
         Source: "uint wad"
        ElementaryTypeName uint
           Source: "uint"
  VariableDeclaration "balanceOf"
     Type: mapping(address => uint256)
     Gas costs: [???]
     Source: "mapping (address => uint)                       public  balanceOf"
    Mapping
       Source: "mapping (address => uint)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint
         Source: "uint"
  VariableDeclaration "allowance"
     Type: mapping(address => mapping(address => uint256))
     Gas costs: [???]
     Source: "mapping (address => mapping (address => uint))  public  allowance"
    Mapping
       Source: "mapping (address => mapping (address => uint))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping (address => uint)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint
           Source: "uint"
  FunctionDefinition "" - public
     Source: "function() public payable {\r\n        deposit();\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        deposit();\r\n    }"
      ExpressionStatement
         Gas costs: 4
         Source: "deposit()"
        FunctionCall
           Type: tuple()
           Source: "deposit()"
          Identifier deposit
             Type: function ()
             Source: "deposit"
  FunctionDefinition "deposit" - public
     Source: "function deposit() public payable {\r\n        balanceOf[msg.sender] += msg.value;\r\n        Deposit(msg.sender, msg.value);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        balanceOf[msg.sender] += msg.value;\r\n        Deposit(msg.sender, msg.value);\r\n    }"
      ExpressionStatement
         Gas costs: 20327
         Source: "balanceOf[msg.sender] += msg.value"
        Assignment using operator +=
           Type: uint256
           Source: "balanceOf[msg.sender] += msg.value"
          IndexAccess
             Type: uint256
             Source: "balanceOf[msg.sender]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: [???]
         Source: "Deposit(msg.sender, msg.value)"
        FunctionCall
           Type: tuple()
           Source: "Deposit(msg.sender, msg.value)"
          Identifier Deposit
             Type: function (address,uint256)
             Source: "Deposit"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "withdraw" - public
     Source: "function withdraw(uint wad) public {\r\n        require(balanceOf[msg.sender] >= wad);\r\n        balanceOf[msg.sender] -= wad;\r\n        msg.sender.transfer(wad);\r\n        Withdraw(msg.sender, wad);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint wad)"
      VariableDeclaration "wad"
         Type: uint256
         Source: "uint wad"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        require(balanceOf[msg.sender] >= wad);\r\n        balanceOf[msg.sender] -= wad;\r\n        msg.sender.transfer(wad);\r\n        Withdraw(msg.sender, wad);\r\n    }"
      ExpressionStatement
         Gas costs: 333
         Source: "require(balanceOf[msg.sender] >= wad)"
        FunctionCall
           Type: tuple()
           Source: "require(balanceOf[msg.sender] >= wad)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "balanceOf[msg.sender] >= wad"
            IndexAccess
               Type: uint256
               Source: "balanceOf[msg.sender]"
              Identifier balanceOf
                 Type: mapping(address => uint256)
                 Source: "balanceOf"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier wad
               Type: uint256
               Source: "wad"
      ExpressionStatement
         Gas costs: 20328
         Source: "balanceOf[msg.sender] -= wad"
        Assignment using operator -=
           Type: uint256
           Source: "balanceOf[msg.sender] -= wad"
          IndexAccess
             Type: uint256
             Source: "balanceOf[msg.sender]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier wad
             Type: uint256
             Source: "wad"
      ExpressionStatement
         Gas costs: [???]
         Source: "msg.sender.transfer(wad)"
        FunctionCall
           Type: tuple()
           Source: "msg.sender.transfer(wad)"
          MemberAccess to member transfer
             Type: function (uint256)
             Source: "msg.sender.transfer"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier wad
             Type: uint256
             Source: "wad"
      ExpressionStatement
         Gas costs: [???]
         Source: "Withdraw(msg.sender, wad)"
        FunctionCall
           Type: tuple()
           Source: "Withdraw(msg.sender, wad)"
          Identifier Withdraw
             Type: function (address,uint256)
             Source: "Withdraw"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier wad
             Type: uint256
             Source: "wad"
  FunctionDefinition "totalSupply" - public - const
     Source: "function totalSupply() public view returns (uint) {\r\n        return this.balance;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\r\n        return this.balance;\r\n    }"
      Return
         Gas costs: 413
         Source: "return this.balance"
        MemberAccess to member balance
           Type: uint256
           Source: "this.balance"
          Identifier this
             Type: contract WETH
             Source: "this"
  FunctionDefinition "approve" - public
     Source: "function approve(address guy, uint wad) public returns (bool) {\r\n        allowance[msg.sender][guy] = wad;\r\n        Approval(msg.sender, guy, wad);\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address guy, uint wad)"
      VariableDeclaration "guy"
         Type: address
         Source: "address guy"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "wad"
         Type: uint256
         Source: "uint wad"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        allowance[msg.sender][guy] = wad;\r\n        Approval(msg.sender, guy, wad);\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 20199
         Source: "allowance[msg.sender][guy] = wad"
        Assignment using operator =
           Type: uint256
           Source: "allowance[msg.sender][guy] = wad"
          IndexAccess
             Type: uint256
             Source: "allowance[msg.sender][guy]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowance[msg.sender]"
              Identifier allowance
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowance"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier guy
               Type: address
               Source: "guy"
          Identifier wad
             Type: uint256
             Source: "wad"
      ExpressionStatement
         Gas costs: [???]
         Source: "Approval(msg.sender, guy, wad)"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender, guy, wad)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier guy
             Type: address
             Source: "guy"
          Identifier wad
             Type: uint256
             Source: "wad"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address dst, uint wad) public returns (bool) {\r\n        return transferFrom(msg.sender, dst, wad);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address dst, uint wad)"
      VariableDeclaration "dst"
         Type: address
         Source: "address dst"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "wad"
         Type: uint256
         Source: "uint wad"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        return transferFrom(msg.sender, dst, wad);\r\n    }"
      Return
         Gas costs: 28
         Source: "return transferFrom(msg.sender, dst, wad)"
        FunctionCall
           Type: bool
           Source: "transferFrom(msg.sender, dst, wad)"
          Identifier transferFrom
             Type: function (address,address,uint256) returns (bool)
             Source: "transferFrom"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier dst
             Type: address
             Source: "dst"
          Identifier wad
             Type: uint256
             Source: "wad"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address src, address dst, uint wad) \r\n        public \r\n        returns (bool) \r\n    {\r\n        require(balanceOf[src] >= wad);\r\n\r\n        if (src != msg.sender && allowance[src][dst] != uint(-1)) {\r\n            require(allowance[src][msg.sender] >= wad);\r\n            allowance[src][msg.sender] -= wad;\r\n        }\r\n\r\n        balanceOf[src] -= wad;\r\n        balanceOf[dst] += wad;\r\n\r\n        Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address src, address dst, uint wad)"
      VariableDeclaration "src"
         Type: address
         Source: "address src"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "dst"
         Type: address
         Source: "address dst"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "wad"
         Type: uint256
         Source: "uint wad"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        require(balanceOf[src] >= wad);\r\n\r\n        if (src != msg.sender && allowance[src][dst] != uint(-1)) {\r\n            require(allowance[src][msg.sender] >= wad);\r\n            allowance[src][msg.sender] -= wad;\r\n        }\r\n\r\n        balanceOf[src] -= wad;\r\n        balanceOf[dst] += wad;\r\n\r\n        Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 334
         Source: "require(balanceOf[src] >= wad)"
        FunctionCall
           Type: tuple()
           Source: "require(balanceOf[src] >= wad)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "balanceOf[src] >= wad"
            IndexAccess
               Type: uint256
               Source: "balanceOf[src]"
              Identifier balanceOf
                 Type: mapping(address => uint256)
                 Source: "balanceOf"
              Identifier src
                 Type: address
                 Source: "src"
            Identifier wad
               Type: uint256
               Source: "wad"
      IfStatement
         Source: "if (src != msg.sender && allowance[src][dst] != uint(-1)) {\r\n            require(allowance[src][msg.sender] >= wad);\r\n            allowance[src][msg.sender] -= wad;\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 443
           Source: "src != msg.sender && allowance[src][dst] != uint(-1)"
          BinaryOperation using operator !=
             Type: bool
             Source: "src != msg.sender"
            Identifier src
               Type: address
               Source: "src"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          BinaryOperation using operator !=
             Type: bool
             Source: "allowance[src][dst] != uint(-1)"
            IndexAccess
               Type: uint256
               Source: "allowance[src][dst]"
              IndexAccess
                 Type: mapping(address => uint256)
                 Source: "allowance[src]"
                Identifier allowance
                   Type: mapping(address => mapping(address => uint256))
                   Source: "allowance"
                Identifier src
                   Type: address
                   Source: "src"
              Identifier dst
                 Type: address
                 Source: "dst"
            FunctionCall
               Type: uint256
               Source: "uint(-1)"
              ElementaryTypeNameExpression uint
                 Type: type(uint256)
                 Source: "uint"
              UnaryOperation (prefix) -
                 Type: int_const -1
                 Source: "-1"
                Literal, token: [no token] value: 1
                   Type: int_const 1
                   Source: "1"
        Block
           Source: "{\r\n            require(allowance[src][msg.sender] >= wad);\r\n            allowance[src][msg.sender] -= wad;\r\n        }"
          ExpressionStatement
             Gas costs: 423
             Source: "require(allowance[src][msg.sender] >= wad)"
            FunctionCall
               Type: tuple()
               Source: "require(allowance[src][msg.sender] >= wad)"
              Identifier require
                 Type: function (bool) pure
                 Source: "require"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "allowance[src][msg.sender] >= wad"
                IndexAccess
                   Type: uint256
                   Source: "allowance[src][msg.sender]"
                  IndexAccess
                     Type: mapping(address => uint256)
                     Source: "allowance[src]"
                    Identifier allowance
                       Type: mapping(address => mapping(address => uint256))
                       Source: "allowance"
                    Identifier src
                       Type: address
                       Source: "src"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
                Identifier wad
                   Type: uint256
                   Source: "wad"
          ExpressionStatement
             Gas costs: 20418
             Source: "allowance[src][msg.sender] -= wad"
            Assignment using operator -=
               Type: uint256
               Source: "allowance[src][msg.sender] -= wad"
              IndexAccess
                 Type: uint256
                 Source: "allowance[src][msg.sender]"
                IndexAccess
                   Type: mapping(address => uint256)
                   Source: "allowance[src]"
                  Identifier allowance
                     Type: mapping(address => mapping(address => uint256))
                     Source: "allowance"
                  Identifier src
                     Type: address
                     Source: "src"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier wad
                 Type: uint256
                 Source: "wad"
      ExpressionStatement
         Gas costs: 20329
         Source: "balanceOf[src] -= wad"
        Assignment using operator -=
           Type: uint256
           Source: "balanceOf[src] -= wad"
          IndexAccess
             Type: uint256
             Source: "balanceOf[src]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier src
               Type: address
               Source: "src"
          Identifier wad
             Type: uint256
             Source: "wad"
      ExpressionStatement
         Gas costs: 20323
         Source: "balanceOf[dst] += wad"
        Assignment using operator +=
           Type: uint256
           Source: "balanceOf[dst] += wad"
          IndexAccess
             Type: uint256
             Source: "balanceOf[dst]"
            Identifier balanceOf
               Type: mapping(address => uint256)
               Source: "balanceOf"
            Identifier dst
               Type: address
               Source: "dst"
          Identifier wad
             Type: uint256
             Source: "wad"
      ExpressionStatement
         Gas costs: [???]
         Source: "Transfer(src, dst, wad)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(src, dst, wad)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          Identifier src
             Type: address
             Source: "src"
          Identifier dst
             Type: address
             Source: "dst"
          Identifier wad
             Type: uint256
             Source: "wad"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
