Syntax trees:


======= /home/fabric/ArocRevision/Aroc/dataSet/smartbugs-21-7-13/reentrancy31/etherstore.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.0;"
ContractDefinition "EtherStore"
   Source: "contract EtherStore {\n\n    uint256 public withdrawalLimit = 1 ether;\n    mapping(address => uint256) public lastWithdrawTime;\n    mapping(address => uint256) public balances;\n\n    function depositFunds() public payable {\n        balances[msg.sender] += msg.value;\n    }\n\n    function withdrawFunds (uint256 _weiToWithdraw) public {\n        require(balances[msg.sender] >= _weiToWithdraw);\n        // limit the withdrawal\n        require(_weiToWithdraw <= withdrawalLimit);\n        // limit the time allowed to withdraw\n        require(now >= lastWithdrawTime[msg.sender] + 1 weeks);\n        // <yes> <report> REENTRANCY\n        require(msg.sender.call.value(_weiToWithdraw)());\n        balances[msg.sender] -= _weiToWithdraw;\n        lastWithdrawTime[msg.sender] = now;\n    }\n }"
  VariableDeclaration "withdrawalLimit"
     Type: uint256
     Gas costs: 287
     Source: "uint256 public withdrawalLimit = 1 ether"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 1
       Type: int_const 1000000000000000000
       Source: "1 ether"
  VariableDeclaration "lastWithdrawTime"
     Type: mapping(address => uint256)
     Gas costs: 431
     Source: "mapping(address => uint256) public lastWithdrawTime"
    Mapping
       Source: "mapping(address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: 431
     Source: "mapping(address => uint256) public balances"
    Mapping
       Source: "mapping(address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  FunctionDefinition "depositFunds" - public
     Source: "function depositFunds() public payable {\n        balances[msg.sender] += msg.value;\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        balances[msg.sender] += msg.value;\n    }"
      ExpressionStatement
         Gas costs: 20327
         Source: "balances[msg.sender] += msg.value"
        Assignment using operator +=
           Type: uint256
           Source: "balances[msg.sender] += msg.value"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "withdrawFunds" - public
     Source: "function withdrawFunds (uint256 _weiToWithdraw) public {\n        require(balances[msg.sender] >= _weiToWithdraw);\n        // limit the withdrawal\n        require(_weiToWithdraw <= withdrawalLimit);\n        // limit the time allowed to withdraw\n        require(now >= lastWithdrawTime[msg.sender] + 1 weeks);\n        // <yes> <report> REENTRANCY\n        require(msg.sender.call.value(_weiToWithdraw)());\n        balances[msg.sender] -= _weiToWithdraw;\n        lastWithdrawTime[msg.sender] = now;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _weiToWithdraw)"
      VariableDeclaration "_weiToWithdraw"
         Type: uint256
         Source: "uint256 _weiToWithdraw"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        require(balances[msg.sender] >= _weiToWithdraw);\n        // limit the withdrawal\n        require(_weiToWithdraw <= withdrawalLimit);\n        // limit the time allowed to withdraw\n        require(now >= lastWithdrawTime[msg.sender] + 1 weeks);\n        // <yes> <report> REENTRANCY\n        require(msg.sender.call.value(_weiToWithdraw)());\n        balances[msg.sender] -= _weiToWithdraw;\n        lastWithdrawTime[msg.sender] = now;\n    }"
      ExpressionStatement
         Gas costs: 333
         Source: "require(balances[msg.sender] >= _weiToWithdraw)"
        FunctionCall
           Type: tuple()
           Source: "require(balances[msg.sender] >= _weiToWithdraw)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "balances[msg.sender] >= _weiToWithdraw"
            IndexAccess
               Type: uint256
               Source: "balances[msg.sender]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _weiToWithdraw
               Type: uint256
               Source: "_weiToWithdraw"
      ExpressionStatement
         Gas costs: 238
         Source: "require(_weiToWithdraw <= withdrawalLimit)"
        FunctionCall
           Type: tuple()
           Source: "require(_weiToWithdraw <= withdrawalLimit)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator <=
             Type: bool
             Source: "_weiToWithdraw <= withdrawalLimit"
            Identifier _weiToWithdraw
               Type: uint256
               Source: "_weiToWithdraw"
            Identifier withdrawalLimit
               Type: uint256
               Source: "withdrawalLimit"
      ExpressionStatement
         Gas costs: 338
         Source: "require(now >= lastWithdrawTime[msg.sender] + 1 weeks)"
        FunctionCall
           Type: tuple()
           Source: "require(now >= lastWithdrawTime[msg.sender] + 1 weeks)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "now >= lastWithdrawTime[msg.sender] + 1 weeks"
            Identifier now
               Type: uint256
               Source: "now"
            BinaryOperation using operator +
               Type: uint256
               Source: "lastWithdrawTime[msg.sender] + 1 weeks"
              IndexAccess
                 Type: uint256
                 Source: "lastWithdrawTime[msg.sender]"
                Identifier lastWithdrawTime
                   Type: mapping(address => uint256)
                   Source: "lastWithdrawTime"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Literal, token: [no token] value: 1
                 Type: int_const 604800
                 Source: "1 weeks"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(msg.sender.call.value(_weiToWithdraw)())"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender.call.value(_weiToWithdraw)())"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "msg.sender.call.value(_weiToWithdraw)()"
            FunctionCall
               Type: function () payable returns (bool)
               Source: "msg.sender.call.value(_weiToWithdraw)"
              MemberAccess to member value
                 Type: function (uint256) returns (function () payable returns (bool))
                 Source: "msg.sender.call.value"
                MemberAccess to member call
                   Type: function () payable returns (bool)
                   Source: "msg.sender.call"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
              Identifier _weiToWithdraw
                 Type: uint256
                 Source: "_weiToWithdraw"
      ExpressionStatement
         Gas costs: 20328
         Source: "balances[msg.sender] -= _weiToWithdraw"
        Assignment using operator -=
           Type: uint256
           Source: "balances[msg.sender] -= _weiToWithdraw"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _weiToWithdraw
             Type: uint256
             Source: "_weiToWithdraw"
      ExpressionStatement
         Gas costs: 20102
         Source: "lastWithdrawTime[msg.sender] = now"
        Assignment using operator =
           Type: uint256
           Source: "lastWithdrawTime[msg.sender] = now"
          IndexAccess
             Type: uint256
             Source: "lastWithdrawTime[msg.sender]"
            Identifier lastWithdrawTime
               Type: mapping(address => uint256)
               Source: "lastWithdrawTime"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier now
             Type: uint256
             Source: "now"
