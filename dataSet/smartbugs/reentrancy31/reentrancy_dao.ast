Syntax trees:


======= /home/fabric/ArocRevision/Aroc/dataSet/smartbugs-21-7-13/reentrancy31/reentrancy_dao.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.19;"
ContractDefinition "ReentrancyDAO"
   Source: "contract ReentrancyDAO {\n    mapping (address => uint) credit;\n    uint balance;\n\n    function withdrawAll() public {\n        uint oCredit = credit[msg.sender];\n        if (oCredit > 0) {\n            balance -= oCredit;\n            // <yes> <report> REENTRANCY\n            bool callResult = msg.sender.call.value(oCredit)();\n            require (callResult);\n            credit[msg.sender] = 0;\n        }\n    }\n\n    function deposit() public payable {\n        credit[msg.sender] += msg.value;\n        balance += msg.value;\n    }\n}"
  VariableDeclaration "credit"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping (address => uint) credit"
    Mapping
       Source: "mapping (address => uint)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint
         Source: "uint"
  VariableDeclaration "balance"
     Type: uint256
     Gas costs: 0
     Source: "uint balance"
    ElementaryTypeName uint
       Source: "uint"
  FunctionDefinition "withdrawAll" - public
     Source: "function withdrawAll() public {\n        uint oCredit = credit[msg.sender];\n        if (oCredit > 0) {\n            balance -= oCredit;\n            // <yes> <report> REENTRANCY\n            bool callResult = msg.sender.call.value(oCredit)();\n            require (callResult);\n            credit[msg.sender] = 0;\n        }\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        uint oCredit = credit[msg.sender];\n        if (oCredit > 0) {\n            balance -= oCredit;\n            // <yes> <report> REENTRANCY\n            bool callResult = msg.sender.call.value(oCredit)();\n            require (callResult);\n            credit[msg.sender] = 0;\n        }\n    }"
      VariableDeclarationStatement
         Gas costs: 306
         Source: "uint oCredit = credit[msg.sender]"
        VariableDeclaration "oCredit"
           Type: uint256
           Source: "uint oCredit"
          ElementaryTypeName uint
             Source: "uint"
        IndexAccess
           Type: uint256
           Source: "credit[msg.sender]"
          Identifier credit
             Type: mapping(address => uint256)
             Source: "credit"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      IfStatement
         Source: "if (oCredit > 0) {\n            balance -= oCredit;\n            // <yes> <report> REENTRANCY\n            bool callResult = msg.sender.call.value(oCredit)();\n            require (callResult);\n            credit[msg.sender] = 0;\n        }"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 9
           Source: "oCredit > 0"
          Identifier oCredit
             Type: uint256
             Source: "oCredit"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\n            balance -= oCredit;\n            // <yes> <report> REENTRANCY\n            bool callResult = msg.sender.call.value(oCredit)();\n            require (callResult);\n            credit[msg.sender] = 0;\n        }"
          ExpressionStatement
             Gas costs: 20233
             Source: "balance -= oCredit"
            Assignment using operator -=
               Type: uint256
               Source: "balance -= oCredit"
              Identifier balance
                 Type: uint256
                 Source: "balance"
              Identifier oCredit
                 Type: uint256
                 Source: "oCredit"
          VariableDeclarationStatement
             Gas costs: [???]
             Source: "bool callResult = msg.sender.call.value(oCredit)()"
            VariableDeclaration "callResult"
               Type: bool
               Source: "bool callResult"
              ElementaryTypeName bool
                 Source: "bool"
            FunctionCall
               Type: bool
               Source: "msg.sender.call.value(oCredit)()"
              FunctionCall
                 Type: function () payable returns (bool)
                 Source: "msg.sender.call.value(oCredit)"
                MemberAccess to member value
                   Type: function (uint256) returns (function () payable returns (bool))
                   Source: "msg.sender.call.value"
                  MemberAccess to member call
                     Type: function () payable returns (bool)
                     Source: "msg.sender.call"
                    MemberAccess to member sender
                       Type: address
                       Source: "msg.sender"
                      Identifier msg
                         Type: msg
                         Source: "msg"
                Identifier oCredit
                   Type: uint256
                   Source: "oCredit"
          ExpressionStatement
             Gas costs: 29
             Source: "require (callResult)"
            FunctionCall
               Type: tuple()
               Source: "require (callResult)"
              Identifier require
                 Type: function (bool) pure
                 Source: "require"
              Identifier callResult
                 Type: bool
                 Source: "callResult"
          ExpressionStatement
             Gas costs: 5109
             Source: "credit[msg.sender] = 0"
            Assignment using operator =
               Type: uint256
               Source: "credit[msg.sender] = 0"
              IndexAccess
                 Type: uint256
                 Source: "credit[msg.sender]"
                Identifier credit
                   Type: mapping(address => uint256)
                   Source: "credit"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
  FunctionDefinition "deposit" - public
     Source: "function deposit() public payable {\n        credit[msg.sender] += msg.value;\n        balance += msg.value;\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        credit[msg.sender] += msg.value;\n        balance += msg.value;\n    }"
      ExpressionStatement
         Gas costs: 20327
         Source: "credit[msg.sender] += msg.value"
        Assignment using operator +=
           Type: uint256
           Source: "credit[msg.sender] += msg.value"
          IndexAccess
             Type: uint256
             Source: "credit[msg.sender]"
            Identifier credit
               Type: mapping(address => uint256)
               Source: "credit"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 20232
         Source: "balance += msg.value"
        Assignment using operator +=
           Type: uint256
           Source: "balance += msg.value"
          Identifier balance
             Type: uint256
             Source: "balance"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
