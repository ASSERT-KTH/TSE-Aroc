Syntax trees:


======= /home/fabric/ArocRevision/Aroc/dataSet/smartbugs-21-7-13/reentrancy31/0x941d225236464a25eb18076df7da6a91d0f95e9e.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.19;"
ContractDefinition "ETH_FUND"
   Source: "contract ETH_FUND{\r\n\r\n    mapping (address => uint) public balances;\r\n    \r\n    uint public MinDeposit = 1 ether;\r\n    \r\n    Log TransferLog;\r\n    \r\n    uint lastBlock;\r\n    \r\n    function ETH_FUND(address _log)\r\n    public \r\n    {\r\n        TransferLog = Log(_log);\r\n    }\r\n    \r\n    function Deposit()\r\n    public\r\n    payable\r\n    {\r\n        if(msg.value > MinDeposit)\r\n        {\r\n            balances[msg.sender]+=msg.value;\r\n            TransferLog.AddMessage(msg.sender,msg.value,\"Deposit\");\r\n            lastBlock = block.number;\r\n        }\r\n    }\r\n    \r\n    function CashOut(uint _am)\r\n    public\r\n    payable\r\n    {\r\n        if(_am<=balances[msg.sender]&&block.number>lastBlock)\r\n        {\r\n            // <yes> <report> REENTRANCY\r\n            if(msg.sender.call.value(_am)())\r\n            {\r\n                balances[msg.sender]-=_am;\r\n                TransferLog.AddMessage(msg.sender,_am,\"CashOut\");\r\n            }\r\n        }\r\n    }\r\n    \r\n    function() public payable{}    \r\n    \r\n}"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping (address => uint) public balances"
    Mapping
       Source: "mapping (address => uint)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint
         Source: "uint"
  VariableDeclaration "MinDeposit"
     Type: uint256
     Gas costs: 0
     Source: "uint public MinDeposit = 1 ether"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 1
       Type: int_const 1000000000000000000
       Source: "1 ether"
  VariableDeclaration "TransferLog"
     Type: contract Log
     Gas costs: 0
     Source: "Log TransferLog"
    UserDefinedTypeName "Log"
       Source: "Log"
  VariableDeclaration "lastBlock"
     Type: uint256
     Gas costs: 0
     Source: "uint lastBlock"
    ElementaryTypeName uint
       Source: "uint"
  FunctionDefinition "ETH_FUND" - public
     Source: "function ETH_FUND(address _log)\r\n    public \r\n    {\r\n        TransferLog = Log(_log);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _log)"
      VariableDeclaration "_log"
         Type: address
         Source: "address _log"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        TransferLog = Log(_log);\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "TransferLog = Log(_log)"
        Assignment using operator =
           Type: contract Log
           Source: "TransferLog = Log(_log)"
          Identifier TransferLog
             Type: contract Log
             Source: "TransferLog"
          FunctionCall
             Type: contract Log
             Source: "Log(_log)"
            Identifier Log
               Type: type(contract Log)
               Source: "Log"
            Identifier _log
               Type: address
               Source: "_log"
  FunctionDefinition "Deposit" - public
     Source: "function Deposit()\r\n    public\r\n    payable\r\n    {\r\n        if(msg.value > MinDeposit)\r\n        {\r\n            balances[msg.sender]+=msg.value;\r\n            TransferLog.AddMessage(msg.sender,msg.value,\"Deposit\");\r\n            lastBlock = block.number;\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if(msg.value > MinDeposit)\r\n        {\r\n            balances[msg.sender]+=msg.value;\r\n            TransferLog.AddMessage(msg.sender,msg.value,\"Deposit\");\r\n            lastBlock = block.number;\r\n        }\r\n    }"
      IfStatement
         Source: "if(msg.value > MinDeposit)\r\n        {\r\n            balances[msg.sender]+=msg.value;\r\n            TransferLog.AddMessage(msg.sender,msg.value,\"Deposit\");\r\n            lastBlock = block.number;\r\n        }"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 0
           Source: "msg.value > MinDeposit"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier MinDeposit
             Type: uint256
             Source: "MinDeposit"
        Block
           Source: "{\r\n            balances[msg.sender]+=msg.value;\r\n            TransferLog.AddMessage(msg.sender,msg.value,\"Deposit\");\r\n            lastBlock = block.number;\r\n        }"
          ExpressionStatement
             Gas costs: 0
             Source: "balances[msg.sender]+=msg.value"
            Assignment using operator +=
               Type: uint256
               Source: "balances[msg.sender]+=msg.value"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              MemberAccess to member value
                 Type: uint256
                 Source: "msg.value"
                Identifier msg
                   Type: msg
                   Source: "msg"
          ExpressionStatement
             Gas costs: 0
             Source: "TransferLog.AddMessage(msg.sender,msg.value,\"Deposit\")"
            FunctionCall
               Type: tuple()
               Source: "TransferLog.AddMessage(msg.sender,msg.value,\"Deposit\")"
              MemberAccess to member AddMessage
                 Type: function (address,uint256,string memory) external
                 Source: "TransferLog.AddMessage"
                Identifier TransferLog
                   Type: contract Log
                   Source: "TransferLog"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              MemberAccess to member value
                 Type: uint256
                 Source: "msg.value"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Literal, token: [no token] value: Deposit
                 Type: literal_string "Deposit"
                 Source: "\"Deposit\""
          ExpressionStatement
             Gas costs: 0
             Source: "lastBlock = block.number"
            Assignment using operator =
               Type: uint256
               Source: "lastBlock = block.number"
              Identifier lastBlock
                 Type: uint256
                 Source: "lastBlock"
              MemberAccess to member number
                 Type: uint256
                 Source: "block.number"
                Identifier block
                   Type: block
                   Source: "block"
  FunctionDefinition "CashOut" - public
     Source: "function CashOut(uint _am)\r\n    public\r\n    payable\r\n    {\r\n        if(_am<=balances[msg.sender]&&block.number>lastBlock)\r\n        {\r\n            // <yes> <report> REENTRANCY\r\n            if(msg.sender.call.value(_am)())\r\n            {\r\n                balances[msg.sender]-=_am;\r\n                TransferLog.AddMessage(msg.sender,_am,\"CashOut\");\r\n            }\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint _am)"
      VariableDeclaration "_am"
         Type: uint256
         Source: "uint _am"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if(_am<=balances[msg.sender]&&block.number>lastBlock)\r\n        {\r\n            // <yes> <report> REENTRANCY\r\n            if(msg.sender.call.value(_am)())\r\n            {\r\n                balances[msg.sender]-=_am;\r\n                TransferLog.AddMessage(msg.sender,_am,\"CashOut\");\r\n            }\r\n        }\r\n    }"
      IfStatement
         Source: "if(_am<=balances[msg.sender]&&block.number>lastBlock)\r\n        {\r\n            // <yes> <report> REENTRANCY\r\n            if(msg.sender.call.value(_am)())\r\n            {\r\n                balances[msg.sender]-=_am;\r\n                TransferLog.AddMessage(msg.sender,_am,\"CashOut\");\r\n            }\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 0
           Source: "_am<=balances[msg.sender]&&block.number>lastBlock"
          BinaryOperation using operator <=
             Type: bool
             Source: "_am<=balances[msg.sender]"
            Identifier _am
               Type: uint256
               Source: "_am"
            IndexAccess
               Type: uint256
               Source: "balances[msg.sender]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
          BinaryOperation using operator >
             Type: bool
             Source: "block.number>lastBlock"
            MemberAccess to member number
               Type: uint256
               Source: "block.number"
              Identifier block
                 Type: block
                 Source: "block"
            Identifier lastBlock
               Type: uint256
               Source: "lastBlock"
        Block
           Source: "{\r\n            // <yes> <report> REENTRANCY\r\n            if(msg.sender.call.value(_am)())\r\n            {\r\n                balances[msg.sender]-=_am;\r\n                TransferLog.AddMessage(msg.sender,_am,\"CashOut\");\r\n            }\r\n        }"
          IfStatement
             Source: "if(msg.sender.call.value(_am)())\r\n            {\r\n                balances[msg.sender]-=_am;\r\n                TransferLog.AddMessage(msg.sender,_am,\"CashOut\");\r\n            }"
            FunctionCall
               Type: bool
               Gas costs: 0
               Source: "msg.sender.call.value(_am)()"
              FunctionCall
                 Type: function () payable returns (bool)
                 Source: "msg.sender.call.value(_am)"
                MemberAccess to member value
                   Type: function (uint256) returns (function () payable returns (bool))
                   Source: "msg.sender.call.value"
                  MemberAccess to member call
                     Type: function () payable returns (bool)
                     Source: "msg.sender.call"
                    MemberAccess to member sender
                       Type: address
                       Source: "msg.sender"
                      Identifier msg
                         Type: msg
                         Source: "msg"
                Identifier _am
                   Type: uint256
                   Source: "_am"
            Block
               Source: "{\r\n                balances[msg.sender]-=_am;\r\n                TransferLog.AddMessage(msg.sender,_am,\"CashOut\");\r\n            }"
              ExpressionStatement
                 Gas costs: 0
                 Source: "balances[msg.sender]-=_am"
                Assignment using operator -=
                   Type: uint256
                   Source: "balances[msg.sender]-=_am"
                  IndexAccess
                     Type: uint256
                     Source: "balances[msg.sender]"
                    Identifier balances
                       Type: mapping(address => uint256)
                       Source: "balances"
                    MemberAccess to member sender
                       Type: address
                       Source: "msg.sender"
                      Identifier msg
                         Type: msg
                         Source: "msg"
                  Identifier _am
                     Type: uint256
                     Source: "_am"
              ExpressionStatement
                 Gas costs: 0
                 Source: "TransferLog.AddMessage(msg.sender,_am,\"CashOut\")"
                FunctionCall
                   Type: tuple()
                   Source: "TransferLog.AddMessage(msg.sender,_am,\"CashOut\")"
                  MemberAccess to member AddMessage
                     Type: function (address,uint256,string memory) external
                     Source: "TransferLog.AddMessage"
                    Identifier TransferLog
                       Type: contract Log
                       Source: "TransferLog"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
                  Identifier _am
                     Type: uint256
                     Source: "_am"
                  Literal, token: [no token] value: CashOut
                     Type: literal_string "CashOut"
                     Source: "\"CashOut\""
  FunctionDefinition "" - public
     Source: "function() public payable{}"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Gas costs: 0
       Source: "{}"
ContractDefinition "Log"
   Source: "contract Log \r\n{\r\n   \r\n    struct Message\r\n    {\r\n        address Sender;\r\n        string  Data;\r\n        uint Val;\r\n        uint  Time;\r\n    }\r\n    \r\n    Message[] public History;\r\n    \r\n    Message LastMsg;\r\n    \r\n    function AddMessage(address _adr,uint _val,string _data)\r\n    public\r\n    {\r\n        LastMsg.Sender = _adr;\r\n        LastMsg.Time = now;\r\n        LastMsg.Val = _val;\r\n        LastMsg.Data = _data;\r\n        History.push(LastMsg);\r\n    }\r\n}"
  StructDefinition "Message"
     Gas costs: 0
     Source: "struct Message\r\n    {\r\n        address Sender;\r\n        string  Data;\r\n        uint Val;\r\n        uint  Time;\r\n    }"
    VariableDeclaration "Sender"
       Type: address
       Source: "address Sender"
      ElementaryTypeName address
         Source: "address"
    VariableDeclaration "Data"
       Type: string storage pointer
       Source: "string  Data"
      ElementaryTypeName string
         Source: "string"
    VariableDeclaration "Val"
       Type: uint256
       Source: "uint Val"
      ElementaryTypeName uint
         Source: "uint"
    VariableDeclaration "Time"
       Type: uint256
       Source: "uint  Time"
      ElementaryTypeName uint
         Source: "uint"
  VariableDeclaration "History"
     Type: struct Log.Message storage ref[] storage ref
     Gas costs: [???]
     Source: "Message[] public History"
    ArrayTypeName
       Source: "Message[]"
      UserDefinedTypeName "Message"
         Source: "Message"
  VariableDeclaration "LastMsg"
     Type: struct Log.Message storage ref
     Gas costs: 0
     Source: "Message LastMsg"
    UserDefinedTypeName "Message"
       Source: "Message"
  FunctionDefinition "AddMessage" - public
     Source: "function AddMessage(address _adr,uint _val,string _data)\r\n    public\r\n    {\r\n        LastMsg.Sender = _adr;\r\n        LastMsg.Time = now;\r\n        LastMsg.Val = _val;\r\n        LastMsg.Data = _data;\r\n        History.push(LastMsg);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _adr,uint _val,string _data)"
      VariableDeclaration "_adr"
         Type: address
         Source: "address _adr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_val"
         Type: uint256
         Source: "uint _val"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_data"
         Type: string memory
         Source: "string _data"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        LastMsg.Sender = _adr;\r\n        LastMsg.Time = now;\r\n        LastMsg.Val = _val;\r\n        LastMsg.Data = _data;\r\n        History.push(LastMsg);\r\n    }"
      ExpressionStatement
         Gas costs: 20273
         Source: "LastMsg.Sender = _adr"
        Assignment using operator =
           Type: address
           Source: "LastMsg.Sender = _adr"
          MemberAccess to member Sender
             Type: address
             Source: "LastMsg.Sender"
            Identifier LastMsg
               Type: struct Log.Message storage ref
               Source: "LastMsg"
          Identifier _adr
             Type: address
             Source: "_adr"
      ExpressionStatement
         Gas costs: 20019
         Source: "LastMsg.Time = now"
        Assignment using operator =
           Type: uint256
           Source: "LastMsg.Time = now"
          MemberAccess to member Time
             Type: uint256
             Source: "LastMsg.Time"
            Identifier LastMsg
               Type: struct Log.Message storage ref
               Source: "LastMsg"
          Identifier now
             Type: uint256
             Source: "now"
      ExpressionStatement
         Gas costs: 20020
         Source: "LastMsg.Val = _val"
        Assignment using operator =
           Type: uint256
           Source: "LastMsg.Val = _val"
          MemberAccess to member Val
             Type: uint256
             Source: "LastMsg.Val"
            Identifier LastMsg
               Type: struct Log.Message storage ref
               Source: "LastMsg"
          Identifier _val
             Type: uint256
             Source: "_val"
      ExpressionStatement
         Gas costs: [???]
         Source: "LastMsg.Data = _data"
        Assignment using operator =
           Type: string storage ref
           Source: "LastMsg.Data = _data"
          MemberAccess to member Data
             Type: string storage ref
             Source: "LastMsg.Data"
            Identifier LastMsg
               Type: struct Log.Message storage ref
               Source: "LastMsg"
          Identifier _data
             Type: string memory
             Source: "_data"
      ExpressionStatement
         Gas costs: 61354
         Source: "History.push(LastMsg)"
        FunctionCall
           Type: uint256
           Source: "History.push(LastMsg)"
          MemberAccess to member push
             Type: function (struct Log.Message storage ref) returns (uint256)
             Source: "History.push"
            Identifier History
               Type: struct Log.Message storage ref[] storage ref
               Source: "History"
          Identifier LastMsg
             Type: struct Log.Message storage ref
             Source: "LastMsg"
