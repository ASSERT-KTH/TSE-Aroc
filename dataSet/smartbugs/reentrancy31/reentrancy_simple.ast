Syntax trees:


======= /home/fabric/ArocRevision/Aroc/dataSet/smartbugs-21-7-13/reentrancy31/reentrancy_simple.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.15;"
ContractDefinition "Reentrance"
   Source: "contract Reentrance {\n     mapping (address => uint) userBalance;\n\n     function getBalance(address u) constant returns(uint){\n         return userBalance[u];\n     }\n\n     function addToBalance() payable{\n         userBalance[msg.sender] += msg.value;\n     }\n\n     function withdrawBalance(){\n         // send userBalance[msg.sender] ethers to msg.sender\n         // if mgs.sender is a contract, it will call its fallback function\n         // <yes> <report> REENTRANCY\n         if( ! (msg.sender.call.value(userBalance[msg.sender])() ) ){\n             throw;\n         }\n         userBalance[msg.sender] = 0;\n     }\n }"
  VariableDeclaration "userBalance"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping (address => uint) userBalance"
    Mapping
       Source: "mapping (address => uint)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint
         Source: "uint"
  FunctionDefinition "getBalance" - public - const
     Source: "function getBalance(address u) constant returns(uint){\n         return userBalance[u];\n     }"
    ParameterList
       Gas costs: 0
       Source: "(address u)"
      VariableDeclaration "u"
         Type: address
         Source: "address u"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\n         return userBalance[u];\n     }"
      Return
         Gas costs: 304
         Source: "return userBalance[u]"
        IndexAccess
           Type: uint256
           Source: "userBalance[u]"
          Identifier userBalance
             Type: mapping(address => uint256)
             Source: "userBalance"
          Identifier u
             Type: address
             Source: "u"
  FunctionDefinition "addToBalance" - public
     Source: "function addToBalance() payable{\n         userBalance[msg.sender] += msg.value;\n     }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n         userBalance[msg.sender] += msg.value;\n     }"
      ExpressionStatement
         Gas costs: 20327
         Source: "userBalance[msg.sender] += msg.value"
        Assignment using operator +=
           Type: uint256
           Source: "userBalance[msg.sender] += msg.value"
          IndexAccess
             Type: uint256
             Source: "userBalance[msg.sender]"
            Identifier userBalance
               Type: mapping(address => uint256)
               Source: "userBalance"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "withdrawBalance" - public
     Source: "function withdrawBalance(){\n         // send userBalance[msg.sender] ethers to msg.sender\n         // if mgs.sender is a contract, it will call its fallback function\n         // <yes> <report> REENTRANCY\n         if( ! (msg.sender.call.value(userBalance[msg.sender])() ) ){\n             throw;\n         }\n         userBalance[msg.sender] = 0;\n     }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n         // send userBalance[msg.sender] ethers to msg.sender\n         // if mgs.sender is a contract, it will call its fallback function\n         // <yes> <report> REENTRANCY\n         if( ! (msg.sender.call.value(userBalance[msg.sender])() ) ){\n             throw;\n         }\n         userBalance[msg.sender] = 0;\n     }"
      IfStatement
         Source: "if( ! (msg.sender.call.value(userBalance[msg.sender])() ) ){\n             throw;\n         }"
        UnaryOperation (prefix) !
           Type: bool
           Gas costs: [???]
           Source: "! (msg.sender.call.value(userBalance[msg.sender])() )"
          TupleExpression
             Type: bool
             Source: "(msg.sender.call.value(userBalance[msg.sender])() )"
            FunctionCall
               Type: bool
               Source: "msg.sender.call.value(userBalance[msg.sender])()"
              FunctionCall
                 Type: function () payable returns (bool)
                 Source: "msg.sender.call.value(userBalance[msg.sender])"
                MemberAccess to member value
                   Type: function (uint256) returns (function () payable returns (bool))
                   Source: "msg.sender.call.value"
                  MemberAccess to member call
                     Type: function () payable returns (bool)
                     Source: "msg.sender.call"
                    MemberAccess to member sender
                       Type: address
                       Source: "msg.sender"
                      Identifier msg
                         Type: msg
                         Source: "msg"
                IndexAccess
                   Type: uint256
                   Source: "userBalance[msg.sender]"
                  Identifier userBalance
                     Type: mapping(address => uint256)
                     Source: "userBalance"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
        Block
           Source: "{\n             throw;\n         }"
          Throw
             Gas costs: 6
             Source: "throw"
      ExpressionStatement
         Gas costs: 5109
         Source: "userBalance[msg.sender] = 0"
        Assignment using operator =
           Type: uint256
           Source: "userBalance[msg.sender] = 0"
          IndexAccess
             Type: uint256
             Source: "userBalance[msg.sender]"
            Identifier userBalance
               Type: mapping(address => uint256)
               Source: "userBalance"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
