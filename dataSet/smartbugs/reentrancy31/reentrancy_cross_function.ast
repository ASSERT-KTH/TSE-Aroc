Syntax trees:


======= /home/fabric/ArocRevision/Aroc/dataSet/smartbugs-21-7-13/reentrancy31/reentrancy_cross_function.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.0;"
ContractDefinition "Reentrancy_cross_function"
   Source: "contract Reentrancy_cross_function {\n\n    // INSECURE\n    mapping (address => uint) private userBalances;\n\n    function transfer(address to, uint amount) {\n        if (userBalances[msg.sender] >= amount) {\n            userBalances[to] += amount;\n            userBalances[msg.sender] -= amount;\n        }\n    }\n\n    function withdrawBalance() public {\n        uint amountToWithdraw = userBalances[msg.sender];\n        // <yes> <report> REENTRANCY\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\"); // At this point, the caller's code is executed, and can call transfer()\n        require(success);\n        userBalances[msg.sender] = 0;\n    }\n}"
  VariableDeclaration "userBalances"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping (address => uint) private userBalances"
    Mapping
       Source: "mapping (address => uint)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint
         Source: "uint"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address to, uint amount) {\n        if (userBalances[msg.sender] >= amount) {\n            userBalances[to] += amount;\n            userBalances[msg.sender] -= amount;\n        }\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address to, uint amount)"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "amount"
         Type: uint256
         Source: "uint amount"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        if (userBalances[msg.sender] >= amount) {\n            userBalances[to] += amount;\n            userBalances[msg.sender] -= amount;\n        }\n    }"
      IfStatement
         Source: "if (userBalances[msg.sender] >= amount) {\n            userBalances[to] += amount;\n            userBalances[msg.sender] -= amount;\n        }"
        BinaryOperation using operator >=
           Type: bool
           Gas costs: 307
           Source: "userBalances[msg.sender] >= amount"
          IndexAccess
             Type: uint256
             Source: "userBalances[msg.sender]"
            Identifier userBalances
               Type: mapping(address => uint256)
               Source: "userBalances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier amount
             Type: uint256
             Source: "amount"
        Block
           Source: "{\n            userBalances[to] += amount;\n            userBalances[msg.sender] -= amount;\n        }"
          ExpressionStatement
             Gas costs: 20329
             Source: "userBalances[to] += amount"
            Assignment using operator +=
               Type: uint256
               Source: "userBalances[to] += amount"
              IndexAccess
                 Type: uint256
                 Source: "userBalances[to]"
                Identifier userBalances
                   Type: mapping(address => uint256)
                   Source: "userBalances"
                Identifier to
                   Type: address
                   Source: "to"
              Identifier amount
                 Type: uint256
                 Source: "amount"
          ExpressionStatement
             Gas costs: 20322
             Source: "userBalances[msg.sender] -= amount"
            Assignment using operator -=
               Type: uint256
               Source: "userBalances[msg.sender] -= amount"
              IndexAccess
                 Type: uint256
                 Source: "userBalances[msg.sender]"
                Identifier userBalances
                   Type: mapping(address => uint256)
                   Source: "userBalances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier amount
                 Type: uint256
                 Source: "amount"
  FunctionDefinition "withdrawBalance" - public
     Source: "function withdrawBalance() public {\n        uint amountToWithdraw = userBalances[msg.sender];\n        // <yes> <report> REENTRANCY\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\"); // At this point, the caller's code is executed, and can call transfer()\n        require(success);\n        userBalances[msg.sender] = 0;\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        uint amountToWithdraw = userBalances[msg.sender];\n        // <yes> <report> REENTRANCY\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\"); // At this point, the caller's code is executed, and can call transfer()\n        require(success);\n        userBalances[msg.sender] = 0;\n    }"
      VariableDeclarationStatement
         Gas costs: 306
         Source: "uint amountToWithdraw = userBalances[msg.sender]"
        VariableDeclaration "amountToWithdraw"
           Type: uint256
           Source: "uint amountToWithdraw"
          ElementaryTypeName uint
             Source: "uint"
        IndexAccess
           Type: uint256
           Source: "userBalances[msg.sender]"
          Identifier userBalances
             Type: mapping(address => uint256)
             Source: "userBalances"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "(bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\")"
        VariableDeclaration "success"
           Type: bool
           Source: "bool success"
          ElementaryTypeName bool
             Source: "bool"
        FunctionCall
           Type: bool
           Source: "msg.sender.call.value(amountToWithdraw)(\"\")"
          FunctionCall
             Type: function () payable returns (bool)
             Source: "msg.sender.call.value(amountToWithdraw)"
            MemberAccess to member value
               Type: function (uint256) returns (function () payable returns (bool))
               Source: "msg.sender.call.value"
              MemberAccess to member call
                 Type: function () payable returns (bool)
                 Source: "msg.sender.call"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
            Identifier amountToWithdraw
               Type: uint256
               Source: "amountToWithdraw"
          Literal, token: [no token] value: 
             Type: literal_string ""
             Source: "\"\""
      ExpressionStatement
         Gas costs: 29
         Source: "require(success)"
        FunctionCall
           Type: tuple()
           Source: "require(success)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          Identifier success
             Type: bool
             Source: "success"
      ExpressionStatement
         Gas costs: 5109
         Source: "userBalances[msg.sender] = 0"
        Assignment using operator =
           Type: uint256
           Source: "userBalances[msg.sender] = 0"
          IndexAccess
             Type: uint256
             Source: "userBalances[msg.sender]"
            Identifier userBalances
               Type: mapping(address => uint256)
               Source: "userBalances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
