Syntax trees:


======= /home/fabric/ArocRevision/Aroc/dataSet/smartbugs-21-7-13/reentrancy31/reentrance.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.18;"
ContractDefinition "Reentrance"
   Source: "contract Reentrance {\n\n  mapping(address => uint) public balances;\n\n  function donate(address _to) public payable {\n    balances[_to] += msg.value;\n  }\n\n  function balanceOf(address _who) public view returns (uint balance) {\n    return balances[_who];\n  }\n\n  function withdraw(uint _amount) public {\n    if(balances[msg.sender] >= _amount) {\n      // <yes> <report> REENTRANCY\n      if(msg.sender.call.value(_amount)()) {\n        _amount;\n      }\n      balances[msg.sender] -= _amount;\n    }\n  }\n\n  function() public payable {}\n}"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: 431
     Source: "mapping(address => uint) public balances"
    Mapping
       Source: "mapping(address => uint)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint
         Source: "uint"
  FunctionDefinition "donate" - public
     Source: "function donate(address _to) public payable {\n    balances[_to] += msg.value;\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _to)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n    balances[_to] += msg.value;\n  }"
      ExpressionStatement
         Gas costs: 20328
         Source: "balances[_to] += msg.value"
        Assignment using operator +=
           Type: uint256
           Source: "balances[_to] += msg.value"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _who) public view returns (uint balance) {\n    return balances[_who];\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address _who)"
      VariableDeclaration "_who"
         Type: address
         Source: "address _who"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint balance"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\n    return balances[_who];\n  }"
      Return
         Gas costs: 304
         Source: "return balances[_who]"
        IndexAccess
           Type: uint256
           Source: "balances[_who]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          Identifier _who
             Type: address
             Source: "_who"
  FunctionDefinition "withdraw" - public
     Source: "function withdraw(uint _amount) public {\n    if(balances[msg.sender] >= _amount) {\n      // <yes> <report> REENTRANCY\n      if(msg.sender.call.value(_amount)()) {\n        _amount;\n      }\n      balances[msg.sender] -= _amount;\n    }\n  }"
    ParameterList
       Gas costs: 0
       Source: "(uint _amount)"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint _amount"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n    if(balances[msg.sender] >= _amount) {\n      // <yes> <report> REENTRANCY\n      if(msg.sender.call.value(_amount)()) {\n        _amount;\n      }\n      balances[msg.sender] -= _amount;\n    }\n  }"
      IfStatement
         Source: "if(balances[msg.sender] >= _amount) {\n      // <yes> <report> REENTRANCY\n      if(msg.sender.call.value(_amount)()) {\n        _amount;\n      }\n      balances[msg.sender] -= _amount;\n    }"
        BinaryOperation using operator >=
           Type: bool
           Gas costs: 307
           Source: "balances[msg.sender] >= _amount"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _amount
             Type: uint256
             Source: "_amount"
        Block
           Source: "{\n      // <yes> <report> REENTRANCY\n      if(msg.sender.call.value(_amount)()) {\n        _amount;\n      }\n      balances[msg.sender] -= _amount;\n    }"
          IfStatement
             Source: "if(msg.sender.call.value(_amount)()) {\n        _amount;\n      }"
            FunctionCall
               Type: bool
               Gas costs: [???]
               Source: "msg.sender.call.value(_amount)()"
              FunctionCall
                 Type: function () payable returns (bool)
                 Source: "msg.sender.call.value(_amount)"
                MemberAccess to member value
                   Type: function (uint256) returns (function () payable returns (bool))
                   Source: "msg.sender.call.value"
                  MemberAccess to member call
                     Type: function () payable returns (bool)
                     Source: "msg.sender.call"
                    MemberAccess to member sender
                       Type: address
                       Source: "msg.sender"
                      Identifier msg
                         Type: msg
                         Source: "msg"
                Identifier _amount
                   Type: uint256
                   Source: "_amount"
            Block
               Source: "{\n        _amount;\n      }"
              ExpressionStatement
                 Gas costs: 0
                 Source: "_amount"
                Identifier _amount
                   Type: uint256
                   Source: "_amount"
          ExpressionStatement
             Gas costs: 20322
             Source: "balances[msg.sender] -= _amount"
            Assignment using operator -=
               Type: uint256
               Source: "balances[msg.sender] -= _amount"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
  FunctionDefinition "" - public
     Source: "function() public payable {}"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Gas costs: 0
       Source: "{}"
