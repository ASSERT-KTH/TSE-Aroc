Syntax trees:


======= /home/fabric/ArocRevision/Aroc/dataSet/smartbugs-21-7-13/reentrancy31/0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.19;"
ContractDefinition "PERSONAL_BANK"
   Source: "contract PERSONAL_BANK  {\r\n\r\n    mapping (address=>uint256) public balances;   \r\n   \r\n    uint public MinSum = 1 ether;\r\n    \r\n    LogFile Log = LogFile(0x0486cF65A2F2F3A392CBEa398AFB7F5f0B72FF46);\r\n    \r\n    bool intitalized;\r\n    \r\n    function SetMinSum(uint _val)\r\n    public\r\n    {\r\n        if(intitalized)revert();\r\n        MinSum = _val;\r\n    }\r\n    \r\n    function SetLogFile(address _log)\r\n    public\r\n    {\r\n        if(intitalized)revert();\r\n        Log = LogFile(_log);\r\n    }\r\n    \r\n    function Initialized()\r\n    public\r\n    {\r\n        intitalized = true;\r\n    }\r\n    \r\n    function Deposit()\r\n    public\r\n    payable\r\n    {\r\n        balances[msg.sender]+= msg.value;\r\n        Log.AddMessage(msg.sender,msg.value,\"Put\");\r\n    }\r\n    \r\n    function Collect(uint _am)\r\n    public\r\n    payable\r\n    {\r\n        if(balances[msg.sender]>=MinSum && balances[msg.sender]>=_am)\r\n        {\r\n            // <yes> <report> REENTRANCY\r\n            if(msg.sender.call.value(_am)())\r\n            {\r\n                balances[msg.sender]-=_am;\r\n                Log.AddMessage(msg.sender,_am,\"Collect\");\r\n            }\r\n        }\r\n    }\r\n    \r\n    function() \r\n    public \r\n    payable\r\n    {\r\n        Deposit();\r\n    }\r\n    \r\n}"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping (address=>uint256) public balances"
    Mapping
       Source: "mapping (address=>uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "MinSum"
     Type: uint256
     Gas costs: 0
     Source: "uint public MinSum = 1 ether"
    ElementaryTypeName uint
       Source: "uint"
    Literal, token: [no token] value: 1
       Type: int_const 1000000000000000000
       Source: "1 ether"
  VariableDeclaration "Log"
     Type: contract LogFile
     Gas costs: 0
     Source: "LogFile Log = LogFile(0x0486cF65A2F2F3A392CBEa398AFB7F5f0B72FF46)"
    UserDefinedTypeName "LogFile"
       Source: "LogFile"
    FunctionCall
       Type: contract LogFile
       Source: "LogFile(0x0486cF65A2F2F3A392CBEa398AFB7F5f0B72FF46)"
      Identifier LogFile
         Type: type(contract LogFile)
         Source: "LogFile"
      Literal, token: [no token] value: 0x0486cF65A2F2F3A392CBEa398AFB7F5f0B72FF46
         Type: address
         Source: "0x0486cF65A2F2F3A392CBEa398AFB7F5f0B72FF46"
  VariableDeclaration "intitalized"
     Type: bool
     Gas costs: 0
     Source: "bool intitalized"
    ElementaryTypeName bool
       Source: "bool"
  FunctionDefinition "SetMinSum" - public
     Source: "function SetMinSum(uint _val)\r\n    public\r\n    {\r\n        if(intitalized)revert();\r\n        MinSum = _val;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint _val)"
      VariableDeclaration "_val"
         Type: uint256
         Source: "uint _val"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if(intitalized)revert();\r\n        MinSum = _val;\r\n    }"
      IfStatement
         Source: "if(intitalized)revert()"
        Identifier intitalized
           Type: bool
           Gas costs: 0
           Source: "intitalized"
        ExpressionStatement
           Gas costs: 0
           Source: "revert()"
          FunctionCall
             Type: tuple()
             Source: "revert()"
            Identifier revert
               Type: function () pure
               Source: "revert"
      ExpressionStatement
         Gas costs: 0
         Source: "MinSum = _val"
        Assignment using operator =
           Type: uint256
           Source: "MinSum = _val"
          Identifier MinSum
             Type: uint256
             Source: "MinSum"
          Identifier _val
             Type: uint256
             Source: "_val"
  FunctionDefinition "SetLogFile" - public
     Source: "function SetLogFile(address _log)\r\n    public\r\n    {\r\n        if(intitalized)revert();\r\n        Log = LogFile(_log);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _log)"
      VariableDeclaration "_log"
         Type: address
         Source: "address _log"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if(intitalized)revert();\r\n        Log = LogFile(_log);\r\n    }"
      IfStatement
         Source: "if(intitalized)revert()"
        Identifier intitalized
           Type: bool
           Gas costs: 0
           Source: "intitalized"
        ExpressionStatement
           Gas costs: 0
           Source: "revert()"
          FunctionCall
             Type: tuple()
             Source: "revert()"
            Identifier revert
               Type: function () pure
               Source: "revert"
      ExpressionStatement
         Gas costs: 0
         Source: "Log = LogFile(_log)"
        Assignment using operator =
           Type: contract LogFile
           Source: "Log = LogFile(_log)"
          Identifier Log
             Type: contract LogFile
             Source: "Log"
          FunctionCall
             Type: contract LogFile
             Source: "LogFile(_log)"
            Identifier LogFile
               Type: type(contract LogFile)
               Source: "LogFile"
            Identifier _log
               Type: address
               Source: "_log"
  FunctionDefinition "Initialized" - public
     Source: "function Initialized()\r\n    public\r\n    {\r\n        intitalized = true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        intitalized = true;\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "intitalized = true"
        Assignment using operator =
           Type: bool
           Source: "intitalized = true"
          Identifier intitalized
             Type: bool
             Source: "intitalized"
          Literal, token: true value: true
             Type: bool
             Source: "true"
  FunctionDefinition "Deposit" - public
     Source: "function Deposit()\r\n    public\r\n    payable\r\n    {\r\n        balances[msg.sender]+= msg.value;\r\n        Log.AddMessage(msg.sender,msg.value,\"Put\");\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        balances[msg.sender]+= msg.value;\r\n        Log.AddMessage(msg.sender,msg.value,\"Put\");\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "balances[msg.sender]+= msg.value"
        Assignment using operator +=
           Type: uint256
           Source: "balances[msg.sender]+= msg.value"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 0
         Source: "Log.AddMessage(msg.sender,msg.value,\"Put\")"
        FunctionCall
           Type: tuple()
           Source: "Log.AddMessage(msg.sender,msg.value,\"Put\")"
          MemberAccess to member AddMessage
             Type: function (address,uint256,string memory) external
             Source: "Log.AddMessage"
            Identifier Log
               Type: contract LogFile
               Source: "Log"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
          Literal, token: [no token] value: Put
             Type: literal_string "Put"
             Source: "\"Put\""
  FunctionDefinition "Collect" - public
     Source: "function Collect(uint _am)\r\n    public\r\n    payable\r\n    {\r\n        if(balances[msg.sender]>=MinSum && balances[msg.sender]>=_am)\r\n        {\r\n            // <yes> <report> REENTRANCY\r\n            if(msg.sender.call.value(_am)())\r\n            {\r\n                balances[msg.sender]-=_am;\r\n                Log.AddMessage(msg.sender,_am,\"Collect\");\r\n            }\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint _am)"
      VariableDeclaration "_am"
         Type: uint256
         Source: "uint _am"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if(balances[msg.sender]>=MinSum && balances[msg.sender]>=_am)\r\n        {\r\n            // <yes> <report> REENTRANCY\r\n            if(msg.sender.call.value(_am)())\r\n            {\r\n                balances[msg.sender]-=_am;\r\n                Log.AddMessage(msg.sender,_am,\"Collect\");\r\n            }\r\n        }\r\n    }"
      IfStatement
         Source: "if(balances[msg.sender]>=MinSum && balances[msg.sender]>=_am)\r\n        {\r\n            // <yes> <report> REENTRANCY\r\n            if(msg.sender.call.value(_am)())\r\n            {\r\n                balances[msg.sender]-=_am;\r\n                Log.AddMessage(msg.sender,_am,\"Collect\");\r\n            }\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 0
           Source: "balances[msg.sender]>=MinSum && balances[msg.sender]>=_am"
          BinaryOperation using operator >=
             Type: bool
             Source: "balances[msg.sender]>=MinSum"
            IndexAccess
               Type: uint256
               Source: "balances[msg.sender]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier MinSum
               Type: uint256
               Source: "MinSum"
          BinaryOperation using operator >=
             Type: bool
             Source: "balances[msg.sender]>=_am"
            IndexAccess
               Type: uint256
               Source: "balances[msg.sender]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _am
               Type: uint256
               Source: "_am"
        Block
           Source: "{\r\n            // <yes> <report> REENTRANCY\r\n            if(msg.sender.call.value(_am)())\r\n            {\r\n                balances[msg.sender]-=_am;\r\n                Log.AddMessage(msg.sender,_am,\"Collect\");\r\n            }\r\n        }"
          IfStatement
             Source: "if(msg.sender.call.value(_am)())\r\n            {\r\n                balances[msg.sender]-=_am;\r\n                Log.AddMessage(msg.sender,_am,\"Collect\");\r\n            }"
            FunctionCall
               Type: bool
               Gas costs: 0
               Source: "msg.sender.call.value(_am)()"
              FunctionCall
                 Type: function () payable returns (bool)
                 Source: "msg.sender.call.value(_am)"
                MemberAccess to member value
                   Type: function (uint256) returns (function () payable returns (bool))
                   Source: "msg.sender.call.value"
                  MemberAccess to member call
                     Type: function () payable returns (bool)
                     Source: "msg.sender.call"
                    MemberAccess to member sender
                       Type: address
                       Source: "msg.sender"
                      Identifier msg
                         Type: msg
                         Source: "msg"
                Identifier _am
                   Type: uint256
                   Source: "_am"
            Block
               Source: "{\r\n                balances[msg.sender]-=_am;\r\n                Log.AddMessage(msg.sender,_am,\"Collect\");\r\n            }"
              ExpressionStatement
                 Gas costs: 0
                 Source: "balances[msg.sender]-=_am"
                Assignment using operator -=
                   Type: uint256
                   Source: "balances[msg.sender]-=_am"
                  IndexAccess
                     Type: uint256
                     Source: "balances[msg.sender]"
                    Identifier balances
                       Type: mapping(address => uint256)
                       Source: "balances"
                    MemberAccess to member sender
                       Type: address
                       Source: "msg.sender"
                      Identifier msg
                         Type: msg
                         Source: "msg"
                  Identifier _am
                     Type: uint256
                     Source: "_am"
              ExpressionStatement
                 Gas costs: 0
                 Source: "Log.AddMessage(msg.sender,_am,\"Collect\")"
                FunctionCall
                   Type: tuple()
                   Source: "Log.AddMessage(msg.sender,_am,\"Collect\")"
                  MemberAccess to member AddMessage
                     Type: function (address,uint256,string memory) external
                     Source: "Log.AddMessage"
                    Identifier Log
                       Type: contract LogFile
                       Source: "Log"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
                  Identifier _am
                     Type: uint256
                     Source: "_am"
                  Literal, token: [no token] value: Collect
                     Type: literal_string "Collect"
                     Source: "\"Collect\""
  FunctionDefinition "" - public
     Source: "function() \r\n    public \r\n    payable\r\n    {\r\n        Deposit();\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        Deposit();\r\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "Deposit()"
        FunctionCall
           Type: tuple()
           Source: "Deposit()"
          Identifier Deposit
             Type: function ()
             Source: "Deposit"
ContractDefinition "LogFile"
   Source: "contract LogFile\r\n{\r\n    struct Message\r\n    {\r\n        address Sender;\r\n        string  Data;\r\n        uint Val;\r\n        uint  Time;\r\n    }\r\n    \r\n    Message[] public History;\r\n    \r\n    Message LastMsg;\r\n    \r\n    function AddMessage(address _adr,uint _val,string _data)\r\n    public\r\n    {\r\n        LastMsg.Sender = _adr;\r\n        LastMsg.Time = now;\r\n        LastMsg.Val = _val;\r\n        LastMsg.Data = _data;\r\n        History.push(LastMsg);\r\n    }\r\n}"
  StructDefinition "Message"
     Gas costs: 0
     Source: "struct Message\r\n    {\r\n        address Sender;\r\n        string  Data;\r\n        uint Val;\r\n        uint  Time;\r\n    }"
    VariableDeclaration "Sender"
       Type: address
       Source: "address Sender"
      ElementaryTypeName address
         Source: "address"
    VariableDeclaration "Data"
       Type: string storage pointer
       Source: "string  Data"
      ElementaryTypeName string
         Source: "string"
    VariableDeclaration "Val"
       Type: uint256
       Source: "uint Val"
      ElementaryTypeName uint
         Source: "uint"
    VariableDeclaration "Time"
       Type: uint256
       Source: "uint  Time"
      ElementaryTypeName uint
         Source: "uint"
  VariableDeclaration "History"
     Type: struct LogFile.Message storage ref[] storage ref
     Gas costs: [???]
     Source: "Message[] public History"
    ArrayTypeName
       Source: "Message[]"
      UserDefinedTypeName "Message"
         Source: "Message"
  VariableDeclaration "LastMsg"
     Type: struct LogFile.Message storage ref
     Gas costs: 0
     Source: "Message LastMsg"
    UserDefinedTypeName "Message"
       Source: "Message"
  FunctionDefinition "AddMessage" - public
     Source: "function AddMessage(address _adr,uint _val,string _data)\r\n    public\r\n    {\r\n        LastMsg.Sender = _adr;\r\n        LastMsg.Time = now;\r\n        LastMsg.Val = _val;\r\n        LastMsg.Data = _data;\r\n        History.push(LastMsg);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _adr,uint _val,string _data)"
      VariableDeclaration "_adr"
         Type: address
         Source: "address _adr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_val"
         Type: uint256
         Source: "uint _val"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_data"
         Type: string memory
         Source: "string _data"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        LastMsg.Sender = _adr;\r\n        LastMsg.Time = now;\r\n        LastMsg.Val = _val;\r\n        LastMsg.Data = _data;\r\n        History.push(LastMsg);\r\n    }"
      ExpressionStatement
         Gas costs: 20273
         Source: "LastMsg.Sender = _adr"
        Assignment using operator =
           Type: address
           Source: "LastMsg.Sender = _adr"
          MemberAccess to member Sender
             Type: address
             Source: "LastMsg.Sender"
            Identifier LastMsg
               Type: struct LogFile.Message storage ref
               Source: "LastMsg"
          Identifier _adr
             Type: address
             Source: "_adr"
      ExpressionStatement
         Gas costs: 20019
         Source: "LastMsg.Time = now"
        Assignment using operator =
           Type: uint256
           Source: "LastMsg.Time = now"
          MemberAccess to member Time
             Type: uint256
             Source: "LastMsg.Time"
            Identifier LastMsg
               Type: struct LogFile.Message storage ref
               Source: "LastMsg"
          Identifier now
             Type: uint256
             Source: "now"
      ExpressionStatement
         Gas costs: 20020
         Source: "LastMsg.Val = _val"
        Assignment using operator =
           Type: uint256
           Source: "LastMsg.Val = _val"
          MemberAccess to member Val
             Type: uint256
             Source: "LastMsg.Val"
            Identifier LastMsg
               Type: struct LogFile.Message storage ref
               Source: "LastMsg"
          Identifier _val
             Type: uint256
             Source: "_val"
      ExpressionStatement
         Gas costs: [???]
         Source: "LastMsg.Data = _data"
        Assignment using operator =
           Type: string storage ref
           Source: "LastMsg.Data = _data"
          MemberAccess to member Data
             Type: string storage ref
             Source: "LastMsg.Data"
            Identifier LastMsg
               Type: struct LogFile.Message storage ref
               Source: "LastMsg"
          Identifier _data
             Type: string memory
             Source: "_data"
      ExpressionStatement
         Gas costs: 61354
         Source: "History.push(LastMsg)"
        FunctionCall
           Type: uint256
           Source: "History.push(LastMsg)"
          MemberAccess to member push
             Type: function (struct LogFile.Message storage ref) returns (uint256)
             Source: "History.push"
            Identifier History
               Type: struct LogFile.Message storage ref[] storage ref
               Source: "History"
          Identifier LastMsg
             Type: struct LogFile.Message storage ref
             Source: "LastMsg"
