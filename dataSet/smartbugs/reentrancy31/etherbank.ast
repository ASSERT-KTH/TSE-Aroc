Syntax trees:


======= /home/fabric/ArocRevision/Aroc/dataSet/smartbugs-21-7-13/reentrancy31/etherbank.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.0;"
ContractDefinition "EtherBank"
   Source: "contract EtherBank{\n    mapping (address => uint) userBalances;\n    function getBalance(address user) constant returns(uint) {  \n\t\treturn userBalances[user];\n\t}\n\n\tfunction addToBalance() {  \n\t\tuserBalances[msg.sender] += msg.value;\n\t}\n\n\tfunction withdrawBalance() {  \n\t\tuint amountToWithdraw = userBalances[msg.sender];\n        // <yes> <report> REENTRANCY\n\t\tif (!(msg.sender.call.value(amountToWithdraw)())) { throw; }\n\t\tuserBalances[msg.sender] = 0;\n\t}    \n}"
  VariableDeclaration "userBalances"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping (address => uint) userBalances"
    Mapping
       Source: "mapping (address => uint)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint
         Source: "uint"
  FunctionDefinition "getBalance" - public - const
     Source: "function getBalance(address user) constant returns(uint) {  \n\t\treturn userBalances[user];\n\t}"
    ParameterList
       Gas costs: 0
       Source: "(address user)"
      VariableDeclaration "user"
         Type: address
         Source: "address user"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{  \n\t\treturn userBalances[user];\n\t}"
      Return
         Gas costs: 304
         Source: "return userBalances[user]"
        IndexAccess
           Type: uint256
           Source: "userBalances[user]"
          Identifier userBalances
             Type: mapping(address => uint256)
             Source: "userBalances"
          Identifier user
             Type: address
             Source: "user"
  FunctionDefinition "addToBalance" - public
     Source: "function addToBalance() {  \n\t\tuserBalances[msg.sender] += msg.value;\n\t}"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{  \n\t\tuserBalances[msg.sender] += msg.value;\n\t}"
      ExpressionStatement
         Gas costs: 20327
         Source: "userBalances[msg.sender] += msg.value"
        Assignment using operator +=
           Type: uint256
           Source: "userBalances[msg.sender] += msg.value"
          IndexAccess
             Type: uint256
             Source: "userBalances[msg.sender]"
            Identifier userBalances
               Type: mapping(address => uint256)
               Source: "userBalances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "withdrawBalance" - public
     Source: "function withdrawBalance() {  \n\t\tuint amountToWithdraw = userBalances[msg.sender];\n        // <yes> <report> REENTRANCY\n\t\tif (!(msg.sender.call.value(amountToWithdraw)())) { throw; }\n\t\tuserBalances[msg.sender] = 0;\n\t}"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{  \n\t\tuint amountToWithdraw = userBalances[msg.sender];\n        // <yes> <report> REENTRANCY\n\t\tif (!(msg.sender.call.value(amountToWithdraw)())) { throw; }\n\t\tuserBalances[msg.sender] = 0;\n\t}"
      VariableDeclarationStatement
         Gas costs: 306
         Source: "uint amountToWithdraw = userBalances[msg.sender]"
        VariableDeclaration "amountToWithdraw"
           Type: uint256
           Source: "uint amountToWithdraw"
          ElementaryTypeName uint
             Source: "uint"
        IndexAccess
           Type: uint256
           Source: "userBalances[msg.sender]"
          Identifier userBalances
             Type: mapping(address => uint256)
             Source: "userBalances"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      IfStatement
         Source: "if (!(msg.sender.call.value(amountToWithdraw)())) { throw; }"
        UnaryOperation (prefix) !
           Type: bool
           Gas costs: [???]
           Source: "!(msg.sender.call.value(amountToWithdraw)())"
          TupleExpression
             Type: bool
             Source: "(msg.sender.call.value(amountToWithdraw)())"
            FunctionCall
               Type: bool
               Source: "msg.sender.call.value(amountToWithdraw)()"
              FunctionCall
                 Type: function () payable returns (bool)
                 Source: "msg.sender.call.value(amountToWithdraw)"
                MemberAccess to member value
                   Type: function (uint256) returns (function () payable returns (bool))
                   Source: "msg.sender.call.value"
                  MemberAccess to member call
                     Type: function () payable returns (bool)
                     Source: "msg.sender.call"
                    MemberAccess to member sender
                       Type: address
                       Source: "msg.sender"
                      Identifier msg
                         Type: msg
                         Source: "msg"
                Identifier amountToWithdraw
                   Type: uint256
                   Source: "amountToWithdraw"
        Block
           Source: "{ throw; }"
          Throw
             Gas costs: 6
             Source: "throw"
      ExpressionStatement
         Gas costs: 5109
         Source: "userBalances[msg.sender] = 0"
        Assignment using operator =
           Type: uint256
           Source: "userBalances[msg.sender] = 0"
          IndexAccess
             Type: uint256
             Source: "userBalances[msg.sender]"
            Identifier userBalances
               Type: mapping(address => uint256)
               Source: "userBalances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
