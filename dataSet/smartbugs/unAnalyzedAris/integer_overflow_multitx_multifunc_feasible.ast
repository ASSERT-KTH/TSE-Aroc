Syntax trees:


======= integer_overflow_multitx_multifunc_feasible.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.23;"
ContractDefinition "IntegerOverflowMultiTxMultiFuncFeasible"
   Source: "contract IntegerOverflowMultiTxMultiFuncFeasible {\n    uint256 private initialized = 0;\n    uint256 public count = 1;\n\n    function init() public {\n        initialized = 1;\n    }\n\n    function run(uint256 input) {\n        if (initialized == 0) {\n            return;\n        }\n        // <yes> <report> ARITHMETIC\n        count -= input;\n    }\n}"
  VariableDeclaration "initialized"
     Type: uint256
     Gas costs: 0
     Source: "uint256 private initialized = 0"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0
       Type: int_const 0
       Source: "0"
  VariableDeclaration "count"
     Type: uint256
     Gas costs: 287
     Source: "uint256 public count = 1"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 1
       Type: int_const 1
       Source: "1"
  FunctionDefinition "init" - public
     Source: "function init() public {\n        initialized = 1;\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        initialized = 1;\n    }"
      ExpressionStatement
         Gas costs: 20014
         Source: "initialized = 1"
        Assignment using operator =
           Type: uint256
           Source: "initialized = 1"
          Identifier initialized
             Type: uint256
             Source: "initialized"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
  FunctionDefinition "run" - public
     Source: "function run(uint256 input) {\n        if (initialized == 0) {\n            return;\n        }\n        // <yes> <report> ARITHMETIC\n        count -= input;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 input)"
      VariableDeclaration "input"
         Type: uint256
         Source: "uint256 input"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        if (initialized == 0) {\n            return;\n        }\n        // <yes> <report> ARITHMETIC\n        count -= input;\n    }"
      IfStatement
         Source: "if (initialized == 0) {\n            return;\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 209
           Source: "initialized == 0"
          Identifier initialized
             Type: uint256
             Source: "initialized"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\n            return;\n        }"
          Return
             Gas costs: 11
             Source: "return;"
      ExpressionStatement
         Gas costs: 20233
         Source: "count -= input"
        Assignment using operator -=
           Type: uint256
           Source: "count -= input"
          Identifier count
             Type: uint256
             Source: "count"
          Identifier input
             Type: uint256
             Source: "input"
