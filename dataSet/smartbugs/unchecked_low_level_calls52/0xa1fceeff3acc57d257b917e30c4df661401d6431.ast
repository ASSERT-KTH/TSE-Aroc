Syntax trees:


======= /home/fabric/ArocRevision/Aroc/dataSet/smartbugs-21-7-13/unchecked_low_level_calls52/0xa1fceeff3acc57d257b917e30c4df661401d6431.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.18;"
ContractDefinition "AirDropContract"
   Source: "contract AirDropContract{\r\n\r\n    function AirDropContract() public {\r\n    }\r\n\r\n    modifier validAddress( address addr ) {\r\n        require(addr != address(0x0));\r\n        require(addr != address(this));\r\n        _;\r\n    }\r\n    \r\n    function transfer(address contract_address,address[] tos,uint[] vs)\r\n        public \r\n        validAddress(contract_address)\r\n        returns (bool){\r\n\r\n        require(tos.length > 0);\r\n        require(vs.length > 0);\r\n        require(tos.length == vs.length);\r\n        bytes4 id = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\r\n        for(uint i = 0 ; i < tos.length; i++){\r\n            // <yes> <report> UNCHECKED_LL_CALLS\r\n            contract_address.call(id, msg.sender, tos[i], vs[i]);\r\n        }\r\n        return true;\r\n    }\r\n}"
  FunctionDefinition "AirDropContract" - public
     Source: "function AirDropContract() public {\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Gas costs: 0
       Source: "{\r\n    }"
  ModifierDefinition "validAddress"
     Source: "modifier validAddress( address addr ) {\r\n        require(addr != address(0x0));\r\n        require(addr != address(this));\r\n        _;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "( address addr )"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\r\n        require(addr != address(0x0));\r\n        require(addr != address(this));\r\n        _;\r\n    }"
      ExpressionStatement
         Gas costs: 50
         Source: "require(addr != address(0x0))"
        FunctionCall
           Type: tuple()
           Source: "require(addr != address(0x0))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "addr != address(0x0)"
            Identifier addr
               Type: address
               Source: "addr"
            FunctionCall
               Type: address
               Source: "address(0x0)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Literal, token: [no token] value: 0x0
                 Type: int_const 0
                 Source: "0x0"
      ExpressionStatement
         Gas costs: 49
         Source: "require(addr != address(this))"
        FunctionCall
           Type: tuple()
           Source: "require(addr != address(this))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "addr != address(this)"
            Identifier addr
               Type: address
               Source: "addr"
            FunctionCall
               Type: address
               Source: "address(this)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Identifier this
                 Type: contract AirDropContract
                 Source: "this"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address contract_address,address[] tos,uint[] vs)\r\n        public \r\n        validAddress(contract_address)\r\n        returns (bool){\r\n\r\n        require(tos.length > 0);\r\n        require(vs.length > 0);\r\n        require(tos.length == vs.length);\r\n        bytes4 id = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\r\n        for(uint i = 0 ; i < tos.length; i++){\r\n            // <yes> <report> UNCHECKED_LL_CALLS\r\n            contract_address.call(id, msg.sender, tos[i], vs[i]);\r\n        }\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address contract_address,address[] tos,uint[] vs)"
      VariableDeclaration "contract_address"
         Type: address
         Source: "address contract_address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "tos"
         Type: address[] memory
         Source: "address[] tos"
        ArrayTypeName
           Source: "address[]"
          ElementaryTypeName address
             Source: "address"
      VariableDeclaration "vs"
         Type: uint256[] memory
         Source: "uint[] vs"
        ArrayTypeName
           Source: "uint[]"
          ElementaryTypeName uint
             Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "validAddress"
       Gas costs: 3
       Source: "validAddress(contract_address)"
      Identifier validAddress
         Type: modifier (address)
         Source: "validAddress"
      Identifier contract_address
         Type: address
         Source: "contract_address"
    Block
       Source: "{\r\n\r\n        require(tos.length > 0);\r\n        require(vs.length > 0);\r\n        require(tos.length == vs.length);\r\n        bytes4 id = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\r\n        for(uint i = 0 ; i < tos.length; i++){\r\n            // <yes> <report> UNCHECKED_LL_CALLS\r\n            contract_address.call(id, msg.sender, tos[i], vs[i]);\r\n        }\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 53
         Source: "require(tos.length > 0)"
        FunctionCall
           Type: tuple()
           Source: "require(tos.length > 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "tos.length > 0"
            MemberAccess to member length
               Type: uint256
               Source: "tos.length"
              Identifier tos
                 Type: address[] memory
                 Source: "tos"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(vs.length > 0)"
        FunctionCall
           Type: tuple()
           Source: "require(vs.length > 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "vs.length > 0"
            MemberAccess to member length
               Type: uint256
               Source: "vs.length"
              Identifier vs
                 Type: uint256[] memory
                 Source: "vs"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(tos.length == vs.length)"
        FunctionCall
           Type: tuple()
           Source: "require(tos.length == vs.length)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "tos.length == vs.length"
            MemberAccess to member length
               Type: uint256
               Source: "tos.length"
              Identifier tos
                 Type: address[] memory
                 Source: "tos"
            MemberAccess to member length
               Type: uint256
               Source: "vs.length"
              Identifier vs
                 Type: uint256[] memory
                 Source: "vs"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "bytes4 id = bytes4(keccak256(\"transferFrom(address,address,uint256)\"))"
        VariableDeclaration "id"
           Type: bytes4
           Source: "bytes4 id"
          ElementaryTypeName bytes4
             Source: "bytes4"
        FunctionCall
           Type: bytes4
           Source: "bytes4(keccak256(\"transferFrom(address,address,uint256)\"))"
          ElementaryTypeNameExpression bytes4
             Type: type(bytes4)
             Source: "bytes4"
          FunctionCall
             Type: bytes32
             Source: "keccak256(\"transferFrom(address,address,uint256)\")"
            Identifier keccak256
               Type: function () pure returns (bytes32)
               Source: "keccak256"
            Literal, token: [no token] value: transferFrom(address,address,uint256)
               Type: literal_string "transferFrom(address,address,uint256)"
               Source: "\"transferFrom(address,address,uint256)\""
      ForStatement
         Source: "for(uint i = 0 ; i < tos.length; i++){\r\n            // <yes> <report> UNCHECKED_LL_CALLS\r\n            contract_address.call(id, msg.sender, tos[i], vs[i]);\r\n        }"
        VariableDeclarationStatement
           Gas costs: 11
           Source: "uint i = 0"
          VariableDeclaration "i"
             Type: uint256
             Source: "uint i"
            ElementaryTypeName uint
               Source: "uint"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 27
           Source: "i < tos.length"
          Identifier i
             Type: uint256
             Source: "i"
          MemberAccess to member length
             Type: uint256
             Source: "tos.length"
            Identifier tos
               Type: address[] memory
               Source: "tos"
        ExpressionStatement
           Gas costs: 19
           Source: "i++"
          UnaryOperation (postfix) ++
             Type: uint256
             Source: "i++"
            Identifier i
               Type: uint256
               Source: "i"
        Block
           Source: "{\r\n            // <yes> <report> UNCHECKED_LL_CALLS\r\n            contract_address.call(id, msg.sender, tos[i], vs[i]);\r\n        }"
          ExpressionStatement
             Gas costs: [???]
             Source: "contract_address.call(id, msg.sender, tos[i], vs[i])"
            FunctionCall
               Type: bool
               Source: "contract_address.call(id, msg.sender, tos[i], vs[i])"
              MemberAccess to member call
                 Type: function () payable returns (bool)
                 Source: "contract_address.call"
                Identifier contract_address
                   Type: address
                   Source: "contract_address"
              Identifier id
                 Type: bytes4
                 Source: "id"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              IndexAccess
                 Type: address
                 Source: "tos[i]"
                Identifier tos
                   Type: address[] memory
                   Source: "tos"
                Identifier i
                   Type: uint256
                   Source: "i"
              IndexAccess
                 Type: uint256
                 Source: "vs[i]"
                Identifier vs
                   Type: uint256[] memory
                   Source: "vs"
                Identifier i
                   Type: uint256
                   Source: "i"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
