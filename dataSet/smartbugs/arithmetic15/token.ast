Syntax trees:


======= /home/fabric/ArocRevision/Aroc/dataSet/smartbugs-21-7-13/arithmetic15/token.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.18;"
ContractDefinition "Token"
   Source: "contract Token {\n\n   mapping(address => uint) balances;\n   uint public totalSupply;\n\n   function Token(uint _initialSupply) {\n     balances[msg.sender] = totalSupply = _initialSupply;\n   }\n\n   function transfer(address _to, uint _value) public returns (bool) {\n     // <yes> <report> ARITHMETIC\n     require(balances[msg.sender] - _value >= 0);\n     // <yes> <report> ARITHMETIC\n     balances[msg.sender] -= _value;\n     balances[_to] += _value;\n     return true;\n   }\n\n   function balanceOf(address _owner) public constant returns (uint balance) {\n     return balances[_owner];\n   }\n }"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping(address => uint) balances"
    Mapping
       Source: "mapping(address => uint)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint
         Source: "uint"
  VariableDeclaration "totalSupply"
     Type: uint256
     Gas costs: 287
     Source: "uint public totalSupply"
    ElementaryTypeName uint
       Source: "uint"
  FunctionDefinition "Token" - public
     Source: "function Token(uint _initialSupply) {\n     balances[msg.sender] = totalSupply = _initialSupply;\n   }"
    ParameterList
       Gas costs: 0
       Source: "(uint _initialSupply)"
      VariableDeclaration "_initialSupply"
         Type: uint256
         Source: "uint _initialSupply"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n     balances[msg.sender] = totalSupply = _initialSupply;\n   }"
      ExpressionStatement
         Gas costs: 0
         Source: "balances[msg.sender] = totalSupply = _initialSupply"
        Assignment using operator =
           Type: uint256
           Source: "balances[msg.sender] = totalSupply = _initialSupply"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Assignment using operator =
             Type: uint256
             Source: "totalSupply = _initialSupply"
            Identifier totalSupply
               Type: uint256
               Source: "totalSupply"
            Identifier _initialSupply
               Type: uint256
               Source: "_initialSupply"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint _value) public returns (bool) {\n     // <yes> <report> ARITHMETIC\n     require(balances[msg.sender] - _value >= 0);\n     // <yes> <report> ARITHMETIC\n     balances[msg.sender] -= _value;\n     balances[_to] += _value;\n     return true;\n   }"
    ParameterList
       Gas costs: 0
       Source: "(address _to, uint _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint _value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\n     // <yes> <report> ARITHMETIC\n     require(balances[msg.sender] - _value >= 0);\n     // <yes> <report> ARITHMETIC\n     balances[msg.sender] -= _value;\n     balances[_to] += _value;\n     return true;\n   }"
      ExpressionStatement
         Gas costs: 339
         Source: "require(balances[msg.sender] - _value >= 0)"
        FunctionCall
           Type: tuple()
           Source: "require(balances[msg.sender] - _value >= 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "balances[msg.sender] - _value >= 0"
            BinaryOperation using operator -
               Type: uint256
               Source: "balances[msg.sender] - _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[msg.sender]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier _value
                 Type: uint256
                 Source: "_value"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: 20328
         Source: "balances[msg.sender] -= _value"
        Assignment using operator -=
           Type: uint256
           Source: "balances[msg.sender] -= _value"
          IndexAccess
             Type: uint256
             Source: "balances[msg.sender]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Gas costs: 20323
         Source: "balances[_to] += _value"
        Assignment using operator +=
           Type: uint256
           Source: "balances[_to] += _value"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) public constant returns (uint balance) {\n     return balances[_owner];\n   }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint balance"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\n     return balances[_owner];\n   }"
      Return
         Gas costs: 304
         Source: "return balances[_owner]"
        IndexAccess
           Type: uint256
           Source: "balances[_owner]"
          Identifier balances
             Type: mapping(address => uint256)
             Source: "balances"
          Identifier _owner
             Type: address
             Source: "_owner"
