Syntax trees:


======= /home/fabric/ArocRevision/Aroc/dataSet/smartbugs-21-7-13/unAnalyzedUlls/0x8fd1e427396ddb511533cf9abdbebd0a7e08da35.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.18;"
ContractDefinition "Ownable"
   Source: "contract Ownable\r\n{\r\n    address newOwner;\r\n    address owner = msg.sender;\r\n    \r\n    function changeOwner(address addr)\r\n    public\r\n    onlyOwner\r\n    {\r\n        newOwner = addr;\r\n    }\r\n    \r\n    function confirmOwner() \r\n    public\r\n    {\r\n        if(msg.sender==newOwner)\r\n        {\r\n            owner=newOwner;\r\n        }\r\n    }\r\n    \r\n    modifier onlyOwner\r\n    {\r\n        if(owner == msg.sender)_;\r\n    }\r\n}"
  VariableDeclaration "newOwner"
     Type: address
     Gas costs: 0
     Source: "address newOwner"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "owner"
     Type: address
     Gas costs: 0
     Source: "address owner = msg.sender"
    ElementaryTypeName address
       Source: "address"
    MemberAccess to member sender
       Type: address
       Source: "msg.sender"
      Identifier msg
         Type: msg
         Source: "msg"
  FunctionDefinition "changeOwner" - public
     Source: "function changeOwner(address addr)\r\n    public\r\n    onlyOwner\r\n    {\r\n        newOwner = addr;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address addr)"
      VariableDeclaration "addr"
         Type: address
         Source: "address addr"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        newOwner = addr;\r\n    }"
      ExpressionStatement
         Gas costs: 20267
         Source: "newOwner = addr"
        Assignment using operator =
           Type: address
           Source: "newOwner = addr"
          Identifier newOwner
             Type: address
             Source: "newOwner"
          Identifier addr
             Type: address
             Source: "addr"
  FunctionDefinition "confirmOwner" - public
     Source: "function confirmOwner() \r\n    public\r\n    {\r\n        if(msg.sender==newOwner)\r\n        {\r\n            owner=newOwner;\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if(msg.sender==newOwner)\r\n        {\r\n            owner=newOwner;\r\n        }\r\n    }"
      IfStatement
         Source: "if(msg.sender==newOwner)\r\n        {\r\n            owner=newOwner;\r\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 256
           Source: "msg.sender==newOwner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier newOwner
             Type: address
             Source: "newOwner"
        Block
           Source: "{\r\n            owner=newOwner;\r\n        }"
          ExpressionStatement
             Gas costs: 20503
             Source: "owner=newOwner"
            Assignment using operator =
               Type: address
               Source: "owner=newOwner"
              Identifier owner
                 Type: address
                 Source: "owner"
              Identifier newOwner
                 Type: address
                 Source: "newOwner"
  ModifierDefinition "onlyOwner"
     Source: "modifier onlyOwner\r\n    {\r\n        if(owner == msg.sender)_;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if(owner == msg.sender)_;\r\n    }"
      IfStatement
         Source: "if(owner == msg.sender)_"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 1024
           Source: "owner == msg.sender"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
        PlaceholderStatement
           Gas costs: 0
           Source: "_"
ContractDefinition "Token"
   Source: "contract Token is Ownable\r\n{\r\n    address owner = msg.sender;\r\n    function WithdrawToken(address token, uint256 amount,address to)\r\n    public \r\n    onlyOwner\r\n    {\r\n        // <yes> <report> UNCHECKED_LL_CALLS\r\n        token.call(bytes4(sha3(\"transfer(address,uint256)\")),to,amount); \r\n    }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Ownable"
    UserDefinedTypeName "Ownable"
       Source: "Ownable"
  VariableDeclaration "owner"
     Type: address
     Gas costs: 0
     Source: "address owner = msg.sender"
    ElementaryTypeName address
       Source: "address"
    MemberAccess to member sender
       Type: address
       Source: "msg.sender"
      Identifier msg
         Type: msg
         Source: "msg"
  FunctionDefinition "WithdrawToken" - public
     Source: "function WithdrawToken(address token, uint256 amount,address to)\r\n    public \r\n    onlyOwner\r\n    {\r\n        // <yes> <report> UNCHECKED_LL_CALLS\r\n        token.call(bytes4(sha3(\"transfer(address,uint256)\")),to,amount); \r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address token, uint256 amount,address to)"
      VariableDeclaration "token"
         Type: address
         Source: "address token"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "amount"
         Type: uint256
         Source: "uint256 amount"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        // <yes> <report> UNCHECKED_LL_CALLS\r\n        token.call(bytes4(sha3(\"transfer(address,uint256)\")),to,amount); \r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "token.call(bytes4(sha3(\"transfer(address,uint256)\")),to,amount)"
        FunctionCall
           Type: bool
           Source: "token.call(bytes4(sha3(\"transfer(address,uint256)\")),to,amount)"
          MemberAccess to member call
             Type: function () payable returns (bool)
             Source: "token.call"
            Identifier token
               Type: address
               Source: "token"
          FunctionCall
             Type: bytes4
             Source: "bytes4(sha3(\"transfer(address,uint256)\"))"
            ElementaryTypeNameExpression bytes4
               Type: type(bytes4)
               Source: "bytes4"
            FunctionCall
               Type: bytes32
               Source: "sha3(\"transfer(address,uint256)\")"
              Identifier sha3
                 Type: function () pure returns (bytes32)
                 Source: "sha3"
              Literal, token: [no token] value: transfer(address,uint256)
                 Type: literal_string "transfer(address,uint256)"
                 Source: "\"transfer(address,uint256)\""
          Identifier to
             Type: address
             Source: "to"
          Identifier amount
             Type: uint256
             Source: "amount"
ContractDefinition "TokenBank"
   Source: "contract TokenBank is Token\r\n{\r\n    uint public MinDeposit;\r\n    mapping (address => uint) public Holders;\r\n    \r\n     ///Constructor\r\n    function initTokenBank()\r\n    public\r\n    {\r\n        owner = msg.sender;\r\n        MinDeposit = 1 ether;\r\n    }\r\n    \r\n    function()\r\n    payable\r\n    {\r\n        Deposit();\r\n    }\r\n   \r\n    function Deposit() \r\n    payable\r\n    {\r\n        if(msg.value>=MinDeposit)\r\n        {\r\n            Holders[msg.sender]+=msg.value;\r\n        }\r\n    }\r\n    \r\n    function WitdrawTokenToHolder(address _to,address _token,uint _amount)\r\n    public\r\n    onlyOwner\r\n    {\r\n        if(Holders[_to]>0)\r\n        {\r\n            Holders[_to]=0;\r\n            WithdrawToken(_token,_amount,_to);     \r\n        }\r\n    }\r\n   \r\n    function WithdrawToHolder(address _addr, uint _wei) \r\n    public\r\n    onlyOwner\r\n    payable\r\n    {\r\n        if(Holders[msg.sender]>0)\r\n        {\r\n            if(Holders[_addr]>=_wei)\r\n            {\r\n                // <yes> <report> UNCHECKED_LL_CALLS\r\n                _addr.call.value(_wei);\r\n                Holders[_addr]-=_wei;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function Bal() public constant returns(uint){return this.balance;}\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Token"
    UserDefinedTypeName "Token"
       Source: "Token"
  VariableDeclaration "MinDeposit"
     Type: uint256
     Gas costs: [???]
     Source: "uint public MinDeposit"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "Holders"
     Type: mapping(address => uint256)
     Gas costs: [???]
     Source: "mapping (address => uint) public Holders"
    Mapping
       Source: "mapping (address => uint)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint
         Source: "uint"
  FunctionDefinition "initTokenBank" - public
     Source: "function initTokenBank()\r\n    public\r\n    {\r\n        owner = msg.sender;\r\n        MinDeposit = 1 ether;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        owner = msg.sender;\r\n        MinDeposit = 1 ether;\r\n    }"
      ExpressionStatement
         Gas costs: 20266
         Source: "owner = msg.sender"
        Assignment using operator =
           Type: address
           Source: "owner = msg.sender"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 20014
         Source: "MinDeposit = 1 ether"
        Assignment using operator =
           Type: uint256
           Source: "MinDeposit = 1 ether"
          Identifier MinDeposit
             Type: uint256
             Source: "MinDeposit"
          Literal, token: [no token] value: 1
             Type: int_const 1000000000000000000
             Source: "1 ether"
  FunctionDefinition "" - public
     Source: "function()\r\n    payable\r\n    {\r\n        Deposit();\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        Deposit();\r\n    }"
      ExpressionStatement
         Gas costs: 4
         Source: "Deposit()"
        FunctionCall
           Type: tuple()
           Source: "Deposit()"
          Identifier Deposit
             Type: function ()
             Source: "Deposit"
  FunctionDefinition "Deposit" - public
     Source: "function Deposit() \r\n    payable\r\n    {\r\n        if(msg.value>=MinDeposit)\r\n        {\r\n            Holders[msg.sender]+=msg.value;\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if(msg.value>=MinDeposit)\r\n        {\r\n            Holders[msg.sender]+=msg.value;\r\n        }\r\n    }"
      IfStatement
         Source: "if(msg.value>=MinDeposit)\r\n        {\r\n            Holders[msg.sender]+=msg.value;\r\n        }"
        BinaryOperation using operator >=
           Type: bool
           Gas costs: 211
           Source: "msg.value>=MinDeposit"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier MinDeposit
             Type: uint256
             Source: "MinDeposit"
        Block
           Source: "{\r\n            Holders[msg.sender]+=msg.value;\r\n        }"
          ExpressionStatement
             Gas costs: 20327
             Source: "Holders[msg.sender]+=msg.value"
            Assignment using operator +=
               Type: uint256
               Source: "Holders[msg.sender]+=msg.value"
              IndexAccess
                 Type: uint256
                 Source: "Holders[msg.sender]"
                Identifier Holders
                   Type: mapping(address => uint256)
                   Source: "Holders"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              MemberAccess to member value
                 Type: uint256
                 Source: "msg.value"
                Identifier msg
                   Type: msg
                   Source: "msg"
  FunctionDefinition "WitdrawTokenToHolder" - public
     Source: "function WitdrawTokenToHolder(address _to,address _token,uint _amount)\r\n    public\r\n    onlyOwner\r\n    {\r\n        if(Holders[_to]>0)\r\n        {\r\n            Holders[_to]=0;\r\n            WithdrawToken(_token,_amount,_to);     \r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _to,address _token,uint _amount)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_token"
         Type: address
         Source: "address _token"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint _amount"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        if(Holders[_to]>0)\r\n        {\r\n            Holders[_to]=0;\r\n            WithdrawToken(_token,_amount,_to);     \r\n        }\r\n    }"
      IfStatement
         Source: "if(Holders[_to]>0)\r\n        {\r\n            Holders[_to]=0;\r\n            WithdrawToken(_token,_amount,_to);     \r\n        }"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 305
           Source: "Holders[_to]>0"
          IndexAccess
             Type: uint256
             Source: "Holders[_to]"
            Identifier Holders
               Type: mapping(address => uint256)
               Source: "Holders"
            Identifier _to
               Type: address
               Source: "_to"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n            Holders[_to]=0;\r\n            WithdrawToken(_token,_amount,_to);     \r\n        }"
          ExpressionStatement
             Gas costs: 5110
             Source: "Holders[_to]=0"
            Assignment using operator =
               Type: uint256
               Source: "Holders[_to]=0"
              IndexAccess
                 Type: uint256
                 Source: "Holders[_to]"
                Identifier Holders
                   Type: mapping(address => uint256)
                   Source: "Holders"
                Identifier _to
                   Type: address
                   Source: "_to"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
          ExpressionStatement
             Gas costs: 24
             Source: "WithdrawToken(_token,_amount,_to)"
            FunctionCall
               Type: tuple()
               Source: "WithdrawToken(_token,_amount,_to)"
              Identifier WithdrawToken
                 Type: function (address,uint256,address)
                 Source: "WithdrawToken"
              Identifier _token
                 Type: address
                 Source: "_token"
              Identifier _amount
                 Type: uint256
                 Source: "_amount"
              Identifier _to
                 Type: address
                 Source: "_to"
  FunctionDefinition "WithdrawToHolder" - public
     Source: "function WithdrawToHolder(address _addr, uint _wei) \r\n    public\r\n    onlyOwner\r\n    payable\r\n    {\r\n        if(Holders[msg.sender]>0)\r\n        {\r\n            if(Holders[_addr]>=_wei)\r\n            {\r\n                // <yes> <report> UNCHECKED_LL_CALLS\r\n                _addr.call.value(_wei);\r\n                Holders[_addr]-=_wei;\r\n            }\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _addr, uint _wei)"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_wei"
         Type: uint256
         Source: "uint _wei"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        if(Holders[msg.sender]>0)\r\n        {\r\n            if(Holders[_addr]>=_wei)\r\n            {\r\n                // <yes> <report> UNCHECKED_LL_CALLS\r\n                _addr.call.value(_wei);\r\n                Holders[_addr]-=_wei;\r\n            }\r\n        }\r\n    }"
      IfStatement
         Source: "if(Holders[msg.sender]>0)\r\n        {\r\n            if(Holders[_addr]>=_wei)\r\n            {\r\n                // <yes> <report> UNCHECKED_LL_CALLS\r\n                _addr.call.value(_wei);\r\n                Holders[_addr]-=_wei;\r\n            }\r\n        }"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 304
           Source: "Holders[msg.sender]>0"
          IndexAccess
             Type: uint256
             Source: "Holders[msg.sender]"
            Identifier Holders
               Type: mapping(address => uint256)
               Source: "Holders"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\r\n            if(Holders[_addr]>=_wei)\r\n            {\r\n                // <yes> <report> UNCHECKED_LL_CALLS\r\n                _addr.call.value(_wei);\r\n                Holders[_addr]-=_wei;\r\n            }\r\n        }"
          IfStatement
             Source: "if(Holders[_addr]>=_wei)\r\n            {\r\n                // <yes> <report> UNCHECKED_LL_CALLS\r\n                _addr.call.value(_wei);\r\n                Holders[_addr]-=_wei;\r\n            }"
            BinaryOperation using operator >=
               Type: bool
               Gas costs: 308
               Source: "Holders[_addr]>=_wei"
              IndexAccess
                 Type: uint256
                 Source: "Holders[_addr]"
                Identifier Holders
                   Type: mapping(address => uint256)
                   Source: "Holders"
                Identifier _addr
                   Type: address
                   Source: "_addr"
              Identifier _wei
                 Type: uint256
                 Source: "_wei"
            Block
               Source: "{\r\n                // <yes> <report> UNCHECKED_LL_CALLS\r\n                _addr.call.value(_wei);\r\n                Holders[_addr]-=_wei;\r\n            }"
              ExpressionStatement
                 Gas costs: 0
                 Source: "_addr.call.value(_wei)"
                FunctionCall
                   Type: function () payable returns (bool)
                   Source: "_addr.call.value(_wei)"
                  MemberAccess to member value
                     Type: function (uint256) returns (function () payable returns (bool))
                     Source: "_addr.call.value"
                    MemberAccess to member call
                       Type: function () payable returns (bool)
                       Source: "_addr.call"
                      Identifier _addr
                         Type: address
                         Source: "_addr"
                  Identifier _wei
                     Type: uint256
                     Source: "_wei"
              ExpressionStatement
                 Gas costs: 20329
                 Source: "Holders[_addr]-=_wei"
                Assignment using operator -=
                   Type: uint256
                   Source: "Holders[_addr]-=_wei"
                  IndexAccess
                     Type: uint256
                     Source: "Holders[_addr]"
                    Identifier Holders
                       Type: mapping(address => uint256)
                       Source: "Holders"
                    Identifier _addr
                       Type: address
                       Source: "_addr"
                  Identifier _wei
                     Type: uint256
                     Source: "_wei"
  FunctionDefinition "Bal" - public - const
     Source: "function Bal() public constant returns(uint){return this.balance;}"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{return this.balance;}"
      Return
         Gas costs: 413
         Source: "return this.balance"
        MemberAccess to member balance
           Type: uint256
           Source: "this.balance"
          Identifier this
             Type: contract TokenBank
             Source: "this"
