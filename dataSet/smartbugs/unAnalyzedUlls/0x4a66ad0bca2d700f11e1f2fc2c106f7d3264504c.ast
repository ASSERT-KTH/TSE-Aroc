Syntax trees:


======= /home/fabric/ArocRevision/Aroc/dataSet/smartbugs-21-7-13/unAnalyzedUlls/0x4a66ad0bca2d700f11e1f2fc2c106f7d3264504c.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.18;"
ContractDefinition "EBU"
   Source: "contract EBU{\r\n    address public from = 0x9797055B68C5DadDE6b3c7d5D80C9CFE2eecE6c9;\r\n    address public caddress = 0x1f844685f7Bf86eFcc0e74D8642c54A257111923;\r\n    \r\n    function transfer(address[] _tos,uint[] v)public returns (bool){\r\n        require(msg.sender == 0x9797055B68C5DadDE6b3c7d5D80C9CFE2eecE6c9);\r\n        require(_tos.length > 0);\r\n        bytes4 id=bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\r\n        for(uint i=0;i<_tos.length;i++){\r\n            // <yes> <report> UNCHECKED_LL_CALLS\r\n            caddress.call(id,from,_tos[i],v[i]*1000000000000000000);\r\n        }\r\n        return true;\r\n    }\r\n}"
  VariableDeclaration "from"
     Type: address
     Gas costs: 335
     Source: "address public from = 0x9797055B68C5DadDE6b3c7d5D80C9CFE2eecE6c9"
    ElementaryTypeName address
       Source: "address"
    Literal, token: [no token] value: 0x9797055B68C5DadDE6b3c7d5D80C9CFE2eecE6c9
       Type: address
       Source: "0x9797055B68C5DadDE6b3c7d5D80C9CFE2eecE6c9"
  VariableDeclaration "caddress"
     Type: address
     Gas costs: 335
     Source: "address public caddress = 0x1f844685f7Bf86eFcc0e74D8642c54A257111923"
    ElementaryTypeName address
       Source: "address"
    Literal, token: [no token] value: 0x1f844685f7Bf86eFcc0e74D8642c54A257111923
       Type: address
       Source: "0x1f844685f7Bf86eFcc0e74D8642c54A257111923"
  FunctionDefinition "transfer" - public
     Source: "function transfer(address[] _tos,uint[] v)public returns (bool){\r\n        require(msg.sender == 0x9797055B68C5DadDE6b3c7d5D80C9CFE2eecE6c9);\r\n        require(_tos.length > 0);\r\n        bytes4 id=bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\r\n        for(uint i=0;i<_tos.length;i++){\r\n            // <yes> <report> UNCHECKED_LL_CALLS\r\n            caddress.call(id,from,_tos[i],v[i]*1000000000000000000);\r\n        }\r\n        return true;\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address[] _tos,uint[] v)"
      VariableDeclaration "_tos"
         Type: address[] memory
         Source: "address[] _tos"
        ArrayTypeName
           Source: "address[]"
          ElementaryTypeName address
             Source: "address"
      VariableDeclaration "v"
         Type: uint256[] memory
         Source: "uint[] v"
        ArrayTypeName
           Source: "uint[]"
          ElementaryTypeName uint
             Source: "uint"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n        require(msg.sender == 0x9797055B68C5DadDE6b3c7d5D80C9CFE2eecE6c9);\r\n        require(_tos.length > 0);\r\n        bytes4 id=bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\r\n        for(uint i=0;i<_tos.length;i++){\r\n            // <yes> <report> UNCHECKED_LL_CALLS\r\n            caddress.call(id,from,_tos[i],v[i]*1000000000000000000);\r\n        }\r\n        return true;\r\n    }"
      ExpressionStatement
         Gas costs: 46
         Source: "require(msg.sender == 0x9797055B68C5DadDE6b3c7d5D80C9CFE2eecE6c9)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == 0x9797055B68C5DadDE6b3c7d5D80C9CFE2eecE6c9)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == 0x9797055B68C5DadDE6b3c7d5D80C9CFE2eecE6c9"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Literal, token: [no token] value: 0x9797055B68C5DadDE6b3c7d5D80C9CFE2eecE6c9
               Type: address
               Source: "0x9797055B68C5DadDE6b3c7d5D80C9CFE2eecE6c9"
      ExpressionStatement
         Gas costs: 53
         Source: "require(_tos.length > 0)"
        FunctionCall
           Type: tuple()
           Source: "require(_tos.length > 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "_tos.length > 0"
            MemberAccess to member length
               Type: uint256
               Source: "_tos.length"
              Identifier _tos
                 Type: address[] memory
                 Source: "_tos"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "bytes4 id=bytes4(keccak256(\"transferFrom(address,address,uint256)\"))"
        VariableDeclaration "id"
           Type: bytes4
           Source: "bytes4 id"
          ElementaryTypeName bytes4
             Source: "bytes4"
        FunctionCall
           Type: bytes4
           Source: "bytes4(keccak256(\"transferFrom(address,address,uint256)\"))"
          ElementaryTypeNameExpression bytes4
             Type: type(bytes4)
             Source: "bytes4"
          FunctionCall
             Type: bytes32
             Source: "keccak256(\"transferFrom(address,address,uint256)\")"
            Identifier keccak256
               Type: function () pure returns (bytes32)
               Source: "keccak256"
            Literal, token: [no token] value: transferFrom(address,address,uint256)
               Type: literal_string "transferFrom(address,address,uint256)"
               Source: "\"transferFrom(address,address,uint256)\""
      ForStatement
         Source: "for(uint i=0;i<_tos.length;i++){\r\n            // <yes> <report> UNCHECKED_LL_CALLS\r\n            caddress.call(id,from,_tos[i],v[i]*1000000000000000000);\r\n        }"
        VariableDeclarationStatement
           Gas costs: 11
           Source: "uint i=0"
          VariableDeclaration "i"
             Type: uint256
             Source: "uint i"
            ElementaryTypeName uint
               Source: "uint"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 27
           Source: "i<_tos.length"
          Identifier i
             Type: uint256
             Source: "i"
          MemberAccess to member length
             Type: uint256
             Source: "_tos.length"
            Identifier _tos
               Type: address[] memory
               Source: "_tos"
        ExpressionStatement
           Gas costs: 19
           Source: "i++"
          UnaryOperation (postfix) ++
             Type: uint256
             Source: "i++"
            Identifier i
               Type: uint256
               Source: "i"
        Block
           Source: "{\r\n            // <yes> <report> UNCHECKED_LL_CALLS\r\n            caddress.call(id,from,_tos[i],v[i]*1000000000000000000);\r\n        }"
          ExpressionStatement
             Gas costs: [???]
             Source: "caddress.call(id,from,_tos[i],v[i]*1000000000000000000)"
            FunctionCall
               Type: bool
               Source: "caddress.call(id,from,_tos[i],v[i]*1000000000000000000)"
              MemberAccess to member call
                 Type: function () payable returns (bool)
                 Source: "caddress.call"
                Identifier caddress
                   Type: address
                   Source: "caddress"
              Identifier id
                 Type: bytes4
                 Source: "id"
              Identifier from
                 Type: address
                 Source: "from"
              IndexAccess
                 Type: address
                 Source: "_tos[i]"
                Identifier _tos
                   Type: address[] memory
                   Source: "_tos"
                Identifier i
                   Type: uint256
                   Source: "i"
              BinaryOperation using operator *
                 Type: uint256
                 Source: "v[i]*1000000000000000000"
                IndexAccess
                   Type: uint256
                   Source: "v[i]"
                  Identifier v
                     Type: uint256[] memory
                     Source: "v"
                  Identifier i
                     Type: uint256
                     Source: "i"
                Literal, token: [no token] value: 1000000000000000000
                   Type: int_const 1000000000000000000
                   Source: "1000000000000000000"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
