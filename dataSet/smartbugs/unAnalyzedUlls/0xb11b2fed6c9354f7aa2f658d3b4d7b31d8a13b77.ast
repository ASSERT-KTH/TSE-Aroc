Syntax trees:


======= /home/fabric/ArocRevision/Aroc/dataSet/smartbugs-21-7-13/unAnalyzedUlls/0xb11b2fed6c9354f7aa2f658d3b4d7b31d8a13b77.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.24;"
ContractDefinition "Proxy"
   Source: "contract Proxy  {\r\n    modifier onlyOwner { if (msg.sender == Owner) _; } address Owner = msg.sender;\r\n    function transferOwner(address _owner) public onlyOwner { Owner = _owner; } \r\n    function proxy(address target, bytes data) public payable {\r\n        // <yes> <report> UNCHECKED_LL_CALLS\r\n        target.call.value(msg.value)(data);\r\n    }\r\n}"
  ModifierDefinition "onlyOwner"
     Source: "modifier onlyOwner { if (msg.sender == Owner) _; }"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{ if (msg.sender == Owner) _; }"
      IfStatement
         Source: "if (msg.sender == Owner) _"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 512
           Source: "msg.sender == Owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier Owner
             Type: address
             Source: "Owner"
        PlaceholderStatement
           Gas costs: 0
           Source: "_"
  VariableDeclaration "Owner"
     Type: address
     Gas costs: 0
     Source: "address Owner = msg.sender"
    ElementaryTypeName address
       Source: "address"
    MemberAccess to member sender
       Type: address
       Source: "msg.sender"
      Identifier msg
         Type: msg
         Source: "msg"
  FunctionDefinition "transferOwner" - public
     Source: "function transferOwner(address _owner) public onlyOwner { Owner = _owner; }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{ Owner = _owner; }"
      ExpressionStatement
         Gas costs: 20267
         Source: "Owner = _owner"
        Assignment using operator =
           Type: address
           Source: "Owner = _owner"
          Identifier Owner
             Type: address
             Source: "Owner"
          Identifier _owner
             Type: address
             Source: "_owner"
  FunctionDefinition "proxy" - public
     Source: "function proxy(address target, bytes data) public payable {\r\n        // <yes> <report> UNCHECKED_LL_CALLS\r\n        target.call.value(msg.value)(data);\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address target, bytes data)"
      VariableDeclaration "target"
         Type: address
         Source: "address target"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "data"
         Type: bytes memory
         Source: "bytes data"
        ElementaryTypeName bytes
           Source: "bytes"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        // <yes> <report> UNCHECKED_LL_CALLS\r\n        target.call.value(msg.value)(data);\r\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "target.call.value(msg.value)(data)"
        FunctionCall
           Type: bool
           Source: "target.call.value(msg.value)(data)"
          FunctionCall
             Type: function () payable returns (bool)
             Source: "target.call.value(msg.value)"
            MemberAccess to member value
               Type: function (uint256) returns (function () payable returns (bool))
               Source: "target.call.value"
              MemberAccess to member call
                 Type: function () payable returns (bool)
                 Source: "target.call"
                Identifier target
                   Type: address
                   Source: "target"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier data
             Type: bytes memory
             Source: "data"
ContractDefinition "DepositProxy"
   Source: "contract DepositProxy is Proxy {\r\n    address public Owner;\r\n    mapping (address => uint256) public Deposits;\r\n\r\n    function () public payable { }\r\n    \r\n    function Vault() public payable {\r\n        if (msg.sender == tx.origin) {\r\n            Owner = msg.sender;\r\n            deposit();\r\n        }\r\n    }\r\n    \r\n    function deposit() public payable {\r\n        if (msg.value > 0.5 ether) {\r\n            Deposits[msg.sender] += msg.value;\r\n        }\r\n    }\r\n    \r\n    function withdraw(uint256 amount) public onlyOwner {\r\n        if (amount>0 && Deposits[msg.sender]>=amount) {\r\n            msg.sender.transfer(amount);\r\n        }\r\n    }\r\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Proxy"
    UserDefinedTypeName "Proxy"
       Source: "Proxy"
  VariableDeclaration "Owner"
     Type: address
     Gas costs: [???]
     Source: "address public Owner"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "Deposits"
     Type: mapping(address => uint256)
     Gas costs: [???]
     Source: "mapping (address => uint256) public Deposits"
    Mapping
       Source: "mapping (address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  FunctionDefinition "" - public
     Source: "function () public payable { }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Gas costs: 0
       Source: "{ }"
  FunctionDefinition "Vault" - public
     Source: "function Vault() public payable {\r\n        if (msg.sender == tx.origin) {\r\n            Owner = msg.sender;\r\n            deposit();\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if (msg.sender == tx.origin) {\r\n            Owner = msg.sender;\r\n            deposit();\r\n        }\r\n    }"
      IfStatement
         Source: "if (msg.sender == tx.origin) {\r\n            Owner = msg.sender;\r\n            deposit();\r\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 19
           Source: "msg.sender == tx.origin"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          MemberAccess to member origin
             Type: address
             Source: "tx.origin"
            Identifier tx
               Type: tx
               Source: "tx"
        Block
           Source: "{\r\n            Owner = msg.sender;\r\n            deposit();\r\n        }"
          ExpressionStatement
             Gas costs: 20266
             Source: "Owner = msg.sender"
            Assignment using operator =
               Type: address
               Source: "Owner = msg.sender"
              Identifier Owner
                 Type: address
                 Source: "Owner"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
          ExpressionStatement
             Gas costs: 15
             Source: "deposit()"
            FunctionCall
               Type: tuple()
               Source: "deposit()"
              Identifier deposit
                 Type: function ()
                 Source: "deposit"
  FunctionDefinition "deposit" - public
     Source: "function deposit() public payable {\r\n        if (msg.value > 0.5 ether) {\r\n            Deposits[msg.sender] += msg.value;\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\r\n        if (msg.value > 0.5 ether) {\r\n            Deposits[msg.sender] += msg.value;\r\n        }\r\n    }"
      IfStatement
         Source: "if (msg.value > 0.5 ether) {\r\n            Deposits[msg.sender] += msg.value;\r\n        }"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 8
           Source: "msg.value > 0.5 ether"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
          Literal, token: [no token] value: 0.5
             Type: int_const 500000000000000000
             Source: "0.5 ether"
        Block
           Source: "{\r\n            Deposits[msg.sender] += msg.value;\r\n        }"
          ExpressionStatement
             Gas costs: 20327
             Source: "Deposits[msg.sender] += msg.value"
            Assignment using operator +=
               Type: uint256
               Source: "Deposits[msg.sender] += msg.value"
              IndexAccess
                 Type: uint256
                 Source: "Deposits[msg.sender]"
                Identifier Deposits
                   Type: mapping(address => uint256)
                   Source: "Deposits"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              MemberAccess to member value
                 Type: uint256
                 Source: "msg.value"
                Identifier msg
                   Type: msg
                   Source: "msg"
  FunctionDefinition "withdraw" - public
     Source: "function withdraw(uint256 amount) public onlyOwner {\r\n        if (amount>0 && Deposits[msg.sender]>=amount) {\r\n            msg.sender.transfer(amount);\r\n        }\r\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 amount)"
      VariableDeclaration "amount"
         Type: uint256
         Source: "uint256 amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\r\n        if (amount>0 && Deposits[msg.sender]>=amount) {\r\n            msg.sender.transfer(amount);\r\n        }\r\n    }"
      IfStatement
         Source: "if (amount>0 && Deposits[msg.sender]>=amount) {\r\n            msg.sender.transfer(amount);\r\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 338
           Source: "amount>0 && Deposits[msg.sender]>=amount"
          BinaryOperation using operator >
             Type: bool
             Source: "amount>0"
            Identifier amount
               Type: uint256
               Source: "amount"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
          BinaryOperation using operator >=
             Type: bool
             Source: "Deposits[msg.sender]>=amount"
            IndexAccess
               Type: uint256
               Source: "Deposits[msg.sender]"
              Identifier Deposits
                 Type: mapping(address => uint256)
                 Source: "Deposits"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier amount
               Type: uint256
               Source: "amount"
        Block
           Source: "{\r\n            msg.sender.transfer(amount);\r\n        }"
          ExpressionStatement
             Gas costs: [???]
             Source: "msg.sender.transfer(amount)"
            FunctionCall
               Type: tuple()
               Source: "msg.sender.transfer(amount)"
              MemberAccess to member transfer
                 Type: function (uint256)
                 Source: "msg.sender.transfer"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              Identifier amount
                 Type: uint256
                 Source: "amount"
